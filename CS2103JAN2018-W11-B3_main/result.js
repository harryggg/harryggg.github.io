var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Infinity Book - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team CS2103JAN2018-W11-B3`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"AddressBook Level 4 (AB4) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB4 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":66,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":74,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"****"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":89,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":90,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":92,"author":{"gitID":"-"},"content":"****"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":98,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"****"},{"lineNumber":107,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":108,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":109,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":112,"author":{"gitID":"-"},"content":"****"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":118,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":119,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d Viewing a person: `view`"},{"lineNumber":122,"author":{"gitID":"deeheenguyen"},"content":"Views the person whose email is the same as given email. +"},{"lineNumber":123,"author":{"gitID":"deeheenguyen"},"content":"Format: `view email`"},{"lineNumber":124,"author":{"gitID":"deeheenguyen"},"content":"****"},{"lineNumber":125,"author":{"gitID":"deeheenguyen"},"content":"* The email needs to be correct format."},{"lineNumber":126,"author":{"gitID":"deeheenguyen"},"content":"* Only one person returned since email is unique."},{"lineNumber":127,"author":{"gitID":"deeheenguyen"},"content":"****"},{"lineNumber":128,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":129,"author":{"gitID":"deeheenguyen"},"content":"Examples: `view john@gmail.com`"},{"lineNumber":130,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":131,"author":{"gitID":"deeheenguyen"},"content":"Return the person whose email is `john@gmail.com` +"},{"lineNumber":132,"author":{"gitID":"deeheenguyen"},"content":"Display all the information about this person and display the resume on browser panel."},{"lineNumber":133,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":137,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"****"},{"lineNumber":140,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":143,"author":{"gitID":"-"},"content":"****"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":149,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":150,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":157,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"****"},{"lineNumber":160,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":162,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":163,"author":{"gitID":"-"},"content":"****"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":168,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":171,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":172,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":177,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":181,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":188,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":193,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Data visualization"},{"lineNumber":250,"author":{"gitID":"-"},"content":"Make data-driven decisions with recruiting analytics"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"image::graph.png[width\u003d\"500\"]"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"Format: `draw [t/TAG]...`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Job Posting"},{"lineNumber":257,"author":{"gitID":"-"},"content":"Add job requirements to find out qualified candidates."},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"Format: `addjob [SKILLS]`"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Resume Auto Scanning"},{"lineNumber":262,"author":{"gitID":"-"},"content":"Easily filter candidates whose resume having desirable keywords. +"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"Format: `scanresume [KEYWORD]`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d LinkedIn Integration"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Reduced clicks, and continuously updated information of candidates."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"View LinkedIn profile of the person identified by the index number used in the last person listing. +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"Format: `viewlinkedin [INDEX]`"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":273,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":278,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":281,"author":{"gitID":"-"},"content":"[width\u003d\"100%\",cols\u003d\"10%,\u003c45%,\u003c45%\",options\u003d\"header\",]"},{"lineNumber":282,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":283,"author":{"gitID":"-"},"content":"|Command |Command Format |Example"},{"lineNumber":284,"author":{"gitID":"-"},"content":"|Add |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` | `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":285,"author":{"gitID":"-"},"content":"|Clear |`clear`|"},{"lineNumber":286,"author":{"gitID":"-"},"content":"|Delete |`delete INDEX` |`delete 3`"},{"lineNumber":287,"author":{"gitID":"-"},"content":"|Edit |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` |`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":288,"author":{"gitID":"-"},"content":"|Find |`find KEYWORD [MORE_KEYWORDS]` |`find James Jake`"},{"lineNumber":289,"author":{"gitID":"-"},"content":"|List | `list`|"},{"lineNumber":290,"author":{"gitID":"-"},"content":"|Help |`help` |"},{"lineNumber":291,"author":{"gitID":"-"},"content":"|Select |`select INDEX` |`select 2`"},{"lineNumber":292,"author":{"gitID":"-"},"content":"|History |`history` |"},{"lineNumber":293,"author":{"gitID":"-"},"content":"|Undo |`undo` |"},{"lineNumber":294,"author":{"gitID":"-"},"content":"|Redo |`redo`|"},{"lineNumber":295,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"}],"authorContributionMap":{"deeheenguyen":13,"-":282}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Infinity Book - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team JACKHA (W11-B3)`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":23,"author":{"gitID":"-"},"content":"+"},{"lineNumber":24,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":40,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":42,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":48,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":53,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":66,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":86,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":101,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":111,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":133,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":160,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":178,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":179,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":185,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":190,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":195,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":201,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":210,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":247,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"----"},{"lineNumber":249,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"},{"lineNumber":255,"author":{"gitID":"-"},"content":"----"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":288,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":297,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":306,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":326,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":327,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":336,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":346,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":349,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":360,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":375,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":382,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d Tag colors"},{"lineNumber":390,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"tiny767"},"content":"The colors for tags are fixed for each tag with the same name upon start up of the application."},{"lineNumber":394,"author":{"gitID":"tiny767"},"content":"Make sure of hash code to ensure that the color is consistent each time the app is launched."},{"lineNumber":395,"author":{"gitID":"tiny767"},"content":"(e.g. red,blue,green) and selecting from the array of colors. +"},{"lineNumber":396,"author":{"gitID":"tiny767"},"content":"Use an array of pre-defined colors. +"},{"lineNumber":397,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":398,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":399,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":400,"author":{"gitID":"tiny767"},"content":"**Aspect:** Implementation of color for tags +"},{"lineNumber":401,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":402,"author":{"gitID":"tiny767"},"content":"**Alternative 1 (current choice):** Have tags to be colored using hashcode instead of randomization +"},{"lineNumber":403,"author":{"gitID":"tiny767"},"content":"**Pros:** The color stay consistent each time the app is launched +"},{"lineNumber":404,"author":{"gitID":"tiny767"},"content":"**Cons:** Limited number of colors (the limiting factor is the size of pre-define color array) +"},{"lineNumber":405,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":406,"author":{"gitID":"tiny767"},"content":"**Alternative 2:** Have tag colors to be a random hexadecimal color value +"},{"lineNumber":407,"author":{"gitID":"tiny767"},"content":"**Pros:** Number of different color is very big (i.e. there is less repetitive color used)   +"},{"lineNumber":408,"author":{"gitID":"tiny767"},"content":"**Cons:** The color for each tag value might be different between app launchs +"},{"lineNumber":409,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add/Remove one Tag for a person"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"As Person may have a long list of tags, we need to have a convenient way to update them.+"},{"lineNumber":413,"author":{"gitID":"-"},"content":"Command syntax: EDIT [-OPTIONS] [PARAMETERS]…​, where: +"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"The EDIT specifies the edit action to be performed, +"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"OPTIONS are prefixed with a dash: `add-tag` to add new tags the current list of tags and"},{"lineNumber":418,"author":{"gitID":"-"},"content":"`delete-tag` to delete tags from the current list of tags."},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"PARAMETERS provide information for the Edit command to be executed with."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations*"},{"lineNumber":423,"author":{"gitID":"-"},"content":"**Aspect:** Implementation of removing/adding a single tag +"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Modify EditPersonDescriptor +"},{"lineNumber":426,"author":{"gitID":"-"},"content":"**Pros:** Maintain the current structure and coupling. +"},{"lineNumber":427,"author":{"gitID":"-"},"content":"**Cons:** May cause conflicts with other features. +"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"**Alternative 2:** Retrieve the list of tags then modify it +"},{"lineNumber":430,"author":{"gitID":"-"},"content":"**Pros:** Keep the Edit Command logic   +"},{"lineNumber":431,"author":{"gitID":"-"},"content":"**Cons:** Have to rely on Model, which is not flexible."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":438,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":443,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":456,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":457,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":458,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":461,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":471,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":476,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":483,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":496,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":497,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":498,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":499,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":501,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":502,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":503,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":504,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":508,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":511,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":528,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":535,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":536,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":537,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":542,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":543,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":546,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":547,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":566,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":569,"author":{"gitID":"-"},"content":"+"},{"lineNumber":570,"author":{"gitID":"-"},"content":"****"},{"lineNumber":571,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":572,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":573,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":574,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":575,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":576,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":577,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":578,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":579,"author":{"gitID":"-"},"content":"****"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":582,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":587,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":590,"author":{"gitID":"-"},"content":"+"},{"lineNumber":591,"author":{"gitID":"-"},"content":"****"},{"lineNumber":592,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":593,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":594,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":595,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":596,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":597,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":598,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":599,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":600,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":601,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":602,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":603,"author":{"gitID":"-"},"content":"****"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":614,"author":{"gitID":"-"},"content":"+"},{"lineNumber":615,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":616,"author":{"gitID":"-"},"content":"+"},{"lineNumber":617,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":618,"author":{"gitID":"-"},"content":"+"},{"lineNumber":619,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":620,"author":{"gitID":"-"},"content":"+"},{"lineNumber":621,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":622,"author":{"gitID":"-"},"content":"+"},{"lineNumber":623,"author":{"gitID":"-"},"content":"****"},{"lineNumber":624,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":625,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":626,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":627,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":628,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":629,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":630,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":631,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":632,"author":{"gitID":"-"},"content":"****"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":635,"author":{"gitID":"-"},"content":"+"},{"lineNumber":636,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":637,"author":{"gitID":"-"},"content":"+"},{"lineNumber":638,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":639,"author":{"gitID":"-"},"content":"+"},{"lineNumber":640,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":641,"author":{"gitID":"-"},"content":"+"},{"lineNumber":642,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":643,"author":{"gitID":"-"},"content":"+"},{"lineNumber":644,"author":{"gitID":"-"},"content":"****"},{"lineNumber":645,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":646,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":647,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":648,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":649,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":650,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":651,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":652,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":653,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":654,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":655,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":656,"author":{"gitID":"-"},"content":"****"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":659,"author":{"gitID":"-"},"content":"+"},{"lineNumber":660,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":661,"author":{"gitID":"-"},"content":"+"},{"lineNumber":662,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":663,"author":{"gitID":"-"},"content":"+"},{"lineNumber":664,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":665,"author":{"gitID":"-"},"content":"+"},{"lineNumber":666,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":667,"author":{"gitID":"-"},"content":"+"},{"lineNumber":668,"author":{"gitID":"-"},"content":"****"},{"lineNumber":669,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":670,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":671,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":672,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":673,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":674,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":675,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":676,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":677,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":678,"author":{"gitID":"-"},"content":"****"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":686,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":689,"author":{"gitID":"-"},"content":"+"},{"lineNumber":690,"author":{"gitID":"-"},"content":"****"},{"lineNumber":691,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":692,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":693,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":694,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":695,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":696,"author":{"gitID":"-"},"content":"****"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":699,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":706,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":707,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":712,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":713,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":714,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":719,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":724,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":729,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":732,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":737,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":738,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":743,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":744,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":745,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":748,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":753,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":760,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":765,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":772,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":777,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":778,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":781,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":792,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":797,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":800,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":811,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":829,"author":{"gitID":"-"},"content":"Tech recruiters who have the need for finding and acquiring skilled Computing students for tech companies."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"* manage a significant number of student contacts"},{"lineNumber":832,"author":{"gitID":"-"},"content":"* store student\u0027s basic information, contacts, expected graduation year, familiar frameworks, languages."},{"lineNumber":833,"author":{"gitID":"-"},"content":"* find students whose skill set is suitable for available positions"},{"lineNumber":834,"author":{"gitID":"-"},"content":"* Keep track of student’s past interactions with the company: internship, coding challenges, interview,..."},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature contribution:"},{"lineNumber":837,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Sashankh Chengavalli Kumar (@ChengSashankh)"},{"lineNumber":838,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement: Adding job postings"},{"lineNumber":839,"author":{"gitID":"-"},"content":"This allows the user to add job postings and receive suggestions about most suitable candidates based on various parameters."},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"For example, when the need arises to hire a new fresh graduate for a backend software development role with proficiency in MYSQL and Javascript, with location restrictions as well, the user may create such a job posting. As candidates are added and removed, the application displays an updated list of matching candidates, until removed from address book."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":". Creating a postjob command that creates a job posting."},{"lineNumber":846,"author":{"gitID":"-"},"content":". Creating an edit and delete command that does said operations to job posting."},{"lineNumber":847,"author":{"gitID":"-"},"content":". Display pane for showing the list of jobs currently active."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: Add a skills field to the Infinity Book to allow users to make"},{"lineNumber":850,"author":{"gitID":"-"},"content":"* Allows the recruiter to tag each user with a set of skills which are used for other candidate matching purposes."},{"lineNumber":851,"author":{"gitID":"-"},"content":"* In account of the multiple roles that each candidate might be suitable for, skills allow recruiter to choose the best match."},{"lineNumber":852,"author":{"gitID":"-"},"content":" This feature addresses this core need for recruiters."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Huynh Thanh Duc Anh (@anh211)"},{"lineNumber":855,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement: Data visualization"},{"lineNumber":856,"author":{"gitID":"-"},"content":"This allows users to make data-driven decisions with the visualization of recruiting data."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"image::graph.png[width\u003d\"500\"]"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"In the above example, `Screening`, `Interviewing`, `Accepted`, `SoftwareEngineerIntern` are tags that can be managed"},{"lineNumber":861,"author":{"gitID":"-"},"content":"conveniently by the user. Given this chart, the recruiter can help a better high-level insights of candidates, which"},{"lineNumber":862,"author":{"gitID":"-"},"content":"helps them significantly in making decisions."},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":". Making Command accepts OPTION. Example: `tag add`, `tag remove`."},{"lineNumber":867,"author":{"gitID":"-"},"content":". Allowing add/remove one tag."},{"lineNumber":868,"author":{"gitID":"-"},"content":". Drawing chart."},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: Enhance Find command"},{"lineNumber":871,"author":{"gitID":"-"},"content":"* Allow users to Find Person by name, phone, email, and tags."},{"lineNumber":872,"author":{"gitID":"-"},"content":"* Given the huge number of contacts that a recruiter may have, it is not possible for them to remember candidates\u0027 name."},{"lineNumber":873,"author":{"gitID":"-"},"content":" Hence, users should be able to search by other fields so that it\u0027s easier for them to locate a person."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Nguyen Thi Viet Ha (@deeheenguyen)"},{"lineNumber":876,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement: Candidates Comparison"},{"lineNumber":877,"author":{"gitID":"-"},"content":"This allows users to make compare the potential between candidates based on the skills."},{"lineNumber":878,"author":{"gitID":"-"},"content":"Can list all the high-performance candidates with specific skills."},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"Implementation needed:"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":". Make a new Compare Command to compare between two candidates based on skills, education."},{"lineNumber":883,"author":{"gitID":"-"},"content":". Display the github page on browser panel and the display the skills on the person card."},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: View Command"},{"lineNumber":886,"author":{"gitID":"-"},"content":". View specific persons with emailID."},{"lineNumber":887,"author":{"gitID":"-"},"content":". Display all the information in the person card."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Nguyen Dinh Dung (@tiny767)"},{"lineNumber":890,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement: Make several enhancements to the UI so that it is much more user-friendly."},{"lineNumber":891,"author":{"gitID":"tiny767"},"content":"This allows tech recruiters who need to manage big address books to save time by using the app more efficiently"},{"lineNumber":892,"author":{"gitID":"tiny767"},"content":"and feel more comfortable."},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"tiny767"},"content":"* Making the color for tags the same for tags with same name and the choice of color stays the same."},{"lineNumber":897,"author":{"gitID":"tiny767"},"content":"* For the user\u0027s command input, coloring keywords such as `name`, `p/`."},{"lineNumber":898,"author":{"gitID":"tiny767"},"content":"* Provide usage syntax or syntax error in real time (e.g. display syntax for `add` when the users finish typing \u0027add\u0027"},{"lineNumber":899,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":900,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: `remark` command"},{"lineNumber":901,"author":{"gitID":"tiny767"},"content":"* Allow users to add remarks for people in their address books."},{"lineNumber":902,"author":{"gitID":"tiny767"},"content":"* This allows tech recruiters to have a more flexible field to use for their candidates"},{"lineNumber":903,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":905,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":910,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":911,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":912,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"|`* * *` |user who wants to record notes |add a note entry for a person |record more information about the person"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"|`* * *` |user interested in a contact\u0027s skills |get the technical skills of a candidate |to find suitable candidates"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"|`* * *` |user who saves many resumes |open candidates\u0027 resumes from commandline |to quickly view their profiles"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"|`* * *` |User |delete a tag from address book |to remove tags I am no longer interested in"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"|`* *` |user |hide private contact details by default |minimize chance of someone else seeing them by accident"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"|`* *` |user with multiple address books |export my contacts |import into another address book application"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"|`* *` |user who views contacts |list frequently viewed candidates |to select the most probable candidates"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"|`* *` |User with interest in recruitment |view candidates\u0027 LinkedIn profiles from commandline |to know about their work profiles"},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"|`* *` |User |view my search history |to keep track of my previous searches"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"|`* *` |user interested in specific skills |search candidates by skill |to find suitable candidates easily"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"|`* *` |user who is recruiting |search by graduation year |to find suitable full/part time candidates"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"|`* *` |user interested in checking projects |access contacts\u0027 Github repositories |easily view and evaluate projects"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"|`* *` |user who uses many applications |export search result to CSV/JSON |import them into other applications"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"|`* *` |with many contacts |set profile pictures for contacts |identify and remember them |`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"|`* *` |user |read all notes about a contact |remember my past interactions and research about the contact"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"|`* *` |user with multiple address books |export my contacts |import into another address book application"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"|`* *` |user with multiple devices |back up my address book in the cloud |data is accessible from other devices"},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"|`*` |user concerned about confidentiality |set a password for the AddressBook |My address book will be secure"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"|`*` |user with frequently changing contacts |clear the entire address book |to start with new candidates when required"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"|`*` |user who frequently emails contacts |open an email link to the contact directly |quickly email candidates with copying their addresses"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"|`*` |user who types many commands |get autocomplete suggestion |quickly complete command"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":967,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":972,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":977,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":978,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":979,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":980,"author":{"gitID":"-"},"content":"+"},{"lineNumber":981,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":986,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":987,"author":{"gitID":"-"},"content":"+"},{"lineNumber":988,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":991,"author":{"gitID":"-"},"content":"+"},{"lineNumber":992,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":993,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":994,"author":{"gitID":"-"},"content":"+"},{"lineNumber":995,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Search a person by tag"},{"lineNumber":998,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"1. User requests to search and provides search params"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"2. Addr\tessBook shows a list of person fitting the given criteria"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View Linkedin profile of a person"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"1. User requests to search the person by name"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"2. AddressBook shows a list of person"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"3. User chooses a person by index in the list"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"4. AddressBook shows the linkedin page of that person"},{"lineNumber":1012,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1019,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons with a reponse time of less than 2 seconds for a command."},{"lineNumber":1020,"author":{"gitID":"-"},"content":".  Commands should ideally be less than 12 characters long to enable users with reasonable typing speed to use commands effectively."},{"lineNumber":1021,"author":{"gitID":"-"},"content":".  Should not use more than 11% CPU resources for executing commands"},{"lineNumber":1022,"author":{"gitID":"-"},"content":".  Data storage for address book with 1000 contacts should not exceed 500 Gb"},{"lineNumber":1023,"author":{"gitID":"-"},"content":".  Should be able to work even on older 32-bit system"},{"lineNumber":1024,"author":{"gitID":"-"},"content":".  Project should not require updates to remain functional."},{"lineNumber":1025,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1048,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1053,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1068,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1074,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1084,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1086,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1088,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"-":1067,"tiny767":32}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"        assertEquals(expectedPerson.getRemark().value, actualCard.getRemark());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":73,"tiny767":1}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":81,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":97,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":120,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_view() throws Exception {"},{"lineNumber":126,"author":{"gitID":"deeheenguyen"},"content":"        String example \u003d \"john@example.com\";"},{"lineNumber":127,"author":{"gitID":"deeheenguyen"},"content":"        Email email \u003d new Email(example);"},{"lineNumber":128,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand command \u003d (ViewCommand) parser.parseCommand(ViewCommand.COMMAND_WORD + \" \" + email);"},{"lineNumber":129,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(new ViewCommand(new EmailFilter(email)), command);"},{"lineNumber":130,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":160,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":167,"author":{"gitID":"deeheenguyen"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"tiny767"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":179,"author":{"gitID":"tiny767"},"content":"        final Remark remark \u003d new Remark(\"Like cooking\");"},{"lineNumber":180,"author":{"gitID":"tiny767"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD"},{"lineNumber":181,"author":{"gitID":"tiny767"},"content":"            + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value);"},{"lineNumber":182,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":183,"author":{"gitID":"tiny767"},"content":"        assertEquals(command, new RemarkCommand(INDEX_FIRST_PERSON, remark));"},{"lineNumber":184,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":185,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":31,"-":162,"tiny767":13}},{"path":"src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_emptyArg_throwsIllegalException() {"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_validArgs_returnsViewCommand() {"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        String example \u003d \"john@example.com\";"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        Email email \u003d new Email(example);"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand expectedFindCommand \u003d"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"                new ViewCommand(new EmailFilter(email));"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        assertParseSuccess(parser, \"john@example.com\", expectedFindCommand);"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":28,"-":8}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Has a pet\";"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Comes from NUS\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_NONEXISTENT \u003d \"nonexistent\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":104,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":157,"tiny767":3}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":" * Contains integration tests (interaction with the Model) for {@code ViewCommand}."},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter firstPredicate \u003d"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"                new EmailFilter(new Email(\"abc@example.com\"));"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter secondPredicate \u003d"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"                new EmailFilter(new Email(\"def@example.com\"));"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand findFirstCommand \u003d new ViewCommand(firstPredicate);"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand findSecondCommand \u003d new ViewCommand(secondPredicate);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"    public void executeTest() {"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand command \u003d prepareCommand(\"no@example.com\");"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"    private ViewCommand prepareCommand(String userInput) {"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand command \u003d"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"                    new ViewCommand(new EmailFilter(new Email(userInput)));"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(\" \"));"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"        return command;"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":42,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":" * Contains tests for {@code RemarkCommand}"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"public class RemarkCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"    public void equals() throws Exception {"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":"        // different types -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"        // different index -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON, new Remark(VALID_REMARK_AMY))));"},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":"        // different remark -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_BOB))));"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"     * Returns a {@code RemarkCommand}"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"    private RemarkCommand makeCommand(Index index, String remark) {"},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, new Remark(remark));"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"        return remarkCommand;"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":49,"-":12}},{"path":"src/test/java/seedu/address/model/person/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"public class RemarkTest {"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"    public void equals() {"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"        Remark remark \u003d new Remark(\"Like fishing\");"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"        // same object -\u003e returns true"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"        assertTrue(remark.equals(remark));"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"        // same values -\u003e returns true"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"        Remark remarkCopy \u003d new Remark(remark.value);"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"        assertTrue(remark.equals(remarkCopy));"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"        // different types -\u003e returns false"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"        assertFalse(remark.equals(1));"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"        // null -\u003e returns false"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"        assertFalse(remark.equals(null));"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"        // different remark -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"        Remark differentRemark \u003d new Remark(\"Like walking\");"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"        assertFalse(remark.equals(differentRemark));"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":7,"tiny767":24}},{"path":"src/test/java/seedu/address/model/person/EmailFilterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"public class EmailFilterTest {"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"        Email firstEmail \u003d new Email(\"abc@example.com\");"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"        Email secondEmail \u003d new Email(\"def@example.com\");"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter firstPredicate \u003d new EmailFilter(firstEmail);"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter secondPredicate \u003d new EmailFilter(secondEmail);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter firstPredicateCopy \u003d new EmailFilter(firstEmail);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    public void tests() {"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter predicate \u003d new EmailFilter(new Email(\"abc@example.com\"));"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"abc@example.com\").build()));"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":19,"-":23}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    private Remark remark;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":"        remark \u003d personToCopy.getRemark();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"     * Sets the {@code Phone} of the {@code Person} that"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"     * we are building."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"tiny767"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":98,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"tiny767"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":100,"author":{"gitID":"tiny767"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":101,"author":{"gitID":"tiny767"},"content":"        return this;"},{"lineNumber":102,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":104,"author":{"gitID":"tiny767"},"content":"        return new Person(name, phone, email, address, remark, tags);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":92,"tiny767":15}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":80,"tiny767":1}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"    private final Label remarkLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"    public String getRemark() { return remarkLabel.getText(); }"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"tiny767":5}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    private static final String[] TAG_COLORS \u003d {\"red\", \"pink\", \"blue\"};"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":"    private Label remark;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"        remark.setText(person.getRemark().value);"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"        initTags(person);"},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"     * Add comment!!"},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":"     * @param person"},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":"    private void initTags(Person person) {"},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":"            Label label \u003d new Label(tag.tagName);"},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":"            label.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":"            tags.getChildren().add(label);"},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"        });"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"     * Add comment!!"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":"     * @param tagName"},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"     * @return"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"        //some explanation"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"        return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":69,"tiny767":28}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"            Remark remark \u003d new Remark(\"\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":"            Person person \u003d new Person(name, phone, email, address, remark, tagList);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":64,"tiny767":3}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"deeheenguyen"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":12,"-":98,"tiny767":4}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_OPTION \u003d new Prefix(\"-\");"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":16,"tiny767":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":" * Parses input arguments and creates a new ViewCommand object"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"        if (!Email.isValidEmail(trimmedArgs)) {"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"        return new ViewCommand(new EmailFilter(new Email(trimmedArgs)));"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":23,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the person with the email\\n\""},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" abcd@gmail.com\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    private final EmailFilter predicate;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    public ViewCommand(EmailFilter predicate) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.predicate.equals(((ViewCommand) other).predicate)); // state check"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":17,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":" * Parses input arguments and create a new {@code RemarkCommand} object"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"     * Parses the given {@code String} of arguments in the context of the RemarkCommand"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"     * and returns an RemarkCommand object for execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"        return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":18,"tiny767":22}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_DUPLICATE_PERSON;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":" * Modifies the remark of a person in the address book"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit the remark of a person. \""},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"            + PREFIX_REMARK + \"Is a very good coder.\";"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"    private final Index index;"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"    private final Remark remark;"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"    private Person personToEdit;"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"    private Person editedPerson;"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"     * @param index index of the person in the list to modify the remark"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"     * @param remark content of the remark to be updated"},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"        requireNonNull(index);"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":"        requireNonNull(remark);"},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":"        this.index \u003d index;"},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"        this.remark \u003d remark;"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"        requireNonNull(personToEdit);"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"        return new CommandResult(createSuccessMessage(editedPerson));"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"     *Generate an execution success message based on whether the remark is adding to or removing from"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":"    private String createSuccessMessage(Person editedPerson) {"},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"        String message \u003d remark.value.isEmpty() ? MESSAGE_DELETE_REMARK_SUCCESS : MESSAGE_ADD_REMARK_SUCCESS;"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"        return String.format(message, editedPerson);"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":83,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":84,"author":{"gitID":"tiny767"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":85,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":88,"author":{"gitID":"tiny767"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"tiny767"},"content":"        editedPerson \u003d new Person(personToEdit.getName(),"},{"lineNumber":90,"author":{"gitID":"tiny767"},"content":"                personToEdit.getPhone(),"},{"lineNumber":91,"author":{"gitID":"tiny767"},"content":"                personToEdit.getEmail(),"},{"lineNumber":92,"author":{"gitID":"tiny767"},"content":"                personToEdit.getAddress(),"},{"lineNumber":93,"author":{"gitID":"tiny767"},"content":"                this.remark,"},{"lineNumber":94,"author":{"gitID":"tiny767"},"content":"                personToEdit.getTags());"},{"lineNumber":95,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":97,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":98,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"tiny767"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"tiny767"},"content":"        // short circuit if same object"},{"lineNumber":101,"author":{"gitID":"tiny767"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitID":"tiny767"},"content":"            return true;"},{"lineNumber":103,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":105,"author":{"gitID":"tiny767"},"content":"        // instanceof handles nulls"},{"lineNumber":106,"author":{"gitID":"tiny767"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":107,"author":{"gitID":"tiny767"},"content":"            return false;"},{"lineNumber":108,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":110,"author":{"gitID":"tiny767"},"content":"        // state check"},{"lineNumber":111,"author":{"gitID":"tiny767"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":112,"author":{"gitID":"tiny767"},"content":"        return index.equals(e.index)"},{"lineNumber":113,"author":{"gitID":"tiny767"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":114,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":116,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":111,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String COMMAND_OPTION_ADD_TAG \u003d \"add-tag\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_OPTION_DELETE_TAG \u003d \"delete-tag\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        editedPerson \u003d editPersonDescriptor.createEditedPerson(personToEdit);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e newTags;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e deletedTags;"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":139,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            setNewTags(toCopy.newTags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            setDeletedTags(toCopy.deletedTags);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":152,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                    this.tags, this.newTags, this.deletedTags);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":192,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":193,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"         * Add  {@code newTags} to this object\u0027s {@code newTags}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code newTags} is used internally."},{"lineNumber":201,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setNewTags(Set\u003cTag\u003e newTags) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.newTags \u003d (newTags !\u003d null) ? new HashSet\u003c\u003e(newTags) : null;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * Add  {@code newTags} to this object\u0027s {@code tags}."},{"lineNumber":208,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code newTags} is used internally."},{"lineNumber":209,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public void setDeletedTags(Set\u003cTag\u003e deletedTags) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            this.deletedTags \u003d (deletedTags !\u003d null) ? new HashSet\u003c\u003e(deletedTags) : null;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":216,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":217,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":218,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":225,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":226,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code newTags} is null."},{"lineNumber":227,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getNewTags() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return (newTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(newTags)) : Optional.empty();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":234,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":235,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code deletedTags} is null."},{"lineNumber":236,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getDeletedTags() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            return (deletedTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(deletedTags)) : Optional.empty();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"         * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * edited with {@code editPersonDescriptor}."},{"lineNumber":244,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public Person createEditedPerson(Person personToEdit) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            boolean isTagsChanged \u003d getTags().isPresent();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            boolean isNewTagsChanged \u003d getNewTags().isPresent();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            boolean isDeletedTagsChanged \u003d getDeletedTags().isPresent();"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"            boolean isMultipleTagsChanged \u003d (isTagsChanged \u0026\u0026 isNewTagsChanged)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                    || (isTagsChanged \u0026\u0026 isDeletedTagsChanged) || (isDeletedTagsChanged \u0026\u0026 isNewTagsChanged);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assert !isMultipleTagsChanged;"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assert personToEdit !\u003d null;"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"            Name updatedName \u003d getName().orElse(personToEdit.getName());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            Phone updatedPhone \u003d getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            Email updatedEmail \u003d getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":259,"author":{"gitID":"tiny767"},"content":"            Remark updatedRemark \u003d personToEdit.getRemark();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            Address updatedAddress \u003d getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e updatedTags;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            if (isTagsChanged) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                updatedTags \u003d getTags().orElse(null);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            } else if (isNewTagsChanged) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                if (personTags.isEmpty()) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                    updatedTags \u003d getNewTags().orElse(null);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                } else {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                    updatedTags \u003d personTags;"},{"lineNumber":271,"author":{"gitID":"-"},"content":"                    updatedTags.addAll(getNewTags().orElse(null));"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            } else if (isDeletedTagsChanged) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                updatedTags \u003d personTags;"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                if (personTags.isEmpty()) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                    updatedTags.removeAll(getDeletedTags().orElse(null));"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"                updatedTags \u003d personTags;"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"tiny767"},"content":"            return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":302,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":303,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":304,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":305,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":304,"tiny767":3}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"    private String remark;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"tiny767"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":121,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":123,"author":{"gitID":"tiny767"},"content":"        return new Person(name, phone, email, address, remark, tags);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":137,"tiny767":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"    public static final Remark SAMPLE_REMARK \u003d new Remark(\"Like fishing\");"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), EMPTY_REMARK,"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_REMARK,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK,"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":61,"tiny767":10}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"    private final Remark remark;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"        requireAllNonNull(name, phone, email, address, remark, tags);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"        this.remark \u003d remark;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"    public Remark getRemark() {"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":"        return remark;"},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":98,"tiny767":8}},{"path":"src/main/java/seedu/address/model/person/EmailFilter.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"public class EmailFilter implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"    private final String email;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"    public EmailFilter (Email email) {"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"        this.email \u003d email.toString();"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    public boolean test(Person person) {"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"        return person.getEmail().toString().equals(this.email);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof EmailFilter // instanceof handles nulls"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.email.equals(((EmailFilter) other).email)); // state check"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":20,"-":8}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.rmi.NoSuchObjectException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":94,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":136,"author":{"gitID":"tiny767"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":137,"author":{"gitID":"tiny767"},"content":"                person.getRemark(), correctTagReferences);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /***"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from the chosen {@code person} in the {@code AddressBook}"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *@throws PersonNotFoundException if the {@code person} is not found in the {@code AddressBook}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void deleteTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e modifiedTags \u003d new HashSet\u003cTag\u003e(person.getTags());"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (!modifiedTags.remove(tag)) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Person modifiedPerson \u003d"},{"lineNumber":165,"author":{"gitID":"tiny767"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":166,"author":{"gitID":"tiny767"},"content":"                        person.getRemark(), modifiedTags);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            updatePerson(person, modifiedPerson);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException duplictePersonException) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Modifying \""},{"lineNumber":172,"author":{"gitID":"-"},"content":"                    + \"a person\u0027s tags only should not result in a duplicate. \" + \"See Person#equals(Object).\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /***"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Deletes chosen tag {@code tag} from all persons in this {@code AddressBook}"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag tag) throws NoSuchObjectException {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            for (Person person : persons) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                deleteTagFromPerson(tag, person);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException personNotFoundException) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Impossible: Person was found in AddressBook.\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        if (!tagExistsInAddressBook(tag)) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            tags.remove(tag);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /***"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Checks if {@code tag} is assigned to atleast one {@code person} in the {@code AddressBook}"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @param tag"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @return a boolean value indicating the presence of the tag somewhere on the list"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public boolean tagExistsInAddressBook(Tag tag) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        for (Person person : persons) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            if (person.getTags().contains(tag)) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":241,"tiny767":4}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":" * Represents a Person\u0027s remark in the address book."},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"public class Remark {"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"            \"Person remark can take any values, and it can be blank\";"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"     * @param remark A valid address."},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"    public Remark(String remark) {"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"        this.value \u003d remark;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tiny767":21,"-":18}}]
