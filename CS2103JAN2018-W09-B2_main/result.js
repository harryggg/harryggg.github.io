var resultJson = [{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"\u003d contactHeRo"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"image:https://travis-ci.org/CS2103JAN2018-W09-B2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2103JAN2018-W09-B2/main\"]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"image:https://coveralls.io/repos/github/CS2103JAN2018-W09-B2/main/badge.svg?branch\u003dmaster[\"Coverage Status\", link\u003d\"https://coveralls.io/github/CS2103JAN2018-W09-B2/main\"]"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"*Welcome to contactHeRo!*"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"contactHeRo is a desktop contact management application designed for Human Resources Managers at companies, especially those responsible for recruitment."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"We understand that recruiters have a lot of contacts to"},{"lineNumber":21,"author":{"gitID":"-"},"content":"manage which include contact details and profiles of potential employees. It is essential for them to have a quick and easy access to these contacts. Hence, contactHero aims to make their lives easier by helping them to store and manage their contacts efficiently."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"contactHeRo has a GUI(Graphical User Interface) but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"So what are you waiting for? Head over to our \u003c\u003cUserGuide#, User Guide\u003e\u003e to get started!"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":37,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":38,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"* The original project: AddressBook-Level4, is created by https://github.com/se-edu/[SE-EDU] initiative"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"kush1509":1,"-":41}},{"path":"docs/LearningOutcomes.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Learning Outcomes"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc: macro"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toclevels: 1"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnumlevels: 1"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B2/main/tree/master"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"After studying this code and completing the corresponding exercises, you should be able to,"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"toc::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d Use API Design `[LO-ApiDesign]`"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"image:LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Use Assertions `[LO-Assertions]`"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"Note how the AddressBook app uses Java ``assert``s to verify assumptions."},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Add more assertions"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Add more assertions to AddressBook as you see fit."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d Use Logging `[LO-Logging]`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Add more logging"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Add more logging to AddressBook as you see fit."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: identify more places for defensive coding"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Analyze the AddressBook code/design to identify,"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* where defensive coding is used"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* where the code can be more defensive"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use gradle to run tasks"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use Travis in your own project"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Set up Travis to perform CI on your own fork."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Use the IDE to measure code coverage of your tests."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"},{"lineNumber":148,"author":{"gitID":"-"},"content":"class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"* Use the test case design heuristics mentioned above to improve test cases in other places."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."},{"lineNumber":165,"author":{"gitID":"-"},"content":"* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"----"},{"lineNumber":171,"author":{"gitID":"-"},"content":"@Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":174,"author":{"gitID":"-"},"content":"    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    assertHistoryCorrect(invalidCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"},{"lineNumber":177,"author":{"gitID":"-"},"content":"----"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Write an integration test for the same method."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d Write System Tests `[LO-SystemTesting]`"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Write more system tests"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"* Write system tests for the new features you add."},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Write more automated GUI tests"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* Covered by `[LO-SystemTesting]`"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"Here are some example design patterns used in the code base."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."},{"lineNumber":220,"author":{"gitID":"-"},"content":"* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."},{"lineNumber":221,"author":{"gitID":"-"},"content":"* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* *MVC Pattern* :"},{"lineNumber":223,"author":{"gitID":"-"},"content":"** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."},{"lineNumber":224,"author":{"gitID":"-"},"content":"** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."},{"lineNumber":225,"author":{"gitID":"-"},"content":"** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* *Abstraction Occurrence Pattern* : Not currently used in the app."},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"},{"lineNumber":235,"author":{"gitID":"-"},"content":"* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Find more applicable patterns"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d Do Code Reviews `[LO-CodeReview]`"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."},{"lineNumber":260,"author":{"gitID":"-"},"content":"* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Review a PR"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"* Review PRs created by team members."}],"authorContributionMap":{"kush1509":1,"-":264}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"\u003d contactHeRo - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"By: `Team W09-B2`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"trafalgarandre"},"content":"Welcome to *contactHero*! contactHeRo is the *perfect contact management solution for recruiters* across companies who need a *quick and efficient way* to manage the contact details and profiles of their potential recruits. It is a *Command Line Interface(CLI) application* with intuitive usage and effective features. You can `add`, `delete` and `edit` your contacts and `find` them by names or tags that you can assign."},{"lineNumber":21,"author":{"gitID":"-"},"content":"You can `add, edit and delete job openings` as well as `match` these job openings to potenital employees."},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"Other than that, you can also `view the linkedIn profiles` of your potential employees, `send emails` and `arrange meetings`."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"You can begin using contactHeRo by following a few simple steps below."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Not sure how to install Java? Visit the oracle website link below for more information. https://tinyurl.com/yb8leqv8"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Download the latest `contactHeRo.jar` link:{repoURL}/releases[here]."},{"lineNumber":39,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for contactHeRo."},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":".  Double-click the file to start the app. The user interface should appear in a few seconds as shown below (Refer to figure 1)."},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":".contactHeRo on launch"},{"lineNumber":43,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"Now you can start using contactHeRo."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":48,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":49,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":52,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":53,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":54,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":".  You can refer to \u003c\u003cFeatures\u003e\u003e for more details of each command."},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"Thank you for choosing us as your contact management solution!"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"contactHeRo is a *Command Line Interface(CLI) application*. Hence you need to type in the commands in order to use its features."},{"lineNumber":63,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"Below is the interface(refer to figure 2) that contactHeRo provides for you to type your command. +"},{"lineNumber":65,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":".Command Box in contactHeRo"},{"lineNumber":67,"author":{"gitID":"kush1509"},"content":"image::commandBox.png[width\u003d\"790\"]"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"*Command Format* +"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"Here is the format for the commands that will enable you to make most of contactHeRo."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"trafalgarandre"},"content":"* Words in `UPPER_CASE` are the parameters you suppose to fill in."},{"lineNumber":73,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":74,"author":{"gitID":"trafalgarandre"},"content":" If the command specifies `add n/NAME`, `NAME` is a parameter where you put the name of the person you want to add."},{"lineNumber":75,"author":{"gitID":"trafalgarandre"},"content":" For example, you want to add John: `add n/John Doe`."},{"lineNumber":76,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":77,"author":{"gitID":"trafalgarandre"},"content":"* Items in square brackets are optional. You can choose to type in or not."},{"lineNumber":78,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":79,"author":{"gitID":"trafalgarandre"},"content":" If the command specifies `n/NAME [t/TAG]`. `t/TAG` is optional."},{"lineNumber":80,"author":{"gitID":"trafalgarandre"},"content":" For example, you can type in `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":81,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":82,"author":{"gitID":"trafalgarandre"},"content":"* Items with `…`​ after them can be used multiple times including zero times."},{"lineNumber":83,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":84,"author":{"gitID":"trafalgarandre"},"content":" If the command specifies `[t/TAG]...`.  `t/TAG` can be used multiple times."},{"lineNumber":85,"author":{"gitID":"trafalgarandre"},"content":" For example, you can type in `` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":86,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":87,"author":{"gitID":"trafalgarandre"},"content":"* Parameters can be in any order."},{"lineNumber":88,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":89,"author":{"gitID":"trafalgarandre"},"content":" If the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"[NOTE]"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":"In case you make a mistake while typing the command, contactHeRo will show you the right format of the command. +"},{"lineNumber":93,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":94,"author":{"gitID":"kush1509"},"content":"Now that you have understood the command format, let\u0027s explore the features."},{"lineNumber":95,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"trafalgarandre"},"content":"You can get help using the following format. +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"kush1509"},"content":"This will open the help window (refer to figure 3)."},{"lineNumber":102,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":103,"author":{"gitID":"kush1509"},"content":".Help Window in contactHeRo"},{"lineNumber":104,"author":{"gitID":"kush1509"},"content":"image::helpWindow.png[width\u003d\"790\"]"},{"lineNumber":105,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person : `add`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"trafalgarandre"},"content":"You can add a person to contactHero using the following format. +"},{"lineNumber":109,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":110,"author":{"gitID":"trafalgarandre"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS cp/CURRENT_POSITION cc/COMPANY [pp/PROFILE_PICTURE_PATH] [t/TAG]...`"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":113,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"trafalgarandre"},"content":"[TIP]"},{"lineNumber":116,"author":{"gitID":"trafalgarandre"},"content":"Profile Picture indicates the profile picture\u0027s file path"},{"lineNumber":117,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"kush1509"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 cp/Software Engineer cc/Google pp//home/john/Desktop/John.jpg` +"},{"lineNumber":121,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":122,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":123,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":124,"author":{"gitID":"kush1509"},"content":" New person added: John Doe Phone: 98765432 Email: johnd@example.com Address: John street, block 123, #01-01 Current Position: Software Engineer Company: Google Tags:"},{"lineNumber":125,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":126,"author":{"gitID":"kush1509"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 cp/Student cc/NUS t/Developer`"},{"lineNumber":127,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":128,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":129,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":130,"author":{"gitID":"kush1509"},"content":" New person added: Betsy Crowe Phone: 1234567 Email: betsycrowe@example.com Address: Newgate Prison Current Position: Student Company: NUS  Tags: Developer"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"trafalgarandre"},"content":"You can see a list of all persons in contactHero using the following format. +"},{"lineNumber":135,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"trafalgarandre"},"content":"You can edit an existing person in contactHero using this format. +"},{"lineNumber":140,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":141,"author":{"gitID":"trafalgarandre"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [cp/CURRENT_POSITION] [cc/COMPANY] [pp/PROFILE_PICTURE_PATH][t/TAG]...`"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"****"},{"lineNumber":144,"author":{"gitID":"trafalgarandre"},"content":"* Edits the person at the specified `INDEX`. Remember that the index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":145,"author":{"gitID":"trafalgarandre"},"content":"* You need to provide at least one of the optional."},{"lineNumber":146,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":147,"author":{"gitID":"trafalgarandre"},"content":"* When you edit tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":148,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":149,"author":{"gitID":"-"},"content":"****"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":154,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":155,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":156,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":157,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":158,"author":{"gitID":"kush1509"},"content":" Edited Person: John Doe Phone: 91234567 Email: johndoe@example.com Address: John street, block 123, #01-01 Current Position: Software Engineer Company: Google Tags:"},{"lineNumber":159,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":161,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":164,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":165,"author":{"gitID":"kush1509"},"content":" Edited Person: Betsy Crower Phone: 1234567 Email: betsycrowe@example.com Address: Newgate Prison Current Position: Student Company: NUS Tags:"},{"lineNumber":166,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name : `find`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"You can find all the persons whose names or tags contain any of the given keywords using the following format. +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"Format: `find n/KEYWORD [MORE_KEYWORDS]` to find by name or `find t/KEYWORD [MORE_KEYWORDS]` to find by tag"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"****"},{"lineNumber":173,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":174,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":175,"author":{"gitID":"-"},"content":"* Only the name or tag is searched, depending on the prefix (n/ or t/)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":178,"author":{"gitID":"-"},"content":"****"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"* `find n/John` +"},{"lineNumber":183,"author":{"gitID":"kush1509"},"content":"This will show any person having the name `john` or `John`."},{"lineNumber":184,"author":{"gitID":"-"},"content":"* `find t/designer` +"},{"lineNumber":185,"author":{"gitID":"kush1509"},"content":"This will show `Jane Doe` whose tag is `designer`."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* `find n/Betsy Tim John` +"},{"lineNumber":187,"author":{"gitID":"kush1509"},"content":"This will show any person having any of the names `Betsy`, `Tim`, or `John`."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"kush1509"},"content":"You can delete a specified person from contactHeRo using the following format. +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"****"},{"lineNumber":195,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":196,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":197,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":198,"author":{"gitID":"-"},"content":"****"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":204,"author":{"gitID":"kush1509"},"content":"This deletes the 2nd person in contactHeRo and on running the above command, you should see the following success message: +"},{"lineNumber":205,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":206,"author":{"gitID":"kush1509"},"content":" Deleted Person: John Doe Phone: 98765432 Email: johnd@example.com Address: John street, block 123, #01-01 Current Position: Software Engineer Company: Google Tags:"},{"lineNumber":207,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":210,"author":{"gitID":"kush1509"},"content":"Deletes the 1st person in the results of the `find` command and on running the above command, you should see the following success message: +"},{"lineNumber":211,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":212,"author":{"gitID":"kush1509"},"content":"  Deleted Person: Betsy Crower Phone: 1234567 Email: betsycrowe@example.com Address: Newgate Prison Current Position: Student Company: NUS Tags:"},{"lineNumber":213,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Viewing the contact details of a person: `select`"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"kush1509"},"content":"You can select a person identified by the index number used in the last person listing to view his/her contact details using the following format. +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"****"},{"lineNumber":221,"author":{"gitID":"kush1509"},"content":"* Shows the contact details of the person at the specified `INDEX` in a formatted page."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":223,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":224,"author":{"gitID":"-"},"content":"****"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":230,"author":{"gitID":"kush1509"},"content":"Selects the 2nd person in contactHeRo."},{"lineNumber":231,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see a similar result as the following (refer to figure 4)."},{"lineNumber":237,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":238,"author":{"gitID":"kush1509"},"content":".Select Command Execution"},{"lineNumber":239,"author":{"gitID":"kush1509"},"content":"image::selectCommand.png[width\u003d\"790\"]"},{"lineNumber":240,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":241,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":242,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Viewing the LinkedIn search of a person: `linkedIn`"},{"lineNumber":243,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":244,"author":{"gitID":"kush1509"},"content":"You can select a person identified by the index number used in the last person listing to view his/her LinkedIn search using the following format. +"},{"lineNumber":245,"author":{"gitID":"kush1509"},"content":"Format: `linkedIn INDEX`"},{"lineNumber":246,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":247,"author":{"gitID":"kush1509"},"content":"****"},{"lineNumber":248,"author":{"gitID":"kush1509"},"content":"* Loads the LinkedIn search of the person at the specified `INDEX`."},{"lineNumber":249,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":250,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":251,"author":{"gitID":"kush1509"},"content":"* You *will have to login to LinkedIn* the first time to use this command in order to search the person."},{"lineNumber":252,"author":{"gitID":"kush1509"},"content":"****"},{"lineNumber":253,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":254,"author":{"gitID":"kush1509"},"content":"Examples:"},{"lineNumber":255,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":256,"author":{"gitID":"kush1509"},"content":"* `list` +"},{"lineNumber":257,"author":{"gitID":"kush1509"},"content":"`linkedIn 2` +"},{"lineNumber":258,"author":{"gitID":"kush1509"},"content":"Loads the LinkedIn search of the 2nd person in the contactHeRo."},{"lineNumber":259,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":260,"author":{"gitID":"kush1509"},"content":"* `find Betsy` +"},{"lineNumber":261,"author":{"gitID":"kush1509"},"content":"`select 1` +"},{"lineNumber":262,"author":{"gitID":"kush1509"},"content":"Loads the LinkedIn search of 1st person in the results of the `find` command."},{"lineNumber":263,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":264,"author":{"gitID":"kush1509"},"content":"On running the above command and after you have logged in, you should a similar result as the following (refer to figure 5):"},{"lineNumber":265,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":266,"author":{"gitID":"kush1509"},"content":".LinkedIn Command Execution"},{"lineNumber":267,"author":{"gitID":"kush1509"},"content":"image::linkedInCommand.png[width\u003d\"790\"]"},{"lineNumber":268,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":269,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Adding a job opening"},{"lineNumber":270,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":271,"author":{"gitID":"kush1509"},"content":"You can add a job opening to contactHero using the following format. +"},{"lineNumber":272,"author":{"gitID":"kush1509"},"content":"Format: `addjob p/POSITION t/TEAM l/LOCATION n/NUMBER_OF_POSITIONS`"},{"lineNumber":273,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":274,"author":{"gitID":"kush1509"},"content":"Examples:"},{"lineNumber":275,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":276,"author":{"gitID":"kush1509"},"content":"* `addjob p/Software Engineer t/Cloud Services l/Singapore n/1`"},{"lineNumber":277,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":278,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":279,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":280,"author":{"gitID":"kush1509"},"content":" New job opening added: Software Engineer Team: Cloud Services Location: Singapore Number of Positions: 1"},{"lineNumber":281,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":282,"author":{"gitID":"kush1509"},"content":"* `addjob p/Marketing Intern t/Social Media Marketing l/Singapore n/1`"},{"lineNumber":283,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":284,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":285,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":286,"author":{"gitID":"kush1509"},"content":" New job opening added: Marketing Intern Team: Social Media Marketing Location: Singapore Number of Positions: 1"},{"lineNumber":287,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":295,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":296,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing list of entered commands : `clearhistory`"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"You can clear your history of entered commands using the following format. +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"Format: `clearhistory`"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":304,"author":{"gitID":"kush1509"},"content":" `Your history has been cleared.`"},{"lineNumber":305,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":307,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"You can restore contactHeRo to the state before the previous _undoable_ command was executed using the following format. +"},{"lineNumber":310,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":313,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":314,"author":{"gitID":"kush1509"},"content":"Undoable commands: those commands that modify the contactHeRo\u0027s content (`add`, `delete`, `edit` and `clear`, `addjob`)."},{"lineNumber":315,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":330,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":331,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"You can reverse the most recent `undo` command using the following format. +"},{"lineNumber":336,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":342,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":345,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":346,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":349,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":350,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":352,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":354,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"You can clear all entries from contactHeRo using the following format. +"},{"lineNumber":359,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"kush1509"},"content":"On running the above command, you should see the following success message: +"},{"lineNumber":362,"author":{"gitID":"kush1509"},"content":"`contactHeRo has been cleared!`"},{"lineNumber":363,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"You can exit the program using the following format. +"},{"lineNumber":367,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Auto-complete command"},{"lineNumber":370,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":371,"author":{"gitID":"kush1509"},"content":"To save your time, after typing a partial command, you can press TAB for the command to be auto-completed."},{"lineNumber":372,"author":{"gitID":"kush1509"},"content":"[NOTE]"},{"lineNumber":373,"author":{"gitID":"kush1509"},"content":"The first lexicographically matched command is returned."},{"lineNumber":374,"author":{"gitID":"kush1509"},"content":"Examples:"},{"lineNumber":375,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":376,"author":{"gitID":"kush1509"},"content":"* Typing `ad` and pressing `TAB` gives: +"},{"lineNumber":377,"author":{"gitID":"kush1509"},"content":"    `add n/ e/ a/ [t/]...`"},{"lineNumber":378,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":379,"author":{"gitID":"kush1509"},"content":"* Typing `h` and pressing `TAB` gives: +"},{"lineNumber":380,"author":{"gitID":"kush1509"},"content":"     `help`"},{"lineNumber":381,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"You do not need to save manually. contactHeRo saves the data into the hard disk for you automatically. +"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"kush1509"},"content":"// tag::dataencryption[]"},{"lineNumber":387,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":388,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Editing a job opening `[coming in v1.4]`"},{"lineNumber":389,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":390,"author":{"gitID":"kush1509"},"content":"You will soon be able to edit a job opening in contactHeRo."},{"lineNumber":391,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":392,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Deleting a job opening `[coming in v1.4]`"},{"lineNumber":393,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":394,"author":{"gitID":"kush1509"},"content":"You will soon be able to delete a job opening in contactHeRo."},{"lineNumber":395,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":396,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Matching a job opening to a person `[coming in v1.4]`"},{"lineNumber":397,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":398,"author":{"gitID":"kush1509"},"content":"You will soon be able to match job openings to people in contactHeRo."},{"lineNumber":399,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":400,"author":{"gitID":"trafalgarandre"},"content":"\u003d\u003d\u003d Arranging meetings with Gmail calendar `[coming in v1.5]`"},{"lineNumber":401,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":402,"author":{"gitID":"kush1509"},"content":"You will soon be able to arrange meeting on Gmail calender using contactHero."},{"lineNumber":403,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Emailing a person `[coming in v1.5]`"},{"lineNumber":405,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"You can send email to any person you have saved in contactHeRo, without having to leave the app!"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Add reminders `[coming in v2.0]`"},{"lineNumber":409,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":410,"author":{"gitID":"kush1509"},"content":"You will soon be able to set reminders for meetings, appointments or any other event and contactHeRo will remind you of the event."},{"lineNumber":411,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":416,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Login system `[coming in v2.0]`"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"The login system shall provide security to your data stored in contactHeRo."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":425,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"trafalgarandre"},"content":"*Q*: How do I report bugs to the developers? +"},{"lineNumber":428,"author":{"gitID":"kush1509"},"content":"*A*: Please send an email to contactHeRo@gmail.com if you find a bug. Thank you."},{"lineNumber":429,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":430,"author":{"gitID":"trafalgarandre"},"content":"To ask more questions, please send your email to contactHeRo@gmail.com. +"},{"lineNumber":431,"author":{"gitID":"trafalgarandre"},"content":"We are willing to help you. +"},{"lineNumber":432,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"trafalgarandre"},"content":"These are all the commands that you can use for the latest version of contactHeRo:"},{"lineNumber":436,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":437,"author":{"gitID":"trafalgarandre"},"content":"* *\u003c\u003cadding-a-person-code-add-code, Add\u003e\u003e* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [pp/PROFILE_PICTURE_PATH]"},{"lineNumber":438,"author":{"gitID":"trafalgarandre"},"content":"[t/TAG]...` +"},{"lineNumber":439,"author":{"gitID":"trafalgarandre"},"content":"e.g. `add n/John Doe p/98765432 e/johnd@example.com a/Raffles Hall"},{"lineNumber":440,"author":{"gitID":"trafalgarandre"},"content":"pp//home/trafalgarandre/downloads/john.jpeg t/friends t/owesMoney`"},{"lineNumber":441,"author":{"gitID":"-"},"content":"* *\u003c\u003cclearing-all-entries-code-clear-code, Clear\u003e\u003e* : `clear`"},{"lineNumber":442,"author":{"gitID":"-"},"content":"* *\u003c\u003cclearing-list-of-entered-commands-code-clearhistory-code, ClearHistory\u003e\u003e* : `clearhistory`"},{"lineNumber":443,"author":{"gitID":"-"},"content":"* *\u003c\u003cdeleting-a-person-code-delete-code, Delete\u003e\u003e* : `delete INDEX` +"},{"lineNumber":444,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":445,"author":{"gitID":"trafalgarandre"},"content":"* *\u003c\u003cediting-a-person-code-edit-code, Edit\u003e\u003e* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]"},{"lineNumber":446,"author":{"gitID":"trafalgarandre"},"content":"[pp/PROFILE_PICTURE_PATH] [t/TAG]...` +"},{"lineNumber":447,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":448,"author":{"gitID":"-"},"content":"* *\u003c\u003clocating-persons-by-name-code-find-code, Find\u003e\u003e* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":449,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":450,"author":{"gitID":"-"},"content":"* *\u003c\u003clisting-all-persons-code-list-code, List\u003e\u003e* : `list`"},{"lineNumber":451,"author":{"gitID":"-"},"content":"* *\u003c\u003cviewing-help-code-help-code, Help\u003e\u003e* : `help`"},{"lineNumber":452,"author":{"gitID":"-"},"content":"* *\u003c\u003cviewing-the-contact-details-of-a-person-code-select-code, Select\u003e\u003e* : `select INDEX` +"},{"lineNumber":453,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":454,"author":{"gitID":"-"},"content":"* *\u003c\u003clisting-entered-commands-code-history-code, History\u003e\u003e* : `history`"},{"lineNumber":455,"author":{"gitID":"-"},"content":"* *\u003c\u003cundoing-previous-command-code-undo-code, Undo\u003e\u003e* : `undo`"},{"lineNumber":456,"author":{"gitID":"-"},"content":"* *\u003c\u003credoing-the-previously-undone-command-code-redo-code, Redo\u003e\u003e* : `redo`"},{"lineNumber":457,"author":{"gitID":"-"},"content":"* *\u003c\u003cviewing-the-linkedin-search-of-a-person-code-linkedin-code, LinkedIn\u003e\u003e*: `linkedIn INDEX` +"},{"lineNumber":458,"author":{"gitID":"kush1509"},"content":"e.g. `linkedIn 2`"},{"lineNumber":459,"author":{"gitID":"kush1509"},"content":"* *\u003c\u003cadding-a-job-opening, Add job opening\u003e\u003e* : `addjob p/POSITION t/TEAM l/LOCATION n/NUMBER_OF_POSITIONS` +"},{"lineNumber":460,"author":{"gitID":"kush1509"},"content":"e.g. `addjob p/Software Engineer t/Cloud Services l/Singapore n/2`"}],"authorContributionMap":{"trafalgarandre":53,"kush1509":154,"-":253}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.person.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":198}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"        //will be implemented when default screen for contact details panel is added"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"        //getBrowserPanel().click();"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"        //getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"        //assertHelpWindowNotOpen();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE_URL, getBrowserPanel().getLoadedUrl().toString());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":7,"-":88}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":100}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CURRENT_POSITION_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CURRENT_POSITION_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENT_POSITION_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":18,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROFILE_PICTURE_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_PICTURE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_AMY;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":39,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":63,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":79,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + \" \""},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":"                + PROFILE_PICTURE_DESC_AMY + \"  \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":99,"author":{"gitID":"kush1509"},"content":"                .withAddress(VALID_ADDRESS_AMY).withCurrentPosition(VALID_CURRENT_POSITION_AMY)"},{"lineNumber":100,"author":{"gitID":"kush1509"},"content":"                .withCompany(VALID_COMPANY_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY)"},{"lineNumber":101,"author":{"gitID":"trafalgarandre"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":107,"author":{"gitID":"kush1509"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":108,"author":{"gitID":"kush1509"},"content":"                .withAddress(VALID_ADDRESS_AMY).withCurrentPosition(VALID_CURRENT_POSITION_AMY)"},{"lineNumber":109,"author":{"gitID":"kush1509"},"content":"                .withCompany(VALID_COMPANY_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY)"},{"lineNumber":110,"author":{"gitID":"trafalgarandre"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":111,"author":{"gitID":"kush1509"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":112,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":116,"author":{"gitID":"kush1509"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":117,"author":{"gitID":"kush1509"},"content":"                .withAddress(VALID_ADDRESS_AMY).withCurrentPosition(VALID_CURRENT_POSITION_AMY)"},{"lineNumber":118,"author":{"gitID":"kush1509"},"content":"                .withCompany(VALID_COMPANY_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY)"},{"lineNumber":119,"author":{"gitID":"trafalgarandre"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":120,"author":{"gitID":"kush1509"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":121,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":126,"author":{"gitID":"kush1509"},"content":"                .withAddress(VALID_ADDRESS_BOB).withCurrentPosition(VALID_CURRENT_POSITION_AMY)"},{"lineNumber":127,"author":{"gitID":"kush1509"},"content":"                .withCompany(VALID_COMPANY_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY)"},{"lineNumber":128,"author":{"gitID":"trafalgarandre"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":129,"author":{"gitID":"kush1509"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":134,"author":{"gitID":"kush1509"},"content":"        except current position -\u003e added */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":136,"author":{"gitID":"kush1509"},"content":"                .withAddress(VALID_ADDRESS_BOB).withCurrentPosition(VALID_CURRENT_POSITION_BOB)"},{"lineNumber":137,"author":{"gitID":"kush1509"},"content":"                .withCompany(VALID_COMPANY_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY)"},{"lineNumber":138,"author":{"gitID":"trafalgarandre"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":139,"author":{"gitID":"kush1509"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":140,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"kush1509"},"content":"        /* Case: add a person with all fields same as another person in the address book except company -\u003e added */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":145,"author":{"gitID":"kush1509"},"content":"                .withAddress(VALID_ADDRESS_BOB).withCurrentPosition(VALID_CURRENT_POSITION_AMY)"},{"lineNumber":146,"author":{"gitID":"kush1509"},"content":"                .withCompany(VALID_COMPANY_BOB).withProfilePicture(VALID_PROFILE_PICTURE_AMY)"},{"lineNumber":147,"author":{"gitID":"trafalgarandre"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":148,"author":{"gitID":"kush1509"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":159,"author":{"gitID":"kush1509"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB"},{"lineNumber":160,"author":{"gitID":"kush1509"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB"},{"lineNumber":161,"author":{"gitID":"kush1509"},"content":"                + PROFILE_PICTURE_DESC_BOB;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":194,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":209,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"kush1509"},"content":"        /* Case: missing current position -\u003e rejected */"},{"lineNumber":213,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":214,"author":{"gitID":"kush1509"},"content":"                + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"kush1509"},"content":"        /* Case: missing company -\u003e rejected */"},{"lineNumber":218,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":219,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":227,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":228,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":232,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":233,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":237,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":238,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":242,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":243,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"kush1509"},"content":"        /* Case: invalid current position -\u003e rejected */"},{"lineNumber":247,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":248,"author":{"gitID":"kush1509"},"content":"                + INVALID_CURRENT_POSITION_DESC + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"kush1509"},"content":"        /* Case: invalid company -\u003e rejected */"},{"lineNumber":252,"author":{"gitID":"trafalgarandre"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":253,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + INVALID_COMPANY_DESC + PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"trafalgarandre"},"content":"        /* Case: invalid profilePicture -\u003e rejected */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":258,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + INVALID_PROFILE_PICTURE_DESC;"},{"lineNumber":259,"author":{"gitID":"trafalgarandre"},"content":"        assertCommandFailure(command, ProfilePicture.MESSAGE_PROFILEPICTURE_CONSTRAINTS);"},{"lineNumber":260,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":263,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":322,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":324,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":326,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":27,"kush1509":62,"-":249}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ClearCommand;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ListCommand;"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/\" + keyword);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":274,"author":{"gitID":"kush1509"},"content":"            assertEquals(BrowserPanel.DEFAULT_PAGE_URL, getBrowserPanel().getLoadedUrl().toString());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":5,"-":283}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.person.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":151}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"\u003d contactHeRo - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B2/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"trafalgarandre"},"content":"By: `Team W09-B2`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":17,"author":{"gitID":"trafalgarandre"},"content":"\u003d\u003d Intro"},{"lineNumber":18,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":19,"author":{"gitID":"trafalgarandre"},"content":"Welcome to contactHeRo developer guide! This guide contains all the information you need to quickly get started in developing contactHeRo. +"},{"lineNumber":20,"author":{"gitID":"trafalgarandre"},"content":"If you notice any mistakes or if there are any missing vital information then please let us know via contactHeRo@gmail.com. +"},{"lineNumber":21,"author":{"gitID":"trafalgarandre"},"content":"Let\u0027s get started!"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"Given below are the required prerequisites for developing contactHeRo."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"You can follow the steps below to set up contactHeRo in your computer."},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":49,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":69,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":100,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":108,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":113,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":118,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"kush1509"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when contactHeRo data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":159,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":167,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":179,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":185,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":186,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":192,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":195,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":196,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":197,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":202,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":205,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":208,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":215,"author":{"gitID":"kush1509"},"content":"* stores contactHeRo data."},{"lineNumber":216,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":223,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":230,"author":{"gitID":"kush1509"},"content":"* can save contactHeRo data in xml format and read it back."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"kush1509"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of contactHeRo (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"kush1509"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of contactHeRo before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":254,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"----"},{"lineNumber":256,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"},{"lineNumber":262,"author":{"gitID":"-"},"content":"----"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":265,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":266,"author":{"gitID":"-"},"content":"----"},{"lineNumber":267,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":"}"},{"lineNumber":282,"author":{"gitID":"-"},"content":"----"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"kush1509"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in contactHeRo. The current state of contactHeRo is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":295,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"kush1509"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore contactHeRo to the state before the `add` command executed."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":304,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"kush1509"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores contactHeRo to the state after the command is executed)."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":313,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":334,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"kush1509"},"content":"* **Alternative 1 (current choice):** Saves the entire contactHeRo."},{"lineNumber":341,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":343,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"kush1509"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies contactHeRo (`add`, `clear`, `edit`)."},{"lineNumber":351,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":356,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":364,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":367,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":370,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":371,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d Details Panel Implementation"},{"lineNumber":372,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":373,"author":{"gitID":"kush1509"},"content":"The `select` command shows the contact details of the person in a separate panel while the `linkedIn` command shows the LinkedIn search of the person."},{"lineNumber":374,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":375,"author":{"gitID":"kush1509"},"content":"The `DetailsPanel` is a TabPane which  which consists of the two tabs, `Contact Details` and `LinkedIn Search`. The `ContactDetailsDisplay` is embedded in the `Contact Details` tab and the `Browser Panel` in the `Linked Search` tab."},{"lineNumber":376,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":377,"author":{"gitID":"kush1509"},"content":"The UML diagram below represents the UI structure for the `DetailsPanel` (Refer to Figure 30):"},{"lineNumber":378,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":379,"author":{"gitID":"kush1509"},"content":"image::DetailsPanelClassDiagram.png[width\u003d\"600\"]"},{"lineNumber":380,"author":{"gitID":"kush1509"},"content":"_Figure 30 : UML Diagram for Panel._"},{"lineNumber":381,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":382,"author":{"gitID":"kush1509"},"content":"We created a new event, `SwitchTabRequestEvent` which sets the current tab in the `DetailsPanel` to `Contact Details` or `LinkedIn Search` depending on the input command."},{"lineNumber":383,"author":{"gitID":"kush1509"},"content":"The code for the SwitchTabRequestEvent` event is as follows."},{"lineNumber":384,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":385,"author":{"gitID":"kush1509"},"content":"[source, java]"},{"lineNumber":386,"author":{"gitID":"kush1509"},"content":"----"},{"lineNumber":387,"author":{"gitID":"kush1509"},"content":"public class SwitchTabRequestEvent extends BaseEvent {"},{"lineNumber":388,"author":{"gitID":"kush1509"},"content":"    public final int tabId;"},{"lineNumber":389,"author":{"gitID":"kush1509"},"content":"    public SwitchTabRequestEvent(int tabId) {"},{"lineNumber":390,"author":{"gitID":"kush1509"},"content":"        this.tabId \u003d tabId;"},{"lineNumber":391,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":392,"author":{"gitID":"kush1509"},"content":"    @Override"},{"lineNumber":393,"author":{"gitID":"kush1509"},"content":"    public String toString() {"},{"lineNumber":394,"author":{"gitID":"kush1509"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":395,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":396,"author":{"gitID":"kush1509"},"content":"}"},{"lineNumber":397,"author":{"gitID":"kush1509"},"content":"----"},{"lineNumber":398,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":399,"author":{"gitID":"kush1509"},"content":"[NOTE]"},{"lineNumber":400,"author":{"gitID":"kush1509"},"content":"The `SwitchTabRequestEvent` has an integer attribute `tabId`. The event handlers use this `tabId` to switch between tabs wherein the `Contact Details` and `LinkedIn Search` have tabIds 0 and 1 respectively."},{"lineNumber":401,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":402,"author":{"gitID":"kush1509"},"content":"Event handlers use the following code to handle the `SwitchTabRequestEvent` event."},{"lineNumber":403,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":404,"author":{"gitID":"kush1509"},"content":"[source, java]"},{"lineNumber":405,"author":{"gitID":"kush1509"},"content":"----"},{"lineNumber":406,"author":{"gitID":"kush1509"},"content":"@Subscribe"},{"lineNumber":407,"author":{"gitID":"kush1509"},"content":"private void handleSwitchTabRequestEvent(SwitchTabRequestEvent event) {"},{"lineNumber":408,"author":{"gitID":"kush1509"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":409,"author":{"gitID":"kush1509"},"content":"    tabPane.getSelectionModel().clearAndSelect(event.tabId);"},{"lineNumber":410,"author":{"gitID":"kush1509"},"content":"}"},{"lineNumber":411,"author":{"gitID":"kush1509"},"content":"----"},{"lineNumber":412,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":413,"author":{"gitID":"kush1509"},"content":"The `DetailsPanel` is also displayed when the user manually clicks on the `PersonCard` and the panel corresponding to the current tab is shown. This is implemented by handling the `PersonPanelSelectionChangedEvent` in both the `ContactDetailsPanel` and the `BrowserPanel`."},{"lineNumber":414,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":415,"author":{"gitID":"kush1509"},"content":"[NOTE]"},{"lineNumber":416,"author":{"gitID":"kush1509"},"content":"Both the `select` and `linkedIn` command function quite similarly and only differ in the panel that they trigger."},{"lineNumber":417,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":418,"author":{"gitID":"kush1509"},"content":"The figure below (Refer to figure 31) is the wireframe for the `ContactDetailsDisplay`:"},{"lineNumber":419,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":420,"author":{"gitID":"kush1509"},"content":"image::ContactDetailsDisplayWireFrame.png[width\u003d\"600\"]"},{"lineNumber":421,"author":{"gitID":"kush1509"},"content":"_Figure 31 : Wireframe for Contact Details Panel._"},{"lineNumber":422,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":423,"author":{"gitID":"kush1509"},"content":"[discrete]"},{"lineNumber":424,"author":{"gitID":"kush1509"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":425,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":426,"author":{"gitID":"kush1509"},"content":"**Aspect:** Improving the UI +"},{"lineNumber":427,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":428,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":429,"author":{"gitID":"kush1509"},"content":"**Alternative 1 (current choice):** Show the extra details of contact after they are selected. +"},{"lineNumber":430,"author":{"gitID":"kush1509"},"content":"**Pros**: Allows more readability of the contact details and if more attributes are added to the `Person` class, not everything needs to be shown in the `PersonCard`. +"},{"lineNumber":431,"author":{"gitID":"kush1509"},"content":"**Cons**: User needs to manually select the user to see more details of that person. +"},{"lineNumber":432,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":433,"author":{"gitID":"kush1509"},"content":"**Alternative 2:** Only show the LinkedIn search in the `BrowserPanel` and show the contact details of the person only in the `PersonCard`. +"},{"lineNumber":434,"author":{"gitID":"kush1509"},"content":"**Pros**: User only has to look in the `PersonCard` for any and every detail +"},{"lineNumber":435,"author":{"gitID":"kush1509"},"content":"**Cons**: Looks very cluttered and has poor User Interface design."},{"lineNumber":436,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":437,"author":{"gitID":"kush1509"},"content":"**Alternative 3 :** Show the `ContactDetailsDisplay` and `LinkedIn` as completely independent windows without tabs. +"},{"lineNumber":438,"author":{"gitID":"kush1509"},"content":"**Pros**: Completely isolates the `select` and `linkedIn` commands. +"},{"lineNumber":439,"author":{"gitID":"kush1509"},"content":"**Cons**: Removes the connectivity between a person\u0027s contact information and LinkedIn profile. Also, in the current implementation one is easily accessible from another, just by manually switching tabs which would not be possible with this alternative."},{"lineNumber":440,"author":{"gitID":"kush1509"},"content":"//end::details[]"},{"lineNumber":441,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":453,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":454,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":459,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":460,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":461,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"trafalgarandre"},"content":"\u003d\u003d\u003d Showing Profile Picture"},{"lineNumber":469,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":470,"author":{"gitID":"trafalgarandre"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":471,"author":{"gitID":"trafalgarandre"},"content":"`ProfilePicture` is a `Person` \u0027s attribute. It stores the path of the input profile picture and generates a similar profile picture which will be stored in the app."},{"lineNumber":472,"author":{"gitID":"trafalgarandre"},"content":"The ProfilePicture constructor is called when `AddCommand` or `EditCommand` is executed. In `AddCommand`, it is an optional attribute. Whenever there is no valid profile picture for `ProfilePicture`,"},{"lineNumber":473,"author":{"gitID":"trafalgarandre"},"content":"`ProfilePicture` takes the default `ProfilePicture`."},{"lineNumber":474,"author":{"gitID":"trafalgarandre"},"content":"`ProfilePicture`.getImage() returns an image for the `ImageView` of UI."},{"lineNumber":475,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":476,"author":{"gitID":"trafalgarandre"},"content":"\u003d\u003d\u003d\u003d Design consideration"},{"lineNumber":477,"author":{"gitID":"trafalgarandre"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to link with `ProfilePicture`"},{"lineNumber":478,"author":{"gitID":"trafalgarandre"},"content":"* **Alternative 1 (current choice):** Takes in the image path then copy the image to the ProfilePictureFolder."},{"lineNumber":479,"author":{"gitID":"trafalgarandre"},"content":"** Pros: We still have profile picture if the original profile picture is lost."},{"lineNumber":480,"author":{"gitID":"trafalgarandre"},"content":"** Cons: Memory consumption."},{"lineNumber":481,"author":{"gitID":"trafalgarandre"},"content":"* **Alternative 2:** Store the path and retrieve the image from the path when necessary."},{"lineNumber":482,"author":{"gitID":"trafalgarandre"},"content":"** Pros: Less memory consumption."},{"lineNumber":483,"author":{"gitID":"trafalgarandre"},"content":"** Cons: Original Image may be lost."},{"lineNumber":484,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":485,"author":{"gitID":"trafalgarandre"},"content":"diagrams::ModelComponentClassDiagram.pptx[width\u003d\"650\"]"},{"lineNumber":486,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Emailing a contact"},{"lineNumber":488,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":489,"author":{"gitID":"trafalgarandre"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":490,"author":{"gitID":"-"},"content":"The `EmailCommand` class will allow user to open an email interface to send email to the chosen contact. `EmailCommand` extends the `Command` class. It takes in an index through the `EmailCommandParser`,"},{"lineNumber":491,"author":{"gitID":"-"},"content":"similar to the implementation of `DeleteCommand` and `DeleteCommandParser`."},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"The sending of email will be implemented using Gmail API. First, `GoogleAuthorizationCodeFlow` is used to build and request for authorization from user."},{"lineNumber":494,"author":{"gitID":"-"},"content":"Then it saves the user authorization into `Credential`, which is saved into a local file so that they do not need to repeat the authorization step."},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design consideration"},{"lineNumber":497,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to send an email"},{"lineNumber":498,"author":{"gitID":"-"},"content":"* Alternative 1 (current choice): Using Gmail API to send an email."},{"lineNumber":499,"author":{"gitID":"-"},"content":"** Pros: Able to customize the UI that the user will use to send out an email."},{"lineNumber":500,"author":{"gitID":"-"},"content":"** Cons: Will take more time to implement due to additional UI components."},{"lineNumber":501,"author":{"gitID":"-"},"content":"* Alternative 2: Using `Webview` to display the Gmail drafting url."},{"lineNumber":502,"author":{"gitID":"-"},"content":"** Pros: Faster implementation as similar feature has been done before."},{"lineNumber":503,"author":{"gitID":"-"},"content":"** Cons: Not customizable and text may appear small in `Webview`."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":510,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":515,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":528,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":529,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":530,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":533,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"trafalgarandre"},"content":"There are three ways for you to run tests."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":543,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":548,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":555,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":568,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":569,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":570,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":571,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":572,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":573,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":574,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":575,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":576,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":580,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":583,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":600,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":607,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":608,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":609,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"kush1509"},"content":"A project often depends on third-party libraries. For example, contactHeRo depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":614,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":615,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":618,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":638,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":641,"author":{"gitID":"-"},"content":"+"},{"lineNumber":642,"author":{"gitID":"-"},"content":"****"},{"lineNumber":643,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":644,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":645,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":646,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":647,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":649,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":650,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":651,"author":{"gitID":"-"},"content":"****"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"kush1509"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in contactHeRo, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":659,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"kush1509"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in contactHeRo."},{"lineNumber":662,"author":{"gitID":"-"},"content":"+"},{"lineNumber":663,"author":{"gitID":"-"},"content":"****"},{"lineNumber":664,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":665,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":666,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":667,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":668,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":669,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":670,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":671,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":672,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":673,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":674,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":675,"author":{"gitID":"-"},"content":"****"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"kush1509"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your contactHeRo application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":683,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":686,"author":{"gitID":"-"},"content":"+"},{"lineNumber":687,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":688,"author":{"gitID":"-"},"content":"+"},{"lineNumber":689,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":690,"author":{"gitID":"-"},"content":"+"},{"lineNumber":691,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":692,"author":{"gitID":"-"},"content":"+"},{"lineNumber":693,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"+"},{"lineNumber":695,"author":{"gitID":"-"},"content":"****"},{"lineNumber":696,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":697,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":698,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":699,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":700,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":701,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":702,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":703,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":704,"author":{"gitID":"-"},"content":"****"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":707,"author":{"gitID":"-"},"content":"+"},{"lineNumber":708,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":710,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":711,"author":{"gitID":"-"},"content":"+"},{"lineNumber":712,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":713,"author":{"gitID":"-"},"content":"+"},{"lineNumber":714,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":716,"author":{"gitID":"-"},"content":"****"},{"lineNumber":717,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":718,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":719,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":720,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":722,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":723,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":724,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":725,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":727,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":728,"author":{"gitID":"-"},"content":"****"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"kush1509"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in contactHeRo."},{"lineNumber":731,"author":{"gitID":"-"},"content":"+"},{"lineNumber":732,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":733,"author":{"gitID":"-"},"content":"+"},{"lineNumber":734,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":736,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":737,"author":{"gitID":"-"},"content":"+"},{"lineNumber":738,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"+"},{"lineNumber":740,"author":{"gitID":"-"},"content":"****"},{"lineNumber":741,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":742,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":743,"author":{"gitID":"kush1509"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever contactHeRo is updated."},{"lineNumber":744,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":745,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":746,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":747,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":748,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":749,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":750,"author":{"gitID":"-"},"content":"****"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":753,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"kush1509"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving contactHeRo to the cloud. However, the current implementation of the application constantly saves contactHeRo after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for contactHeRo storage."},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":758,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"kush1509"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that contactHeRo can be saved in a fixed temporary location."},{"lineNumber":761,"author":{"gitID":"-"},"content":"+"},{"lineNumber":762,"author":{"gitID":"-"},"content":"****"},{"lineNumber":763,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":764,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":765,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":766,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":767,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":768,"author":{"gitID":"-"},"content":"****"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":778,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":784,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":785,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":786,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":791,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":796,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":801,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":804,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":809,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":810,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":815,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":816,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":817,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":820,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":825,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":832,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":837,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":844,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":849,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":850,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":853,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":864,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":869,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":872,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":877,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":882,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":897,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"kush1509"},"content":"*Target users:*"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"kush1509"},"content":"The application is targeted towards Human Resources Managers at companies, especially those responsible for recruitment. Such recruiters have a lot of contacts to +"},{"lineNumber":902,"author":{"gitID":"kush1509"},"content":"manage which include contact details and profiles of potential employees. It is essential for them to have a quick and easy access to these contacts. Hence, contactHero aims to make their lives easier by helping them to store and manage their contacts efficiently."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"kush1509"},"content":"*User Profile*:"},{"lineNumber":905,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":906,"author":{"gitID":"kush1509"},"content":"* Recruiters who have a significant number of contacts and profiles to manage"},{"lineNumber":907,"author":{"gitID":"kush1509"},"content":"* Recruiters who prefer desktop apps"},{"lineNumber":908,"author":{"gitID":"kush1509"},"content":"* Recruiters who are good at typing and hence prefer CLI apps"},{"lineNumber":909,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":910,"author":{"gitID":"kush1509"},"content":"*Value proposition*: An ideal solution for small teams and business professionals who need a simple solution to manage their contacts and help them with day-to-day business activities."},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"kush1509"},"content":"*Feature contributions:*"},{"lineNumber":913,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":914,"author":{"gitID":"kush1509"},"content":"1. Kushagra Goyal"},{"lineNumber":915,"author":{"gitID":"kush1509"},"content":" * Major Feature: Job Openings"},{"lineNumber":916,"author":{"gitID":"kush1509"},"content":" ** Users can add job openings."},{"lineNumber":917,"author":{"gitID":"kush1509"},"content":" ** Users can edit job openings."},{"lineNumber":918,"author":{"gitID":"kush1509"},"content":" ** Users can delete job openings."},{"lineNumber":919,"author":{"gitID":"kush1509"},"content":" ** Users can match job openings to potential employees."},{"lineNumber":920,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":921,"author":{"gitID":"trafalgarandre"},"content":" * Minor Feature: Contact details and LinkedIn search display."},{"lineNumber":922,"author":{"gitID":"trafalgarandre"},"content":" ** Users can view the contact details in a separate panel using the `select` command."},{"lineNumber":923,"author":{"gitID":"trafalgarandre"},"content":" ** Users can view the LinkedIn search of the person using the `linkedIn` command."},{"lineNumber":924,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":925,"author":{"gitID":"kush1509"},"content":" * How do these features fit into the product scope?"},{"lineNumber":926,"author":{"gitID":"kush1509"},"content":" ** Major Feature: A recruiter needs the list of the job openings in the company so he knows what are the current job openings and what skillsets to look for in people. This way, the user can better search for potential employees."},{"lineNumber":927,"author":{"gitID":"kush1509"},"content":" ** Minor Feature: Viewing the contact details in a separate focused panel makes them easier to read for the user as the Person card can now just contain limited information like the person\u0027s name, current position and company, also allowing more number of contacts to be displayed at a time since amount of information is reduced. Moreover, recruiters need to keep a track of the professional progress of his/her potential recruits and having easy access to their LinkedIn profiles will help them do this efficiently."},{"lineNumber":928,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":929,"author":{"gitID":"trafalgarandre"},"content":"2. Do Andre Khoi Nguyen"},{"lineNumber":930,"author":{"gitID":"-"},"content":" * Major Feature: Calendar"},{"lineNumber":931,"author":{"gitID":"trafalgarandre"},"content":" ** Users can sync Gmail calendar."},{"lineNumber":932,"author":{"gitID":"trafalgarandre"},"content":" ** Users can add events to the calendar."},{"lineNumber":933,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":934,"author":{"gitID":"trafalgarandre"},"content":" * Minor Feature: Profile Picture display."},{"lineNumber":935,"author":{"gitID":"-"},"content":" ** Users can add a profile picture by using `add` command or `edit` command."},{"lineNumber":936,"author":{"gitID":"-"},"content":" ** Users can view the profile picture."},{"lineNumber":937,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":938,"author":{"gitID":"kush1509"},"content":" * How do these features fit into the product scope?"},{"lineNumber":939,"author":{"gitID":"-"},"content":" ** Major Feature: Recruiters have a lot of appointments, meetings, and interviews to manage. Hence, showing them on the calendar will help them visualize and manage their time effectively."},{"lineNumber":940,"author":{"gitID":"-"},"content":" ** Minor Feature: Viewing profile pictures of the potential employees help recruiters to recognize them easily."},{"lineNumber":941,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"3. Kevin Chin"},{"lineNumber":943,"author":{"gitID":"-"},"content":"* Major Feature: Email contact"},{"lineNumber":944,"author":{"gitID":"-"},"content":"** User can use the \"email\" command to send email to chosen contact."},{"lineNumber":945,"author":{"gitID":"-"},"content":"** The feature uses Gmail API to send emails."},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"* Minor Feature: Find contact by tag"},{"lineNumber":948,"author":{"gitID":"-"},"content":"** User can find contact by tag using keyword of the tag."},{"lineNumber":949,"author":{"gitID":"-"},"content":"** Supports multiple keywords."},{"lineNumber":950,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":951,"author":{"gitID":"kush1509"},"content":"* How do these features fit into the product scope?"},{"lineNumber":952,"author":{"gitID":"-"},"content":"** Major Feature: Recruiters may sometimes need to set up appointments, meetings, and interviews. This will usually be done through the use of email. This feature will be convenient for them as the email address of the contacts are already in contactHeRo."},{"lineNumber":953,"author":{"gitID":"-"},"content":"** Minor Feature: Sometimes, recruiter might not remember the name of the person they wish to contact. The assigned role of a person is much easier to remember. Therefore, this feature is very useful in helping them find a contact easily."},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"4. Jason Lim"},{"lineNumber":956,"author":{"gitID":"-"},"content":"* Major Feature: Login System"},{"lineNumber":957,"author":{"gitID":"-"},"content":"** Users can be assured that their data in contactHeRo is secured."},{"lineNumber":958,"author":{"gitID":"-"},"content":"** User can create a new account to login to contactHeRo."},{"lineNumber":959,"author":{"gitID":"-"},"content":"** User can login and logout of contactHeRo through CLI."},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"* Minor Feature: Clear list of history"},{"lineNumber":962,"author":{"gitID":"-"},"content":"** User can clear away the list of commands which they have entered in previously using the `clearhistory` command."},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"* How do this features fit into the product scope?"},{"lineNumber":965,"author":{"gitID":"-"},"content":"** Major Feature: Recruiters are dealing with data of their potential employees and some of these data are personal and sensitive. Recruiters may also have some confidential company data stored in the application. Hence it is necessary for them to set up some form of security to protect these sensitive data. Having a login system is one of the common methods to ensure data security."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"** Minor Feature: As our application is mainly using CLI, sometimes the commands we entered may contain sensitive information. For example, the `add` command contains the phone number, address and email of the person being added into the application. All of the inputs entered into the command line can be viewed by using the history command. Hence being able to clear away the history of user inputs can help to protect those sensitive information. In addition, clearing away the back log help save space in the application."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":970,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":975,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":976,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":977,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"kush1509"},"content":"|`* * *` |user with many persons in contactHeRo |sort persons by name |locate a person easily"},{"lineNumber":986,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":987,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |add tag |categorize people"},{"lineNumber":988,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":989,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |find people by tag | find people with similar tag"},{"lineNumber":990,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":991,"author":{"gitID":"kush1509"},"content":"|`* * *` |user |view LinkedIn profile | stay updated about the person\u0027s professional advancement and achievement"},{"lineNumber":992,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":993,"author":{"gitID":"kush1509"},"content":"|`* * *` |user |add jobs | find people with similar tag"},{"lineNumber":994,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":995,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |submit feedback to developer | receive a better version in the future"},{"lineNumber":996,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":997,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |have a calendar and add appointment on it| arrange appointment with people"},{"lineNumber":998,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":999,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |auto send mail to people after arranging appointment| minimize my time to arrange meeting"},{"lineNumber":1000,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1001,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |find anything by characters|reduce time finding someone"},{"lineNumber":1002,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1003,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |have a log| view my past actions"},{"lineNumber":1004,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1005,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |filter my log| view specific past actions"},{"lineNumber":1006,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1007,"author":{"gitID":"trafalgarandre"},"content":"|`* * *` |user |delete my log| save space and secure information"},{"lineNumber":1008,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1009,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"kush1509"},"content":"|`* *` |user with many persons in contactHeRo |sort persons by name |locate a person easily"},{"lineNumber":1013,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1014,"author":{"gitID":"trafalgarandre"},"content":"|`* *` |user | add birthday of my contacts |wish them"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"trafalgarandre"},"content":"|`* *` |user | autofill command| save time"},{"lineNumber":1017,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1018,"author":{"gitID":"trafalgarandre"},"content":"|`* *` |user | add logic statement into find command| find and filter more effectively"},{"lineNumber":1019,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1020,"author":{"gitID":"trafalgarandre"},"content":"|`* *` |user | add notes| keep long information of people"},{"lineNumber":1021,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1022,"author":{"gitID":"trafalgarandre"},"content":"|`* *` |user | have a list of frequently used contact| easily contact them"},{"lineNumber":1023,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1024,"author":{"gitID":"trafalgarandre"},"content":"|`* *` |user | have a login system| protect my information"},{"lineNumber":1025,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1026,"author":{"gitID":"trafalgarandre"},"content":"|`* *` |user | store picture of my contacts| recognize them easily"},{"lineNumber":1027,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1028,"author":{"gitID":"trafalgarandre"},"content":"|`*` |user | be connected with google drive| store people\u0027s CV"},{"lineNumber":1029,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1030,"author":{"gitID":"trafalgarandre"},"content":"|`*` |user | rate person| give feedback to them"},{"lineNumber":1031,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1032,"author":{"gitID":"trafalgarandre"},"content":"|`*` |user | store the date of last contact with a person| keep my contact more effectively"},{"lineNumber":1033,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":1034,"author":{"gitID":"trafalgarandre"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1037,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete contact"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"1.  User requests to list contacts"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of contacts"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific contact in the list"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the contact"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1057,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1061,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1064,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Filter log"},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"1. User request to view log"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"2. AddressBook shows the log list to user"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"3. User request to filter the log with specific keywords"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"4. AddressBook shows the log list with filtered results"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1080,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"* 3a. The filter conditions are invalid"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1086,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Auto-fill command"},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"1. User enters command word partially in the command line"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"2. User request for auto-fill of command."},{"lineNumber":1095,"author":{"gitID":"-"},"content":"3. AddressBook completes the command word for the user."},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"kush1509"},"content":"* 2a. The partial word does not match any of the commands known."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"* 3b. There are multiple commands matching the partial command word."},{"lineNumber":1105,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"** 3b1. AddressBook shows the list of commands matching the partial command word."},{"lineNumber":1107,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"** 3b2. User enters more letters to the command word."},{"lineNumber":1109,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1117,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1118,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1119,"author":{"gitID":"-"},"content":".  The commands and what they do must be clear to the user."},{"lineNumber":1120,"author":{"gitID":"kush1509"},"content":".  contactHeRo should be able to export to other computers."},{"lineNumber":1121,"author":{"gitID":"-"},"content":".  Should take less than 5 seconds to respond to each command on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e."},{"lineNumber":1122,"author":{"gitID":"-"},"content":".  The user interface\u0027s font type and font size should be readable by user."},{"lineNumber":1123,"author":{"gitID":"-"},"content":".  Should be backwards compatible with older version of the software."},{"lineNumber":1124,"author":{"gitID":"-"},"content":".  Should receive feedback after executing commands."},{"lineNumber":1125,"author":{"gitID":"-"},"content":".  Should have correct error handling and not crash from unexpected behavior."},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1146,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1151,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1166,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1172,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1182,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1184,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1186,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"trafalgarandre":80,"kush1509":129,"-":988}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd n/Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":193}},{"path":"src/test/java/seedu/address/ui/ContactDetailsDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import guitests.guihandles.ContactDetailsDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"public class ContactDetailsDisplayTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    private ContactDetailsDisplayHandle contactDetailsDisplayHandle;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"        ContactDetailsDisplay contactDetailsDisplay \u003d new ContactDetailsDisplay();"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"        uiPartRule.setUiPart(contactDetailsDisplay);"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"        contactDetailsDisplayHandle \u003d new ContactDetailsDisplayHandle(contactDetailsDisplay.getRoot());"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    public void display() {"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        // new result received"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"        postNow(new PersonPanelSelectionChangedEvent(personCard));"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"        assertEquals(person.getName().fullName, contactDetailsDisplayHandle.getName());"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"        assertEquals(person.getName().fullName, contactDetailsDisplayHandle.getFullName());"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        assertEquals(person.getPhone().value, contactDetailsDisplayHandle.getPhone());"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        assertEquals(person.getEmail().value, contactDetailsDisplayHandle.getEmail());"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":32,"-":9}},{"path":"src/test/java/seedu/address/ui/DetailsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import guitests.guihandles.DetailsPanelHandle;"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.commons.events.ui.SwitchTabRequestEvent;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"public class DetailsPanelTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"    private DetailsPanelHandle detailsPanelHandle;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    @Before"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    public void setUp() {"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"        DetailsPanel detailsPanel \u003d new DetailsPanel();"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"        uiPartRule.setUiPart(detailsPanel);"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"        detailsPanelHandle \u003d new DetailsPanelHandle(getChildNode(detailsPanel.getRoot(), \"#tabPane\"));"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    public void display() {"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"        // default tab"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"        assertEquals(0, detailsPanelHandle.getCurrentTab());"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        postNow(new SwitchTabRequestEvent(1));"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        assertEquals(1, detailsPanelHandle.getCurrentTab());"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        postNow(new SwitchTabRequestEvent(0));"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"        assertEquals(0, detailsPanelHandle.getCurrentTab());"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"        postNow(new SwitchTabRequestEvent(0));"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        assertEquals(0, detailsPanelHandle.getCurrentTab());"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":31,"-":5}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"    public void handleKeyPressTab() {"},{"lineNumber":134,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":135,"author":{"gitID":"kush1509"},"content":"        // no entry"},{"lineNumber":136,"author":{"gitID":"kush1509"},"content":"        assertInputHistory(KeyCode.TAB, AddCommand.COMMAND_SYNTAX);"},{"lineNumber":137,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":138,"author":{"gitID":"kush1509"},"content":"        // partial input"},{"lineNumber":139,"author":{"gitID":"kush1509"},"content":"        commandBoxHandle.enterCommand(\"e\");"},{"lineNumber":140,"author":{"gitID":"kush1509"},"content":"        assertInputHistory(KeyCode.TAB, EditCommand.COMMAND_SYNTAX);"},{"lineNumber":141,"author":{"gitID":"kush1509"},"content":"        commandBoxHandle.enterCommand(\"ex\");"},{"lineNumber":142,"author":{"gitID":"kush1509"},"content":"        assertInputHistory(KeyCode.TAB, ExitCommand.COMMAND_WORD);"},{"lineNumber":143,"author":{"gitID":"kush1509"},"content":"        commandBoxHandle.enterCommand(\"h\");"},{"lineNumber":144,"author":{"gitID":"kush1509"},"content":"        assertInputHistory(KeyCode.TAB, HelpCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":146,"author":{"gitID":"kush1509"},"content":"        // unknown input"},{"lineNumber":147,"author":{"gitID":"kush1509"},"content":"        commandBoxHandle.enterCommand(\"q\");"},{"lineNumber":148,"author":{"gitID":"kush1509"},"content":"        assertInputHistory(KeyCode.TAB, \"q\");"},{"lineNumber":149,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":24,"-":156}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE_URL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"        URL expectedDefaultPageUrl \u003d new URL(DEFAULT_PAGE_URL);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":44}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"    private static final String VALID_CURRENT_POSITION \u003d \"Software Engineer\";"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"    private static final String VALID_COMPANY \u003d \"Google\";"},{"lineNumber":44,"author":{"gitID":"trafalgarandre"},"content":"    private static final String VALID_PROFILE_PICTURE \u003d \"./src/test/data/images/hans.jpeg\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":"                VALID_ADDRESS, VALID_CURRENT_POSITION, VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":94,"author":{"gitID":"kush1509"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"},{"lineNumber":95,"author":{"gitID":"kush1509"},"content":"                VALID_ADDRESS, VALID_CURRENT_POSITION, VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":103,"author":{"gitID":"kush1509"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":104,"author":{"gitID":"kush1509"},"content":"                VALID_ADDRESS, VALID_CURRENT_POSITION, VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":137,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"kush1509"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedJob}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":9,"-":139}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exception are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":123}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.SelectCommandParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":28}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearHistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SignupCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ClearCommand;"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.LinkedInCommand;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ListCommand;"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":64,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_clearhistory() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearHistoryCommand.COMMAND_WORD) instanceof ClearHistoryCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearHistoryCommand.COMMAND_WORD + \" 3\") instanceof ClearHistoryCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":125,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"kush1509"},"content":"    public void parseCommand_linkedIn() throws Exception {"},{"lineNumber":131,"author":{"gitID":"kush1509"},"content":"        LinkedInCommand command \u003d (LinkedInCommand) parser.parseCommand("},{"lineNumber":132,"author":{"gitID":"kush1509"},"content":"                LinkedInCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"        assertEquals(new LinkedInCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":134,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseCommand_email() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        EmailCommand command \u003d (EmailCommand) parser.parseCommand("},{"lineNumber":139,"author":{"gitID":"-"},"content":"                EmailCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(new EmailCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parseCommand_signupCommandWord_returnsSignupCommand() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String testUsername \u003d \"test\";"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        String testPassword \u003d \"123\";"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        SignupCommand command \u003d (SignupCommand) parser.parseCommand("},{"lineNumber":154,"author":{"gitID":"-"},"content":"                SignupCommand.COMMAND_WORD + \" u/\" + testUsername + \" pw/\" + testPassword);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(new SignupCommand(testUsername, testPassword), command);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":17,"-":160}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.FindCommandParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        FindCommand expectedFindNameCommand \u003d"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindNameCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n n/Alice \\n \\t Bob  \\t\", expectedFindNameCommand);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        FindCommand expectedFindTagCommand \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"developer\", \"accountant\")));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" t/developer accountant\", expectedFindTagCommand);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n t/developer \\n \\t accountant  \\t\", expectedFindTagCommand);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \" n/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \" t/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \" n/ t/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \" t/ n/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":55}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.DeleteCommandParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":31}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CURRENT_POSITION_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CURRENT_POSITION_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENT_POSITION_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_PICTURE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + CURRENT_POSITION_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"                + COMPANY_DESC_BOB + \" \" + PROFILE_PICTURE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"                .withCurrentPosition(VALID_CURRENT_POSITION_BOB).withCompany(VALID_COMPANY_BOB)"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":"                .withProfilePicture(VALID_PROFILE_PICTURE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":145,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_AMY + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY + PROFILE_PICTURE_DESC_AMY"},{"lineNumber":146,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"kush1509"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":184,"author":{"gitID":"kush1509"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"kush1509"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":188,"author":{"gitID":"kush1509"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"kush1509"},"content":"        /* Case: invalid current position -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"kush1509"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":192,"author":{"gitID":"kush1509"},"content":"                + INVALID_CURRENT_POSITION_DESC, CurrentPosition.MESSAGE_CURRENT_POSITION_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":194,"author":{"gitID":"kush1509"},"content":"        /* Case: invalid company -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"kush1509"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_COMPANY_DESC,"},{"lineNumber":196,"author":{"gitID":"kush1509"},"content":"                Company.MESSAGE_COMPANY_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":208,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":214,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":242,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":246,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":250,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":3,"kush1509":36,"-":271}},{"path":"src/test/java/seedu/address/logic/parser/LinkedInCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.LinkedInCommand;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.LinkedInCommandParser;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"public class LinkedInCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    private LinkedInCommandParser parser \u003d new LinkedInCommandParser();"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"    public void parse_validArgs_returnsLinkedInCommand() {"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"        assertParseSuccess(parser, \"1\", new LinkedInCommand(INDEX_FIRST_PERSON));"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LinkedInCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":13,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CURRENT_POSITION_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENT_POSITION_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.EditCommandParser;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":97,"author":{"gitID":"kush1509"},"content":"        assertParseFailure(parser, \"1\" + INVALID_CURRENT_POSITION_DESC,"},{"lineNumber":98,"author":{"gitID":"kush1509"},"content":"                CurrentPosition.MESSAGE_CURRENT_POSITION_CONSTRAINTS); // invalid address"},{"lineNumber":99,"author":{"gitID":"kush1509"},"content":"        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC, Company.MESSAGE_COMPANY_CONSTRAINTS); // invalid address"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":124,"author":{"gitID":"kush1509"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":125,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":129,"author":{"gitID":"kush1509"},"content":"                .withCurrentPosition(VALID_CURRENT_POSITION_AMY).withCompany(VALID_COMPANY_AMY)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"kush1509"},"content":"        // current company"},{"lineNumber":176,"author":{"gitID":"kush1509"},"content":"        userInput \u003d targetIndex.getOneBased() + CURRENT_POSITION_DESC_AMY;"},{"lineNumber":177,"author":{"gitID":"kush1509"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withCurrentPosition(VALID_CURRENT_POSITION_AMY).build();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":180,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":181,"author":{"gitID":"kush1509"},"content":"        // company"},{"lineNumber":182,"author":{"gitID":"kush1509"},"content":"        userInput \u003d targetIndex.getOneBased() + COMPANY_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"kush1509"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withCompany(VALID_COMPANY_AMY).build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":186,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":25,"-":212}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CURRENT_POSITION_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CURRENT_POSITION_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENT_POSITION_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":18,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROFILE_PICTURE_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":26,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_PICTURE_DESC_AMY;"},{"lineNumber":27,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_PICTURE_DESC_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_AMY;"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":42,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.AddCommandParser;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":59,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"                .withCurrentPosition(VALID_CURRENT_POSITION_BOB).withCompany(VALID_COMPANY_BOB)"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"                .withProfilePicture(VALID_PROFILE_PICTURE_BOB)"},{"lineNumber":72,"author":{"gitID":"trafalgarandre"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":87,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":97,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_AMY + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":102,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":103,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":104,"author":{"gitID":"kush1509"},"content":"        // multiple current positions - last current position accepted"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":106,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":108,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":109,"author":{"gitID":"trafalgarandre"},"content":"        // multiple profilePictures - last profilePicture accepted"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_AMY + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"kush1509"},"content":"                        + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":116,"author":{"gitID":"kush1509"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":117,"author":{"gitID":"kush1509"},"content":"                .withCurrentPosition(VALID_CURRENT_POSITION_BOB).withCompany(VALID_COMPANY_BOB)"},{"lineNumber":118,"author":{"gitID":"kush1509"},"content":"                .withProfilePicture(VALID_PROFILE_PICTURE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"kush1509"},"content":"                        + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"kush1509"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":126,"author":{"gitID":"trafalgarandre"},"content":"        // zero tags and no profilePicture"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":128,"author":{"gitID":"kush1509"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":129,"author":{"gitID":"kush1509"},"content":"                .withCurrentPosition(VALID_CURRENT_POSITION_AMY).withCompany(VALID_COMPANY_AMY)"},{"lineNumber":130,"author":{"gitID":"kush1509"},"content":"                .withProfilePicture().withTags().build();"},{"lineNumber":131,"author":{"gitID":"kush1509"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":132,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_AMY + COMPANY_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":140,"author":{"gitID":"trafalgarandre"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB, expectedMessage);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":144,"author":{"gitID":"trafalgarandre"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":145,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB, expectedMessage);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":148,"author":{"gitID":"trafalgarandre"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB, expectedMessage);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":152,"author":{"gitID":"trafalgarandre"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":153,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB, expectedMessage);"},{"lineNumber":154,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":155,"author":{"gitID":"kush1509"},"content":"        // missing current position prefix"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"kush1509"},"content":"                + VALID_CURRENT_POSITION_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB, expectedMessage);"},{"lineNumber":158,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":159,"author":{"gitID":"kush1509"},"content":"        // missing company prefix"},{"lineNumber":160,"author":{"gitID":"trafalgarandre"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":161,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + VALID_COMPANY_BOB + PROFILE_PICTURE_DESC_BOB, expectedMessage);"},{"lineNumber":162,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":164,"author":{"gitID":"trafalgarandre"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":165,"author":{"gitID":"kush1509"},"content":"                + VALID_CURRENT_POSITION_BOB + VALID_COMPANY_BOB + VALID_PROFILE_PICTURE_BOB, expectedMessage);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":172,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":173,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":177,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":178,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":183,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":187,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":188,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":190,"author":{"gitID":"kush1509"},"content":"        // invalid current position"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":192,"author":{"gitID":"kush1509"},"content":"                + INVALID_CURRENT_POSITION_DESC + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":193,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, CurrentPosition.MESSAGE_CURRENT_POSITION_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":195,"author":{"gitID":"kush1509"},"content":"        // invalid company"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":197,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + INVALID_COMPANY_DESC + PROFILE_PICTURE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":198,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, Company.MESSAGE_COMPANY_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":200,"author":{"gitID":"trafalgarandre"},"content":"        // invalid profilePicture"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":202,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + INVALID_PROFILE_PICTURE_DESC + TAG_DESC_HUSBAND"},{"lineNumber":203,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_FRIEND, ProfilePicture.MESSAGE_PROFILEPICTURE_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":207,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB + INVALID_TAG_DESC"},{"lineNumber":208,"author":{"gitID":"kush1509"},"content":"                + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":211,"author":{"gitID":"trafalgarandre"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":212,"author":{"gitID":"kush1509"},"content":"                + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB,"},{"lineNumber":213,"author":{"gitID":"kush1509"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":217,"author":{"gitID":"kush1509"},"content":"                + ADDRESS_DESC_BOB + CURRENT_POSITION_DESC_BOB + COMPANY_DESC_BOB + PROFILE_PICTURE_DESC_BOB"},{"lineNumber":218,"author":{"gitID":"kush1509"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":219,"author":{"gitID":"kush1509"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":19,"kush1509":81,"-":121}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":3,"-":261}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_POSITION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_PICTURE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"    public static final String VALID_CURRENT_POSITION_AMY \u003d \"Software Engineer\";"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"    public static final String VALID_CURRENT_POSITION_BOB \u003d \"Marketing Intern\";"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"    public static final String VALID_COMPANY_AMY \u003d \"Amy Technologies\";"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"    public static final String VALID_COMPANY_BOB \u003d \"Bob Consultants\";"},{"lineNumber":50,"author":{"gitID":"trafalgarandre"},"content":"    public static final String VALID_PROFILE_PICTURE_AMY \u003d \"./src/test/data/images/amy.jpeg\";"},{"lineNumber":51,"author":{"gitID":"trafalgarandre"},"content":"    public static final String VALID_PROFILE_PICTURE_BOB \u003d \"./src/test/data/images/bob.jpeg\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VALID_USERNAME_USER \u003d \"John\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VALID_PASSWORD_USER \u003d \"1234\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":"    public static final String CURRENT_POSITION_DESC_AMY \u003d \" \" + PREFIX_CURRENT_POSITION + VALID_CURRENT_POSITION_AMY;"},{"lineNumber":67,"author":{"gitID":"kush1509"},"content":"    public static final String CURRENT_POSITION_DESC_BOB \u003d \" \" + PREFIX_CURRENT_POSITION + VALID_CURRENT_POSITION_BOB;"},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"    public static final String COMPANY_DESC_AMY \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMY;"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"    public static final String COMPANY_DESC_BOB \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_BOB;"},{"lineNumber":70,"author":{"gitID":"trafalgarandre"},"content":"    public static final String PROFILE_PICTURE_DESC_AMY \u003d \" \" + PREFIX_PROFILE_PICTURE + VALID_PROFILE_PICTURE_AMY;"},{"lineNumber":71,"author":{"gitID":"trafalgarandre"},"content":"    public static final String PROFILE_PICTURE_DESC_BOB \u003d \" \" + PREFIX_PROFILE_PICTURE + VALID_PROFILE_PICTURE_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String USERNAME_DESC_USER \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_USER;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String PASSWORD_DESC_USER \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD_USER;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"    public static final String INVALID_CURRENT_POSITION_DESC \u003d"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"            \" \" + PREFIX_CURRENT_POSITION; // empty string not allowed for current position"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":"    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY + \"G@ogle\"; // \u0027@\u0027 not allowed in companies"},{"lineNumber":84,"author":{"gitID":"trafalgarandre"},"content":"    public static final String INVALID_PROFILE_PICTURE_DESC \u003d \" \" + PREFIX_PROFILE_PICTURE + \"Emy.jpx\";"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":86,"author":{"gitID":"trafalgarandre"},"content":"    // .jpx not allowed in profile picture"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":98,"author":{"gitID":"kush1509"},"content":"                .withCurrentPosition(VALID_CURRENT_POSITION_AMY).withCompany(VALID_COMPANY_AMY)"},{"lineNumber":99,"author":{"gitID":"trafalgarandre"},"content":"                .withProfilePicture(VALID_PROFILE_PICTURE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":102,"author":{"gitID":"kush1509"},"content":"                .withCurrentPosition(VALID_CURRENT_POSITION_BOB).withCompany(VALID_COMPANY_BOB)"},{"lineNumber":103,"author":{"gitID":"trafalgarandre"},"content":"                .withProfilePicture(VALID_PROFILE_PICTURE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":9,"kush1509":17,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":58}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":98}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":141}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AccountsManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"kush1509"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"kush1509"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"trafalgarandre"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"trafalgarandre"},"content":"        public void deleteTag(Tag t)"},{"lineNumber":139,"author":{"gitID":"trafalgarandre"},"content":"                throws PersonNotFoundException, DuplicatePersonException, UniqueTagList.DuplicateTagException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"kush1509"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"kush1509"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public AccountsManager getAccountsManager() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public void register(String username, String password) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":171,"author":{"gitID":"kush1509"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"kush1509"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":3,"kush1509":15,"-":193}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"trafalgarandre"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":50,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"trafalgarandre"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"trafalgarandre"},"content":"    public void createProfilesPictureFolder() {"},{"lineNumber":60,"author":{"gitID":"trafalgarandre"},"content":"        assertTrue(new File(\"./src/main/resources/ProfilePictures\").exists());"},{"lineNumber":61,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":6,"-":101}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    private static final String INVALID_CURRENT_POSITION \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"    private static final String INVALID_COMPANY \u003d \"G@@gle\";"},{"lineNumber":30,"author":{"gitID":"trafalgarandre"},"content":"    private static final String INVALID_PROFILE_PICTURE \u003d \"Rachel.jpx\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":32,"author":{"gitID":"trafalgarandre"},"content":"    private static final String NON_EXIST_PROFILE_PICTURE \u003d \"src/test/data/images/Rachel.jpeg\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    private static final String VALID_CURRENT_POSITION \u003d BENSON.getCurrentPosition().toString();"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"    private static final String VALID_COMPANY \u003d BENSON.getCompany().toString();"},{"lineNumber":40,"author":{"gitID":"trafalgarandre"},"content":"    private static final String VALID_PROFILE_PICTURE \u003d BENSON.getProfilePicture().toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":90,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":99,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":100,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":108,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":109,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":117,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_CURRENT_POSITION,"},{"lineNumber":118,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"kush1509"},"content":"    public void toModelType_invalidCurrentPosition_throwsIllegalValueException() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":126,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_CURRENT_POSITION,"},{"lineNumber":127,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":128,"author":{"gitID":"kush1509"},"content":"        String expectedMessage \u003d CurrentPosition.MESSAGE_CURRENT_POSITION_CONSTRAINTS;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"trafalgarandre"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"    public void toModelType_nullCurrentPosition_throwsIllegalValueException() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":135,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"},{"lineNumber":136,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":137,"author":{"gitID":"kush1509"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CurrentPosition.class.getSimpleName());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"kush1509"},"content":"    public void toModelType_invalidCompany_throwsIllegalValueException() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":144,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":145,"author":{"gitID":"kush1509"},"content":"                        INVALID_COMPANY, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":146,"author":{"gitID":"kush1509"},"content":"        String expectedMessage \u003d Company.MESSAGE_COMPANY_CONSTRAINTS;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"kush1509"},"content":"    public void toModelType_nullCompany_throwsIllegalValueException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":153,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":154,"author":{"gitID":"kush1509"},"content":"                        VALID_CURRENT_POSITION, null, VALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":155,"author":{"gitID":"kush1509"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"trafalgarandre"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"trafalgarandre"},"content":"    public void toModelType_invalidProfilePicture_throwsIllegalValueException() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":162,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":163,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, INVALID_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":164,"author":{"gitID":"trafalgarandre"},"content":"        String expectedMessage \u003d ProfilePicture.MESSAGE_PROFILEPICTURE_CONSTRAINTS;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"trafalgarandre"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"trafalgarandre"},"content":"    public void toModelType_nonExistProfilePicture_throwsIllegalValueException() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":171,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":172,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, NON_EXIST_PROFILE_PICTURE, VALID_TAGS);"},{"lineNumber":173,"author":{"gitID":"trafalgarandre"},"content":"        String expectedMessage \u003d ProfilePicture.MESSAGE_PROFILEPICTURE_NOT_EXISTS;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":182,"author":{"gitID":"kush1509"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_CURRENT_POSITION,"},{"lineNumber":183,"author":{"gitID":"kush1509"},"content":"                        VALID_COMPANY, VALID_PROFILE_PICTURE, invalidTags);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":11,"kush1509":45,"-":131}},{"path":"src/test/java/seedu/address/model/person/CompanyTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"public class CompanyTest {"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Company(null));"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    public void constructor_invalidCompany_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"        String invalidCompany \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Company(invalidCompany));"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    public void isValidCompany() {"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"        // null company"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Company.isValidCompany(null));"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"        // invalid company"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"        assertFalse(Company.isValidCompany(\"\")); // empty string"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        assertFalse(Company.isValidCompany(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        assertFalse(Company.isValidCompany(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        assertFalse(Company.isValidCompany(\"google*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"        // valid company"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        assertTrue(Company.isValidCompany(\"google\")); // alphabets only"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"        assertTrue(Company.isValidCompany(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"        assertTrue(Company.isValidCompany(\"facebook 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"        assertTrue(Company.isValidCompany(\"Capital Ventures\")); // with capital letters"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        assertTrue(Company.isValidCompany(\"Google Services Pvt Ltd\")); // long companys"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"    private void assertTrue(boolean google) {"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":43}},{"path":"src/test/java/seedu/address/logic/commands/LinkedInCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.LinkedInCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"public class LinkedInCommandTest {"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"        LinkedInCommand linkedInFirstCommand \u003d new LinkedInCommand(INDEX_FIRST_PERSON);"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"        LinkedInCommand linkedInSecondCommand \u003d new LinkedInCommand(INDEX_SECOND_PERSON);"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"        assertTrue(linkedInFirstCommand.equals(linkedInFirstCommand));"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":"        // same values -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"kush1509"},"content":"        LinkedInCommand linkedInFirstCommandCopy \u003d new LinkedInCommand(INDEX_FIRST_PERSON);"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":"        assertTrue(linkedInFirstCommand.equals(linkedInFirstCommandCopy));"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":87,"author":{"gitID":"kush1509"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"kush1509"},"content":"        assertFalse(linkedInFirstCommand.equals(1));"},{"lineNumber":89,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":90,"author":{"gitID":"kush1509"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"        assertFalse(linkedInFirstCommand.equals(null));"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":93,"author":{"gitID":"kush1509"},"content":"        // different person -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"kush1509"},"content":"        assertFalse(linkedInFirstCommand.equals(linkedInSecondCommand));"},{"lineNumber":95,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":97,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"kush1509"},"content":"     * Executes a {@code LinkedInCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":102,"author":{"gitID":"kush1509"},"content":"        LinkedInCommand linkedInCommand \u003d prepareCommand(index);"},{"lineNumber":103,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":104,"author":{"gitID":"kush1509"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"kush1509"},"content":"            CommandResult commandResult \u003d linkedInCommand.execute();"},{"lineNumber":106,"author":{"gitID":"kush1509"},"content":"            assertEquals(String.format(LinkedInCommand.MESSAGE_LINKEDIN_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"kush1509"},"content":"     * Executes a {@code LinkedInCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":121,"author":{"gitID":"kush1509"},"content":"        LinkedInCommand linkedInCommand \u003d prepareCommand(index);"},{"lineNumber":122,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":123,"author":{"gitID":"kush1509"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"kush1509"},"content":"            linkedInCommand.execute();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"     * Returns a {@code LinkedInCommand} with parameters {@code index}."},{"lineNumber":134,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"kush1509"},"content":"    private LinkedInCommand prepareCommand(Index index) {"},{"lineNumber":136,"author":{"gitID":"kush1509"},"content":"        LinkedInCommand linkedInCommand \u003d new LinkedInCommand(index);"},{"lineNumber":137,"author":{"gitID":"kush1509"},"content":"        linkedInCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":138,"author":{"gitID":"kush1509"},"content":"        return linkedInCommand;"},{"lineNumber":139,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":49,"-":91}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"trafalgarandre"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"trafalgarandre"},"content":"    public void removeTag_withValidAddressBook()"},{"lineNumber":66,"author":{"gitID":"trafalgarandre"},"content":"            throws DuplicatePersonException, PersonNotFoundException, UniqueTagList.DuplicateTagException {"},{"lineNumber":67,"author":{"gitID":"trafalgarandre"},"content":"        addressBook.addPerson(BENSON);"},{"lineNumber":68,"author":{"gitID":"trafalgarandre"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e();"},{"lineNumber":69,"author":{"gitID":"trafalgarandre"},"content":"        tagList.add(new Tag(\"owesMoney\"));"},{"lineNumber":70,"author":{"gitID":"trafalgarandre"},"content":"        addressBook.removeTag(new Tag(\"friends\"));"},{"lineNumber":71,"author":{"gitID":"trafalgarandre"},"content":"        assertEquals(addressBook.getTagList(), tagList);"},{"lineNumber":72,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":"        private final ObservableList\u003cJob\u003e jobs \u003d FXCollections.observableArrayList();"},{"lineNumber":93,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":109,"author":{"gitID":"kush1509"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"kush1509"},"content":"        public ObservableList\u003cJob\u003e getJobList() {"},{"lineNumber":111,"author":{"gitID":"kush1509"},"content":"            return jobs;"},{"lineNumber":112,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":13,"kush1509":8,"-":94}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        descriptor.setCurrentPosition(person.getCurrentPosition());"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"        descriptor.setCompany(person.getCompany());"},{"lineNumber":44,"author":{"gitID":"trafalgarandre"},"content":"        descriptor.setProfilePicture(person.getProfilePicture());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"     * Sets the {@code CurrentPosition} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":"    public EditPersonDescriptorBuilder withCurrentPosition(String currentPosition) {"},{"lineNumber":84,"author":{"gitID":"kush1509"},"content":"        descriptor.setCurrentPosition(new CurrentPosition(currentPosition));"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":88,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"kush1509"},"content":"     * Sets the {@code Company} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":90,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"    public EditPersonDescriptorBuilder withCompany(String company) {"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":"        descriptor.setCompany(new Company(company));"},{"lineNumber":93,"author":{"gitID":"kush1509"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":96,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"trafalgarandre"},"content":"     * Sets the {@code ProfilePicture} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":98,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"trafalgarandre"},"content":"    public EditPersonDescriptorBuilder withProfilePicture(String... profilePicture) {"},{"lineNumber":100,"author":{"gitID":"trafalgarandre"},"content":"        if (profilePicture.length \u003d\u003d 0) {"},{"lineNumber":101,"author":{"gitID":"trafalgarandre"},"content":"            descriptor.setProfilePicture(new ProfilePicture());"},{"lineNumber":102,"author":{"gitID":"trafalgarandre"},"content":"        } else {"},{"lineNumber":103,"author":{"gitID":"trafalgarandre"},"content":"            descriptor.setProfilePicture(new ProfilePicture(profilePicture[0]));"},{"lineNumber":104,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"trafalgarandre"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":14,"kush1509":21,"-":86}},{"path":"src/test/java/seedu/address/model/person/CurrentPositionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class CurrentPositionTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new CurrentPosition(null));"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"    public void constructor_invalidCurrentPosition_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"        String invalidCurrentPosition \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CurrentPosition(invalidCurrentPosition));"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    public void isValidCurrentPosition() {"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"        // null current position"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e CurrentPosition.isValidCurrentPosition(null));"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"        // invalid current position"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        assertFalse(CurrentPosition.isValidCurrentPosition(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        assertFalse(CurrentPosition.isValidCurrentPosition(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        assertFalse(CurrentPosition.isValidCurrentPosition(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"        assertFalse(CurrentPosition.isValidCurrentPosition(\"engineer*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        // valid current position"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"        assertTrue(CurrentPosition.isValidCurrentPosition(\"engineer\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"        assertTrue(CurrentPosition.isValidCurrentPosition(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"        assertTrue(CurrentPosition.isValidCurrentPosition(\"2nd year student\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        assertTrue(CurrentPosition.isValidCurrentPosition(\"Marketing Intern\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        assertTrue(CurrentPosition.isValidCurrentPosition(\"First year undergraduate student\")); // long position"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":31,"-":10}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_POSITION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_PICTURE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"        sb.append(PREFIX_CURRENT_POSITION + person.getCurrentPosition().value + \" \");"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"        sb.append(PREFIX_COMPANY + person.getCompany().value + \" \");"},{"lineNumber":38,"author":{"gitID":"trafalgarandre"},"content":"        sb.append(PREFIX_PROFILE_PICTURE + person.getProfilePicture().filePath + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":40,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":5,"-":37}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"    public static final String DEFAULT_CURRENT_POSITION \u003d \"Software Engineer\";"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    public static final String DEFAULT_COMPANY \u003d \"Google\";"},{"lineNumber":28,"author":{"gitID":"trafalgarandre"},"content":"    public static final String DEFAULT_PROFILE_PICTURE \u003d"},{"lineNumber":29,"author":{"gitID":"trafalgarandre"},"content":"            \"./src/test/data/images/alice.jpeg\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":36,"author":{"gitID":"trafalgarandre"},"content":"    private ProfilePicture profilePicture;"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    private CurrentPosition currentPosition;"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    private Company company;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"        currentPosition \u003d new CurrentPosition(DEFAULT_CURRENT_POSITION);"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"        company \u003d new Company(DEFAULT_COMPANY);"},{"lineNumber":48,"author":{"gitID":"trafalgarandre"},"content":"        profilePicture \u003d new ProfilePicture(DEFAULT_PROFILE_PICTURE);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"        currentPosition \u003d personToCopy.getCurrentPosition();"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"        company \u003d personToCopy.getCompany();"},{"lineNumber":62,"author":{"gitID":"trafalgarandre"},"content":"        profilePicture \u003d personToCopy.getProfilePicture();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"kush1509"},"content":"     * Sets the {@code CurrentPosition} of the {@code Person} that we are building."},{"lineNumber":108,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"kush1509"},"content":"    public PersonBuilder withCurrentPosition(String currentPosition) {"},{"lineNumber":110,"author":{"gitID":"kush1509"},"content":"        this.currentPosition \u003d new CurrentPosition(currentPosition);"},{"lineNumber":111,"author":{"gitID":"kush1509"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":114,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"kush1509"},"content":"     * Sets the {@code Company} of the {@code Person} that we are building."},{"lineNumber":116,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"kush1509"},"content":"    public PersonBuilder withCompany(String company) {"},{"lineNumber":118,"author":{"gitID":"kush1509"},"content":"        this.company \u003d new Company(company);"},{"lineNumber":119,"author":{"gitID":"kush1509"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":122,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"trafalgarandre"},"content":"     * Sets the {@code ProfilePicture} of the {@code Person} that we are building."},{"lineNumber":124,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"trafalgarandre"},"content":"    public PersonBuilder withProfilePicture(String... profilePicture) {"},{"lineNumber":126,"author":{"gitID":"trafalgarandre"},"content":"        if (profilePicture.length \u003d\u003d 0) {"},{"lineNumber":127,"author":{"gitID":"trafalgarandre"},"content":"            this.profilePicture \u003d new ProfilePicture();"},{"lineNumber":128,"author":{"gitID":"trafalgarandre"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"trafalgarandre"},"content":"            this.profilePicture \u003d new ProfilePicture(profilePicture[0]);"},{"lineNumber":130,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"trafalgarandre"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":135,"author":{"gitID":"kush1509"},"content":"        return new Person(name, phone, email, address, currentPosition, company, profilePicture, tags);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":18,"kush1509":27,"-":93}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_AMY;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENT_POSITION_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_AMY;"},{"lineNumber":16,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_PICTURE_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"            .withPhone(\"85355255\").withCurrentPosition(\"Computer Science Student\")"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"NUS\").withProfilePicture(\"./src/test/data/images/alice.jpeg\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withCurrentPosition(\"Software Engineer\")"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"Google\").withProfilePicture(\"./src/test/data/images/benson.jpeg\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCurrentPosition(\"Marketing Intern\")"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"Facebook\").withProfilePicture(\"./src/test/data/images/carl.jpeg\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withCurrentPosition(\"Economics Student\")"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"NTU\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withCurrentPosition(\"HR Associate\")"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"ABC Consultants\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withCurrentPosition(\"Analyst\")"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"DBS Bank\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withCurrentPosition(\"Computer Science Student\")"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"NTU\").withProfilePicture(\"./src/test/data/images/george.jpeg\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCurrentPosition(\"Tech Analyst\")"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"Bank of America\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withCurrentPosition(\"Software Developer\")"},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":"            .withCompany(\"Apple\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withCurrentPosition(VALID_CURRENT_POSITION_AMY)"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"            .withCompany(VALID_COMPANY_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"            .build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withCurrentPosition(VALID_CURRENT_POSITION_BOB)"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"            .withCompany(VALID_COMPANY_BOB).withProfilePicture(VALID_PROFILE_PICTURE_BOB)"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":28,"-":69}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"     * Enters the given command in the Command Box, not pressing enter"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"    public void enterCommand(String command) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":6,"-":48}},{"path":"src/test/java/guitests/guihandles/DetailsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":" * A handle to the {@code DetailsPanelHandle} in the GUI."},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"public class DetailsPanelHandle extends NodeHandle\u003cTabPane\u003e {"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"    public DetailsPanelHandle(TabPane detailsPanel) {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"        super(detailsPanel);"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"    public int getCurrentTab() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":16,"-":1}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.CommandList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":40,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"        case TAB:"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"            keyEvent.consume();"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"            autoCompleteCommand(commandTextField.getText());"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"            break;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"     * Auto-completes the partial command {@code text} entered with the first command matched"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"     * in the lexicographically sorted command list"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"    private void autoCompleteCommand(String text) {"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"        CommandList commandListObj \u003d new CommandList();"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"        List\u003cString\u003e matchedCommands \u003d commandListObj.commandList.stream().filter(u -\u003e u.startsWith(text))"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"                .collect(Collectors.toList());"},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"        if (matchedCommands.size() \u003e 0) {"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"            String textToDisplay \u003d commandListObj.getSyntax(matchedCommands.get(0));"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":84,"author":{"gitID":"kush1509"},"content":"            replaceText(textToDisplay);"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":"            commandTextField.positionCaret(matchedCommands.get(0).length() + 1);"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":154,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":26,"-":151}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    public static final String DEFAULT_PAGE_URL \u003d \"https://www.linkedin.com/\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"            \"https://www.linkedin.com/search/results/index/?keywords\u003d\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    private static final String CHROME_41_USER_AGENT \u003d"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"            \"Mozilla/5.0 (Linux; \u003cAndroid Version\u003e; \u003cBuild Tag etc.\u003e) AppleWebKit/\u003cWebKit Rev\u003e (KHTML, like Gecko) \""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"            + \"Chrome/\u003cChrome Rev\u003e Mobile Safari/\u003cWebKit Rev\u003e\\n\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"     * Loads the page with url {@code url}."},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"        browser.getEngine().setUserAgent("},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"                CHROME_41_USER_AGENT"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"        );"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"        loadPage(DEFAULT_PAGE_URL);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":14,"-":63}},{"path":"src/test/java/guitests/guihandles/ContactDetailsDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * A handle to the {@code ContactDetailsDisplay} in the GUI."},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class ContactDetailsDisplayHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"    private static final String LIST_ID \u003d \"#values\";"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"    //TODO: include Tags"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    private final Label nameLabel;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    private final ListView\u003cLabel\u003e valuesList;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public ContactDetailsDisplayHandle(Node contactDetailsDisplayNode) {"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"        super(contactDetailsDisplayNode);"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"        this.valuesList \u003d getChildNode(LIST_ID);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    public String getFullName() {"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        return valuesList.getItems().get(0).getText();"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    public String getPhone() {"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"        return valuesList.getItems().get(1).getText();"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    public String getEmail() {"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        return valuesList.getItems().get(2).getText();"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"    public String getAddress() {"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"        return valuesList.getItems().get(3).getText();"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":37,"-":8}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    private DetailsPanel detailsPanel;"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"    private JobListPanel jobListPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"    private StackPane detailsPlaceholder;"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"    private StackPane jobListPanelPlaceholder;"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":103,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":109,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":126,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":127,"author":{"gitID":"kush1509"},"content":"        detailsPanel \u003d new DetailsPanel();"},{"lineNumber":128,"author":{"gitID":"kush1509"},"content":"        detailsPanel.addBrowserPanel();"},{"lineNumber":129,"author":{"gitID":"kush1509"},"content":"        detailsPanel.addContactDetailsDisplayPanel();"},{"lineNumber":130,"author":{"gitID":"trafalgarandre"},"content":"        detailsPanel.addCalendarPanel();"},{"lineNumber":131,"author":{"gitID":"kush1509"},"content":"        detailsPlaceholder.getChildren().add(detailsPanel.getRoot());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"kush1509"},"content":"        jobListPanel \u003d new JobListPanel(logic.getFilteredJobList());"},{"lineNumber":140,"author":{"gitID":"kush1509"},"content":"        jobListPanelPlaceholder.getChildren().add(jobListPanel.getRoot());"},{"lineNumber":141,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":203,"author":{"gitID":"kush1509"},"content":"        detailsPanel.releaseResources();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":1,"kush1509":17,"-":193}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"trafalgarandre"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":3,"author":{"gitID":"trafalgarandre"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"trafalgarandre"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitID":"trafalgarandre"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":7,"author":{"gitID":"trafalgarandre"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":8,"author":{"gitID":"trafalgarandre"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":9,"author":{"gitID":"trafalgarandre"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":16,"author":{"gitID":"trafalgarandre"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"trafalgarandre"},"content":" * The CalendarPanel of the App"},{"lineNumber":18,"author":{"gitID":"trafalgarandre"},"content":" */"},{"lineNumber":19,"author":{"gitID":"trafalgarandre"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":21,"author":{"gitID":"trafalgarandre"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":23,"author":{"gitID":"trafalgarandre"},"content":"    private CalendarSource source;"},{"lineNumber":24,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":25,"author":{"gitID":"trafalgarandre"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"trafalgarandre"},"content":"    private CalendarView calendarView;"},{"lineNumber":27,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":28,"author":{"gitID":"trafalgarandre"},"content":"    public CalendarPanel() {"},{"lineNumber":29,"author":{"gitID":"trafalgarandre"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"trafalgarandre"},"content":"        setCalendarSource();"},{"lineNumber":31,"author":{"gitID":"trafalgarandre"},"content":"        addCalendars(new Calendar(\"Birthdays\"));"},{"lineNumber":32,"author":{"gitID":"trafalgarandre"},"content":"        startTimeThread();"},{"lineNumber":33,"author":{"gitID":"trafalgarandre"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":36,"author":{"gitID":"trafalgarandre"},"content":"    public void setUpCalendarView() {"},{"lineNumber":37,"author":{"gitID":"trafalgarandre"},"content":"        calendarView.getCalendarSources().addAll(source);"},{"lineNumber":38,"author":{"gitID":"trafalgarandre"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":39,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":41,"author":{"gitID":"trafalgarandre"},"content":"    public void setCalendarSource() {"},{"lineNumber":42,"author":{"gitID":"trafalgarandre"},"content":"        source \u003d new CalendarSource(\"My Calendars\");"},{"lineNumber":43,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":45,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"trafalgarandre"},"content":"     * Add calendar to calendarSource"},{"lineNumber":47,"author":{"gitID":"trafalgarandre"},"content":"     * @param calendar"},{"lineNumber":48,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"trafalgarandre"},"content":"    public void addCalendars(Calendar... calendar) {"},{"lineNumber":50,"author":{"gitID":"trafalgarandre"},"content":"        calendar[0].setStyle(Calendar.Style.STYLE1);"},{"lineNumber":51,"author":{"gitID":"trafalgarandre"},"content":"        source.getCalendars().addAll(calendar);"},{"lineNumber":52,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":54,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"trafalgarandre"},"content":"     * Set update Time for Time Thread"},{"lineNumber":56,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"trafalgarandre"},"content":"    private void startTimeThread() {"},{"lineNumber":58,"author":{"gitID":"trafalgarandre"},"content":"        Thread updateTimeThread \u003d new Thread(\"Calendar: Update Time Thread\") {"},{"lineNumber":59,"author":{"gitID":"trafalgarandre"},"content":"            @Override"},{"lineNumber":60,"author":{"gitID":"trafalgarandre"},"content":"            public void run() {"},{"lineNumber":61,"author":{"gitID":"trafalgarandre"},"content":"                while (true) {"},{"lineNumber":62,"author":{"gitID":"trafalgarandre"},"content":"                    Platform.runLater(() -\u003e {"},{"lineNumber":63,"author":{"gitID":"trafalgarandre"},"content":"                        calendarView.setToday(LocalDate.now());"},{"lineNumber":64,"author":{"gitID":"trafalgarandre"},"content":"                        calendarView.setTime(LocalTime.now());"},{"lineNumber":65,"author":{"gitID":"trafalgarandre"},"content":"                    });"},{"lineNumber":66,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":67,"author":{"gitID":"trafalgarandre"},"content":"                    try {"},{"lineNumber":68,"author":{"gitID":"trafalgarandre"},"content":"                        // update every 10 seconds"},{"lineNumber":69,"author":{"gitID":"trafalgarandre"},"content":"                        sleep(10000);"},{"lineNumber":70,"author":{"gitID":"trafalgarandre"},"content":"                    } catch (InterruptedException e) {"},{"lineNumber":71,"author":{"gitID":"trafalgarandre"},"content":"                        e.printStackTrace();"},{"lineNumber":72,"author":{"gitID":"trafalgarandre"},"content":"                    }"},{"lineNumber":73,"author":{"gitID":"trafalgarandre"},"content":"                }"},{"lineNumber":74,"author":{"gitID":"trafalgarandre"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"trafalgarandre"},"content":"        };"},{"lineNumber":76,"author":{"gitID":"trafalgarandre"},"content":"        updateTimeThread.setPriority(Thread.MIN_PRIORITY);"},{"lineNumber":77,"author":{"gitID":"trafalgarandre"},"content":"        updateTimeThread.setDaemon(true);"},{"lineNumber":78,"author":{"gitID":"trafalgarandre"},"content":"        updateTimeThread.start();"},{"lineNumber":79,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":81,"author":{"gitID":"trafalgarandre"},"content":"}"}],"authorContributionMap":{"trafalgarandre":75,"-":6}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"trafalgarandre"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        { \"teal\", \"red\", \"green\", \"blue\", \"orange\", \"brown\","},{"lineNumber":20,"author":{"gitID":"-"},"content":"            \"yellow\", \"pink\", \"lightgreen\", \"grey\", \"purple\" };"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":46,"author":{"gitID":"trafalgarandre"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"trafalgarandre"},"content":"    private ImageView imageView;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":57,"author":{"gitID":"trafalgarandre"},"content":"        imageView.setImage(person.getProfilePicture().getImage());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void initTags(Person person) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":5,"-":93}},{"path":"src/main/java/seedu/address/ui/DetailsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.commons.events.ui.SwitchTabRequestEvent;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":" * The Details Panel of the App,"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":" * contains the contact details panel and the browser panel."},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"public class DetailsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"    private static final String FXML \u003d \"DetailsPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    private ContactDetailsDisplay contactDetailsDisplay;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":24,"author":{"gitID":"trafalgarandre"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ContactDetailsDisplay.class);"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":28,"author":{"gitID":"trafalgarandre"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"trafalgarandre"},"content":"    private Tab calendar;"},{"lineNumber":30,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    private Tab profile;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"    private Tab linkedIn;"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    private TabPane tabPane;"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    public DetailsPanel() {"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"    @Subscribe"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"    private void handleSwitchTabRequestEvent(SwitchTabRequestEvent event) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"        tabPane.getSelectionModel().clearAndSelect(event.tabId);"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"    public void releaseResources() {"},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"        browserPanel.freeResources();"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"     * Adds the BrowserView to the DetailsPanel"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"    public void addBrowserPanel() {"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"        linkedIn.setContent(browserPanel.getRoot());"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":63,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"trafalgarandre"},"content":"     * Adds the CalendarView to the DetailsPanel"},{"lineNumber":65,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"trafalgarandre"},"content":"    public void addCalendarPanel() {"},{"lineNumber":67,"author":{"gitID":"trafalgarandre"},"content":"        CalendarPanel calendarPanel \u003d new CalendarPanel();"},{"lineNumber":68,"author":{"gitID":"trafalgarandre"},"content":"        calendar.setContent(calendarPanel.getRoot());"},{"lineNumber":69,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"     * Adds the ContactDetailsPanel to the DetailsPanel"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"    public void addContactDetailsDisplayPanel() {"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"        contactDetailsDisplay \u003d new ContactDetailsDisplay();"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"        profile.setContent(contactDetailsDisplay.getRoot());"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":12,"kush1509":61,"-":5}},{"path":"src/main/java/seedu/address/ui/ContactDetailsDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":" * Shows the contact details of the person in a separate and formatted page"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"public class ContactDetailsDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    private static final String FXML \u003d \"ContactDetailsDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ContactDetailsDisplay.class);"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"    private Label name;"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    private ListView\u003cLabel\u003e keys;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"    private ListView\u003cLabel\u003e values;"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    private ImageView imageView;"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    public ContactDetailsDisplay() {"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"     *Shows the contact details of the person"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"    private void showPersonDetails(Person person) {"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"        name.setWrapText(true);"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":52,"author":{"gitID":"trafalgarandre"},"content":"        imageView.setImage(person.getProfilePicture().getImage());"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"        List\u003cLabel\u003e keysList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"        List\u003cLabel\u003e valuesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"        addPropertyToList(\"Full Name\", person.getName().fullName, keysList, valuesList);"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"        addPropertyToList(\"Phone\", person.getPhone().value, keysList, valuesList);"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"        addPropertyToList(\"Email\", person.getEmail().value, keysList, valuesList);"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"        addPropertyToList(\"Address\", person.getAddress().value, keysList, valuesList);"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"        keys.setItems(FXCollections.observableList(keysList));"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"        values.setItems(FXCollections.observableList(valuesList));"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"        System.out.println(values);"},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":67,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"     * Adds the label for key and value to the respective list"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"    private void addPropertyToList(String key, String value, List\u003cLabel\u003e keysList, List\u003cLabel\u003e valuesList) {"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"        Label keyLabel \u003d new Label(key + \":\");"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"        Label valueLabel \u003d new Label(value);"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"        keyLabel.getStyleClass().add(\"details-key\");"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"        valueLabel.getStyleClass().add(\"details-value\");"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"        keyLabel.setWrapText(true);"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"        valueLabel.setWrapText(true);"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"        keysList.add(keyLabel);"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"        valuesList.add(valueLabel);"},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":"        showPersonDetails(event.getNewSelection().person);"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":1,"kush1509":73,"-":13}},{"path":"src/main/java/seedu/address/commons/events/ui/SwitchTabRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":" * An event requesting to switch the tab of the details page."},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"public class SwitchTabRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"    public final int tabId;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public SwitchTabRequestEvent(int tabId) {"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"        this.tabId \u003d tabId;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":13,"-":7}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"                + \", number of jobs\" + data.getJobList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":18}},{"path":"src/main/java/seedu/address/logic/CommandHistory.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Stores the history of commands executed."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandHistory {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private LinkedList\u003cString\u003e userInputHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public CommandHistory() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        userInputHistory \u003d new LinkedList\u003c\u003e();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Appends {@code userInput} to the list of user input entered."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void add(String userInput) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireNonNull(userInput);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        userInputHistory.add(userInput);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of {@code userInputHistory}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getHistory() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new LinkedList\u003c\u003e(userInputHistory);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *  Clears the history."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"    public void clearHistory() {"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"        userInputHistory.clear();"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":3,"-":36}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":3,"-":28}},{"path":"src/main/java/seedu/address/commons/events/ui/JobPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import seedu.address.ui.JobCard;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" * Represents a selection change in the Job List Panel"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"public class JobPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"    private final JobCard newSelection;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"    public JobPanelSelectionChangedEvent(JobCard newSelection) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    public JobCard getNewSelection() {"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"        return newSelection;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":16,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/person/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_POSITION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_PICTURE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"trafalgarandre"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":32,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"                        PREFIX_CURRENT_POSITION, PREFIX_COMPANY, PREFIX_PROFILE_PICTURE, PREFIX_TAG);"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"                PREFIX_CURRENT_POSITION, PREFIX_COMPANY) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"            CurrentPosition currentPosition \u003d ParserUtil.parseCurrentPosition("},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"                    argMultimap.getValue(PREFIX_CURRENT_POSITION)).get();"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"            Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY)).get();"},{"lineNumber":61,"author":{"gitID":"trafalgarandre"},"content":"            Optional\u003cProfilePicture\u003e optionalProfilePicture \u003d"},{"lineNumber":62,"author":{"gitID":"trafalgarandre"},"content":"                    ParserUtil.parseProfilePicture(argMultimap.getValue(PREFIX_PROFILE_PICTURE));"},{"lineNumber":63,"author":{"gitID":"trafalgarandre"},"content":"            ProfilePicture profilePicture \u003d new ProfilePicture();"},{"lineNumber":64,"author":{"gitID":"trafalgarandre"},"content":"            if (optionalProfilePicture.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"trafalgarandre"},"content":"                profilePicture \u003d optionalProfilePicture.get();"},{"lineNumber":66,"author":{"gitID":"trafalgarandre"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"            Person person \u003d new Person(name, phone, email, address, currentPosition, company, profilePicture, tagList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":9,"kush1509":19,"-":57}},{"path":"src/main/java/seedu/address/ui/JobCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"public class JobCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    private static final String FXML \u003d \"JobListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    public final Job job;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    private Label position;"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    private Label team;"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"    private Label jobLocation;"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    private Label numberOfPositions;"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    public JobCard(Job job, int displayedIndex) {"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        this.job \u003d job;"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"        position.setText(job.getPosition().value);"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"        team.setText(job.getTeam().value);"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"        jobLocation.setText(job.getLocation().value);"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"        numberOfPositions.setText(\"Positions: \" + job.getNumberOfPositions().value);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"        if (!(other instanceof JobCard)) {"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"        // state check"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"        JobCard card \u003d (JobCard) other;"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 job.equals(card.job);"},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":1,"kush1509":37,"-":29}},{"path":"src/main/java/seedu/address/logic/parser/person/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            return new DeleteCommand(index);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":4,"-":28}},{"path":"src/main/java/seedu/address/logic/parser/person/SelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            return new SelectCommand(index);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":4,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/person/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                || arePrefixesPresent(argMultimap, PREFIX_TAG))"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || (arePrefixesPresent(argMultimap, PREFIX_NAME) \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_TAG))"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            List\u003cString\u003e testnovalue \u003d argMultimap.getAllValues(PREFIX_NAME);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            if (testnovalue.contains(\"\")) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            String[] nameKeywords \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\W+\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } else if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            List\u003cString\u003e testnovalue \u003d argMultimap.getAllValues(PREFIX_TAG);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            if (testnovalue.contains(\"\")) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            String[] tagKeywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\W+\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty values in the given"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":6,"-":64}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.logic.commands.CalendarCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearHistoryCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SignupCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.job.JobAddCommand;"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ClearCommand;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.LinkedInCommand;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ListCommand;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.job.JobAddCommandParser;"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.AddCommandParser;"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.DeleteCommandParser;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.EditCommandParser;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.FindCommandParser;"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.LinkedInCommandParser;"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.person.SelectCommandParser;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ClearHistoryCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new ClearHistoryCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"kush1509"},"content":"        case LinkedInCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"kush1509"},"content":"            return new LinkedInCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case EmailCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new EmailCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case SignupCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new SignupCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"trafalgarandre"},"content":"        case CalendarCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"trafalgarandre"},"content":"            return new CalendarCommand();"},{"lineNumber":115,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":116,"author":{"gitID":"kush1509"},"content":"        case JobAddCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"kush1509"},"content":"            return new JobAddCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":4,"kush1509":21,"-":99}},{"path":"src/main/java/seedu/address/ui/JobListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.commons.events.ui.JobPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":" * Panel containing the list of jobs."},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"public class JobListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    private static final String FXML \u003d \"JobListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(JobListPanel.class);"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    private ListView\u003cJobCard\u003e jobListView;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    public JobListPanel(ObservableList\u003cJob\u003e jobList) {"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"        setConnections(jobList);"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"    private void setConnections(ObservableList\u003cJob\u003e jobList) {"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"        ObservableList\u003cJobCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"                jobList, (job) -\u003e new JobCard(job, jobList.indexOf(job) + 1));"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        jobListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"        jobListView.setCellFactory(listView -\u003e new JobListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"        jobListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"                        logger.fine(\"Selection in job list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"                        raise(new JobPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"     * Scrolls to the {@code JobCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"            jobListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"            jobListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code JobCard}."},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"    class JobListViewCell extends ListCell\u003cJobCard\u003e {"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"        protected void updateItem(JobCard job, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"            super.updateItem(job, empty);"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"            if (empty || job \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":"                setGraphic(job.getRoot());"},{"lineNumber":84,"author":{"gitID":"kush1509"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":52,"-":35}},{"path":"src/main/java/seedu/address/logic/parser/person/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_POSITION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_PICTURE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":43,"author":{"gitID":"trafalgarandre"},"content":"                ArgumentTokenizer.tokenize(args,"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"                        PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_CURRENT_POSITION,"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"                        PREFIX_COMPANY, PREFIX_PROFILE_PICTURE , PREFIX_TAG);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"            ParserUtil.parseCurrentPosition(argMultimap.getValue(PREFIX_CURRENT_POSITION))"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"                    .ifPresent(editPersonDescriptor::setCurrentPosition);"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"            ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY)).ifPresent(editPersonDescriptor::setCompany);"},{"lineNumber":64,"author":{"gitID":"trafalgarandre"},"content":"            ParserUtil.parseProfilePicture(argMultimap.getValue(PREFIX_PROFILE_PICTURE)).ifPresent("},{"lineNumber":65,"author":{"gitID":"trafalgarandre"},"content":"                    editPersonDescriptor::setProfilePicture);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":4,"kush1509":14,"-":75}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"    public static final Prefix PREFIX_CURRENT_POSITION \u003d new Prefix(\"cp/\");"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"cc/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitID":"trafalgarandre"},"content":"    public static final Prefix PREFIX_PROFILE_PICTURE \u003d new Prefix(\"pp/\");"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    public static final Prefix PREFIX_POSITION \u003d new Prefix(\"p/\");"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"    public static final Prefix PREFIX_TEAM \u003d new Prefix(\"t/\");"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"    public static final Prefix PREFIX_NUMBER_OF_POSITIONS \u003d new Prefix(\"n/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":1,"kush1509":6,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.NumberOfPositions;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Position;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Team;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_INVALID_NUMBER_OF_POSITIONS \u003d \"Number of Positions is not a \""},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"            + \"non-zero unsigned integer.\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code String currentPosition} into an {@code CurrentPosition}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":131,"author":{"gitID":"kush1509"},"content":"     * @throws IllegalValueException if the given {@code currentPosition} is invalid."},{"lineNumber":132,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"    public static CurrentPosition parseCurrentPosition(String currentPosition) throws IllegalValueException {"},{"lineNumber":134,"author":{"gitID":"kush1509"},"content":"        requireNonNull(currentPosition);"},{"lineNumber":135,"author":{"gitID":"kush1509"},"content":"        String trimmedCurrentPosition \u003d currentPosition.trim();"},{"lineNumber":136,"author":{"gitID":"kush1509"},"content":"        if (!CurrentPosition.isValidCurrentPosition(trimmedCurrentPosition)) {"},{"lineNumber":137,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(CurrentPosition.MESSAGE_CURRENT_POSITION_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"kush1509"},"content":"        return new CurrentPosition(trimmedCurrentPosition);"},{"lineNumber":140,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":142,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code Optional\u003cString\u003e company} into an {@code Optional\u003cCompany\u003e} if {@code company} is present."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"kush1509"},"content":"    public static Optional\u003cCurrentPosition\u003e parseCurrentPosition(Optional\u003cString\u003e currentPosition)"},{"lineNumber":147,"author":{"gitID":"trafalgarandre"},"content":"            throws IllegalValueException {"},{"lineNumber":148,"author":{"gitID":"kush1509"},"content":"        requireNonNull(currentPosition);"},{"lineNumber":149,"author":{"gitID":"kush1509"},"content":"        return currentPosition.isPresent() ? Optional.of(parseCurrentPosition(currentPosition.get()))"},{"lineNumber":150,"author":{"gitID":"kush1509"},"content":"                : Optional.empty();"},{"lineNumber":151,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":153,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code String company} into an {@code Company}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":157,"author":{"gitID":"kush1509"},"content":"     * @throws IllegalValueException if the given {@code company} is invalid."},{"lineNumber":158,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"kush1509"},"content":"    public static Company parseCompany(String company) throws IllegalValueException {"},{"lineNumber":160,"author":{"gitID":"kush1509"},"content":"        requireNonNull(company);"},{"lineNumber":161,"author":{"gitID":"kush1509"},"content":"        String trimmedCompany \u003d company.trim();"},{"lineNumber":162,"author":{"gitID":"kush1509"},"content":"        if (!Company.isValidCompany(trimmedCompany)) {"},{"lineNumber":163,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Company.MESSAGE_COMPANY_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"kush1509"},"content":"        return new Company(trimmedCompany);"},{"lineNumber":166,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":168,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code Optional\u003cString\u003e company} into an {@code Optional\u003cCompany\u003e} if {@code company} is present."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"kush1509"},"content":"    public static Optional\u003cCompany\u003e parseCompany(Optional\u003cString\u003e company) throws IllegalValueException {"},{"lineNumber":173,"author":{"gitID":"kush1509"},"content":"        requireNonNull(company);"},{"lineNumber":174,"author":{"gitID":"kush1509"},"content":"        return company.isPresent() ? Optional.of(parseCompany(company.get())) : Optional.empty();"},{"lineNumber":175,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"trafalgarandre"},"content":"     * Parses a {@code String profilePicture} into an {@code ProfilePicture}."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":205,"author":{"gitID":"trafalgarandre"},"content":"     * @throws IllegalValueException if the given {@code profilePicture} is invalid."},{"lineNumber":206,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"trafalgarandre"},"content":"    public static ProfilePicture parseProfilePicture(String profilePicture) throws IllegalValueException {"},{"lineNumber":208,"author":{"gitID":"trafalgarandre"},"content":"        requireNonNull(profilePicture);"},{"lineNumber":209,"author":{"gitID":"trafalgarandre"},"content":"        String trimmedProfilePicture \u003d profilePicture.trim();"},{"lineNumber":210,"author":{"gitID":"trafalgarandre"},"content":"        if (!ProfilePicture.isValidProfilePicture(trimmedProfilePicture)) {"},{"lineNumber":211,"author":{"gitID":"trafalgarandre"},"content":"            throw new IllegalValueException(ProfilePicture.MESSAGE_PROFILEPICTURE_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"trafalgarandre"},"content":"        return new ProfilePicture(trimmedProfilePicture);"},{"lineNumber":214,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":216,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"trafalgarandre"},"content":"     * Parses a {@code Optional\u003cString\u003e profilePicture} into an {@code Optional\u003cProfilePicture\u003e}"},{"lineNumber":218,"author":{"gitID":"trafalgarandre"},"content":"     * if {@code profilePicture} is present."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"trafalgarandre"},"content":"    public static Optional\u003cProfilePicture\u003e parseProfilePicture(Optional\u003cString\u003e profilePicture)"},{"lineNumber":222,"author":{"gitID":"trafalgarandre"},"content":"            throws IllegalValueException {"},{"lineNumber":223,"author":{"gitID":"trafalgarandre"},"content":"        return profilePicture.isPresent() ? Optional.of(parseProfilePicture(profilePicture.get())) : Optional.empty();"},{"lineNumber":224,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":253,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code String position} into a {@code Position}."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":257,"author":{"gitID":"kush1509"},"content":"     * @throws IllegalValueException if the given {@code position} is invalid."},{"lineNumber":258,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"kush1509"},"content":"    public static Position parsePosition(String position) throws IllegalValueException {"},{"lineNumber":260,"author":{"gitID":"kush1509"},"content":"        requireNonNull(position);"},{"lineNumber":261,"author":{"gitID":"kush1509"},"content":"        String trimmedPosition \u003d position.trim();"},{"lineNumber":262,"author":{"gitID":"kush1509"},"content":"        if (!Position.isValidPosition(trimmedPosition)) {"},{"lineNumber":263,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"kush1509"},"content":"        return new Position(trimmedPosition);"},{"lineNumber":266,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":268,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code Optional\u003cString\u003e position} into an {@code Optional\u003cPosition\u003e} if {@code position} is present."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"kush1509"},"content":"    public static Optional\u003cPosition\u003e parsePosition(Optional\u003cString\u003e position) throws IllegalValueException {"},{"lineNumber":273,"author":{"gitID":"kush1509"},"content":"        requireNonNull(position);"},{"lineNumber":274,"author":{"gitID":"kush1509"},"content":"        return position.isPresent() ? Optional.of(parsePosition(position.get())) : Optional.empty();"},{"lineNumber":275,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":277,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code String team} into a {@code Team}."},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":280,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":281,"author":{"gitID":"kush1509"},"content":"     * @throws IllegalValueException if the given {@code team} is invalid."},{"lineNumber":282,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"kush1509"},"content":"    public static Team parseTeam(String team) throws IllegalValueException {"},{"lineNumber":284,"author":{"gitID":"kush1509"},"content":"        requireNonNull(team);"},{"lineNumber":285,"author":{"gitID":"kush1509"},"content":"        String trimmedTeam \u003d team.trim();"},{"lineNumber":286,"author":{"gitID":"kush1509"},"content":"        if (!Team.isValidTeam(trimmedTeam)) {"},{"lineNumber":287,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Team.MESSAGE_TEAM_CONSTRAINTS);"},{"lineNumber":288,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"kush1509"},"content":"        return new Team(trimmedTeam);"},{"lineNumber":290,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":292,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code Optional\u003cString\u003e team} into an {@code Optional\u003cTeam\u003e} if {@code team} is present."},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"kush1509"},"content":"    public static Optional\u003cTeam\u003e parseTeam(Optional\u003cString\u003e team) throws IllegalValueException {"},{"lineNumber":297,"author":{"gitID":"kush1509"},"content":"        requireNonNull(team);"},{"lineNumber":298,"author":{"gitID":"kush1509"},"content":"        return team.isPresent() ? Optional.of(parseTeam(team.get())) : Optional.empty();"},{"lineNumber":299,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":301,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code String location} into a {@code Location}."},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":304,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":305,"author":{"gitID":"kush1509"},"content":"     * @throws IllegalValueException if the given {@code location} is invalid."},{"lineNumber":306,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"kush1509"},"content":"    public static Location parseLocation(String location) throws IllegalValueException {"},{"lineNumber":308,"author":{"gitID":"kush1509"},"content":"        requireNonNull(location);"},{"lineNumber":309,"author":{"gitID":"kush1509"},"content":"        String trimmedLocation \u003d location.trim();"},{"lineNumber":310,"author":{"gitID":"kush1509"},"content":"        if (!Location.isValidLocation(trimmedLocation)) {"},{"lineNumber":311,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":312,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"kush1509"},"content":"        return new Location(trimmedLocation);"},{"lineNumber":314,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":316,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code Optional\u003cString\u003e location} into an {@code Optional\u003cLocation\u003e} if {@code location} is present."},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":319,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"kush1509"},"content":"    public static Optional\u003cLocation\u003e parseLocation(Optional\u003cString\u003e location) throws IllegalValueException {"},{"lineNumber":321,"author":{"gitID":"kush1509"},"content":"        requireNonNull(location);"},{"lineNumber":322,"author":{"gitID":"kush1509"},"content":"        return location.isPresent() ? Optional.of(parseLocation(location.get())) : Optional.empty();"},{"lineNumber":323,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":325,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code String numberOfPositions} into a {@code numberOfPositions}."},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":328,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":329,"author":{"gitID":"kush1509"},"content":"     * @throws IllegalValueException if the given {@code numberOfPositions} is invalid."},{"lineNumber":330,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":331,"author":{"gitID":"kush1509"},"content":"    public static NumberOfPositions parseNumberOfPositions(String numberOfPositions) throws IllegalValueException {"},{"lineNumber":332,"author":{"gitID":"kush1509"},"content":"        requireNonNull(numberOfPositions);"},{"lineNumber":333,"author":{"gitID":"kush1509"},"content":"        String trimmedNumberOfPositions \u003d numberOfPositions.trim();"},{"lineNumber":334,"author":{"gitID":"kush1509"},"content":"        if (!NumberOfPositions.isValidNumberOfPositions(trimmedNumberOfPositions)) {"},{"lineNumber":335,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(NumberOfPositions.MESSAGE_NUMBER_OF_POSITIONS_CONSTRAINTS);"},{"lineNumber":336,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":337,"author":{"gitID":"kush1509"},"content":"        return new NumberOfPositions(trimmedNumberOfPositions);"},{"lineNumber":338,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":340,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"kush1509"},"content":"     * Parses a {@code Optional\u003cString\u003e numberOfPositions} into an {@code Optional\u003cString\u003e}"},{"lineNumber":342,"author":{"gitID":"kush1509"},"content":"     * if {@code numberOfPositions} is present."},{"lineNumber":343,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":344,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":345,"author":{"gitID":"kush1509"},"content":"    public static Optional\u003cNumberOfPositions\u003e parseNumberOfPositions(Optional\u003cString\u003e numberOfPositions)"},{"lineNumber":346,"author":{"gitID":"trafalgarandre"},"content":"            throws IllegalValueException {"},{"lineNumber":347,"author":{"gitID":"kush1509"},"content":"        requireNonNull(numberOfPositions);"},{"lineNumber":348,"author":{"gitID":"kush1509"},"content":"        return numberOfPositions.isPresent() ? Optional.of(parseNumberOfPositions(numberOfPositions.get()))"},{"lineNumber":349,"author":{"gitID":"kush1509"},"content":"                : Optional.empty();"},{"lineNumber":350,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":24,"kush1509":131,"-":196}},{"path":"src/main/java/seedu/address/logic/parser/person/LinkedInCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.LinkedInCommand;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":" * Parses input arguments and creates a new LinkedInCommand object"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"public class LinkedInCommandParser implements Parser\u003cLinkedInCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"     * Parses the given {@code String} of arguments in the context of the LinkedInCommand"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"     * and returns an LinkedInCommand object for execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    public LinkedInCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"            return new LinkedInCommand(index);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LinkedInCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":19,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/CommandList.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":5,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.logic.commands.CalendarCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearHistoryCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.job.JobAddCommand;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.AddCommand;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.EditCommand;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.FindCommand;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.LinkedInCommand;"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.ListCommand;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.person.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains the list of commands."},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"public class CommandList {"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    /* Prefix definitions */"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"    public final ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"    public CommandList() {"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"        //add all commands to the list lexicographically"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        commandList.add(AddCommand.COMMAND_WORD);"},{"lineNumber":35,"author":{"gitID":"trafalgarandre"},"content":"        commandList.add(CalendarCommand.COMMAND_WORD);"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"        commandList.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandList.add(ClearHistoryCommand.COMMAND_WORD);"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        commandList.add(DeleteCommand.COMMAND_WORD);"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        commandList.add(EditCommand.COMMAND_WORD);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        commandList.add(EmailCommand.COMMAND_WORD);"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"        commandList.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        commandList.add(JobAddCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"        commandList.add(FindCommand.COMMAND_WORD);"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"        commandList.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"        commandList.add(HistoryCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"        commandList.add(LinkedInCommand.COMMAND_WORD);"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"        commandList.add(ListCommand.COMMAND_WORD);"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"        commandList.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"        commandList.add(SelectCommand.COMMAND_WORD);"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"        commandList.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"     * Returns the added cli-syntax(if needed) {@code String} for the"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"     * auto-completed command {@code matchedCommandWord}"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"    public String getSyntax(String matchedCommandWord) {"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"        switch (matchedCommandWord) {"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"            return AddCommand.COMMAND_SYNTAX;"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":"            return EditCommand.COMMAND_SYNTAX;"},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return FindCommand.COMMAND_SYNTAX;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"        case JobAddCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"            return JobAddCommand.COMMAND_SYNTAX;"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"        default:"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"            return matchedCommandWord;"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":62,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/person/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"    public void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/person/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":2,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/job/JobAddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.parser.job;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_POSITIONS;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAM;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.commands.job.JobAddCommand;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.NumberOfPositions;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Position;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Team;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":" * Parses input arguments and creates a new JobAddCommand object"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"public class JobAddCommandParser implements Parser\u003cJobAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"     * Parses the given {@code String} of arguments in the context of the JobAddCommand"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"     * and returns an JobAddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"    public JobAddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"trafalgarandre"},"content":"                ArgumentTokenizer.tokenize(args,"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"                        PREFIX_POSITION, PREFIX_TEAM, PREFIX_LOCATION, PREFIX_NUMBER_OF_POSITIONS);"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_POSITION, PREFIX_TEAM, PREFIX_LOCATION, PREFIX_NUMBER_OF_POSITIONS)"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, JobAddCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"            Position position \u003d ParserUtil.parsePosition(argMultimap.getValue(PREFIX_POSITION)).get();"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"            Team team \u003d ParserUtil.parseTeam(argMultimap.getValue(PREFIX_TEAM)).get();"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION)).get();"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"            NumberOfPositions numberOfPositions \u003d"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"                    ParserUtil.parseNumberOfPositions(argMultimap.getValue(PREFIX_NUMBER_OF_POSITIONS)).get();"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"            Job job \u003d new Job(position, team, location, numberOfPositions);"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"            return new JobAddCommand(job);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":1,"kush1509":43,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/person/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/person/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_POSITION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_PICTURE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"            + PREFIX_NAME + \" \""},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"            + PREFIX_PHONE + \" \""},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"            + PREFIX_EMAIL + \" \""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"            + PREFIX_ADDRESS + \" \""},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"            + PREFIX_CURRENT_POSITION + \" \""},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"            + PREFIX_COMPANY + \" \""},{"lineNumber":33,"author":{"gitID":"trafalgarandre"},"content":"            + \"[\" + PREFIX_PROFILE_PICTURE + \"] \""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\";"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"            + PREFIX_CURRENT_POSITION + \"CURRENT_POSITION \""},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"            + PREFIX_COMPANY + \"COMPANY \""},{"lineNumber":44,"author":{"gitID":"trafalgarandre"},"content":"            + \"[\" + PREFIX_PROFILE_PICTURE + \"PROFILE PICTURE NAME] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"            + PREFIX_CURRENT_POSITION + \"Software Engineer \""},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"            + PREFIX_COMPANY + \"Google \""},{"lineNumber":53,"author":{"gitID":"trafalgarandre"},"content":"            + PREFIX_PROFILE_PICTURE + \"/home/trafalgarandre/downloads/john.jpeg \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":4,"kush1509":16,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/person/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keyword matching is not case sensitive."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \" + PREFIX_NAME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \" NAME or TAG \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"contains any of the specified keywords (case-insensitive) \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"and displays them as a list with index numbers.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: n/NAME_KEYWORDS [MORE_NAME_KEYWORDS] or t/TAG_KEYWORDS [MORE_TAG_KEYWORDS]\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/Alice Bob\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" t/accountant manager\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":46}},{"path":"src/main/java/seedu/address/logic/commands/person/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.commons.events.ui.SwitchTabRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    public static final int TAB_ID_SELECT \u003d 0;"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"        EventsCenter.getInstance().post(new SwitchTabRequestEvent(TAB_ID_SELECT));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":5,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/person/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_POSITION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"trafalgarandre"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_PICTURE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":34,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"            + \"[index]\" + \" \""},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_NAME + \"] \""},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_PHONE + \"] \""},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_EMAIL + \"] \""},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_ADDRESS + \"] \""},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_CURRENT_POSITION + \"] \""},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_COMPANY + \"] \""},{"lineNumber":54,"author":{"gitID":"trafalgarandre"},"content":"            + \"[\" + PREFIX_PROFILE_PICTURE + \"] \""},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\";"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_CURRENT_POSITION + \"CURRENT_POSITION] \""},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":"            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""},{"lineNumber":67,"author":{"gitID":"trafalgarandre"},"content":"            + \"[\" + PREFIX_PROFILE_PICTURE + \"PROFILE PICTURE NAME] \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":69,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":70,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"kush1509"},"content":"    public void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":131,"author":{"gitID":"kush1509"},"content":"        CurrentPosition updatedCurrentPosition \u003d editPersonDescriptor.getCurrentPosition()"},{"lineNumber":132,"author":{"gitID":"kush1509"},"content":"                .orElse(personToEdit.getCurrentPosition());"},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"        Company updatedCompany \u003d editPersonDescriptor.getCompany().orElse(personToEdit.getCompany());"},{"lineNumber":134,"author":{"gitID":"trafalgarandre"},"content":"        ProfilePicture updatedProfilePicture \u003d"},{"lineNumber":135,"author":{"gitID":"trafalgarandre"},"content":"                editPersonDescriptor.getProfilePicture().orElse(personToEdit.getProfilePicture());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"kush1509"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedCurrentPosition,"},{"lineNumber":139,"author":{"gitID":"kush1509"},"content":"                updatedCompany, updatedProfilePicture, updatedTags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":170,"author":{"gitID":"kush1509"},"content":"        private CurrentPosition currentPosition;"},{"lineNumber":171,"author":{"gitID":"kush1509"},"content":"        private Company company;"},{"lineNumber":172,"author":{"gitID":"trafalgarandre"},"content":"        private ProfilePicture profilePicture;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":179,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":180,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":186,"author":{"gitID":"kush1509"},"content":"            setCurrentPosition(toCopy.currentPosition);"},{"lineNumber":187,"author":{"gitID":"kush1509"},"content":"            setCompany(toCopy.company);"},{"lineNumber":188,"author":{"gitID":"trafalgarandre"},"content":"            setProfilePicture(toCopy.profilePicture);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":194,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":196,"author":{"gitID":"kush1509"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.currentPosition,"},{"lineNumber":197,"author":{"gitID":"kush1509"},"content":"                    this.company, this.profilePicture, this.tags);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"kush1509"},"content":"        public void setCurrentPosition(CurrentPosition currentPosition) {"},{"lineNumber":233,"author":{"gitID":"kush1509"},"content":"            this.currentPosition \u003d currentPosition;"},{"lineNumber":234,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":236,"author":{"gitID":"kush1509"},"content":"        public Optional\u003cCurrentPosition\u003e getCurrentPosition() {"},{"lineNumber":237,"author":{"gitID":"kush1509"},"content":"            return Optional.ofNullable(currentPosition);"},{"lineNumber":238,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":240,"author":{"gitID":"kush1509"},"content":"        public void setCompany(Company company) {"},{"lineNumber":241,"author":{"gitID":"kush1509"},"content":"            this.company \u003d company;"},{"lineNumber":242,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":244,"author":{"gitID":"kush1509"},"content":"        public Optional\u003cCompany\u003e getCompany() {"},{"lineNumber":245,"author":{"gitID":"kush1509"},"content":"            return Optional.ofNullable(company);"},{"lineNumber":246,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":248,"author":{"gitID":"trafalgarandre"},"content":"        public void setProfilePicture(ProfilePicture profilePicture) {"},{"lineNumber":249,"author":{"gitID":"trafalgarandre"},"content":"            this.profilePicture \u003d profilePicture;"},{"lineNumber":250,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":252,"author":{"gitID":"trafalgarandre"},"content":"        public Optional\u003cProfilePicture\u003e getProfilePicture() {"},{"lineNumber":253,"author":{"gitID":"trafalgarandre"},"content":"            return Optional.ofNullable(profilePicture);"},{"lineNumber":254,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":258,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":259,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":266,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":267,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":268,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":289,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":291,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":292,"author":{"gitID":"kush1509"},"content":"                    \u0026\u0026 getCurrentPosition().equals(e.getCurrentPosition())"},{"lineNumber":293,"author":{"gitID":"kush1509"},"content":"                    \u0026\u0026 getCompany().equals(e.getCompany())"},{"lineNumber":294,"author":{"gitID":"trafalgarandre"},"content":"                    \u0026\u0026 getProfilePicture().equals(e.getProfilePicture())"},{"lineNumber":295,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":17,"kush1509":47,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/person/LinkedInCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.commons.events.ui.SwitchTabRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":" * Shows the linkedIn search of a person identified using it\u0027s last displayed index"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":" * from the address book."},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"public class LinkedInCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"    public static final String COMMAND_WORD \u003d \"linkedIn\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"            + \": Shows the linkedIn search of the person identified by the index number used \""},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"            + \"in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    public static final int TAB_ID_LINKEDIN \u003d 1;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_LINKEDIN_PERSON_SUCCESS \u003d \"Showing LinkedIn search of: %1$s\";"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    public LinkedInCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"        EventsCenter.getInstance().post(new SwitchTabRequestEvent(TAB_ID_LINKEDIN));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"        return new CommandResult(String.format(MESSAGE_LINKEDIN_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"                || (other instanceof LinkedInCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.targetIndex.equals(((LinkedInCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":24,"-":35}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"        return model.getFilteredJobList();"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":6,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/CalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import seedu.address.commons.events.ui.SwitchTabRequestEvent;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":6,"author":{"gitID":"trafalgarandre"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"trafalgarandre"},"content":" * Open calendar."},{"lineNumber":8,"author":{"gitID":"trafalgarandre"},"content":" */"},{"lineNumber":9,"author":{"gitID":"trafalgarandre"},"content":"public class CalendarCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"trafalgarandre"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":11,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":12,"author":{"gitID":"trafalgarandre"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Opened your calendar\";"},{"lineNumber":13,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":14,"author":{"gitID":"trafalgarandre"},"content":"    public static final int TAB_ID \u003d 2;"},{"lineNumber":15,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":16,"author":{"gitID":"trafalgarandre"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"trafalgarandre"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"trafalgarandre"},"content":"        EventsCenter.getInstance().post(new SwitchTabRequestEvent(TAB_ID));"},{"lineNumber":19,"author":{"gitID":"trafalgarandre"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":20,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":21,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":23,"author":{"gitID":"trafalgarandre"},"content":"}"}],"authorContributionMap":{"trafalgarandre":18,"kush1509":2,"-":3}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"trafalgarandre"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":30,"author":{"gitID":"trafalgarandre"},"content":"        createProfilePicturesFolder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"trafalgarandre"},"content":"    private void createProfilePicturesFolder() {"},{"lineNumber":36,"author":{"gitID":"trafalgarandre"},"content":"        File dir \u003d new File(\"src/main/resources/ProfilePictures\");"},{"lineNumber":37,"author":{"gitID":"trafalgarandre"},"content":"        dir.mkdir();"},{"lineNumber":38,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":7,"-":96}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    private String currentPosition;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    private String company;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"trafalgarandre"},"content":"    private String profilePicture;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"     * Constructs an XmlAdaptedJob."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"     * Constructs an {@code XmlAdaptedJob} with the given person details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String currentPosition,"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"                            String company, String profilePicture, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"        this.currentPosition \u003d currentPosition;"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"        this.company \u003d company;"},{"lineNumber":64,"author":{"gitID":"trafalgarandre"},"content":"        this.profilePicture \u003d profilePicture;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedJob"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":"        currentPosition \u003d source.getCurrentPosition().value;"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"        company \u003d source.getCompany().value;"},{"lineNumber":82,"author":{"gitID":"trafalgarandre"},"content":"        profilePicture \u003d source.getProfilePicture().filePath;"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"kush1509"},"content":"        if (this.currentPosition \u003d\u003d null) {"},{"lineNumber":134,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":135,"author":{"gitID":"kush1509"},"content":"                    CurrentPosition.class.getSimpleName()));"},{"lineNumber":136,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"kush1509"},"content":"        if (!CurrentPosition.isValidCurrentPosition(this.currentPosition)) {"},{"lineNumber":138,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(CurrentPosition.MESSAGE_CURRENT_POSITION_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"kush1509"},"content":"        final CurrentPosition currentPosition \u003d new CurrentPosition(this.currentPosition);"},{"lineNumber":141,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":142,"author":{"gitID":"kush1509"},"content":"        if (this.company \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"},{"lineNumber":144,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"kush1509"},"content":"        if (!Company.isValidCompany(this.company)) {"},{"lineNumber":146,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Company.MESSAGE_COMPANY_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"kush1509"},"content":"        final Company company \u003d new Company(this.company);"},{"lineNumber":149,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":150,"author":{"gitID":"trafalgarandre"},"content":"        if (this.profilePicture !\u003d null) {"},{"lineNumber":151,"author":{"gitID":"trafalgarandre"},"content":"            if (!ProfilePicture.isValidProfilePicture(this.profilePicture)) {"},{"lineNumber":152,"author":{"gitID":"trafalgarandre"},"content":"                throw new IllegalValueException(ProfilePicture.MESSAGE_PROFILEPICTURE_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"trafalgarandre"},"content":"            } else if (!ProfilePicture.hasValidProfilePicture(this.profilePicture)) {"},{"lineNumber":154,"author":{"gitID":"trafalgarandre"},"content":"                throw new IllegalValueException(ProfilePicture.MESSAGE_PROFILEPICTURE_NOT_EXISTS);"},{"lineNumber":155,"author":{"gitID":"trafalgarandre"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"trafalgarandre"},"content":"        final ProfilePicture profilePicture \u003d new ProfilePicture(this.profilePicture);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":159,"author":{"gitID":"kush1509"},"content":"        return new Person(name, phone, email, address, currentPosition, company, profilePicture, tags);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":177,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 Objects.equals(currentPosition, otherPerson.currentPosition)"},{"lineNumber":178,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 Objects.equals(company, otherPerson.company)"},{"lineNumber":179,"author":{"gitID":"trafalgarandre"},"content":"                \u0026\u0026 Objects.equals(profilePicture, otherPerson.profilePicture)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":13,"kush1509":34,"-":135}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    private List\u003cXmlAdaptedJob\u003e jobs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        jobs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"        jobs.addAll(src.getJobList().stream().map(XmlAdaptedJob::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag} or {@code XmlAdaptedJob}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"        for (XmlAdaptedJob j : jobs) {"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"            addressBook.addJob(j.toModelType());"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 jobs.equals(otherAb.jobs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":9,"-":71}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":211}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.NumberOfPositions;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Position;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Team;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.Company;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.person.CurrentPosition;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"trafalgarandre"},"content":"import seedu.address.model.person.ProfilePicture;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new CurrentPosition(\"Software Engineer\"),"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"                new Company(\"Google\"), new ProfilePicture(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new CurrentPosition(\"Student\"),"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"                new Company(\"NUS\"), new ProfilePicture(), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),  new CurrentPosition(\"Marketing Intern\"),"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"                new Company(\"Facebook\"), new ProfilePicture(), getTagSet(\"neighbours\")),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new CurrentPosition(\"Software Engineer\"),"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"                new Company(\"Facebook\"), new ProfilePicture(), getTagSet(\"family\")),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new CurrentPosition(\"Student\"),"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"                new Company(\"NTU\"), new ProfilePicture(), getTagSet(\"classmates\")),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),  new CurrentPosition(\"Backend Engineer\"),"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"                new Company(\"Apple\"), new ProfilePicture(), getTagSet(\"colleagues\"))"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"    public static Job[] getSampleJobs() {"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"        return new Job[] {"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"            new Job(new Position(\"Software Engineer\"), new Team(\"Cloud Services\"), new Location(\"Singapore\"),"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"                new NumberOfPositions(\"2\")),"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"            new Job(new Position(\"Marketing Intern\"), new Team(\"Social Media Marketing\"),"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"                new Location(\"Kuala Lampur, Malaysia\"), new NumberOfPositions(\"1\")),"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"            new Job(new Position(\"DevOps Engineer\"), new Team(\"DevOps\"), new Location(\"Singapore\"),"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"                new NumberOfPositions(\"3\")),"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"            new Job(new Position(\"Product Manager\"), new Team(\"Mobile Products\"), new Location(\"Singapore\"),"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"                new NumberOfPositions(\"1\"))"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"        };"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"            for (Job sampleJob : getSampleJobs()) {"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"                sampleAb.addJob(sampleJob);"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"        } catch (DuplicateJobException e) {"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate jobs\", e);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":1,"kush1509":38,"-":56}},{"path":"src/main/java/seedu/address/logic/commands/job/JobAddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.logic.commands.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_POSITIONS;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSITION;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TEAM;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":" * Adds a job opening to contactHeRo."},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"public class JobAddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"    public static final String COMMAND_WORD \u003d \"addjob\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"            + PREFIX_POSITION + \" \""},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"            + PREFIX_TEAM + \" \""},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"            + PREFIX_LOCATION + \" \""},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"            + PREFIX_NUMBER_OF_POSITIONS;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a job opening to contactHeRo. \""},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"            + \"Parameters: \""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"            + PREFIX_POSITION + \"POSITION \""},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"            + PREFIX_TEAM + \"TEAM \""},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"            + PREFIX_NUMBER_OF_POSITIONS + \"NUMBER OF POSITIONS \\n\""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"            + PREFIX_POSITION + \"Software Engineer \""},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"            + PREFIX_TEAM + \"Cloud Services \""},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"            + PREFIX_LOCATION + \"Singapore, Singapore \""},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"            + PREFIX_NUMBER_OF_POSITIONS + \"5\";"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New job opening added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_DUPLICATE_JOB \u003d \"This job opening already exists in contactHeRo.\";"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"    private final Job toAdd;"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"     * Creates an AddCommand to add the specified {@code Job}"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"    public JobAddCommand(Job job) {"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"        requireNonNull(job);"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"        toAdd \u003d job;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"            model.addJob(toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"        } catch (DuplicateJobException e) {"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_JOB);"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"                || (other instanceof JobAddCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 toAdd.equals(((JobAddCommand) other).toAdd));"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":54,"-":18}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"trafalgarandre"},"content":" * Two persons can have the same profilePicture"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"trafalgarandre"},"content":"    private final ProfilePicture profilePicture;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    private final CurrentPosition currentPosition;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    private final Company company;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    public Person(Name name, Phone phone, Email email, Address address, CurrentPosition currentPosition,"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"                  Company company, ProfilePicture profilePicture, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        requireAllNonNull(name, phone, email, address, tags, currentPosition, company);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        this.currentPosition \u003d currentPosition;"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"        this.company \u003d company;"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":42,"author":{"gitID":"trafalgarandre"},"content":"        if (profilePicture \u003d\u003d null) {"},{"lineNumber":43,"author":{"gitID":"trafalgarandre"},"content":"            this.profilePicture \u003d new ProfilePicture();"},{"lineNumber":44,"author":{"gitID":"trafalgarandre"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"trafalgarandre"},"content":"            this.profilePicture \u003d profilePicture;"},{"lineNumber":46,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"trafalgarandre"},"content":"    public ProfilePicture getProfilePicture() {"},{"lineNumber":68,"author":{"gitID":"trafalgarandre"},"content":"        return profilePicture;"},{"lineNumber":69,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"    public Company getCompany() {"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"        return company;"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"    public CurrentPosition getCurrentPosition() {"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"        return currentPosition;"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":99,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":100,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 otherPerson.getCurrentPosition().equals(this.getCurrentPosition())"},{"lineNumber":101,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 otherPerson.getCompany().equals(this.getCompany());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":107,"author":{"gitID":"kush1509"},"content":"        return Objects.hash(name, phone, email, address, profilePicture, currentPosition, company, tags);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":120,"author":{"gitID":"kush1509"},"content":"                .append(\" Current Position: \")"},{"lineNumber":121,"author":{"gitID":"kush1509"},"content":"                .append(getCurrentPosition())"},{"lineNumber":122,"author":{"gitID":"kush1509"},"content":"                .append(\" Company: \")"},{"lineNumber":123,"author":{"gitID":"kush1509"},"content":"                .append(getCompany())"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":11,"kush1509":25,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedJob.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.NumberOfPositions;"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Position;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Team;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":" * JAXB-friendly version of the Job."},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"public class XmlAdaptedJob {"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Job\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    private String position;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    private String team;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"    private String location;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    private String numberOfPositions;"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"     * Constructs an XmlAdaptedJob."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    public XmlAdaptedJob() {}"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"     * Constructs an {@code XmlAdaptedJob} with the given job details."},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"    public XmlAdaptedJob(String position, String team, String location, String numberOfPositions) {"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"        this.position \u003d position;"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"        this.team \u003d team;"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        this.location \u003d location;"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"        this.numberOfPositions \u003d numberOfPositions;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedJob"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"    public XmlAdaptedJob(Job source) {"},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"        position \u003d source.getPosition().value;"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"        team \u003d source.getTeam().value;"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"        location \u003d source.getLocation().value;"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"        numberOfPositions \u003d source.getNumberOfPositions().value;"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"     * Converts this jaxb-friendly adapted job object into the model\u0027s Job object."},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted job"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"    public Job toModelType() throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"        if (this.position \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":"                    Position.class.getSimpleName()));"},{"lineNumber":67,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"        if (!Position.isValidPosition(this.position)) {"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Position.MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"        final Position position \u003d new Position(this.position);"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"        if (this.team \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Team.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"        if (!Team.isValidTeam(this.team)) {"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Team.MESSAGE_TEAM_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"        final Team team \u003d new Team(this.team);"},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"        if (this.location \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":"                    Location.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"kush1509"},"content":"        if (!Location.isValidLocation(this.location)) {"},{"lineNumber":86,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"kush1509"},"content":"        final Location location \u003d new Location(this.location);"},{"lineNumber":89,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":90,"author":{"gitID":"kush1509"},"content":"        if (this.numberOfPositions \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":"                    NumberOfPositions.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"kush1509"},"content":"        if (!NumberOfPositions.isValidNumberOfPositions(this.numberOfPositions)) {"},{"lineNumber":95,"author":{"gitID":"kush1509"},"content":"            throw new IllegalValueException(NumberOfPositions.MESSAGE_NUMBER_OF_POSITIONS_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"kush1509"},"content":"        final NumberOfPositions numberOfPositions \u003d new NumberOfPositions(this.numberOfPositions);"},{"lineNumber":98,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":99,"author":{"gitID":"kush1509"},"content":"        return new Job(position, team, location, numberOfPositions);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"kush1509"},"content":"        if (!(other instanceof XmlAdaptedJob)) {"},{"lineNumber":109,"author":{"gitID":"kush1509"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":112,"author":{"gitID":"kush1509"},"content":"        XmlAdaptedJob otherJob \u003d (XmlAdaptedJob) other;"},{"lineNumber":113,"author":{"gitID":"kush1509"},"content":"        return Objects.equals(position, otherJob.position)"},{"lineNumber":114,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 Objects.equals(team, otherJob.team)"},{"lineNumber":115,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 Objects.equals(location, otherJob.location)"},{"lineNumber":116,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 Objects.equals(numberOfPositions, otherJob.numberOfPositions);"},{"lineNumber":117,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":99,"-":19}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"     * Returns an unmodifiable view of the jobs list."},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"     * This list will not contain any duplicate jobs."},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"    ObservableList\u003cJob\u003e getJobList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":1,"kush1509":6,"-":23}},{"path":"src/main/java/seedu/address/model/person/ProfilePicture.java","lines":[{"lineNumber":1,"author":{"gitID":"trafalgarandre"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"trafalgarandre"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"trafalgarandre"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"trafalgarandre"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"trafalgarandre"},"content":"import java.util.Date;"},{"lineNumber":9,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":10,"author":{"gitID":"trafalgarandre"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":12,"author":{"gitID":"trafalgarandre"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"trafalgarandre"},"content":" * Represents a ProfilePicture in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"trafalgarandre"},"content":"public class ProfilePicture {"},{"lineNumber":17,"author":{"gitID":"trafalgarandre"},"content":"    public static final String MESSAGE_PROFILEPICTURE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"trafalgarandre"},"content":"            \"Profile picture name should be a valid image name,\""},{"lineNumber":19,"author":{"gitID":"trafalgarandre"},"content":"                    + \" and it should end with either jpeg, jpg, png, gif or bmp\";"},{"lineNumber":20,"author":{"gitID":"trafalgarandre"},"content":"    public static final String MESSAGE_PROFILEPICTURE_NOT_EXISTS \u003d"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"            \"Profile picture does not exist. Please give another profile picture\";"},{"lineNumber":22,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":23,"author":{"gitID":"trafalgarandre"},"content":"    // alphanumeric and special characters"},{"lineNumber":24,"author":{"gitID":"trafalgarandre"},"content":"    public static final String PROFILE_PICTURE_VALIDATION_REGEX \u003d \"^$|([^\\\\s]+(\\\\.(?i)(jpeg|jpg|png|gif|bmp))$)\";"},{"lineNumber":25,"author":{"gitID":"trafalgarandre"},"content":"    public static final String DEFAULT_IMG_URL \u003d \"file:src/test/data/images/default.png\";"},{"lineNumber":26,"author":{"gitID":"trafalgarandre"},"content":"    public static final String PROFILE_PICTURE_FOLDER \u003d"},{"lineNumber":27,"author":{"gitID":"trafalgarandre"},"content":"            \"./src/main/resources/ProfilePictures/\";"},{"lineNumber":28,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":29,"author":{"gitID":"trafalgarandre"},"content":"    public final String filePath;"},{"lineNumber":30,"author":{"gitID":"trafalgarandre"},"content":"    public final String url;"},{"lineNumber":31,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":32,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"trafalgarandre"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"trafalgarandre"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"trafalgarandre"},"content":"     * @param profilePicture A valid image path."},{"lineNumber":36,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"trafalgarandre"},"content":"    public ProfilePicture(String... profilePicture) {"},{"lineNumber":38,"author":{"gitID":"trafalgarandre"},"content":"        if (profilePicture.length !\u003d 0 \u0026\u0026 profilePicture[0] !\u003d null) {"},{"lineNumber":39,"author":{"gitID":"trafalgarandre"},"content":"            checkArgument(isValidProfilePicture(profilePicture[0]), MESSAGE_PROFILEPICTURE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"trafalgarandre"},"content":"            checkArgument(hasValidProfilePicture(profilePicture[0]), MESSAGE_PROFILEPICTURE_NOT_EXISTS);"},{"lineNumber":41,"author":{"gitID":"trafalgarandre"},"content":"            if (profilePicture[0].length() \u003e 37"},{"lineNumber":42,"author":{"gitID":"trafalgarandre"},"content":"                    \u0026\u0026 profilePicture[0].substring(0, 37).equals(\"./src/main/resources/ProfilePictures/\")) {"},{"lineNumber":43,"author":{"gitID":"trafalgarandre"},"content":"                this.filePath \u003d profilePicture[0];"},{"lineNumber":44,"author":{"gitID":"trafalgarandre"},"content":"            } else {"},{"lineNumber":45,"author":{"gitID":"trafalgarandre"},"content":"                this.filePath \u003d copyImageToProfilePictureFolder(profilePicture[0]);"},{"lineNumber":46,"author":{"gitID":"trafalgarandre"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"trafalgarandre"},"content":"            this.url \u003d \"file:\".concat(this.filePath.substring(2));"},{"lineNumber":48,"author":{"gitID":"trafalgarandre"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"trafalgarandre"},"content":"            this.url \u003d DEFAULT_IMG_URL;"},{"lineNumber":50,"author":{"gitID":"trafalgarandre"},"content":"            this.filePath \u003d DEFAULT_IMG_URL.replace(\"file:\", \"./\");"},{"lineNumber":51,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"trafalgarandre"},"content":"    public static boolean isValidProfilePicture(String test) {"},{"lineNumber":58,"author":{"gitID":"trafalgarandre"},"content":"        return test.matches(PROFILE_PICTURE_VALIDATION_REGEX);"},{"lineNumber":59,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":61,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"trafalgarandre"},"content":"     * Returns if there exists profile picture."},{"lineNumber":63,"author":{"gitID":"trafalgarandre"},"content":"     * @param profilePicture"},{"lineNumber":64,"author":{"gitID":"trafalgarandre"},"content":"     * @return"},{"lineNumber":65,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"trafalgarandre"},"content":"    public static boolean hasValidProfilePicture(String profilePicture) {"},{"lineNumber":67,"author":{"gitID":"trafalgarandre"},"content":"        File file \u003d new File(profilePicture);"},{"lineNumber":68,"author":{"gitID":"trafalgarandre"},"content":"        return file.exists() \u0026\u0026 !file.isDirectory();"},{"lineNumber":69,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":71,"author":{"gitID":"trafalgarandre"},"content":"    public Image getImage() {"},{"lineNumber":72,"author":{"gitID":"trafalgarandre"},"content":"        return new Image(url);"},{"lineNumber":73,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":75,"author":{"gitID":"trafalgarandre"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"trafalgarandre"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitID":"trafalgarandre"},"content":"        return filePath;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"trafalgarandre"},"content":"                || (other instanceof ProfilePicture // instanceof handles nulls"},{"lineNumber":84,"author":{"gitID":"trafalgarandre"},"content":"                \u0026\u0026 this.filePath.equals(((ProfilePicture) other).filePath)); // state check"},{"lineNumber":85,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":87,"author":{"gitID":"trafalgarandre"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"trafalgarandre"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitID":"trafalgarandre"},"content":"        return filePath.hashCode();"},{"lineNumber":90,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":92,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"trafalgarandre"},"content":"     * copy the image from the absolute path to the Profile Picture Folder"},{"lineNumber":94,"author":{"gitID":"trafalgarandre"},"content":"     * @param profilePicture"},{"lineNumber":95,"author":{"gitID":"trafalgarandre"},"content":"     * @return destination path"},{"lineNumber":96,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"trafalgarandre"},"content":"    private String copyImageToProfilePictureFolder(String profilePicture) {"},{"lineNumber":98,"author":{"gitID":"trafalgarandre"},"content":"        String destPath \u003d \"\";"},{"lineNumber":99,"author":{"gitID":"trafalgarandre"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"trafalgarandre"},"content":"            File source \u003d new File(profilePicture);"},{"lineNumber":101,"author":{"gitID":"trafalgarandre"},"content":"            String fileExtension \u003d extractFileExtension(profilePicture);"},{"lineNumber":102,"author":{"gitID":"trafalgarandre"},"content":"            Date date \u003d new Date();"},{"lineNumber":103,"author":{"gitID":"trafalgarandre"},"content":"            destPath \u003d PROFILE_PICTURE_FOLDER.concat("},{"lineNumber":104,"author":{"gitID":"-"},"content":"                    date.toString().replace(\":\", \"\").replace(\" \", \"\").concat("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                            \".\").concat(fileExtension));"},{"lineNumber":106,"author":{"gitID":"trafalgarandre"},"content":"            File dest \u003d new File(destPath);"},{"lineNumber":107,"author":{"gitID":"trafalgarandre"},"content":"            Files.copy(source.toPath(), dest.toPath());"},{"lineNumber":108,"author":{"gitID":"trafalgarandre"},"content":"        } catch (IOException e) {"},{"lineNumber":109,"author":{"gitID":"trafalgarandre"},"content":"            // Exception will not happen as the profile picture path has been check through hasValidProfilePicture"},{"lineNumber":110,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"trafalgarandre"},"content":"        return destPath;"},{"lineNumber":112,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":114,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"trafalgarandre"},"content":"     * extract FileExtension from fileName"},{"lineNumber":116,"author":{"gitID":"trafalgarandre"},"content":"     * @param fileName"},{"lineNumber":117,"author":{"gitID":"trafalgarandre"},"content":"     * @return fileExtension"},{"lineNumber":118,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"trafalgarandre"},"content":"    private String extractFileExtension(String fileName) {"},{"lineNumber":120,"author":{"gitID":"trafalgarandre"},"content":"        String extension \u003d \"\";"},{"lineNumber":121,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":122,"author":{"gitID":"trafalgarandre"},"content":"        int i \u003d fileName.lastIndexOf(\u0027.\u0027);"},{"lineNumber":123,"author":{"gitID":"trafalgarandre"},"content":"        if (i \u003e 0) {"},{"lineNumber":124,"author":{"gitID":"trafalgarandre"},"content":"            extension \u003d fileName.substring(i + 1);"},{"lineNumber":125,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"trafalgarandre"},"content":"        return extension;"},{"lineNumber":127,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"trafalgarandre"},"content":"}"}],"authorContributionMap":{"trafalgarandre":111,"kush1509":1,"-":16}},{"path":"src/main/java/seedu/address/model/person/CurrentPosition.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" * Represents a Person\u0027s current position in the address book."},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCurrentPosition(String)}"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class CurrentPosition {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_CURRENT_POSITION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"            \"Person\u0027s current position should only contain alphanumeric characters and spaces, and it should \""},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"                    + \"not be blank\";"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"     * The first character of the current position must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"    public static final String CURRENT_POSITION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"     * Constructs an {@code CurrentPosition}."},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"     * @param address A valid current position."},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"    public CurrentPosition(String currentPosition) {"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        requireNonNull(currentPosition);"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        checkArgument(isValidCurrentPosition(currentPosition), MESSAGE_CURRENT_POSITION_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"        this.value \u003d currentPosition;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    public static boolean isValidCurrentPosition(String test) {"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        return test.matches(CURRENT_POSITION_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"                || (other instanceof CurrentPosition // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.value.equals(((CurrentPosition) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":3,"kush1509":31,"-":25}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.UniqueJobList;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    private final UniqueJobList jobs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"        jobs \u003d new UniqueJobList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"kush1509"},"content":"    public void setJobs(List\u003cJob\u003e jobs) throws DuplicateJobException {"},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"        this.jobs.setJobs(jobs);"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":"        List\u003cJob\u003e syncedJobList \u003d newData.getJobList().stream()"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"                //.map(this::syncWithMasterTagList)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":89,"author":{"gitID":"kush1509"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"kush1509"},"content":"            setJobs(syncedJobList);"},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"        } catch (DuplicateJobException e) {"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate jobs\");"},{"lineNumber":93,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":110,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":152,"author":{"gitID":"trafalgarandre"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":153,"author":{"gitID":"kush1509"},"content":"                person.getCurrentPosition(), person.getCompany(), person.getProfilePicture(), correctTagReferences);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":161,"author":{"gitID":"trafalgarandre"},"content":"        if (persons.contains(key)) {"},{"lineNumber":162,"author":{"gitID":"trafalgarandre"},"content":"            return persons.remove(key);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"trafalgarandre"},"content":"     * Remove tag {@code t} from everyone in the Addressbook"},{"lineNumber":176,"author":{"gitID":"trafalgarandre"},"content":"     * @throws UniqueTagList.DuplicateTagException"},{"lineNumber":177,"author":{"gitID":"trafalgarandre"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":178,"author":{"gitID":"trafalgarandre"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":179,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"trafalgarandre"},"content":"    public void removeTag(Tag t)"},{"lineNumber":181,"author":{"gitID":"trafalgarandre"},"content":"            throws UniqueTagList.DuplicateTagException, PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":182,"author":{"gitID":"trafalgarandre"},"content":"        for (Person person: persons) {"},{"lineNumber":183,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":184,"author":{"gitID":"trafalgarandre"},"content":"            // cannot remove tag from initTagSet since initTagSet is unmodifiableSet"},{"lineNumber":185,"author":{"gitID":"trafalgarandre"},"content":"            // create new Tag Set manually"},{"lineNumber":186,"author":{"gitID":"trafalgarandre"},"content":"            Set\u003cTag\u003e initTagSet \u003d person.getTags();"},{"lineNumber":187,"author":{"gitID":"trafalgarandre"},"content":"            UniqueTagList afterRemovedTagSet \u003d new UniqueTagList();"},{"lineNumber":188,"author":{"gitID":"trafalgarandre"},"content":"            for (Tag tag: initTagSet) {"},{"lineNumber":189,"author":{"gitID":"trafalgarandre"},"content":"                if (!tag.equals(t)) {"},{"lineNumber":190,"author":{"gitID":"trafalgarandre"},"content":"                    afterRemovedTagSet.add(tag);"},{"lineNumber":191,"author":{"gitID":"trafalgarandre"},"content":"                }"},{"lineNumber":192,"author":{"gitID":"trafalgarandre"},"content":"            }"},{"lineNumber":193,"author":{"gitID":"trafalgarandre"},"content":"            updatePerson(person, new Person(person.getName(),"},{"lineNumber":194,"author":{"gitID":"kush1509"},"content":"                    person.getPhone(), person.getEmail(), person.getAddress(), person.getCurrentPosition(),"},{"lineNumber":195,"author":{"gitID":"kush1509"},"content":"                    person.getCompany(), person.getProfilePicture(), afterRemovedTagSet.toSet()));"},{"lineNumber":196,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"trafalgarandre"},"content":"        tags.remove(t);"},{"lineNumber":198,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":200,"author":{"gitID":"kush1509"},"content":"    //// job-level operations"},{"lineNumber":201,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":202,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"kush1509"},"content":"     * Adds a job to the address book."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":207,"author":{"gitID":"kush1509"},"content":"     * @throws DuplicateJobException if an equivalent job already exists."},{"lineNumber":208,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"kush1509"},"content":"    public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":213,"author":{"gitID":"kush1509"},"content":"        jobs.add(job);"},{"lineNumber":214,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":216,"author":{"gitID":"trafalgarandre"},"content":"    /// util methods"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"kush1509"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"kush1509"},"content":"    public ObservableList\u003cJob\u003e getJobList() {"},{"lineNumber":236,"author":{"gitID":"kush1509"},"content":"        return jobs.asObservableList();"},{"lineNumber":237,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":244,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":245,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.jobs.equals(((AddressBook) other).jobs));"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":251,"author":{"gitID":"kush1509"},"content":"        return Objects.hash(persons, tags, jobs);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":28,"kush1509":38,"-":187}},{"path":"src/main/java/seedu/address/logic/commands/SignupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.DuplicateUsernameException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Register a new account for the user."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class SignupCommand  extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"signup\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \" \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + PREFIX_PASSWORD;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Creates a new user account.\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_PASSWORD + \"PASSWORD\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_USERNAME + \"John \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PASSWORD + \"353535 \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have signup successfully!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Signup has failed.\\n\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_USERNAME \u003d \"This username has already been used.\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final String username;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public final String password;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public SignupCommand(String inputUsername, String inputPassword) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(inputUsername);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(inputPassword);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.username \u003d inputUsername;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.password \u003d inputPassword;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.register(username, password);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (DuplicateUsernameException due) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new CommandException(String.format(MESSAGE_FAILURE, MESSAGE_DUPLICATE_USERNAME));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                || (other instanceof SignupCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 username.equals(((SignupCommand) other).username)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 password.equals(((SignupCommand) other).password));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":1,"-":58}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.DuplicateUsernameException;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Optional\u003cAccount\u003e user; //tracks the current user"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private AccountsManager accountsManager;"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"    private final FilteredList\u003cJob\u003e filteredJobs;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        accountsManager \u003d new AccountsManager();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        user \u003d Optional.empty();"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"        filteredJobs \u003d new FilteredList\u003c\u003e(this.addressBook.getJobList());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"trafalgarandre"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"kush1509"},"content":"    public void deleteTag(Tag t) throws PersonNotFoundException, DuplicatePersonException,"},{"lineNumber":97,"author":{"gitID":"kush1509"},"content":"            UniqueTagList.DuplicateTagException {"},{"lineNumber":98,"author":{"gitID":"trafalgarandre"},"content":"        addressBook.removeTag(t);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public AccountsManager getAccountsManager() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return accountsManager;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void register(String username, String password) throws DuplicateUsernameException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        accountsManager.register(username, password);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"kush1509"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"kush1509"},"content":"    public synchronized void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":114,"author":{"gitID":"kush1509"},"content":"        addressBook.addJob(job);"},{"lineNumber":115,"author":{"gitID":"kush1509"},"content":"        updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":151,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":152,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 filteredJobs.equals(other.filteredJobs);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"kush1509"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Job List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":156,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":157,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"kush1509"},"content":"     * Returns an unmodifiable view of the list of {@code Jobs} backed by the internal list of"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"kush1509"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":163,"author":{"gitID":"kush1509"},"content":"        return FXCollections.unmodifiableObservableList(filteredJobs);"},{"lineNumber":164,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":166,"author":{"gitID":"kush1509"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"kush1509"},"content":"    public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":169,"author":{"gitID":"kush1509"},"content":"        filteredJobs.setPredicate(predicate);"},{"lineNumber":170,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":24,"-":145}},{"path":"src/main/java/seedu/address/model/job/Team.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" * Represents a Job\u0027s team in contactHeRo."},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTeam(String)}"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class Team {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_TEAM_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"            \"Job teams should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"     * The first character of the team must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public static final String TEAM_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"     * Constructs a {@code Team}."},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"     * @param team A valid team."},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    public Team(String team) {"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        requireNonNull(team);"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        checkArgument(isValidTeam(team), MESSAGE_TEAM_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        this.value \u003d team;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"     * Returns true if a given string is a valid person team."},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    public static boolean isValidTeam(String test) {"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        return test.matches(TEAM_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":41,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"                || (other instanceof Team // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.value.equals(((Team) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":38,"-":19}},{"path":"src/main/java/seedu/address/model/job/exceptions/JobNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job.exceptions;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"kush1509"},"content":" * Signals that the operation is unable to find the specified job."},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":"public class JobNotFoundException extends Exception {}"}],"authorContributionMap":{"kush1509":6}},{"path":"src/main/java/seedu/address/model/person/Company.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" * Represents a Person\u0027s company in the address book."},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class Company {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_COMPANY_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"            \"Person\u0027s company should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"     * The first character of the company must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public static final String COMPANY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"     * Constructs an {@code Company}."},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"     * @param company A valid company."},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    public Company(String company) {"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        requireNonNull(company);"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        checkArgument(isValidCompany(company), MESSAGE_COMPANY_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        this.value \u003d company;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    public static boolean isValidCompany(String test) {"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        return test.matches(COMPANY_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"                || (other instanceof Company // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.value.equals(((Company) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":3,"kush1509":30,"-":25}},{"path":"src/main/java/seedu/address/model/job/exceptions/DuplicateJobException.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"public class DuplicateJobException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":"    public DuplicateJobException() {"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"        super(\"Operation would result in duplicate jobs\");"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":6,"-":6}},{"path":"src/main/java/seedu/address/model/job/NumberOfPositions.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" * Represents a Job\u0027s number of positions in contactHeRo."},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class NumberOfPositions {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_NUMBER_OF_POSITIONS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"            \"Job positions can only contain numbers\";"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    public static final String NUMBER_OF_POSITIONS_VALIDATION_REGEX \u003d \"\\\\d+\";"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"     * Constructs a {@code NumberOfPositions}."},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"     * @param numberOfPositions A valid number of positions."},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"    public NumberOfPositions(String numberOfPositions) {"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"        requireNonNull(numberOfPositions);"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"        checkArgument(isValidNumberOfPositions(numberOfPositions), MESSAGE_NUMBER_OF_POSITIONS_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"        this.value \u003d numberOfPositions;"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"     * Returns true if a given string is a valid number of positions."},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":"    public static boolean isValidNumberOfPositions(String test) {"},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"        return test.matches(NUMBER_OF_POSITIONS_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":37,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"                || (other instanceof NumberOfPositions // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.value.equals(((NumberOfPositions) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":34,"-":19}},{"path":"src/main/java/seedu/address/model/job/Job.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * Represents a Jon in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":"public class Job {"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"    private final Position position;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":"    private final Team team;"},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    private final Location location;"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"    private final NumberOfPositions numberOfPositions;"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    public Job(Position position, Team team, Location location, NumberOfPositions numberOfPositions) {"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":"        requireAllNonNull(position, team, location);"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"        this.position \u003d position;"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"        this.team \u003d team;"},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"        this.location \u003d location;"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"        this.numberOfPositions \u003d numberOfPositions;"},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    public Position getPosition() {"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        return position;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    public Team getTeam() {"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"        return team;"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"    public Location getLocation() {"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"        return location;"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"    public NumberOfPositions getNumberOfPositions() {"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"        return numberOfPositions;"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"        if (!(other instanceof Job)) {"},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"        Job otherJob \u003d (Job) other;"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"        return otherJob.getPosition().equals(this.getPosition())"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 otherJob.getTeam().equals(this.getTeam())"},{"lineNumber":57,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 otherJob.getLocation().equals(this.getLocation())"},{"lineNumber":58,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 otherJob.getNumberOfPositions().equals(this.getNumberOfPositions());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"        return Objects.hash(position, team, location, numberOfPositions);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"        builder.append(getPosition())"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"                .append(\" Team: \")"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"                .append(getTeam())"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"                .append(\" Location: \")"},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"                .append(getLocation())"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"                .append(\" Number of Positions: \")"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"                .append(getNumberOfPositions());"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"        return builder.toString();"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"kush1509":60,"-":19}},{"path":"src/main/java/seedu/address/model/job/Position.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" * Represents a Job\u0027s position in contactHeRo."},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPosition(String)}"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class Position {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_POSITION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"            \"Job positions should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":"     * The first character of the position must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public static final String POSITION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"     * Constructs a {@code Position}."},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"     * @param position A valid position."},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    public Position(String position) {"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        requireNonNull(position);"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        checkArgument(isValidPosition(position), MESSAGE_POSITION_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        this.value \u003d position;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"     * Returns true if a given string is a valid person position."},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    public static boolean isValidPosition(String test) {"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        return test.matches(POSITION_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":41,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"                || (other instanceof Position // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.value.equals(((Position) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":38,"-":19}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"trafalgarandre"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"trafalgarandre"},"content":"     * Removes a Tag from the list"},{"lineNumber":97,"author":{"gitID":"trafalgarandre"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"trafalgarandre"},"content":"    public void remove(Tag toRemove) {"},{"lineNumber":99,"author":{"gitID":"trafalgarandre"},"content":"        requireAllNonNull(toRemove);"},{"lineNumber":100,"author":{"gitID":"trafalgarandre"},"content":"        if (contains(toRemove)) {"},{"lineNumber":101,"author":{"gitID":"trafalgarandre"},"content":"            internalList.remove(toRemove);"},{"lineNumber":102,"author":{"gitID":"trafalgarandre"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"trafalgarandre"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":10,"-":142}},{"path":"src/main/java/seedu/address/model/AccountsManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kush1509"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.DuplicateUsernameException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a database of registered user accounts"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AccountsManager implements ReadOnlyAccountsManager {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private ObservableList\u003cAccount\u003e accountList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public AccountsManager() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        accountList \u003d FXCollections.observableArrayList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean checkUsername(String username, Account account) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return account.getUsername().equals(username);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean checkPassword(String password, Account account) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return account.getPassword().equals(password);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    * adds a new account to the list of registered accounts."},{"lineNumber":35,"author":{"gitID":"-"},"content":"    * @throws DuplicateUsernameException if the username is already used"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void register(String inputUsername, String inputPassword) throws DuplicateUsernameException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireAllNonNull(inputUsername, inputPassword);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (!accountList.isEmpty()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            for (Account acc : accountList) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                if (checkUsername(inputUsername, acc)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    throw new DuplicateUsernameException();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Account newAccount \u003d new Account(inputUsername, inputPassword);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        accountList.add(newAccount);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAccount\u003e getAccountList() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(accountList);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(accountList);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || (other instanceof AccountsManager // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.accountList.equals(((AccountsManager) other).accountList));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Objects.hash(accountList);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":3,"-":64}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.DuplicateUsernameException;"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    Predicate\u003cJob\u003e PREDICATE_SHOW_ALL_JOBS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"trafalgarandre"},"content":"    /** Delete specified tag from everyone in the address book */"},{"lineNumber":46,"author":{"gitID":"trafalgarandre"},"content":"    void deleteTag(Tag t) throws PersonNotFoundException, DuplicatePersonException, UniqueTagList.DuplicateTagException;"},{"lineNumber":47,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns AccountsManager."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    AccountsManager getAccountsManager();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Register a new account for user."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws DuplicateUsernameException if {@param username} is already in used."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    void register(String username, String password) throws DuplicateUsernameException;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"    /** Adds the given person */"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":"    void addJob(Job job) throws DuplicateJobException;"},{"lineNumber":70,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"    void updateFilteredJobList(Predicate\u003cJob\u003e predicate);"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"trafalgarandre":4,"kush1509":8,"-":68}},{"path":"src/main/java/seedu/address/model/job/Location.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kush1509"},"content":" * Represents a Job\u0027s location in contactHeRo."},{"lineNumber":8,"author":{"gitID":"kush1509"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":9,"author":{"gitID":"kush1509"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kush1509"},"content":"public class Location {"},{"lineNumber":11,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"            \"Job locations can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":"    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":21,"author":{"gitID":"kush1509"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":"     * Constructs a {@code Location}."},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":"     * @param location A valid location."},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"    public Location(String location) {"},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"        requireNonNull(location);"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"kush1509"},"content":"        this.value \u003d location;"},{"lineNumber":32,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":34,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"kush1509"},"content":"     * Returns true if a given string is a valid person location."},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":41,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"                || (other instanceof Location // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.value.equals(((Location) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"trafalgarandre"},"content":""},{"lineNumber":59,"author":{"gitID":"kush1509"},"content":"}"}],"authorContributionMap":{"trafalgarandre":2,"kush1509":33,"-":24}},{"path":"src/main/java/seedu/address/model/job/UniqueJobList.java","lines":[{"lineNumber":1,"author":{"gitID":"kush1509"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":13,"author":{"gitID":"kush1509"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":14,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":15,"author":{"gitID":"kush1509"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"kush1509"},"content":" * A list of jobs that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"kush1509"},"content":" *"},{"lineNumber":18,"author":{"gitID":"kush1509"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"kush1509"},"content":" *"},{"lineNumber":20,"author":{"gitID":"kush1509"},"content":" * @see Job#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"kush1509"},"content":"public class UniqueJobList implements Iterable\u003cJob\u003e {"},{"lineNumber":24,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":25,"author":{"gitID":"kush1509"},"content":"    private final ObservableList\u003cJob\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":27,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"kush1509"},"content":"     * Returns true if the list contains an equivalent job as the given argument."},{"lineNumber":29,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"kush1509"},"content":"    public boolean contains(Job toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"kush1509"},"content":"     * Adds a job to the list."},{"lineNumber":37,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"kush1509"},"content":"     * @throws DuplicateJobException if the job to add is a duplicate of an existing job in the list."},{"lineNumber":39,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"kush1509"},"content":"    public void add(Job toAdd) throws DuplicateJobException {"},{"lineNumber":41,"author":{"gitID":"kush1509"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"kush1509"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"kush1509"},"content":"            throw new DuplicateJobException();"},{"lineNumber":44,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"kush1509"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":48,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"kush1509"},"content":"     * Replaces the job {@code target} in the list with {@code editedJob}."},{"lineNumber":50,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"kush1509"},"content":"     * @throws DuplicateJobException if the replacement is equivalent to another existing job in the list."},{"lineNumber":52,"author":{"gitID":"kush1509"},"content":"     * @throws JobNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"kush1509"},"content":"    public void setJob(Job target, Job editedJob)"},{"lineNumber":55,"author":{"gitID":"kush1509"},"content":"            throws DuplicateJobException, JobNotFoundException {"},{"lineNumber":56,"author":{"gitID":"kush1509"},"content":"        requireNonNull(editedJob);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"kush1509"},"content":"            throw new JobNotFoundException();"},{"lineNumber":61,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":63,"author":{"gitID":"kush1509"},"content":"        if (!target.equals(editedJob) \u0026\u0026 internalList.contains(editedJob)) {"},{"lineNumber":64,"author":{"gitID":"kush1509"},"content":"            throw new DuplicateJobException();"},{"lineNumber":65,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":67,"author":{"gitID":"kush1509"},"content":"        internalList.set(index, editedJob);"},{"lineNumber":68,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":70,"author":{"gitID":"kush1509"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"kush1509"},"content":"     * Removes the equivalent job from the list."},{"lineNumber":72,"author":{"gitID":"kush1509"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"kush1509"},"content":"     * @throws JobNotFoundException if no such job could be found in the list."},{"lineNumber":74,"author":{"gitID":"kush1509"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"kush1509"},"content":"    public boolean remove(Job toRemove) throws JobNotFoundException {"},{"lineNumber":76,"author":{"gitID":"kush1509"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"kush1509"},"content":"        final boolean jobFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"kush1509"},"content":"        if (!jobFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"kush1509"},"content":"            throw new JobNotFoundException();"},{"lineNumber":80,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"kush1509"},"content":"        return jobFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"kush1509"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"kush1509"},"content":""},{"lineNumber":84,"author":{"gitID":"kush1509"},"content":"    public void setJobs(UniqueJobList replacement) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"kush1509"},"content":"    public void setJobs(List\u003cJob\u003e jobs) throws DuplicateJobException {"},{"lineNumber":89,"author":{"gitID":"kush1509"},"content":"        requireAllNonNull(jobs);"},{"lineNumber":90,"author":{"gitID":"kush1509"},"content":"        final UniqueJobList replacement \u003d new UniqueJobList();"},{"lineNumber":91,"author":{"gitID":"kush1509"},"content":"        for (final Job job: jobs) {"},{"lineNumber":92,"author":{"gitID":"kush1509"},"content":"            replacement.add(job);"},{"lineNumber":93,"author":{"gitID":"kush1509"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"kush1509"},"content":"        setJobs(replacement);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"kush1509"},"content":"    public ObservableList\u003cJob\u003e asObservableList() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"kush1509"},"content":"    public Iterator\u003cJob\u003e iterator() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"kush1509"},"content":"                || (other instanceof UniqueJobList // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"kush1509"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueJobList) other).internalList));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kush1509":75,"-":45}}]
