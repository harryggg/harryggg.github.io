var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-T09-B1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"}],"authorContributionMap":{"kengsengg":1,"-":4}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"EduBuddy was developed by https://github.com/CS2103JAN2018-T09-B1/main[T09-B2] team. +"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Chua Kun Hong"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"image::chuakunhong.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"{empty}[https://github.com/chuakunhong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"Responsibilities: Logic component"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Goh Keng Seng"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"image::kengsengg.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"{empty}[https://github.com/kengsengg[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"Responsibilities: UI component"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Johnny Chan Jun Xun"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"image::johnnychanjx.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"{empty}[http://github.com/johnnychanjx[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"Responsibilities: Storage component"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Tey Xin Hui"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"image::TeyXinHui.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"{empty}[http://github.com/TeyXinHui[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"Responsibilities: Model component"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"kengsengg":22,"-":24}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d EduBuddy"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"https://travis-ci.org/CS2103JAN2018-T09-B1/main[image:https://travis-ci.org/CS2103JAN2018-T09-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"https://ci.appveyor.com/project/kengsengg/main[image:https://ci.appveyor.com/api/projects/status/imspkq3b5pvh5p1d?svg\u003dtrue[Build status]]"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"https://coveralls.io/github/CS2103JAN2018-T09-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T09-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"https://www.codacy.com/app/kengsengg/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103JAN2018-T09-B1/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/aa9351de0bd0451596b55bf5839464d9[Codacy Badge]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"* This is a desktop student profiling application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* It is a Java sample application intended for secondary school teachers while using Java as the main programming language."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"* The source code for this application is adapted from https://github.com/se-edu/addressbook-level4[AddressBook-Level 4 Project] created by SE-EDU initiative."},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":32,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"kengsengg":8,"-":27}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"\u003d EduBuddy - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"By: `CS2103JAN2018-T09-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"_EduBuddy_ is for those who *prefer to use a desktop app for managing student profiles*. More importantly, _EduBuddy_ is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, EduBuddy can get your student profile management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":".  Download the latest `EduBuddy.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::UI.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"* *`list` or `l`* : lists all students"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"* **`add` or `a`**`n/John Doe p/91234567 ic/S9315585J t/1A t/20 sub/English B3` : adds a student named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"* **`delete` or `d`**`3` : deletes the 3rd student shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME ic/S9500186H`, `ic/S9500186H n/NAME` is also acceptable."},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"* Items in square brackets are optional. e.g `n/NAME [t/CLASS]` can be used as `n/John Doe t/1A` or as `n/John Doe`."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Command input is not case sensitive, e.g \u0027fInD Alex\u0027 , \u0027find alex\u0027 works the same."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"Shows the help page. +"},{"lineNumber":62,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add` or `a`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"Adds a person to EduBuddy +"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"Format: `add n/NAME p/PHONE_NUMBER ic/NRIC  t/CLASS t/CLASS_REGISTER sub/English A2`"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `a n/NAME p/PHONE_NUMBER ic/NRIC  t/CLASS t/CLASS_REGISTER sub/English A2`"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"* `add n/John Doe p/91234567 ic/S9500186H t/1A t/20 sub/English B3 sub/Mathematics A2`"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"* `add n/Betsy Crowe p/91234567 t/2B t/21 ic/S9511111I`"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"* `a n/John Doe p/91234567 ic/S9500186H t/1A t/2 sub/English B3 sub/Mathematics A2`"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"* `a n/Betsy Crowe p/91234567 t/2B t/21 ic/S9511111I`"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Listing all student : `list` or `l`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"Shows a list of all students in EduBuddy. +"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"Format: `list` +"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `l`"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Sorting students : `sort [since v1.2]`"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"Sorts the list of students in EduBuddy according to the given parameter +"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"Format: `sort PARAMETER`"},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"****"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"* List of available PARAMETER: name, tag"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"****"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"Examples:"},{"lineNumber":93,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"* `sort name` +"},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":"Sorts the list of students by name in alphabetical order (case insensitive)."},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"* `sort tag` +"},{"lineNumber":97,"author":{"gitID":"kengsengg"},"content":"Sorts the list of students by tag in alphabetical and numerical order (case insensitive)"},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Editing a student : `edit` or `e`"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":"Edits an existing student in EduBuddy. +"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [ic/NRIC] [t/CLASS] [t/CLASS_REGISTER] [sub/SUBJECT_NAME SUBJECT_GRADE]` +"},{"lineNumber":102,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `e INDEX [n/NAME] [p/PHONE_NUMBER] [ic/NRIC] [t/CLASS] [t/CLASS_REGISTER] [sub/SUBJECT_NAME SUBJECT_GRADE]`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"****"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"* Edits the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":106,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":107,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":108,"author":{"gitID":"-"},"content":"****"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"* `edit 1 ic/S9123456A` +"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"Edits the nric number of the 1st student to be `S9123456A` respectively."},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"* `edit 2 n/Betsy Crower` +"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"Edits the name of the 2nd student to be `Betsy Crower`."},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"* `e 1 ic/S9123456A` +"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"Edits the nric number of the 1st student to be `S9123456A` respectively."},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"* `e 2 n/Betsy Crower` +"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"Edits the name of the 2nd student to be `Betsy Crower`."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Locating students by name: `find` or `f`"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":124,"author":{"gitID":"kengsengg"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":125,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"****"},{"lineNumber":128,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"* Students matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":133,"author":{"gitID":"-"},"content":"****"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"* `find John` or `f John` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":139,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` or `f Betsy Tim John` +"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"Returns any student having names `Betsy`, `Tim`, or `John`"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Deleting a student : `delete` or `d`"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"kengsengg"},"content":"Deletes the specified student from EduBuddy. +"},{"lineNumber":145,"author":{"gitID":"kengsengg"},"content":"Format: `delete INDEX` +"},{"lineNumber":146,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `d INDEX`"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"****"},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":"* Deletes the student at the specified `INDEX`."},{"lineNumber":150,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":152,"author":{"gitID":"-"},"content":"****"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":157,"author":{"gitID":"-"},"content":"`d 2` +"},{"lineNumber":158,"author":{"gitID":"kengsengg"},"content":"Deletes the 2nd student in EduBuddy."},{"lineNumber":159,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":"Deletes the 1st student in the results of the `find` command."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Deleting a tag : `tagdelete` or `td [since v1.1]`"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":165,"author":{"gitID":"kengsengg"},"content":"Deletes the specified tag from every student in EduBuddy. +"},{"lineNumber":166,"author":{"gitID":"kengsengg"},"content":"Format: `tagdelete TAGNAME` +"},{"lineNumber":167,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `td TAGNAME`"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"****"},{"lineNumber":170,"author":{"gitID":"kengsengg"},"content":"* Deletes the specified tag from every student in Edubuddy."},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"* The tag refers to the index number shown in the most recent listing."},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"* The tag must be a valid tag name that is assigned to at least one student in the Edubuddy."},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"****"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"Examples:"},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"* `tagdelete Class1A` or `td Class1A` +"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":"Deletes the \u0027Class 1A\u0027 tag from every student in the EduBuddy."},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":180,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Replacing a tag : `tagreplace` or `tr [since v1.2]`"},{"lineNumber":181,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":182,"author":{"gitID":"chuakunhong"},"content":"Replaces the specified tag from every student in EduBuddy with a specific tag. +"},{"lineNumber":183,"author":{"gitID":"kengsengg"},"content":"Format: `tagreplace t/TAGNAME t/TAGNAME`"},{"lineNumber":184,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `tr t/TAGNAME t/TAGNAME`"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":"****"},{"lineNumber":187,"author":{"gitID":"chuakunhong"},"content":"* Replaces the specified tag from every student in Edubuddy with a specific tag."},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"* The tag refers to the index number shown in the most recent listing."},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"* The tag must be a valid tag name that is assigned to at least one student in the Edubuddy."},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"****"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"Examples:"},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":194,"author":{"gitID":"chuakunhong"},"content":"* `tagreplace t/Class1A t/Class2A` or `tr t/Class1A t/Class2A` +"},{"lineNumber":195,"author":{"gitID":"chuakunhong"},"content":"Replaces the \u0027Class 1A\u0027 tag from every student in the EduBuddy with \u0027Class 2A\u0027."},{"lineNumber":196,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select` or `s`"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"chuakunhong"},"content":"Selects the student identified by the index number used in the last student listing. +"},{"lineNumber":200,"author":{"gitID":"kengsengg"},"content":"Format: `select INDEX` +"},{"lineNumber":201,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `s INDEX`"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"****"},{"lineNumber":204,"author":{"gitID":"chuakunhong"},"content":"* Selects the student and loads the student profile of the student at the specified `INDEX`."},{"lineNumber":205,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":206,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":207,"author":{"gitID":"-"},"content":"****"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":213,"author":{"gitID":"kengsengg"},"content":"Selects the 2nd student in EduBuddy."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"`s 1` +"},{"lineNumber":216,"author":{"gitID":"chuakunhong"},"content":"Selects the 1st student in the results of the `find` command."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `h`"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":221,"author":{"gitID":"kengsengg"},"content":"Format: `history` +"},{"lineNumber":222,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `h`"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":226,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `u`"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"kengsengg"},"content":"Restores EduBuddy to the state before the previous _undoable_ command was executed. +"},{"lineNumber":233,"author":{"gitID":"kengsengg"},"content":"Format: `undo` +"},{"lineNumber":234,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `u`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":238,"author":{"gitID":"chuakunhong"},"content":"Undoable commands: those commands that modify the EduBuddy\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":244,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":245,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":250,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"`u` (reverses the `clear` command) +"},{"lineNumber":255,"author":{"gitID":"-"},"content":"`u` (reverses the `delete 1` command) +"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `r`"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":260,"author":{"gitID":"kengsengg"},"content":"Format: `redo` +"},{"lineNumber":261,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `r`"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":266,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":277,"author":{"gitID":"-"},"content":"`r` (reapplies the `delete 1` command) +"},{"lineNumber":278,"author":{"gitID":"-"},"content":"`r` (reapplies the `clear` command) +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c`"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"kengsengg"},"content":"Clears all entries from EduBuddy. +"},{"lineNumber":284,"author":{"gitID":"kengsengg"},"content":"Format: `clear` +"},{"lineNumber":285,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `c`"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Creating an appointment on the calendar : `create [coming in v2.0]`"},{"lineNumber":293,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":294,"author":{"gitID":"kengsengg"},"content":"Creates an appointment with the student identified by the index number used"},{"lineNumber":295,"author":{"gitID":"kengsengg"},"content":"in the last student listing and displays it on the calendar."},{"lineNumber":296,"author":{"gitID":"kengsengg"},"content":"E.g. setting a consultation time slot with students. +"},{"lineNumber":297,"author":{"gitID":"kengsengg"},"content":"Format: `create INDEX date/DATE time/TIME`"},{"lineNumber":298,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":299,"author":{"gitID":"kengsengg"},"content":"****"},{"lineNumber":300,"author":{"gitID":"kengsengg"},"content":"* Date is in *DDMMYY* format"},{"lineNumber":301,"author":{"gitID":"kengsengg"},"content":"* Time is in *24 hour* format"},{"lineNumber":302,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":303,"author":{"gitID":"-"},"content":"****"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"kengsengg"},"content":"* `create 1 date/01022018 time/1500` +"},{"lineNumber":308,"author":{"gitID":"kengsengg"},"content":"Creates an appointment with the 1st student on `01022018` at `1500`"},{"lineNumber":309,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":310,"author":{"gitID":"chuakunhong"},"content":"// tag::remarks Command[]"},{"lineNumber":311,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Remarks Command `[coming in v2.0]`"},{"lineNumber":312,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":313,"author":{"gitID":"chuakunhong"},"content":"_{Allows the teachers to write a remark for the student for all other teachers to see. e.g. Medical/Injuries history}_"},{"lineNumber":314,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":315,"author":{"gitID":"chuakunhong"},"content":"// end::remarks Command[]"},{"lineNumber":316,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":317,"author":{"gitID":"chuakunhong"},"content":"// tag::CCA section[]"},{"lineNumber":318,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d CCA section `[coming in v2.0]`"},{"lineNumber":319,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":320,"author":{"gitID":"chuakunhong"},"content":"_{Allows the teachers to key in which CCA the students are in and to keep track of attendance.}_"},{"lineNumber":321,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":322,"author":{"gitID":"chuakunhong"},"content":"// end::CCA section[]"},{"lineNumber":323,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":324,"author":{"gitID":"chuakunhong"},"content":"// tag::L.E.A.P.S System[]"},{"lineNumber":325,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d L.E.A.P.S System `[coming in v2.0]`"},{"lineNumber":326,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":327,"author":{"gitID":"chuakunhong"},"content":"_{Allows the teachers to key in the levels attained by the student for the various domains in L.E.A.P.S"},{"lineNumber":328,"author":{"gitID":"chuakunhong"},"content":"  to calculate the Co-Curricular Attainment of the student.}_"},{"lineNumber":329,"author":{"gitID":"chuakunhong"},"content":"// end::L.E.A.P.S System[]"},{"lineNumber":330,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"chuakunhong"},"content":"EduBuddy data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":334,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":340,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":345,"author":{"gitID":"chuakunhong"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous EduBuddy folder."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"TeyXinHui"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER ic/NRIC t/CLASS t/CLASS_REGISTER sub/SUBJECT_NAME SUBJECT_GRADE` +"},{"lineNumber":350,"author":{"gitID":"TeyXinHui"},"content":"e.g. `add n/James Ho p/22224444 ic/S9500186H t/1A t/20 sub/English A2` +"},{"lineNumber":351,"author":{"gitID":"TeyXinHui"},"content":"e.g. `a n/James Ho p/22224444 ic/S9500186H t/1A t/20 sub/English A2` +"},{"lineNumber":352,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* *Clear* : `clear` or `c`"},{"lineNumber":354,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` or `d INDEX` +"},{"lineNumber":356,"author":{"gitID":"chuakunhong"},"content":"e.g. `delete 3` +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"e.g. `d 3`"},{"lineNumber":358,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":359,"author":{"gitID":"chuakunhong"},"content":"* *TagDelete* : `tagdelete TAGNAME` or `td TAGNAME` +"},{"lineNumber":360,"author":{"gitID":"chuakunhong"},"content":"e.g. `tagdelete CLASS2A` +"},{"lineNumber":361,"author":{"gitID":"chuakunhong"},"content":"e.g. `td CLASS2A`"},{"lineNumber":362,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":363,"author":{"gitID":"chuakunhong"},"content":"* *TagReplace* : `tagreplace t/TAGNAME t/TAGNAME` or `tr t/TAGNAME t/TAGNAME` +"},{"lineNumber":364,"author":{"gitID":"chuakunhong"},"content":"e.g. `tagreplace t/CLASS2A t/CLASS3A` +"},{"lineNumber":365,"author":{"gitID":"chuakunhong"},"content":"e.g. `tr t/CLASS2A t/CLASS3A`"},{"lineNumber":366,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":367,"author":{"gitID":"TeyXinHui"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [ic/NRIC] [t/CLASS] [t/CLASS_REGISTER] [sub/SUBJECT_NAME SUBJECT_GRADE]` +"},{"lineNumber":368,"author":{"gitID":"TeyXinHui"},"content":"`e INDEX [n/NAME] [p/PHONE_NUMBER] [ic/NRIC] [t/CLASS] [t/CLASS_REGISTER] [sub/SUBJECT_NAME SUBJECT_GRADE]` +"},{"lineNumber":369,"author":{"gitID":"chuakunhong"},"content":"e.g. `edit 2 n/James Lee` +"},{"lineNumber":370,"author":{"gitID":"chuakunhong"},"content":"e.g. `e 2 n/James Lee`"},{"lineNumber":371,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":373,"author":{"gitID":"chuakunhong"},"content":"e.g. `find James Jake` +"},{"lineNumber":374,"author":{"gitID":"-"},"content":"e.g. `f James Jake`"},{"lineNumber":375,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":376,"author":{"gitID":"kengsengg"},"content":"* *Sort* : `sort PARAMETER` +"},{"lineNumber":377,"author":{"gitID":"kengsengg"},"content":"e.g. `sort name` +"},{"lineNumber":378,"author":{"gitID":"kengsengg"},"content":"e.g. `sort tag`"},{"lineNumber":379,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"* *List* : `list` or `l`"},{"lineNumber":381,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":383,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` or `s INDEX`+"},{"lineNumber":385,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":386,"author":{"gitID":"-"},"content":"e.g.`s 2`"},{"lineNumber":387,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"* *History* : `history` or `h`"},{"lineNumber":389,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"* *Undo* : `undo` or `u`"},{"lineNumber":391,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"* *Redo* : `redo` or `r`"}],"authorContributionMap":{"chuakunhong":67,"kengsengg":82,"TeyXinHui":31,"-":212}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        //assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandBoxShowsDefaultStyle();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":2,"-":104}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"chuakunhong"},"content":"        //assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, expectedUrl);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":268,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":290,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":1,"TeyXinHui":3,"-":290}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"     * Asserts that {@code personCard} matches the tag details and color of {@code expectedPerson} correctly"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"    private static void assertTagsMatching(Person expectedPerson, PersonCardHandle personCard) {"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"        assertEquals(expectedTags, personCard.getTags());"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"kengsengg":9,"-":75}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedCard.getNric(), actualCard.getNric());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"            assertEquals(expectedCard.getTagStyles(tag), actualCard.getTagStyles(tag)));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedPerson.getNric().value, actualCard.getNric());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":2,"kengsengg":3,"-":67}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":1,"-":156}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d EduBuddy - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"By: `CS2103JAN2018-T09-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"Welcome to _EduBuddy_! This application is based on a Command Line Interface(CLI),"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"and is designed for secondary school teachers to manage student profiles in"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"a simple and efficient manner."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"This developer guide will help to provide you with a detailed walk-through of _EduBuddy_,"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"from the application set up procedure, to the explanation of the features and"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"troubleshooting methods."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"This section helps to guide you through the necessary steps to launch our application."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":50,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":51,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":55,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":56,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":57,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":62,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":71,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":72,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":75,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":90,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":95,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":102,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":105,"author":{"gitID":"kengsengg"},"content":"This section illustrates the overall design of our application and provides"},{"lineNumber":106,"author":{"gitID":"kengsengg"},"content":"the details of its individual components."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":112,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":139,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":144,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":147,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":155,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":163,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":168,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":171,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":183,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":189,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":190,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":196,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":199,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":200,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":201,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":206,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":209,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":212,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":220,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":221,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":227,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":234,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"},{"lineNumber":266,"author":{"gitID":"-"},"content":"----"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":269,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"----"},{"lineNumber":271,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"},{"lineNumber":286,"author":{"gitID":"-"},"content":"----"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":299,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":338,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":340,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":360,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":368,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":371,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"chuakunhong"},"content":"// tag::Sorting[]"},{"lineNumber":374,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Sort feature"},{"lineNumber":375,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"kengsengg"},"content":"The sorting feature allows the user to sort the list of students according to certain"},{"lineNumber":379,"author":{"gitID":"kengsengg"},"content":"parameters like name and tag. After the sorting process has completed, the user will be"},{"lineNumber":380,"author":{"gitID":"kengsengg"},"content":"presented with a read only view of the sorted list on the `UI`, and the state of the"},{"lineNumber":381,"author":{"gitID":"kengsengg"},"content":"list will not be modified."},{"lineNumber":382,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":383,"author":{"gitID":"kengsengg"},"content":"The figure below shows the Sequence Diagram for the interactions within the `Logic`"},{"lineNumber":384,"author":{"gitID":"kengsengg"},"content":"component when \"sort name\" is typed into the `CommandBox` by the user."},{"lineNumber":385,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":386,"author":{"gitID":"kengsengg"},"content":"image::SortCommandSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":387,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":388,"author":{"gitID":"kengsengg"},"content":". `Logic` uses `AddressBookParser` class to parse the user command,"},{"lineNumber":389,"author":{"gitID":"kengsengg"},"content":". A `SortCommand` object is created which is then executed by the `LogicManager`."},{"lineNumber":390,"author":{"gitID":"kengsengg"},"content":". The command executes and calls the `sortPersonList(parameter)` method, which then affects"},{"lineNumber":391,"author":{"gitID":"kengsengg"},"content":"  the `Model`."},{"lineNumber":392,"author":{"gitID":"kengsengg"},"content":". After the sorting process has been completed, the result is encapsulated as a"},{"lineNumber":393,"author":{"gitID":"kengsengg"},"content":"  `CommandResult` object, which is then passed back to the `Ui` as a message shown"},{"lineNumber":394,"author":{"gitID":"kengsengg"},"content":"  to the user."},{"lineNumber":395,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":396,"author":{"gitID":"kengsengg"},"content":"Below is an example of how the list looks like before and after the command \"sort name\""},{"lineNumber":397,"author":{"gitID":"kengsengg"},"content":"is executed."},{"lineNumber":398,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":399,"author":{"gitID":"kengsengg"},"content":"image::SortCommandByName.png[width\u003d\"650\"]"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How the list appears after sorting is done and the app is restarted"},{"lineNumber":404,"author":{"gitID":"kengsengg"},"content":"* ** Alternative 1 (current choice): ** List remains in its initial state after each"},{"lineNumber":405,"author":{"gitID":"kengsengg"},"content":"                                        restart of the app"},{"lineNumber":406,"author":{"gitID":"kengsengg"},"content":"** Pros: Some users might prefer the default list that was created by themselves e.g. the need"},{"lineNumber":407,"author":{"gitID":"kengsengg"},"content":"         to track which student was added last."},{"lineNumber":408,"author":{"gitID":"kengsengg"},"content":"** Cons: It will be a hassle to sort the list every time the app starts up if there"},{"lineNumber":409,"author":{"gitID":"kengsengg"},"content":"         are not many changes to the list."},{"lineNumber":410,"author":{"gitID":"kengsengg"},"content":"* ** Alternative 2: ** List is in the sorted form after the app is restarted every time"},{"lineNumber":411,"author":{"gitID":"kengsengg"},"content":"** Pros: Reduces the time taken to sort the list for each start up of the app."},{"lineNumber":412,"author":{"gitID":"kengsengg"},"content":"** Cons: If the default list is required, `SortCommand` will have to be implemented"},{"lineNumber":413,"author":{"gitID":"kengsengg"},"content":"         as an `UndoableCommand` as well."},{"lineNumber":414,"author":{"gitID":"chuakunhong"},"content":"// end::Sorting[]"},{"lineNumber":415,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":416,"author":{"gitID":"chuakunhong"},"content":"// tag::TagReplace[]"},{"lineNumber":417,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d TagReplace feature"},{"lineNumber":418,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":420,"author":{"gitID":"chuakunhong"},"content":"The tag replace is a command that replaces the target tag with the tag that we want."},{"lineNumber":421,"author":{"gitID":"chuakunhong"},"content":"The tags would be passed in via the argument multimap which would extract the tags with t/ prefix."},{"lineNumber":422,"author":{"gitID":"chuakunhong"},"content":"It would then be separated into two different tags, tag to be replaced and the tag to be placed."},{"lineNumber":423,"author":{"gitID":"chuakunhong"},"content":"Then the Addressbook would proceed to look for the persons with the unwanted tag to remove the unwanted"},{"lineNumber":424,"author":{"gitID":"chuakunhong"},"content":"tag and to add the new tag to the person."},{"lineNumber":425,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":426,"author":{"gitID":"kengsengg"},"content":"The figure below shows the Sequence Diagram for the interactions within the `Logic`"},{"lineNumber":427,"author":{"gitID":"chuakunhong"},"content":"component when \"tag replace t/TAGNAME t/TAGNAME\" is typed into the `CommandBox` by the user."},{"lineNumber":428,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":429,"author":{"gitID":"chuakunhong"},"content":"image::TagReplaceCommandSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":430,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":431,"author":{"gitID":"chuakunhong"},"content":".  `Logic` uses the `AddressBookParser` class to parse the  command."},{"lineNumber":432,"author":{"gitID":"chuakunhong"},"content":".  This results in a `TagReplaceCommand` object which is executed by the `LogicManager`."},{"lineNumber":433,"author":{"gitID":"chuakunhong"},"content":".  The command execution calls the `replaceTag` method which then affects the `Model`."},{"lineNumber":434,"author":{"gitID":"chuakunhong"},"content":".  The tag is then replaced and the result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":435,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":436,"author":{"gitID":"chuakunhong"},"content":"Below is an example of how the list looks like before and after the command \"tagreplace t/3G t/4G\""},{"lineNumber":437,"author":{"gitID":"chuakunhong"},"content":"is executed."},{"lineNumber":438,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":439,"author":{"gitID":"chuakunhong"},"content":"image::TagReplaceCommand.png[width\u003d\"650\"]"},{"lineNumber":440,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":441,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":442,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d Design Considerations."},{"lineNumber":443,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the tag replace command"},{"lineNumber":444,"author":{"gitID":"chuakunhong"},"content":"* ** Alternative 1: ** Reuse the set that exist in the Addressbook."},{"lineNumber":445,"author":{"gitID":"chuakunhong"},"content":"** Pros: Need not introduce a new data structure to store the tags that are passed in."},{"lineNumber":446,"author":{"gitID":"chuakunhong"},"content":"** Cons: A set arranges its elements in alphabetical order. This disrupts the order in which the user has entered,"},{"lineNumber":447,"author":{"gitID":"chuakunhong"},"content":"         and it would cause the wanted tag to be removed instead of the unwanted one."},{"lineNumber":448,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":449,"author":{"gitID":"chuakunhong"},"content":"// end::TagReplace[]"},{"lineNumber":450,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":451,"author":{"gitID":"TeyXinHui"},"content":"// tag::subject[]"},{"lineNumber":452,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Subject streaming calculation feature (work in progress)"},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":454,"author":{"gitID":"TeyXinHui"},"content":"The subject streaming calculation features will be supported by a calculation algorithm, `L1R5`, which will be located in `Logic Manager`. It will help to analyse the subjects that are assigned to the student, and determine which combination of subjects will produce the lowest `L1R5` score."},{"lineNumber":455,"author":{"gitID":"TeyXinHui"},"content":"The subjects and their respective grades can be assigned to the students by the `AddCommand`, with a subject prefix `sub/` followed by the `Subject Name` and `Subject Grade`."},{"lineNumber":456,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":457,"author":{"gitID":"TeyXinHui"},"content":"As the students are required to take at least 6 subjects, the subjects will be stored in as a parameter of each individual student as a `List\u003cSubject\u003e`."},{"lineNumber":458,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":459,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d Future implementation"},{"lineNumber":460,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":461,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `L1R5Command`"},{"lineNumber":462,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":463,"author":{"gitID":"TeyXinHui"},"content":"*  Create a `L1R5Command` which can be invoked by inputting `L1R5` followed by the `INDEX` assigned to the student in the `Command Box`."},{"lineNumber":464,"author":{"gitID":"TeyXinHui"},"content":"This will prompt the execution of a `L1R5` calculation function. The `L1R5Command` will extend the `Command` Interface."},{"lineNumber":465,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":466,"author":{"gitID":"TeyXinHui"},"content":"image::L1R5CommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":467,"author":{"gitID":"TeyXinHui"},"content":"image::L1R5CommandDiagram.png[width\u003d\"800\"]"},{"lineNumber":468,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":469,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of calculation function `L1R5`"},{"lineNumber":470,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":471,"author":{"gitID":"TeyXinHui"},"content":"*  When the calculation function is called by the `L1R5Command`, the specified student will be passed into the function."},{"lineNumber":472,"author":{"gitID":"TeyXinHui"},"content":"The function will load and store the list of subjects of the student and go through the list of subjects by their names to filter out which subject is L1, which subjects are R5."},{"lineNumber":473,"author":{"gitID":"TeyXinHui"},"content":"The calculation function will then determine which subject combination will produce the lowest overall `L1R5` score and output the lowest score."},{"lineNumber":474,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":475,"author":{"gitID":"TeyXinHui"},"content":"// end::subject[]"},{"lineNumber":476,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":477,"author":{"gitID":"TeyXinHui"},"content":"// tag::masstagremoval[]"},{"lineNumber":478,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Mass Tag Removal feature"},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"TeyXinHui"},"content":"The Mass Tag Removal feature is supported through the suggested Tag Removal feature for the Model Component in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":482,"author":{"gitID":"TeyXinHui"},"content":"The command `TagDeleteCommand` is implemented to call the `deleteTag()` function in the `Model` interface."},{"lineNumber":483,"author":{"gitID":"TeyXinHui"},"content":"The `deleteTag()` function will loop through the students in the `AddressBook` and will remove the specified Tag from every student that has the specified Tag and the students\u0027 `Tag List` will be updated."},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `TagDeleteCommand`"},{"lineNumber":488,"author":{"gitID":"TeyXinHui"},"content":"// end::masstagremoval[]"},{"lineNumber":489,"author":{"gitID":"TeyXinHui"},"content":"A `TagDeleteCommand` is where the user inputs `tagdelete [TAG_NAME]` or `td [TAG_NAME]` in the `Command Box`. When the user input fulfils the criteria of the expected input format, the command will execute."},{"lineNumber":490,"author":{"gitID":"TeyXinHui"},"content":"The `deleteTag()` function will be called and loops through the students in the `AddressBook`."},{"lineNumber":491,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":492,"author":{"gitID":"TeyXinHui"},"content":"* If the specified tag is not found tagged to any student, a `TagNotFoundException` will be thrown and a error message will be returned to the user."},{"lineNumber":493,"author":{"gitID":"TeyXinHui"},"content":"* Else, the `Tag List` of each student will be loaded and stored in a temporary `List` variable and the specified tag will be removed from it."},{"lineNumber":494,"author":{"gitID":"TeyXinHui"},"content":"Then a new student object with the updated `Tag List` will be replace the original student object. Thus the `AddressBook` will eventually have the updated list of students where the specified tag have been removed."},{"lineNumber":495,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":496,"author":{"gitID":"TeyXinHui"},"content":". Logic uses the AddressBookParser class to parse the command."},{"lineNumber":497,"author":{"gitID":"TeyXinHui"},"content":". This results in a TagDeleteCommand object which is executed by the LogicManager."},{"lineNumber":498,"author":{"gitID":"TeyXinHui"},"content":". The command execution calls the deleteTag method which then affects the Model."},{"lineNumber":499,"author":{"gitID":"TeyXinHui"},"content":". The tag is then deleted and the result of the command execution is encapsulated as a CommandResult object which is passed back to the Ui."},{"lineNumber":500,"author":{"gitID":"TeyXinHui"},"content":"The result will be shown on the `Command Box` in the format: `Deleted Tag: [TAG_NAME]`."},{"lineNumber":501,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":502,"author":{"gitID":"TeyXinHui"},"content":"image::TagDeleteCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":503,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":504,"author":{"gitID":"TeyXinHui"},"content":"Figure: Sequence Diagram of TagDeleteCommand if the specified tag exists."},{"lineNumber":505,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"// tag::browserpanel[]"},{"lineNumber":514,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Browser Panel Revamp"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":".First Half of Browser Panel"},{"lineNumber":517,"author":{"gitID":"-"},"content":"image::browser1.png[width\u003d\"600\"]"},{"lineNumber":518,"author":{"gitID":"-"},"content":".Second Half of Browser Panel"},{"lineNumber":519,"author":{"gitID":"-"},"content":"image::browser2.png[width\u003d\"600\"]"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"We will use a html page with w3.css framework support to implement the new Browser Panel."},{"lineNumber":522,"author":{"gitID":"-"},"content":"The browser panel can be controlled from the CLI interface, which manipulates the data in the browser panel."},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"The browser will be invoked by the selection of a student from ui/BrowserPanel. loadPersonPage() invokes the html file"},{"lineNumber":525,"author":{"gitID":"-"},"content":"of the student selected stored in resources/StudentPage."},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"*To Be implemented*"},{"lineNumber":528,"author":{"gitID":"-"},"content":"Creation of a html StudentPage file:"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"After add command is called successfully, a template file from StudentPage will be duplicated as a backup,"},{"lineNumber":531,"author":{"gitID":"-"},"content":"and renamed as the name that is called from the add command."},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"*To Be implemented*"},{"lineNumber":534,"author":{"gitID":"-"},"content":"Editing StudentPage file:"},{"lineNumber":535,"author":{"gitID":"-"},"content":"After edit command is called, list of new string will be stored into a javascript file and parsed into the"},{"lineNumber":536,"author":{"gitID":"-"},"content":"html file called by the function."},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"// end::browserpanel[]"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":547,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":552,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":553,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":554,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":557,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":566,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":571,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":584,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":585,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":586,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":589,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":592,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":593,"author":{"gitID":"kengsengg"},"content":"This section explains the various testing methods available in our application"},{"lineNumber":594,"author":{"gitID":"kengsengg"},"content":"and also provides some troubleshooting techniques."},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":601,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":606,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":613,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":626,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":627,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":628,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":629,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":630,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":631,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":632,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":633,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":634,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":638,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":641,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":658,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":665,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":666,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":667,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":672,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":673,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":676,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":686,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":691,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":696,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":699,"author":{"gitID":"-"},"content":"+"},{"lineNumber":700,"author":{"gitID":"-"},"content":"****"},{"lineNumber":701,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":702,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":703,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":704,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":705,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":706,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":707,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":708,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":709,"author":{"gitID":"-"},"content":"****"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":717,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":720,"author":{"gitID":"-"},"content":"+"},{"lineNumber":721,"author":{"gitID":"-"},"content":"****"},{"lineNumber":722,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":723,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":724,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":725,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":726,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":727,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":728,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":729,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":730,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":731,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":732,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":733,"author":{"gitID":"-"},"content":"****"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":736,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":741,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":744,"author":{"gitID":"-"},"content":"+"},{"lineNumber":745,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":746,"author":{"gitID":"-"},"content":"+"},{"lineNumber":747,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":748,"author":{"gitID":"-"},"content":"+"},{"lineNumber":749,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":750,"author":{"gitID":"-"},"content":"+"},{"lineNumber":751,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":752,"author":{"gitID":"-"},"content":"+"},{"lineNumber":753,"author":{"gitID":"-"},"content":"****"},{"lineNumber":754,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":755,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":756,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":757,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":758,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":759,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":761,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":762,"author":{"gitID":"-"},"content":"****"},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":765,"author":{"gitID":"-"},"content":"+"},{"lineNumber":766,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":767,"author":{"gitID":"-"},"content":"+"},{"lineNumber":768,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":769,"author":{"gitID":"-"},"content":"+"},{"lineNumber":770,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":771,"author":{"gitID":"-"},"content":"+"},{"lineNumber":772,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":773,"author":{"gitID":"-"},"content":"+"},{"lineNumber":774,"author":{"gitID":"-"},"content":"****"},{"lineNumber":775,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":776,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":777,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":778,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":779,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":780,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":781,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":782,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":783,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":784,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":785,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":786,"author":{"gitID":"-"},"content":"****"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":789,"author":{"gitID":"-"},"content":"+"},{"lineNumber":790,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":791,"author":{"gitID":"-"},"content":"+"},{"lineNumber":792,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":793,"author":{"gitID":"-"},"content":"+"},{"lineNumber":794,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":795,"author":{"gitID":"-"},"content":"+"},{"lineNumber":796,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":797,"author":{"gitID":"-"},"content":"+"},{"lineNumber":798,"author":{"gitID":"-"},"content":"****"},{"lineNumber":799,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":800,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":801,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":802,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":803,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":804,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":805,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":806,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":807,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":808,"author":{"gitID":"-"},"content":"****"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":811,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":816,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":819,"author":{"gitID":"-"},"content":"+"},{"lineNumber":820,"author":{"gitID":"-"},"content":"****"},{"lineNumber":821,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":822,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":823,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":824,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":825,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":826,"author":{"gitID":"-"},"content":"****"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":829,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":836,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":837,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":842,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":843,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":844,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":849,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":854,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":859,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":862,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":867,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":868,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":873,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":874,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":875,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":878,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":883,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":890,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":895,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":902,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":907,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":908,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":911,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":922,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":927,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":930,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":941,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":956,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"* is a secondary school teacher"},{"lineNumber":961,"author":{"gitID":"kengsengg"},"content":"* needs to know more about the students that they have taught"},{"lineNumber":962,"author":{"gitID":"-"},"content":"* has a need to track results"},{"lineNumber":963,"author":{"gitID":"kengsengg"},"content":"* has a need to manage a significant number of students"},{"lineNumber":964,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":965,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":966,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":967,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"TeyXinHui"},"content":"[appendix]"},{"lineNumber":972,"author":{"gitID":"-"},"content":"\u003d\u003d Feature Contribution"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"[width\u003d\"85%\",cols\u003d\"22%,\u003c23%,\u003c40%\",options\u003d\"header\",]"},{"lineNumber":975,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":976,"author":{"gitID":"-"},"content":"|Name | Major |Minor"},{"lineNumber":977,"author":{"gitID":"-"},"content":"|Johnny  |Display Panel: Add display panel functionalities to UI window | Data Integration: Integrate data input from user into display window"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"kengsengg"},"content":"|Xin Hui |Academic Section: Help teachers to view and manage students\u0027 academic information | Subject Class Database: Create subject class and integrate input into command. Add L1R5 calculation support into subject inputs."},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"|Kun Hong |Administrative Information: Add student administrative information into EduBuddy | Tag Support: Enhance tag functionalities in EduBuddy"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"kengsengg"},"content":"|Keng Seng |Calendar: Add calendar features which supports different administrative tasks | Sorting feature: Add sorting functionalities based on various parameters"},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":990,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":995,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":996,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":997,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"kengsengg"},"content":"|`* * *` |teacher |sort students\u0027 results |know who are the ones that need more academic help easily"},{"lineNumber":1000,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1001,"author":{"gitID":"kengsengg"},"content":"|`* * *` |teacher |update students\u0027 classes |know which classes they are in easily"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"TeyXinHui"},"content":"|`* * *` |teacher |update students\u0027 academic results |view and obtain students\u0027 streaming score (eg.L1R5)"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"kengsengg"},"content":"|`* * *` |teacher |access student\u0027s academic and non-academic achievements |stream the students properly (e.g. Normal Academic, Normal Technical, Express)"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"|`* * *` |teacher |access student profiles easily  | have first hand information on all my students without going through a lot of documentation"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"kengsengg"},"content":"|`* * *` |teacher |edit remarks of each individual student |update the students\u0027 individual needs that occur during class"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |filter and group students |access information of specific students"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |update student\u0027s marks |track the student\u0027s improvement in a certain subject"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |know the students\u0027 emergency contact information |know who to contact when something happens to the student"},{"lineNumber":1017,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1018,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |update student\u0027s attendance records |know if a student has been absent too frequently"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"kengsengg"},"content":"|`*` |teacher |look up on student\u0027s identity |recognize who the student is"},{"lineNumber":1021,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1022,"author":{"gitID":"kengsengg"},"content":"|`*` |teacher |know which subjects that I have taught them before |customize my teaching methods for different students"},{"lineNumber":1023,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1024,"author":{"gitID":"chuakunhong"},"content":"|`*` |teacher |can track the student\u0027s progress in the CCA |decide whether to involve the student more"},{"lineNumber":1025,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1026,"author":{"gitID":"chuakunhong"},"content":"|`*` |teacher |key in the levels attained by the students in the various domains in L.E.A.P.S system"},{"lineNumber":1027,"author":{"gitID":"chuakunhong"},"content":"|calculate the Co-Curricular Attainment achieved by the student."},{"lineNumber":1028,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1029,"author":{"gitID":"chuakunhong"},"content":"|`*` |teacher |view the student\u0027s injuries history |to know the need of my students."},{"lineNumber":1030,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1031,"author":{"gitID":"kengsengg"},"content":"|`*` |teacher |know which subjects that I have taught them before |customize my teaching methods for different students"},{"lineNumber":1032,"author":{"gitID":"kengsengg"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"kengsengg"},"content":"(For all use cases below, the *System* is `EduBuddy` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1055,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1059,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1062,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"kengsengg"},"content":"[discrete]"},{"lineNumber":1066,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Use case: Retrieve information of selected person"},{"lineNumber":1067,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1068,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1069,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1070,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1072,"author":{"gitID":"kengsengg"},"content":"3.  User requests to select a specific person in the list"},{"lineNumber":1073,"author":{"gitID":"kengsengg"},"content":"4.  AddressBook loads the information of the selected person"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1081,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1085,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1088,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"kengsengg"},"content":"[discrete]"},{"lineNumber":1092,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Use case: Add remarks for person"},{"lineNumber":1093,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1094,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1095,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1096,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1098,"author":{"gitID":"kengsengg"},"content":"3.  User requests to add remarks for a specific person in the list"},{"lineNumber":1099,"author":{"gitID":"kengsengg"},"content":"4.  AddressBook shows the updated information of the selected person"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1107,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1111,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1114,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1115,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"kengsengg"},"content":"[discrete]"},{"lineNumber":1118,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Use case: Add an appointment"},{"lineNumber":1119,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1120,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1121,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1122,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1123,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1124,"author":{"gitID":"kengsengg"},"content":"3.  User requests to add an appointment for a specific person in the list by typing in a date and time"},{"lineNumber":1125,"author":{"gitID":"kengsengg"},"content":"4.  AddressBook shows the updated details of the appointment"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1133,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1139,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1140,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"kengsengg"},"content":"* 3b. The given date or time is in a invalid format."},{"lineNumber":1144,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1145,"author":{"gitID":"kengsengg"},"content":"[none]"},{"lineNumber":1146,"author":{"gitID":"kengsengg"},"content":"** 3b1. AddressBook shows an error message."},{"lineNumber":1147,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1149,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1150,"author":{"gitID":"kengsengg"},"content":"* 3c. The given date or time is already booked by another appointment."},{"lineNumber":1151,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1152,"author":{"gitID":"kengsengg"},"content":"[none]"},{"lineNumber":1153,"author":{"gitID":"kengsengg"},"content":"** 3c1. AddressBook prompts user to input another date or time."},{"lineNumber":1154,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"TeyXinHui"},"content":"[discrete]"},{"lineNumber":1158,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Use case: Update students\u0027 academic results"},{"lineNumber":1159,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1160,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1161,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1162,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1164,"author":{"gitID":"TeyXinHui"},"content":"3.  User requests to update students\u0027 academic results"},{"lineNumber":1165,"author":{"gitID":"TeyXinHui"},"content":"4.  AddressBook shows updated details of academic results"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1173,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1177,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1180,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1182,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1183,"author":{"gitID":"TeyXinHui"},"content":"[discrete]"},{"lineNumber":1184,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Use case: Sort students by the students\u0027 academic streaming results"},{"lineNumber":1185,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1186,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1187,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1188,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1190,"author":{"gitID":"TeyXinHui"},"content":"3.  User requests to sort students by students\u0027 academic results"},{"lineNumber":1191,"author":{"gitID":"TeyXinHui"},"content":"4.  AddressBook shows sorted list of students"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1199,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"TeyXinHui"},"content":"* 3a. Students do not have subjects assigned to them."},{"lineNumber":1203,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1213,"author":{"gitID":"-"},"content":".  Should be able to hold up to 450,000 students"},{"lineNumber":1214,"author":{"gitID":"-"},"content":" without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1215,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1216,"author":{"gitID":"-"},"content":"."},{"lineNumber":1217,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"TeyXinHui"},"content":"[[Grade]] Grade::"},{"lineNumber":1223,"author":{"gitID":"TeyXinHui"},"content":"The grading of the subjects by the level of competence the students show during the examinations."},{"lineNumber":1224,"author":{"gitID":"TeyXinHui"},"content":"The level of achievement in each subject is indicated by the grade obtained, with A1 being the highest achievable grade and F9 the lowest:"},{"lineNumber":1225,"author":{"gitID":"TeyXinHui"},"content":"** A1/A2 (Distinction)"},{"lineNumber":1226,"author":{"gitID":"TeyXinHui"},"content":"** B3/B4 (Merit)"},{"lineNumber":1227,"author":{"gitID":"TeyXinHui"},"content":"** C5/C6 (Credit/Pass)"},{"lineNumber":1228,"author":{"gitID":"TeyXinHui"},"content":"** D7/E8/F9 (Below O Level Pass)"},{"lineNumber":1229,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1230,"author":{"gitID":"TeyXinHui"},"content":"[[L1R5]] L1R5::"},{"lineNumber":1231,"author":{"gitID":"TeyXinHui"},"content":"A grading system for Secondary School students taking \"O Level Examination\" at the end of their four years of studies in Secondary School."},{"lineNumber":1232,"author":{"gitID":"TeyXinHui"},"content":"The score obtained from the grading system will be used to determine the eligibility of the students to enter the next level of education."},{"lineNumber":1233,"author":{"gitID":"TeyXinHui"},"content":"`L1` represents the First language (English) grade and `R5` represents 5 relevant subjects\u0027 grades. The score will be calculated by considering the subjects\u0027 grades."},{"lineNumber":1234,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1240,"author":{"gitID":"-"},"content":""},{"lineNumber":1241,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1256,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1271,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1277,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1287,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1289,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1291,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"chuakunhong":43,"johnnychanjx":1,"kengsengg":115,"TeyXinHui":74,"-":1069}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    private static final String INVALID_NRIC \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_NRIC \u003d \"S9482424X\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_REMARK \u003d \" \";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(0, dataFromFile.getSubjectList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":80,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"                null, VALID_NRIC, VALID_TAGS, null, VALID_REMARK);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":89,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"                VALID_NAME, INVALID_NRIC, VALID_TAGS, null, VALID_REMARK);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":98,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"                VALID_NAME, VALID_NRIC, VALID_TAGS, null, VALID_REMARK);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":132,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":6,"TeyXinHui":2,"-":137}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":68,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":94,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":108,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":116,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":167,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":174,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":2,"-":213}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS); // invalid nric"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + NRIC_DESC_BOB + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_NRIC_AMY,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"                + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB;"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_AMY;"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_AMY).build();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased()  + NRIC_DESC_AMY"},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"                + TAG_DESC_FRIEND + NRIC_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"                + NRIC_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB)"},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_NRIC_DESC + NRIC_DESC_BOB;"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NRIC_DESC + NRIC_DESC_BOB;"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":19,"TeyXinHui":6,"-":153}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    private static final String INVALID_NRIC \u003d \"+651234\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_NRIC \u003d \"S1234561Z\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((Optional\u003cString\u003e) null));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseNric(Optional.of(INVALID_NRIC)));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"    public void parseNric_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(ParserUtil.parseNric(Optional.empty()).isPresent());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"    public void parseNric_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(Optional.of(expectedNric), ParserUtil.parseNric(Optional.of(VALID_NRIC)));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(Optional.of(expectedNric), ParserUtil.parseNric(Optional.of(nricWithWhitespace)));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":18,"-":158}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand."},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"public class SortCommandTest {"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    private SortCommand sortCommand;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"        String parameter \u003d \"name\";"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        sortCommand \u003d new SortCommand(parameter);"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void showsSortedList() throws IOException {"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS_SORT_BY_NAME, expectedModel);"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":36,"-":6}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"public class SortCommandParserTest {"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":13,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_AMY + NRIC_DESC_BOB +  TAG_DESC_FRIEND,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"                .withTags().build();"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_NRIC_BOB,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":27,"TeyXinHui":4,"-":84}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withNric(VALID_NRIC_BOB).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":1,"TeyXinHui":1,"-":46}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_HUSBAND).withRemark(VALID_REMARK).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws IOException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).withRemark(\" \").build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() throws IOException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws IOException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"kengsengg"},"content":"    /*"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":6,"TeyXinHui":14,"kengsengg":2,"-":237}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws IOException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    public static final String VALID_NRIC_AMY \u003d \"S1111111Z\";"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S2222222Z\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_TAG_REMOVE \u003d \"remove\";"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_MATHEMATICS \u003d \"Mathematics A1\";"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_ENGLISH \u003d \"English A1\";"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_PHYSICS \u003d \"Physics A1\";"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_MALAY \u003d \"Malay A1\";"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_BIOLOGY \u003d \"Biology A1\";"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_HISTORY \u003d \"History A1\";"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    public static final String VALID_REMARK \u003d \" \";"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS + \" \""},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_PHYSICS + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_ENGLISH + \" \""},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_MALAY + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BIOLOGY + \" \""},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_HISTORY;"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS + \" \""},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_PHYSICS + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_ENGLISH + \" \""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_MALAY + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BIOLOGY + \" \""},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_HISTORY;"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK;"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"                .withTags(VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS, VALID_SUBJECT_PHYSICS,"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"                        VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY, VALID_SUBJECT_BIOLOGY, VALID_SUBJECT_HISTORY)"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"                .withRemark(REMARK_DESC_AMY).build();"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS,"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"                        VALID_SUBJECT_PHYSICS, VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY, VALID_SUBJECT_BIOLOGY,"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"                        VALID_SUBJECT_HISTORY).withRemark(REMARK_DESC_BOB).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            Model expectedModel) throws IOException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":13,"TeyXinHui":22,"-":132}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() throws IOException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/TagDeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"public class TagDeleteCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    private Tag tagToDelete \u003d new Tag(\"removeTag\");"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_validTagToRemoveEntered_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cTag\u003e tagList \u003d addressBook.getTagList();"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        Tag removeTag \u003d tagList.get(0);"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d prepareCommand(removeTag);"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(TagDeleteCommand.MESSAGE_DELETE_TAG_SUCCESS, removeTag);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.deleteTag(removeTag);"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandSuccess(tagDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_invalidTagToRemoveEntered_throwsCommandException() throws IOException {"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(tagDeleteCommand, model, Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidTagToRemoveEntered_failure() throws IOException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(tagDeleteCommand, model, Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"    private TagDeleteCommand prepareCommand(Tag removeTag) {"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d new TagDeleteCommand(removeTag);"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        tagDeleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        return tagDeleteCommand;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":38,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_L1R5_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.person.exceptions.InvalidSubjectCombinationException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess (Index index) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        Person selectedPerson \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d selectedPerson.calculateL1R5();"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"        } catch (InvalidSubjectCombinationException error) {"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"            //do nothing"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"            assertEquals(result.append(String.format(MESSAGE_SELECT_PERSON_SUCCESS, selectedPerson.getName()))"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"                            .append(String.format(MESSAGE_L1R5_SUCCESS, score)).toString(),"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":16,"-":141}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":1,"-":100}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(readBack));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        //Modify data, overwrite existing file, and read back"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        original.removePerson(CARL);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(readBack));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(readBack));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":5,"-":119}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        public void replaceTag(List\u003cTag\u003e tagList) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public void addPage(Person person) throws IOException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":158,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"kengsengg"},"content":"        public void sortPersonList(String parameter) {"},{"lineNumber":160,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":161,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":163,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"kengsengg"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":165,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":166,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":6,"kengsengg":11,"TeyXinHui":6,"-":179}},{"path":"src/test/java/seedu/address/model/person/NricTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"public class NricTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"        String invalidNric \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"phone\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"9312 1534\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(Nric.isValidNric(\"S9312154Z\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":12,"-":27}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"S1234567Z\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withNric(\"S1234567Z\")"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"                .build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":3,"-":72}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    /* trailing whitespace in expected cant be removed"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":47}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_PHONE \u003d BENSON.getNric().toString();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    /*private static final List\u003cXmlAdaptedSubject\u003e VALID_SUBJECTS \u003d BENSON.getSubjects().stream()"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"            .map(XmlAdaptedSubject::new)"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"            .collect(Collectors.toList());*/"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_TAGS, null, VALID_REMARK);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_TAGS, null, VALID_REMARK);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_TAGS, null, VALID_REMARK);"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_TAGS, null, VALID_REMARK);"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, invalidTags, null, VALID_REMARK);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":10,"TeyXinHui":3,"-":65}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_REMOVE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cSubject\u003e newSubjects \u003d new ArrayList\u003c\u003e(ALICE.getSubjects());"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newSubjects);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTag_tagNotFound_throwsTagNotFoundException() {"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook testCase \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"            testCase.removeTag(new Tag(VALID_TAG_REMOVE));"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"            assertEquals(error.getMessage(), \"Specific tag is not used in the address book.\");"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedAddressBook, testCase);"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTag_tagFoundOnMultiplePersons_tagRemoved() {"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook testCase \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"            testCase.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"            thrown.expect(TagNotFoundException.class);"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedAddressBook, testCase);"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        private final ObservableList\u003cSubject\u003e subjects \u003d FXCollections.observableArrayList();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":116,"author":{"gitID":"kengsengg"},"content":"                        Collection\u003c? extends Subject\u003e subjects) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"            this.subjects.setAll(subjects);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"        public ObservableList\u003cSubject\u003e getSubjectList() {"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"            return subjects;"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":44,"kengsengg":2,"-":92}},{"path":"src/test/java/seedu/address/model/subject/SubjectTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.subject;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"public class SubjectTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Subject(null));"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"    public void constructorWithTwoStringParameters_invalidSubjectName_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"        String validSubjectGrade \u003d \"A2\";"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Subject(invalidTagName, validSubjectGrade));"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    public void constructorWithTwoStringParameters_invalidSubjectGrade_throwsIllegalArgumentException() {"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"        String validTagName \u003d \"English\";"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"        String invalidSubjectGrade \u003d \"\";"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Subject(validTagName, invalidSubjectGrade));"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"    public void constructorWithOneStringPararmeter_validSubjectFormatEntered_success() {"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        String validSubjectFormat \u003d \"English A1\";"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        Subject testing \u003d new Subject(validSubjectFormat);"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(\"English\", testing.subjectName);"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(\"A1\", testing.subjectGrade);"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    public void isValidSubjectName_invalidSubjectNameEntered_exceptionThrown() {"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"        // null subject name"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubjectName(null));"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"        // invalid subject name"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectName(\"\")); // empty string"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectName(\" \")); // spaces only"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectName(\"English*\")); // contains non-alphanumeric characters"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectName(\"2djs22\")); //contains alphanumeric characters"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        // valid name"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(Subject.isValidSubjectName(\"English\")); // alphabets only"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(Subject.isValidSubjectName(\"Mathematics\")); // numbers only"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    public void isValidSubjectGrade_invalidSubjectGradeEntered_exceptionThrown() {"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"        // null subject grade"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubjectGrade(null));"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"        // invalid name"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectGrade(\"\")); // empty string"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectGrade(\" \")); // spaces only"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectGrade(\"^\")); // only non-alphanumeric characters"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(Subject.isValidSubjectGrade(\"121*\")); // contains non-alphanumeric characters"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        // valid name"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(Subject.isValidSubjectGrade(\"A1\")); // alphabets only"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(Subject.isValidSubjectGrade(\"B3\")); // numbers only"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"    public void equals_compareTwoDifferentObjects_notEquals() {"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        Subject subject1 \u003d new Subject(\"English A1\");"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        Subject subject3  \u003d new Subject(\"Mathematics A2\");"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        //Compare two different subjects"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        assertNotEquals(subject1, subject3);"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":71,"-":11}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setNric(person.getNric());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        descriptor.setSubjects(person.getSubjects());"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setRemark(person.getRemark());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    public EditPersonDescriptorBuilder withNric(String nric) {"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setNric(new Nric(nric));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"    public EditPersonDescriptorBuilder withSubjects(String... subjects) {"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectSet \u003d Stream.of(subjects).map(Subject::new).collect(Collectors.toSet());"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        descriptor.setSubjects(subjectSet);"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"    public EditPersonDescriptorBuilder withRemark(String remark) {"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setRemark(new Remark(remark));"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":15,"TeyXinHui":8,"-":66}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        sb.append(PREFIX_NRIC + person.getNric().value + \" \");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":31,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"        person.getSubjects().stream().forEach("},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"            s -\u003e sb.append(PREFIX_SUBJECT + s.subjectName + \" \" + s.subjectGrade + \" \")"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        );"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"TeyXinHui":4,"-":32}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_NRIC \u003d \"S8535525Z\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] DEFAULT_SUBJECTS \u003d {\"English A1\",  \"Mathematics A1\", \"History A1\", \"H.Tamil A1\","},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"                                                     \"Chemistry A1\", \"Physics A1\"};"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_REMARK \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    private Nric nric;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    private Set\u003cSubject\u003e subjects;"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    private Remark remark;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d SampleDataUtil.getSubjectSet(DEFAULT_SUBJECTS);"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        nric \u003d personToCopy.getNric();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new HashSet\u003c\u003e(personToCopy.getSubjects());"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        remark \u003d personToCopy.getRemark();"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Nric} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"    public PersonBuilder withNric(String nric) {"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        this.nric \u003d new Nric(nric);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"     * Parses the {@code subjects} into a {@code Set\u003cSubject\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"    public PersonBuilder withSubjects(String ... subjects) {"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"        this.subjects \u003d SampleDataUtil.getSubjectSet(subjects);"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"        return new Person(name, nric, tags, subjects, remark);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":23,"TeyXinHui":13,"-":60}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BIOLOGY;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_ENGLISH;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_HISTORY;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_MALAY;"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_MATHEMATICS;"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_PHYSICS;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withNric(\"S8535525Z\")"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"            .withTags(\"friends\").withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\","},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"                                              \"Chemistry A1\", \"Physics A1\").withRemark(\"\").build();"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withNric(\"S9123456X\")"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"            .withTags(\"owesMoney\", \"friends\").withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\","},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"                                                           \"H.Tamil A1\", \"Chemistry A1\", \"Physics A2\")"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"                                                           .withRemark(\"\").build();"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withNric(\"S9535256J\")"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"            .withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\", \"Chemistry A1\", \"Physics A1\")"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(\"\").build();"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withNric(\"S8765253I\")"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"            .withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\", \"Chemistry A1\", \"Physics A1\")"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(\"\").build();"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withNric(\"S9482224A\")"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"            .withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\", \"Chemistry A1\", \"Physics A1\")"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(\"\").build();"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withNric(\"S9482427J\")"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"            .withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\", \"Chemistry A1\", \"Physics A1\")"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(\"\").build();"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withNric(\"S9482442U\")"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"            .withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\", \"Chemistry A1\", \"Physics A1\")"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(\"\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withNric(\"S8482424Z\")"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"            .withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\", \"Chemistry A1\", \"Physics A1\")"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(\"\").build();"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withNric(\"S8482131K\")"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"            .withSubjects(\"English A1\", \"Mathematics A1\", \"History A1\", \"H.Tamil A1\", \"Chemistry A1\", \"Physics A1\")"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(\"\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"            .withTags(VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS, VALID_SUBJECT_PHYSICS,"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"                      VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY , VALID_SUBJECT_BIOLOGY, VALID_SUBJECT_HISTORY)"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).build();"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS,"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"                      VALID_SUBJECT_PHYSICS, VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY , VALID_SUBJECT_BIOLOGY,"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"                      VALID_SUBJECT_HISTORY).withRemark(\"\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":23,"TeyXinHui":21,"kengsengg":1,"-":48}},{"path":"src/test/java/seedu/address/model/subject/UniqueSubjectListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.subject;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"public class UniqueSubjectListTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"        UniqueSubjectList uniqueSubjectList \u003d new UniqueSubjectList();"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"        uniqueSubjectList.asObservableList().remove(0);"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":8,"-":10}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"    private static final String NRIC_FIELD_ID \u003d \"#nric\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    private final Label nricLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        this.nricLabel \u003d getChildNode(NRIC_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    public String getNric() {"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        return nricLabel.getText();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"    public List\u003cString\u003e getTagStyles(String tag) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"                .findFirst()"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":4,"TeyXinHui":1,"kengsengg":7,"-":54}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    private static final String[] tagColors \u003d { \"red\" , \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"indigo\","},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"                                                \"purple\" , \"pink\" , \"grey\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    private Label nric;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    private Label remark;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        nric.setText(person.getNric().value);"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"        setTags(person);"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        remark.setText(person.getRemark().value);"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"     * Generates different colors for different tag labels"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"     * @param tagName"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"     * @return a color style that is listed under tagColors array"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"    private String generateTagColor(String tagName) {"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"        return tagColors[Math.abs(tagName.hashCode()) % tagColors.length];"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"     * Creates the tag labels for {@code person} with different colors assigned to different tag names"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"    private void setTags(Person person) {"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"            tagLabel.getStyleClass().add(generateTagColor(tag.tagName));"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":5,"kengsengg":24,"-":65}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_INVALID_TAG_ENTERED \u003d \"The person tag provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_INSUFFICIENT_SUBJECTS \u003d \"Insufficient subjects to calculate L1R5\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":2,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_TAG, PREFIX_SUBJECT, PREFIX_REMARK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"            Set\u003cSubject\u003e subjectList \u003d ParserUtil.parseSubjects(argMultimap.getAllValues(PREFIX_SUBJECT));"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"            Remark remark;"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"            if (!(argMultimap.getValue(PREFIX_REMARK)).isPresent()) {"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"                remark \u003d ParserUtil.parseRemark(\" \");"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"            } else {"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"                remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"            Person person \u003d new Person(name, nric, tagList, subjectList, remark);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":14,"TeyXinHui":3,"-":52}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"sub/\");"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"TeyXinHui":1,"kengsengg":3,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.AppointmentCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.TagDeleteCommand;"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.TagReplaceCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"        case TagDeleteCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        case TagDeleteCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"            return new TagDeleteCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"        case TagReplaceCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"        case TagReplaceCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"            return new TagReplaceCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"        case AppointmentCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"        case AppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"            return new AppointmentCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":9,"kengsengg":10,"TeyXinHui":5,"-":101}},{"path":"src/main/java/seedu/address/logic/parser/AppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.AppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":" * Parses input arguments and creates a new AppointmentCommand object"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"public class AppointmentCommandParser implements Parser\u003cAppointmentCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"     * Parses the given {@code String} of arguments in the context of the AppointmentCommand"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"     * and returns an AppointmentCommand object for execution."},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"    public AppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"            String date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"            String startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"            String endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"            Appointment appointment \u003d new Appointment(date, startTime, endTime);"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"            return new AppointmentCommand(index, appointment);"},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":59}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"     * Parses a {@code String nric} into a {@code Nric}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"     * @throws IllegalValueException if the given {@code nric} is invalid."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"    public static Nric parseNric(String nric) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(nric);"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"        String trimmedNric \u003d nric.trim();"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        if (!Nric.isValidNric(trimmedNric)) {"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"        return new Nric(trimmedNric);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e nric} into an {@code Optional\u003cNric\u003e} if {@code nric} is present."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    public static Optional\u003cNric\u003e parseNric(Optional\u003cString\u003e nric) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(nric);"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"        return nric.isPresent() ? Optional.of(parseNric(nric.get())) : Optional.empty();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code List\u003cTag\u003e}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"    public static List\u003cTag\u003e parseTagsForReplacement(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(tags);"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        final List\u003cTag\u003e tagSet \u003d new LinkedList\u003c\u003e();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"     * Splits a {@code String subject} into {@code String subjectName} and {@code String subjectGrade}"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"     * Parses {@code String subjectName} and {@code String subjectGrade}into a {@code Subject}."},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"    public static Subject parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subject);"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"        String[] splitSubjectStr \u003d subject.trim().split(\"\\\\s+\");"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"        String subjectName \u003d splitSubjectStr[0];"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"        String subjectGrade \u003d splitSubjectStr[1];"},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"        if (!Subject.isValidSubjectName(subjectName)) {"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_NAME_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"        if (!Subject.isValidSubjectGrade(subjectGrade)) {"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"        return new Subject(subjectName, subjectGrade);"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject}."},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"    public static Set\u003cSubject\u003e parseSubjects(Collection\u003cString\u003e subjects) throws IllegalValueException {"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subjects);"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e subjectSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"        for (String subject : subjects) {"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":"            subjectSet.add(parseSubject(subject));"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"        return subjectSet;"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":"     * Parses a {@code String remark} into a {@code Remark}."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"chuakunhong"},"content":"    public static Remark parseRemark(String remark) {"},{"lineNumber":175,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":177,"author":{"gitID":"chuakunhong"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":178,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":180,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"chuakunhong"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"chuakunhong"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) {"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code String date} into a {@code String}."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":192,"author":{"gitID":"kengsengg"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":193,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"kengsengg"},"content":"    public static String parseDate(String date) throws IllegalValueException {"},{"lineNumber":195,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(date);"},{"lineNumber":196,"author":{"gitID":"kengsengg"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":197,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentDate(trimmedDate)) {"},{"lineNumber":198,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_DATE_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"kengsengg"},"content":"        return new String(trimmedDate);"},{"lineNumber":201,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":203,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cString\u003e} if {@code date} is present."},{"lineNumber":205,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"kengsengg"},"content":"    public static Optional\u003cString\u003e parseDate (Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":207,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(date);"},{"lineNumber":208,"author":{"gitID":"kengsengg"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":209,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":211,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code String startTime} into a {@code String}."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":215,"author":{"gitID":"kengsengg"},"content":"     * @throws IllegalValueException if the given {@code startTime} is invalid."},{"lineNumber":216,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"kengsengg"},"content":"    public static String parseStartTime(String startTime) throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(startTime);"},{"lineNumber":219,"author":{"gitID":"kengsengg"},"content":"        String trimmedStartTime \u003d startTime.trim();"},{"lineNumber":220,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentStartTime(trimmedStartTime)) {"},{"lineNumber":221,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_START_TIME_CONSTRAINTS);"},{"lineNumber":222,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"kengsengg"},"content":"        return new String(trimmedStartTime);"},{"lineNumber":224,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":226,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e startTime} into an {@code Optional\u003cString\u003e} if {@code startTime} is present."},{"lineNumber":228,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"kengsengg"},"content":"    public static Optional\u003cString\u003e parseStartTime (Optional\u003cString\u003e startTime) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(startTime);"},{"lineNumber":231,"author":{"gitID":"kengsengg"},"content":"        return startTime.isPresent() ? Optional.of(parseStartTime(startTime.get())) : Optional.empty();"},{"lineNumber":232,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":234,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code String endTime} into a {@code String}."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":238,"author":{"gitID":"kengsengg"},"content":"     * @throws IllegalValueException if the given {@code endTime} is invalid."},{"lineNumber":239,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"kengsengg"},"content":"    public static String parseEndTime(String endTime) throws IllegalValueException {"},{"lineNumber":241,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(endTime);"},{"lineNumber":242,"author":{"gitID":"kengsengg"},"content":"        String trimmedEndTime \u003d endTime.trim();"},{"lineNumber":243,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentEndTime(trimmedEndTime)) {"},{"lineNumber":244,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_END_TIME_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"kengsengg"},"content":"        return new String(trimmedEndTime);"},{"lineNumber":247,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":249,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e endTime} into an {@code Optional\u003cString\u003e} if {@code endTime} is present."},{"lineNumber":251,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"kengsengg"},"content":"    public static Optional\u003cString\u003e parseEndTime (Optional\u003cString\u003e endTime) throws IllegalValueException {"},{"lineNumber":253,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(endTime);"},{"lineNumber":254,"author":{"gitID":"kengsengg"},"content":"        return endTime.isPresent() ? Optional.of(parseEndTime(endTime.get())) : Optional.empty();"},{"lineNumber":255,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":34,"kengsengg":64,"TeyXinHui":35,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_TAG, PREFIX_SUBJECT);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).ifPresent(editPersonDescriptor::setNric);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"            parseSubjectsForEdit(argMultimap.getAllValues(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubjects);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject\u003e} if {@code subjects} is non-empty."},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"     * If {@code subjects} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"     * {@code Set\u003cSubject\u003e} containing zero subjects."},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"    private Optional\u003cSet\u003cSubject\u003e\u003e parseSubjectsForEdit(Collection\u003cString\u003e subjects) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"        assert subjects !\u003d null;"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        if (subjects.isEmpty()) {"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"            return Optional.empty();"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"        Collection\u003cString\u003e subjectSet \u003d subjects.size() \u003d\u003d 1 \u0026\u0026 subjects.contains(\"\")"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"                ? Collections.emptySet() : subjects;"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        return Optional.of(ParserUtil.parseSubjects(subjectSet));"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"TeyXinHui":17,"kengsengg":2,"-":72}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    private static final String[] ALLOWED_PARAMETERS \u003d {\"name\", \"tag\"};"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    private int arrayCounter \u003d 0;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    private boolean validParameter \u003d false;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"        while (arrayCounter \u003c ALLOWED_PARAMETERS.length) {"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"            if (trimmedArgs.equals(ALLOWED_PARAMETERS[arrayCounter++])) {"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"                validParameter \u003d true;"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"                break;"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"            }"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"        if (!validParameter) {"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"        return new SortCommand(trimmedArgs);"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":35,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":" * Sorts all the people in the list by their names in alphabetical order (case insensitive)"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"public class SortCommand extends Command {"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_SUCCESS_SORT_BY_NAME \u003d \"Sorted all persons by name in alphabetical order\";"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_SUCCESS_SORT_BY_TAG \u003d \"Sorted all persons by tag in alphabetical order\";"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the student list by the parameter provided \""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"            + \"by the user.\\n\""},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"            + \"Parameters: KEYWORD (valid keyword: name, tag)\\n\""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_WORD + \" name\\n\";"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"    private final String parameter;"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    public SortCommand(String parameter) {"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"        this.parameter \u003d parameter;"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"        model.sortPersonList(parameter);"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"        if ((\"name\").equals(parameter)) {"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"            return new CommandResult(MESSAGE_SUCCESS_SORT_BY_NAME);"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"        return new CommandResult(MESSAGE_SUCCESS_SORT_BY_TAG);"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":32}},{"path":"src/main/java/seedu/address/logic/parser/TagDeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.TagDeleteCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"public class TagDeleteCommandParser implements Parser\u003cTagDeleteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"     * Parses the given {@code String} of arguments in the context of the TagDeleteCommand"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"     * and returns an TagDeleteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"    public TagDeleteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"            Tag tag \u003d ParserUtil.parseTag(args.trim());"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"            return new TagDeleteCommand(tag);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":16,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_NRIC + \"S9876543H \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_TAG + \"owesMoney\""},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + \"English A2\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_NRIC + \"S9876543H \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_TAG + \"owesMoney\""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + \"English A2\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            model.addPage(toAdd);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            //EventsCenter.getInstance().post(new JumpToListRequestEvent(model.getFilteredPersonList().size() - 1));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":3,"TeyXinHui":6,"-":68}},{"path":"src/main/java/seedu/address/logic/parser/TagReplaceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.TagReplaceCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"public class TagReplaceCommandParser implements Parser\u003cTagReplaceCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the TagReplaceCommand"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * and returns an TagReplaceCommand object for execution."},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    public TagReplaceCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"            List\u003cTag\u003e tagSet \u003d ParserUtil.parseTagsForReplacement(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"            return new TagReplaceCommand(tagSet);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagReplaceCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""}],"authorContributionMap":{"chuakunhong":23,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.RemarkCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_REMARK)) {"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).ifPresent(editPersonDescriptor::setRemark);"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        return new RemarkCommand(index, editPersonDescriptor);"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":22,"-":28}},{"path":"src/main/java/seedu/address/logic/commands/TagDeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":" * Keyword matching is case insensitive."},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"public class TagDeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_WORD \u003d \"tagdelete\";"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_ALIAS \u003d \"td\";"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes specified tag from everyone in the \""},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"            + \"in the address book.\\n\""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"            + \"Parameters: Tag \\n\""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1A\\n\""},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1A\";"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    private Tag tagToDelete;"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    public TagDeleteCommand(Tag tagToDelete) {"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"        this.tagToDelete \u003d tagToDelete;"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(tagToDelete);"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"            model.deleteTag(tagToDelete);"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"            throw new AssertionError(\"The target tag cannot be missing\");"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cTag\u003e lastShownList \u003d addressBook.getTagList();"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        if (!lastShownList.contains(tagToDelete)) {"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"                || (other instanceof TagDeleteCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.tagToDelete.equals(((TagDeleteCommand) other).tagToDelete)); // state check"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":42,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ViewSubjectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":" * Finds specific person by the index and displays selected person\u0027s subject in the Command Box."},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"public class ViewSubjectCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_ALIAS \u003d \"v\";"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds person of specified index and \""},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"            + \" and displays his or her subject list.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    public ViewSubjectCommand(Index index) {"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(index);"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        return new CommandResult(String.format(\"Student\u0027s subject(s): \"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"                || (other instanceof ViewSubjectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.targetIndex.equals(((ViewSubjectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":22,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.person.exceptions.InvalidSubjectCombinationException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":" * Calls L1R5 function in Model to calculate L1R5 score and outputs L1R5 score of selected person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_L1R5_SUCCESS \u003d \". L1R5 Score: %1$s\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    private int score;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        this.score \u003d 0;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        Person selectedPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        if (selectedPerson.getSubjects().size() \u003c 6) {"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"            throw new CommandException(Messages.MESSAGE_INSUFFICIENT_SUBJECTS);"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d selectedPerson.calculateL1R5();"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        } catch (InvalidSubjectCombinationException error) {"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"            return new CommandResult(\"Please check that you have at least 1 subject in each category.\");"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"        return new CommandResult(result.append(String.format(MESSAGE_SELECT_PERSON_SUCCESS, selectedPerson.getName()))"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"                .append(String.format(MESSAGE_L1R5_SUCCESS, score)).toString());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":19,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \""},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\""},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_SUBJECT + \"SUBJECT]...\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_NRIC + \"S9123457A\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1 \""},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_NRIC + \"S9123457A\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"        private Nric nric;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"        private Set\u003cSubject\u003e  subjects;"},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"        private Remark remark;"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":147,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":148,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":"            setNric(toCopy.nric);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"            setSubjects(toCopy.subjects);"},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"            setRemark(toCopy.remark);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":159,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.nric, this.tags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"chuakunhong"},"content":"        public void setNric(Nric nric) {"},{"lineNumber":173,"author":{"gitID":"chuakunhong"},"content":"            this.nric \u003d nric;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"        public Optional\u003cNric\u003e getNric() {"},{"lineNumber":177,"author":{"gitID":"chuakunhong"},"content":"            return Optional.ofNullable(nric);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":183,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":190,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":191,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":192,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"        /**"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":"         * Sets {@code subjects} to this object\u0027s {@code subjects}."},{"lineNumber":199,"author":{"gitID":"TeyXinHui"},"content":"         * A defensive copy of {@code subjects} is used internally."},{"lineNumber":200,"author":{"gitID":"TeyXinHui"},"content":"         */"},{"lineNumber":201,"author":{"gitID":"TeyXinHui"},"content":"        public void setSubjects(Set\u003cSubject\u003e subjects) {"},{"lineNumber":202,"author":{"gitID":"TeyXinHui"},"content":"            this.subjects \u003d (subjects !\u003d null) ? new HashSet\u003c\u003e(subjects) : null;"},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":205,"author":{"gitID":"TeyXinHui"},"content":"        /**"},{"lineNumber":206,"author":{"gitID":"TeyXinHui"},"content":"         * Returns an unmodifiable subject set, which throws {@code UnsupportedOperationException}"},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":208,"author":{"gitID":"TeyXinHui"},"content":"         * Returns {@code Optional#empty()} if {@code subjects} is null."},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"         */"},{"lineNumber":210,"author":{"gitID":"TeyXinHui"},"content":"        public Optional\u003cSet\u003cSubject\u003e\u003e getSubjects() {"},{"lineNumber":211,"author":{"gitID":"TeyXinHui"},"content":"            return (subjects !\u003d null) ? Optional.of(Collections.unmodifiableSet(subjects)) : Optional.empty();"},{"lineNumber":212,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":214,"author":{"gitID":"chuakunhong"},"content":"        public void setRemark(Remark remark) {"},{"lineNumber":215,"author":{"gitID":"chuakunhong"},"content":"            this.remark \u003d remark;"},{"lineNumber":216,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":218,"author":{"gitID":"chuakunhong"},"content":"        public Optional\u003cRemark\u003e getRemark() {"},{"lineNumber":219,"author":{"gitID":"chuakunhong"},"content":"            return Optional.ofNullable(remark);"},{"lineNumber":220,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":238,"author":{"gitID":"chuakunhong"},"content":"                    \u0026\u0026 getNric().equals(e.getNric())"},{"lineNumber":239,"author":{"gitID":"TeyXinHui"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":240,"author":{"gitID":"TeyXinHui"},"content":"                    \u0026\u0026 getSubjects().equals(e.getSubjects());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":24,"TeyXinHui":28,"-":191}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    private String nric;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    private List\u003cXmlAdaptedSubject\u003e subjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    private String remark;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    public XmlAdaptedPerson(String name, String nric, List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedSubject\u003e subjects,"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"                            String remark) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        this.nric \u003d nric;"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d remark;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        if (subjects !\u003d null) {"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"            this.subjects \u003d new ArrayList\u003c\u003e(subjects);"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        nric \u003d source.getNric().value;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        for (Subject subject : source.getSubjects()) {"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"            subjects.add(new XmlAdaptedSubject(subject));"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        final List\u003cSubject\u003e personSubjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"        for (XmlAdaptedSubject subject : subjects) {"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"            personSubjects.add(subject.toModelType());"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        if (this.nric \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        if (!Nric.isValidNric(this.nric)) {"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        final Nric nric \u003d new Nric(this.nric);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(personSubjects);"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        if (this.remark \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        return new Person(name, nric, tags, subjects, remark);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(nric, otherPerson.nric)"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged)"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 subjects.equals(otherPerson.subjects)"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 remark.equals(otherPerson.remark);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":23,"TeyXinHui":16,"-":98}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    private List\u003cXmlAdaptedSubject\u003e subjects;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        subjects.addAll(src.getSubjectList().stream().map(XmlAdaptedSubject::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"        for (XmlAdaptedSubject s: subjects) {"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"            addressBook.addSubject(s.toModelType());"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 subjects.equals(otherAb.subjects);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":8,"-":72}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":" * Represents an appointment in EduBuddy."},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"public class Appointment {"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_APPOINTMENT_DATE_CONSTRAINTS \u003d \"Appointment date should be in DDMMYYYY format\";"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_APPOINTMENT_START_TIME_CONSTRAINTS \u003d \"Appointment start time should be in \""},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"            + \"24 hour format\";"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_APPOINTMENT_END_TIME_CONSTRAINTS \u003d \"Appointment end time should be in \""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"            + \"24 hour format\";"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    public static final String APPOINTMENT_DATE_VALIDATION_REGEX \u003d \"^[0-9]{8}$\";"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    public static final String APPOINTMENT_START_TIME_VALIDATION_REGEX \u003d \"^[0-9]{4}$\";"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"    public static final String APPOINTMENT_END_TIME_VALIDATION_REGEX \u003d \"^[0-9]{4}$\";"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"    public final String date;"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    public final String startTime;"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public final String endTime;"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    public Appointment(String date, String startTime, String endTime) {"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    public String getDate() {"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"        return date;"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"    public String getStartTime() {"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        return startTime;"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"    public String getEndTime() {"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"        return endTime;"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"     * Returns true if a given string is a valid appointment date."},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"    public static boolean isValidAppointmentDate(String date) {"},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(date);"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"        return date.matches(APPOINTMENT_DATE_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"     * Returns true if a given string is a valid appointment start time."},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"    public static boolean isValidAppointmentStartTime(String startTime) {"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(startTime);"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"        return startTime.matches(APPOINTMENT_START_TIME_VALIDATION_REGEX);"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"     * Returns true if a given string is a valid appointment end time."},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"    public static boolean isValidAppointmentEndTime(String endTime) {"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(endTime);"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"        return endTime.matches(APPOINTMENT_END_TIME_VALIDATION_REGEX);"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":65}},{"path":"src/main/java/seedu/address/logic/commands/TagReplaceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":" * Keyword matching is case insensitive."},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"public class TagReplaceCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"tagReplace\";"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_ALIAS \u003d \"tr\";"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Replace specified tag from everyone in the \""},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"            + \"address book with the intended tag.\" + \"Parameters: Tag \\n\""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"1A \" + PREFIX_TAG + \"2A\\n\""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" \" + PREFIX_TAG + \"1A \" + PREFIX_TAG + \"2A\";"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REPLACE_TAG_SUCCESS \u003d \"Replaced Tag: From %1$s to %2$s\";"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    private Tag tagToReplace;"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    private List\u003cTag\u003e tagSet \u003d new LinkedList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    private Tag[] tagArray \u003d new Tag[2];"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public TagReplaceCommand(List\u003cTag\u003e tagSet) {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(tagSet);"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        this.tagSet \u003d tagSet;"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(tagSet);"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"            model.replaceTag(tagSet);"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"            throw new AssertionError(\"The target tag cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REPLACE_TAG_SUCCESS, tagArray[0], tagArray[1]));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cTag\u003e lastShownList \u003d addressBook.getTagList();"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        tagSet.toArray(tagArray);"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        if (tagSet.isEmpty() || tagSet.size() \u003d\u003d 1) {"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagReplaceCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        } else if (!lastShownList.contains(tagArray[0])) {"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof TagReplaceCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.tagToReplace.equals(((TagReplaceCommand) other).tagToReplace)); // state check"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":41,"TeyXinHui":11,"-":20}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":" * Signals that the operation will result in duplicate Appointment objects."},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":11,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/AppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":" * Creates an appointment for the student at the specified index."},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"public class AppointmentCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_WORD \u003d \"appointment\";"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_ALIAS \u003d \"appt\";"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a consultation appointment for the student \""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"            + \"at the specified index.\\n\""},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_START_TIME + \"START TIME \""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_END_TIME + \"END TIME \\n\""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_DATE + \"28031998 \""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_START_TIME + \"1500 \""},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_END_TIME + \"1600 \\n\""},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1 \""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_DATE + \"28031998 \""},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_START_TIME + \"1500 \""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_END_TIME + \"1600 \";"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in EduBuddy\";"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    private final Index index;"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"    private final Appointment toAdd;"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"    private Person selectedPerson;"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"     * Creates an AppointmentCommand to add the specified {@code Appointment}"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"    public AppointmentCommand(Index index, Appointment appointment) {"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(index);"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(appointment);"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"        this.index \u003d index;"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"        this.toAdd \u003d appointment;"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"            model.addAppointment(toAdd);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"            selectedPerson \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"            String appointmentDetails \u003d toAdd.getStartTime() + \" to \" + toAdd.getEndTime() + \" on \" + toAdd.getDate()"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"                    + \" with \" + selectedPerson.getName();"},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, appointmentDetails));"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"                || (other instanceof AppointmentCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 toAdd.equals(((AppointmentCommand) other).toAdd));"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":""}],"authorContributionMap":{"kengsengg":67,"-":12}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Nric(\"S8743880X\"),"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"friends\"), getSubjectSet(\"English A2\"), new Remark(\"Class Rep\")),"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Bernice Yu\"), new Nric(\"S9927275Z\"),"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"colleagues\", \"friends\"), getSubjectSet(\"Mathematics A1\"), new Remark(\"Math Rep\")),"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Nric(\"S9321028H\"),"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"neighbours\"), getSubjectSet(\"Chemistry B3\"), new Remark(\"Chemistry Rep\")),"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"David Li\"), new Nric(\"S9103128J\"),"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"family\"), getSubjectSet(\"Physics B3\"), new Remark(\"Physics Rep\")),"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Nric(\"S9249202K\"),"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"classmates\"), getSubjectSet(\"Humanities B4\"), new Remark(\"Humanities Rep\")),"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Nric(\"S9262441U\"),"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"colleagues\"), getSubjectSet(\"Chinese C5\"), new Remark(\"Chinese Rep\"))"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"     * Returns a subject set containing the list of strings given."},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"    public static Set\u003cSubject\u003e getSubjectSet(String... strings) {"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        HashSet\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        for (String s : strings) {"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"            subjects.add(new Subject(s));"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"        return subjects;"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":14,"TeyXinHui":13,"-":46}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"     * Sorts {@code internalList} by name in alphabetical order (case insensitive)"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"kengsengg"},"content":"    public void sortNames() {"},{"lineNumber":102,"author":{"gitID":"kengsengg"},"content":"        Comparator\u003cPerson\u003e compareName \u003d (person1, person2) -\u003e +person1.getName().toString()"},{"lineNumber":103,"author":{"gitID":"kengsengg"},"content":"                .compareToIgnoreCase(person2.getName().toString());"},{"lineNumber":104,"author":{"gitID":"kengsengg"},"content":"        internalList.sort(compareName);"},{"lineNumber":105,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":107,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"kengsengg"},"content":"     * Sorts {@code internalList} by tag in alphabetical order (case insensitive)"},{"lineNumber":109,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"kengsengg"},"content":"    public void sortTags() {"},{"lineNumber":111,"author":{"gitID":"kengsengg"},"content":"        Comparator\u003cPerson\u003e compareTags \u003d (person1, person2) -\u003e +person1.getTags().toString()"},{"lineNumber":112,"author":{"gitID":"kengsengg"},"content":"                .compareToIgnoreCase(person2.getTags().toString());"},{"lineNumber":113,"author":{"gitID":"kengsengg"},"content":"        internalList.sort(compareTags);"},{"lineNumber":114,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":19,"-":120}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedSubject.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"TeyXinHui"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":" *"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"public class XmlAdaptedSubject {"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"    private String subjectName;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"    private String subjectGrade;"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs an XmlAdaptedSubject."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    public XmlAdaptedSubject() {}"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs a {@code XmlAdaptedSubject} with the given {@code subject}."},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    public XmlAdaptedSubject(String subject) {"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"        String[] splitSubjectStr \u003d subject.trim().split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"        String subjectName \u003d splitSubjectStr[0];"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        String subjectGrade \u003d splitSubjectStr[1];"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d subjectName;"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d subjectGrade;"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"     * Converts a given Subject into this class for JAXB use."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    public XmlAdaptedSubject(Subject source) {"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        subjectName \u003d source.subjectName;"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"        subjectGrade \u003d source.subjectGrade;"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"     * Converts this jaxb-friendly adapted subject object into the model\u0027s subject object."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"    public Subject toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        if (!Subject.isValidSubjectName(subjectName)) {"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_NAME_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        if (!Subject.isValidSubjectGrade(subjectGrade)) {"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        return new Subject(subjectName, subjectGrade);"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        if (this \u003d\u003d other) { //same object"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"            return true;"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        if (!(other instanceof XmlAdaptedSubject)) {"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"        XmlAdaptedSubject object \u003d (XmlAdaptedSubject) other;"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        return this.subjectName \u003d\u003d object.subjectName \u0026\u0026 this.subjectGrade \u003d\u003d object.subjectGrade;"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":64,"-":10}},{"path":"src/main/java/seedu/address/model/person/exceptions/InvalidSubjectCombinationException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":" * Signals that the student did not have a valid subject combination entered."},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"public class InvalidSubjectCombinationException extends Exception {"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"    public InvalidSubjectCombinationException(String message) {"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":7,"-":3}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.person.exceptions.InvalidSubjectCombinationException;"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.UniqueSubjectList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    private final Nric nric;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    private final UniqueSubjectList subjects;"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    private final Remark remark;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    public Person(Name name, Nric nric, Set\u003cTag\u003e tags, Set\u003cSubject\u003e subjects, Remark remark) {"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"        requireAllNonNull(name, nric, tags, subjects);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        this.nric \u003d nric;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        this.subjects \u003d new UniqueSubjectList(subjects);"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d remark;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    public Nric getNric() {"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        return nric;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    public Remark getRemark() {"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"        return remark;"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    public Set\u003cSubject\u003e getSubjects() {"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        return Collections.unmodifiableSet(subjects.toSet());"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"     * Calculates the lowest possible score from the grades of the subjects of the selected person."},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"     * @return L1R5 score"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"    public int calculateL1R5() throws InvalidSubjectCombinationException {"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(this.getSubjects());"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectsToCheck \u003d new HashSet\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject subject: subjects) {"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"                switch (i) {"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a L1 subject"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"                case 0:"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.L1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R1 subject"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"                case 1:"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R2 subject"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"                case 2:"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R2_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R3 subject"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"                case 3:"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R3_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R4 or R5 subject"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"                case 4:"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"                case 5:"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R4_R5_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"                default:"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"            // Check that if the student has at least one subject in each L1R5 category, else return error message"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"            if (checkLowest(subjectsToCheck, subjects) \u003d\u003d 10) {"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"                throw new InvalidSubjectCombinationException(\"Subjects taken do not fulfil the L1R5 requirements.\");"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"            } else {"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"                score +\u003d checkLowest(subjectsToCheck, subjects);"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"            subjectsToCheck.clear();"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"        return score;"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"     * Takes in a set of subjects under the category of L1 or R5 and find the smallest grade score."},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"     * Removes the best subject from the full list of subjects of the student to prevent the same subject being"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"     * considered in the L1R5 score more than once."},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"     * @param subjectsToCheck"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"     * @return lowest grade score"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":"    public static int checkLowest(Set\u003cSubject\u003e subjectsToCheck, Set\u003cSubject\u003e subjects) {"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        int lowest \u003d 10;"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"        Subject bestSubject \u003d new Subject();"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"        for (Subject subject: subjectsToCheck) {"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"            if (Character.getNumericValue(subject.subjectGrade.charAt(1)) \u003c lowest) {"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"                lowest \u003d Character.getNumericValue(subject.subjectGrade.charAt(1));"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"                bestSubject \u003d subject;"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"        subjects.remove(bestSubject);"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"        return lowest;"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 otherPerson.getNric().equals(this.getNric());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":"        return Objects.hash(name, nric, tags, subjects, remark);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":"                .append(\" Nric: \")"},{"lineNumber":170,"author":{"gitID":"chuakunhong"},"content":"                .append(getNric())"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"        builder.append(\" Subjects: \");"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"        getSubjects().forEach(builder::append);"},{"lineNumber":175,"author":{"gitID":"chuakunhong"},"content":"        builder.append(\" Remarks: \")"},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"               .append(getRemark());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":17,"TeyXinHui":91,"-":72}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": You can put anything, even nothing.\\n\""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"REMARKS...\\n\""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"Need help\\n\""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"\\n\";"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_PERSON_SUCCESS \u003d \"Remark added: %1$s\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"    public RemarkCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REMARK_PERSON_SUCCESS, editedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"            return false;"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"        private Nric nric;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        private Set\u003cSubject\u003e  subjects;"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"        private Remark remark;"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":140,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"            setNric(toCopy.nric);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"            setSubjects(toCopy.subjects);"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"            setRemark(toCopy.remark);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":151,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.nric, this.tags);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"chuakunhong"},"content":"        public void setNric(Nric nric) {"},{"lineNumber":165,"author":{"gitID":"chuakunhong"},"content":"            this.nric \u003d nric;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"chuakunhong"},"content":"        public Optional\u003cNric\u003e getNric() {"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":"            return Optional.ofNullable(nric);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":175,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":182,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":183,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":184,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"        /**"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"         * Sets {@code subjects} to this object\u0027s {@code subjects}."},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"         * A defensive copy of {@code subjects} is used internally."},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"         */"},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"        public void setSubjects(Set\u003cSubject\u003e subjects) {"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"            this.subjects \u003d (subjects !\u003d null) ? new HashSet\u003c\u003e(subjects) : null;"},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":197,"author":{"gitID":"chuakunhong"},"content":"        public void setRemark(Remark remark) {"},{"lineNumber":198,"author":{"gitID":"chuakunhong"},"content":"            this.remark \u003d remark;"},{"lineNumber":199,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":201,"author":{"gitID":"chuakunhong"},"content":"        public Optional\u003cRemark\u003e getRemark() {"},{"lineNumber":202,"author":{"gitID":"chuakunhong"},"content":"            return Optional.ofNullable(remark);"},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":205,"author":{"gitID":"TeyXinHui"},"content":"        /**"},{"lineNumber":206,"author":{"gitID":"TeyXinHui"},"content":"         * Returns an unmodifiable subject set, which throws {@code UnsupportedOperationException}"},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":208,"author":{"gitID":"TeyXinHui"},"content":"         * Returns {@code Optional#empty()} if {@code subjects} is null."},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"         */"},{"lineNumber":210,"author":{"gitID":"TeyXinHui"},"content":"        public Optional\u003cSet\u003cSubject\u003e\u003e getSubjects() {"},{"lineNumber":211,"author":{"gitID":"TeyXinHui"},"content":"            return (subjects !\u003d null) ? Optional.of(Collections.unmodifiableSet(subjects)) : Optional.empty();"},{"lineNumber":212,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":230,"author":{"gitID":"chuakunhong"},"content":"                    \u0026\u0026 getNric().equals(e.getNric())"},{"lineNumber":231,"author":{"gitID":"TeyXinHui"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":232,"author":{"gitID":"TeyXinHui"},"content":"                    \u0026\u0026 getSubjects().equals(e.getSubjects());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":46,"TeyXinHui":24,"-":165}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"     * Returns an unmodifiable view of the subjects list."},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"     * This list will not contain any duplicate subjects."},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    ObservableList\u003cSubject\u003e getSubjectList();"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":7,"-":24}},{"path":"src/main/java/seedu/address/model/person/Nric.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":" * Represents a Person\u0027s nric number in the address book."},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"public class Nric {"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"            \"Nric should start with a S, should be at 7 digits long\""},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"                    + \" and should end with a capital letter.\";"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"    public static final String NRIC_VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"     * Constructs a {@code Nric}."},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * @param nric A valid nric number."},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public Nric(String nric) {"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(nric);"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        checkArgument(isValidNric(nric), MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        this.value \u003d nric;"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if a given string is a valid person nric number."},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    public static boolean isValidNric(String test) {"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        return test.matches(NRIC_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof Nric // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.value.equals(((Nric) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":29,"TeyXinHui":1,"-":24}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.UniqueSubjectList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"    private final UniqueSubjectList subjects;"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new UniqueSubjectList();"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"    public void setSubjects(Set\u003cSubject\u003e subjects) {"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        this.subjects.setSubjects(subjects);"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"                .map(this::syncWithMasterTagSubjectList)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"     * Also checks the new person\u0027s tags and subjects and updates {@link #tags #subjects} with any new"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"     * tags or subjects found, and updates the Tag objects and Subject objects in the person"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"     * to point to those in {@link #tags #subjects}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        Person person \u003d syncWithMasterTagSubjectList(p);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"     * {@code AddressBook}\u0027s tag and subject list will be updated with the tags and subjects of {@code editedPerson}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"     * @see #syncWithMasterTagSubjectList(Person)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagSubjectList(editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        removeUnusedTags();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"kengsengg"},"content":"    public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":134,"author":{"gitID":"kengsengg"},"content":"        appointments.add(appointment);"},{"lineNumber":135,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"    private void removeUnusedTags() {"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"                .map(Person::getTags)"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"                .flatMap(Set::stream)"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"     *  Updates the master tag list to include tags and subjects in {@code person} that are not in the list."},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"     *  and a Subject Object in the master list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"    private Person syncWithMasterTagSubjectList(Person person) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"        final UniqueSubjectList personSubjects \u003d new UniqueSubjectList((person.getSubjects()));"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"        subjects.mergeFrom(personSubjects);"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"        // Create map with values \u003d subject object references in the master list"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"        // used for checking person subject references"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"        final Map\u003cSubject, Subject\u003e masterSubjectObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"        subjects.forEach(subject -\u003e masterSubjectObjects.put(subject, subject));"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":170,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"        // Rebuild the list of person subjects to point to the relevant subjects in the master subject list."},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e correctSubjectReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"        personSubjects.forEach(subject -\u003e correctSubjectReferences.add(masterSubjectObjects.get(subject)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"                person.getName(), person.getNric(), correctTagReferences, correctSubjectReferences, person.getRemark());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"kengsengg"},"content":"     * Chooses the sorting method based on the parameter given"},{"lineNumber":193,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"kengsengg"},"content":"    public void sort(String parameter) {"},{"lineNumber":195,"author":{"gitID":"kengsengg"},"content":"        if ((\"name\").equals(parameter)) {"},{"lineNumber":196,"author":{"gitID":"kengsengg"},"content":"            persons.sortNames();"},{"lineNumber":197,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"kengsengg"},"content":"        if ((\"tag\").equals(parameter)) {"},{"lineNumber":199,"author":{"gitID":"kengsengg"},"content":"            persons.sortTags();"},{"lineNumber":200,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"    public void addSubject(Subject s) throws UniqueSubjectList.DuplicateSubjectException {"},{"lineNumber":210,"author":{"gitID":"TeyXinHui"},"content":"        subjects.add(s);"},{"lineNumber":211,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":213,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"TeyXinHui"},"content":"     * Calls removeTagFromPerson method when tag is found in tags."},{"lineNumber":215,"author":{"gitID":"TeyXinHui"},"content":"     * @param t"},{"lineNumber":216,"author":{"gitID":"TeyXinHui"},"content":"     * @throws TagNotFoundException"},{"lineNumber":217,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTag(Tag t) throws TagNotFoundException {"},{"lineNumber":219,"author":{"gitID":"TeyXinHui"},"content":"        if (tags.contains(t)) {"},{"lineNumber":220,"author":{"gitID":"TeyXinHui"},"content":"            for (Person person : persons) {"},{"lineNumber":221,"author":{"gitID":"TeyXinHui"},"content":"                removeTagFromPerson(t, person);"},{"lineNumber":222,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":223,"author":{"gitID":"TeyXinHui"},"content":"        } else {"},{"lineNumber":224,"author":{"gitID":"TeyXinHui"},"content":"            throw new TagNotFoundException(\"Specific tag is not used in the address book.\");"},{"lineNumber":225,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":228,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"chuakunhong"},"content":"     * Calls replaceTagForPerson method when tag is found in tags."},{"lineNumber":230,"author":{"gitID":"chuakunhong"},"content":"     * @param tagSet"},{"lineNumber":231,"author":{"gitID":"TeyXinHui"},"content":"     * @throws TagNotFoundException"},{"lineNumber":232,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"chuakunhong"},"content":"    public void replaceTag(List\u003cTag\u003e tagSet) throws TagNotFoundException {"},{"lineNumber":234,"author":{"gitID":"chuakunhong"},"content":"        Tag[] tagArray \u003d new Tag[2];"},{"lineNumber":235,"author":{"gitID":"chuakunhong"},"content":"        tagSet.toArray(tagArray);"},{"lineNumber":236,"author":{"gitID":"chuakunhong"},"content":"        Tag tagToBeReplaced \u003d tagArray[0];"},{"lineNumber":237,"author":{"gitID":"chuakunhong"},"content":"        Tag tagToBePlaced \u003d tagArray[1];"},{"lineNumber":238,"author":{"gitID":"chuakunhong"},"content":"        if (tags.contains(tagToBeReplaced)) {"},{"lineNumber":239,"author":{"gitID":"TeyXinHui"},"content":"            for (Person person : persons) {"},{"lineNumber":240,"author":{"gitID":"chuakunhong"},"content":"                replaceTagForPerson(tagToBeReplaced, tagToBePlaced, person);"},{"lineNumber":241,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":242,"author":{"gitID":"TeyXinHui"},"content":"        } else {"},{"lineNumber":243,"author":{"gitID":"TeyXinHui"},"content":"            throw new TagNotFoundException(\"Specific tag is not used in the address book.\");"},{"lineNumber":244,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":247,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":248,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"TeyXinHui"},"content":"     * Removes a specific tag from an individual person and updates the person\u0027s information."},{"lineNumber":250,"author":{"gitID":"TeyXinHui"},"content":"     * Person needs to have the specific tag in his/her tag list."},{"lineNumber":251,"author":{"gitID":"TeyXinHui"},"content":"     * @param tag"},{"lineNumber":252,"author":{"gitID":"TeyXinHui"},"content":"     * @param person"},{"lineNumber":253,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTagFromPerson(Tag tag, Person person) {"},{"lineNumber":255,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":256,"author":{"gitID":"TeyXinHui"},"content":"        if (tagList.remove(tag)) {"},{"lineNumber":257,"author":{"gitID":"chuakunhong"},"content":"            Person newPerson \u003d new Person(person.getName(), person.getNric(), tagList, person.getSubjects(),"},{"lineNumber":258,"author":{"gitID":"chuakunhong"},"content":"                                        person.getRemark());"},{"lineNumber":259,"author":{"gitID":"TeyXinHui"},"content":"            try {"},{"lineNumber":260,"author":{"gitID":"TeyXinHui"},"content":"                updatePerson(person, newPerson);"},{"lineNumber":261,"author":{"gitID":"TeyXinHui"},"content":"            } catch (DuplicatePersonException error1) {"},{"lineNumber":262,"author":{"gitID":"TeyXinHui"},"content":"                throw new AssertionError(\"Updating person after removing tag should not have duplicate persons.\");"},{"lineNumber":263,"author":{"gitID":"TeyXinHui"},"content":"            } catch (PersonNotFoundException error2) {"},{"lineNumber":264,"author":{"gitID":"TeyXinHui"},"content":"                throw new AssertionError(\"Person should exist in the address book.\");"},{"lineNumber":265,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":266,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":268,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":270,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"TeyXinHui"},"content":"     * Removes a specific tag from an individual person and updates the person\u0027s information."},{"lineNumber":272,"author":{"gitID":"chuakunhong"},"content":"     * @param tagToBeReplaced"},{"lineNumber":273,"author":{"gitID":"chuakunhong"},"content":"     * @param tagToBePlaced"},{"lineNumber":274,"author":{"gitID":"chuakunhong"},"content":"     * @param person"},{"lineNumber":275,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":277,"author":{"gitID":"chuakunhong"},"content":"    public void replaceTagForPerson(Tag tagToBeReplaced, Tag tagToBePlaced, Person person) {"},{"lineNumber":278,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":279,"author":{"gitID":"chuakunhong"},"content":"        if (tagList.remove(tagToBeReplaced)) {"},{"lineNumber":280,"author":{"gitID":"chuakunhong"},"content":"            tagList.add(tagToBePlaced);"},{"lineNumber":281,"author":{"gitID":"chuakunhong"},"content":"            Person newPerson \u003d new Person(person.getName(), person.getNric(), tagList, person.getSubjects(),"},{"lineNumber":282,"author":{"gitID":"chuakunhong"},"content":"                                        person.getRemark());"},{"lineNumber":283,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":284,"author":{"gitID":"TeyXinHui"},"content":"            try {"},{"lineNumber":285,"author":{"gitID":"TeyXinHui"},"content":"                updatePerson(person, newPerson);"},{"lineNumber":286,"author":{"gitID":"TeyXinHui"},"content":"            } catch (DuplicatePersonException error1) {"},{"lineNumber":287,"author":{"gitID":"TeyXinHui"},"content":"                throw new AssertionError(\"Updating person after removing tag should not have duplicate persons.\");"},{"lineNumber":288,"author":{"gitID":"TeyXinHui"},"content":"            } catch (PersonNotFoundException error2) {"},{"lineNumber":289,"author":{"gitID":"TeyXinHui"},"content":"                throw new AssertionError(\"Person should exist in the address book.\");"},{"lineNumber":290,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":291,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":298,"author":{"gitID":"TeyXinHui"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":299,"author":{"gitID":"TeyXinHui"},"content":"                + subjects.asObservableList().size() + \" subjects\";"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":314,"author":{"gitID":"TeyXinHui"},"content":"    public ObservableList\u003cSubject\u003e getSubjectList() {"},{"lineNumber":315,"author":{"gitID":"TeyXinHui"},"content":"        return subjects.asObservableList();"},{"lineNumber":316,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":321,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":322,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":323,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":324,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.subjects.equalsOrderInsensitive(((AddressBook) other).subjects));"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":330,"author":{"gitID":"TeyXinHui"},"content":"        return Objects.hash(persons, tags, subjects);"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":27,"kengsengg":21,"TeyXinHui":112,"-":172}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":" *"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":" *"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"     * Constructs empty AppointmentList."},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    public UniqueAppointmentList() {}"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"    public UniqueAppointmentList(Set\u003cAppointment\u003e appointments) {"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"        internalList.addAll(appointments);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"     * Adds an Appointment to the list."},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"     * @throws DuplicateAppointmentException if the Appointment to add is a duplicate of an existing Appointment"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"     * in the list."},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"    public void add(Appointment toAdd) throws DuplicateAppointmentException {"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(toAdd);"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"        if (contains(toAdd)) {"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":35,"-":32}},{"path":"src/main/java/seedu/address/model/subject/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.subject;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":" * Represents a subject in the address book."},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"public class Subject {"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] SUBJECT_NAME \u003d new String[] {\"English\", \"Chinese\", \"H.Chinese\", \"Chinese.SP\","},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Chinese.B\", \"French\", \"German\", \"Spanish\", \"Hindi\","},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Urdu\", \"Gujarati\", \"Panjabi\", \"Bengali\", \"Burmese\","},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Thai\", \"Japanese\", \"B.Indonesia\", \"Tamil\","},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"H.Tamil\", \"Tamil.B\", \"Malay\", \"H.Malay\", \"Malay.B\","},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Malay.SP\", \"Mathematics\", \"A.Mathematics\","},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Physics\", \"Chemistry\", \"Biology\", \"Science\","},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"History\", \"Geography\", \"C.Humanities\", \"E.Literature\","},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"C.Literature\", \"M.Literature\", \"T.Literature\", \"Music\","},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"H.Music\", \"Art\", \"H.Art\", \"DnT\", \"Computing\","},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"F\u0026N\", \"POA\", \"Economics\", \"Drama\", \"P.Education\","},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Business.S\", \"Biotechnology\", \"Design.S\"};"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_SUBJECT_NAME_CONSTRAINTS \u003d \"Subject names should be alphabetic and should be \""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"            + \"one of the following: \" + String.join(\", \", SUBJECT_NAME) + \".\";"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] SUBJECT_GRADE \u003d new String[] {\"A1\", \"A2\", \"B3\", \"B4\", \"C5\", \"C6\", \"D7\", \"E8\", \"F9\"};"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_SUBJECT_GRADE_CONSTRAINTS \u003d \"Subject grade should be alphanumeric and should be\""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"            + \" one of the following: \\n\" + String.join(\", \", SUBJECT_GRADE) + \".\";"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    // Use for the calculation of the L1R5 subjects"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] L1_SUBJECT \u003d {\"English\", \"H.Chinese\", \"H.Tamil\", \"H.Malay\"};"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R1_SUBJECT \u003d {\"History\", \"Geography\", \"C.Humanities\",  \"E.Literature\", \"C.Literature\","},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"                                               \"M.Literature\", \"T.Literature\", \"H.Art\", \"H.Music\", \"B.Indonesia\","},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"                                               \"Chinese.SP\", \"Malay.SP\"};"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R2_SUBJECT \u003d {\"Mathematics\", \"A.Mathematics\", \"Physics\", \"Chemistry\", \"Biology\","},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"                                               \"Science\"};"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R3_SUBJECT \u003d {\"History\", \"Geography\", \"C.Humanities\",  \"E.Literature\", \"C.Literature\","},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"                                               \"M.Literature\", \"T.Literature\", \"H.Art\", \"H.Music\", \"B.Indonesia\","},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"                                               \"Chinese.SP\", \"Malay.SP\", \"Mathematics\", \"A.Mathematics\", \"Physics\","},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"                                               \"Chemistry\", \"Biology\", \"Science\"};"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R4_R5_SUBJECT \u003d SUBJECT_NAME;"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public final String subjectName;"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"    public final String subjectGrade;"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"     * Default constructor of Subject Object"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"    public Subject() {"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d \"\";"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d \"\";"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs a {@code Subject}."},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"     * @param subjectName A valid subject name."},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"     * @param subjectGrade A valid subject grade."},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"    public Subject(String subjectName, String subjectGrade) {"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subjectName);"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"        checkArgument(isValidSubjectName(subjectName), MESSAGE_SUBJECT_NAME_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d subjectName;"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subjectGrade);"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        checkArgument(isValidSubjectGrade(subjectGrade), MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d subjectGrade;"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs a {@code Subject} by splitting the subject string into {@code subjectName}."},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"     * @param subject A valid subject string."},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"    public Subject(String subject) {"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subject);"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        String[] splitSubjectStr \u003d subject.trim().split(\"\\\\s+\");"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        String subjectName \u003d splitSubjectStr[0];"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        String subjectGrade \u003d splitSubjectStr[1];"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d subjectName;"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d subjectGrade;"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"     * Returns true if a given string is a valid subject name."},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"    public static boolean isValidSubjectName(String test) {"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        for (String validSubjectName: SUBJECT_NAME) {"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"            if (test.equals(validSubjectName)) {"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"                return true;"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        return false;"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"     * Returns true if a given string is a valid subject grade."},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"    public static boolean isValidSubjectGrade(String test) {"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        for (String validSubjectGrade: SUBJECT_GRADE) {"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"            if (test.equals(validSubjectGrade)) {"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"                return true;"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        return false;"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        //return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"        //        || (other instanceof Subject // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        //        \u0026\u0026 this.subjectName.equals(((Subject) other).subjectName)); // state check"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"        if (this \u003d\u003d other) { //same object"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"        if (!(other instanceof Subject)) {"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"        Subject object \u003d (Subject) other;"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"        return this.subjectName \u003d\u003d object.subjectName \u0026\u0026 this.subjectGrade \u003d\u003d object.subjectGrade;"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"    public int hashCode() {"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"        //return subjectName.hashCode() \u0026\u0026 subjectGrade.hashCode();"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"        int hash \u003d 17;"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        hash \u003d 37 * hash + subjectName.hashCode();"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":"        hash \u003d 37 * hash + subjectGrade.hashCode();"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        return hash;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"        return \u0027[\u0027 + subjectName + \u0027 \u0027 + subjectGrade + \u0027]\u0027;"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":132,"-":10}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":" * Represents a Tag in EduBuddy."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":1,"-":53}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":" * Represents a remarks of the person in the address book."},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"public class Remark {"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d \"Remark can contain anything that you want.\";"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"    public final String value;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"     * Constructs a {@code Remark}."},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"     * @param remark A valid remark."},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"    public Remark(String remark) {"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"        this.value \u003d remark;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":20,"-":21}},{"path":"src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"public class TagNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"    public TagNotFoundException(String message) {"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":11}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void addPage(Person person) throws IOException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    /** Adds the given appointment */"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"    void addAppointment(Appointment appointment) throws DuplicateAppointmentException;"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    /** Sorts the person list by name in alphabetical order */"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"    void sortPersonList(String parameter);"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"     * Removes a specific tag from everyone in the address book."},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"     * @param tag"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"     * @throws TagNotFoundException"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"    void deleteTag(Tag tag) throws TagNotFoundException;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"     * Replaces a specific tag for everyone in the address book."},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"     * @param tagSet"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"     * @throws TagNotFoundException"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"    void replaceTag(List\u003cTag\u003e tagSet) throws TagNotFoundException;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":5,"johnnychanjx":1,"kengsengg":8,"TeyXinHui":11,"-":52}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"     * Remove a specific Tag from the list."},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"     * @param toRemove"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"    public void remove(Tag toRemove) {"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(toRemove);"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"        if (!contains(toRemove)) {"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"            //throw new exception?"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        internalList.remove(toRemove);"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":13,"-":143}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.apache.commons.io.FileUtils;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":21,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":26,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":36,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String PROFILE_DIRECTORY \u003d \"/StudentPage/\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param person"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws IOException"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Adds a BrowserPanel html Page into StudentPage"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void addPage(Person person) throws IOException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        File htmlTemplateFile \u003d new File(\"/Users/johnnychan/Documents/\""},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + \"GitHub/main/src/main/resources/StudentPage/template.html\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String htmlString \u003d FileUtils.readFileToString(htmlTemplateFile);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Name titleName \u003d person.getName();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String title \u003d titleName.toString();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Nric identityNumberClass \u003d person.getNric();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String identityNumber \u003d identityNumberClass.toString();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        htmlString \u003d htmlString.replace(\"$title\", title);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        htmlString \u003d htmlString.replace(\"$identityNumber\", identityNumber);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        File newHtmlFile \u003d new File(\"/Users/johnnychan/Documents/\""},{"lineNumber":82,"author":{"gitID":"-"},"content":"                 + \"GitHub/main/src/main/resources/StudentPage/\" + title + \".html\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        FileUtils.writeStringToFile(newHtmlFile, htmlString);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"kengsengg"},"content":"    public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":125,"author":{"gitID":"kengsengg"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":126,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"kengsengg"},"content":"    public void sortPersonList(String parameter) {"},{"lineNumber":148,"author":{"gitID":"kengsengg"},"content":"        addressBook.sort(parameter);"},{"lineNumber":149,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"            addressBook.removeTag(tag);"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"            throw new AssertionError();"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":160,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":"    public void replaceTag(List\u003cTag\u003e tagSet) {"},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":"        Tag[] tagArray \u003d new Tag[2];"},{"lineNumber":163,"author":{"gitID":"chuakunhong"},"content":"        tagSet.toArray(tagArray);"},{"lineNumber":164,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":165,"author":{"gitID":"chuakunhong"},"content":"            addressBook.replaceTag(tagSet);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            indicateAddressBookChanged();"},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"            throw new AssertionError();"},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":172,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":10,"johnnychanjx":2,"kengsengg":11,"TeyXinHui":14,"-":154}},{"path":"src/main/java/seedu/address/model/subject/UniqueSubjectList.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.subject;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":" * A list of subjects that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":" * @see Subject#equals(Object)"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"public class UniqueSubjectList implements Iterable\u003cSubject\u003e {"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    private final ObservableList\u003cSubject\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs empty Subject List."},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    public UniqueSubjectList() {}"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"     * Creates a UniqueSubjectList using given subjects."},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"    public UniqueSubjectList(Set\u003cSubject\u003e subjects) {"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        requireAllNonNull(subjects);"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"        internalList.addAll(subjects);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"     * Returns all Subjects in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    public Set\u003cSubject\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"     * Replaces the Subjects in this list with those in the argument subject list."},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"    public void setSubjects(Set\u003cSubject\u003e subjects) {"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"        requireAllNonNull(subjects);"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        internalList.setAll(subjects);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"     * Ensures every subject in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    public void mergeFrom(UniqueSubjectList from) {"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"                .filter(subject -\u003e !alreadyInside.contains(subject))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"     * Returns true if the list contains an equivalent Subject as the given argument."},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"    public boolean contains(Subject toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"     * Adds a Subject to the list."},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"     * @throws DuplicateSubjectException if the Tag to add is a duplicate of an existing Subject in the list."},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"    public void add(Subject toAdd) throws DuplicateSubjectException {"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"            throw new DuplicateSubjectException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"     * Remove a specific Subject from the list."},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"     * @param toRemove"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"    public void remove(Subject toRemove) {"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(toRemove);"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"        if (!contains(toRemove)) {"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"            //throw new exception?"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        internalList.remove(toRemove);"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"    public Iterator\u003cSubject\u003e iterator() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"    public ObservableList\u003cSubject\u003e asObservableList() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"                || (other instanceof UniqueSubjectList // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueSubjectList) other).internalList));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equalsOrderInsensitive(UniqueSubjectList other) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"    public static class DuplicateSubjectException extends DuplicateDataException {"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"        protected DuplicateSubjectException() {"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"            super(\"Operation would result in duplicate subject\");"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":73,"-":83}}]
