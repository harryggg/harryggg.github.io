var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Celeb Scheduler - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `CS2103JAN2018-W14-B4`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"Celeb Scheduler (CS) is for celebrity managers who *prefer to use a desktop app for managing their celebrity\u0027s schedule with ease*. More importantly, CS is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you require a versatile application that has the feature of *managing contacts, organising schedules, emailing (Coming in v2.0) and trip planning*. You are at the right place as CS would be the best platform for you, with its integration of address book, calendar and visual maps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Celeb Scheduler."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Some commands have an alias, which you can also use to execute the command e.g. to add a person to Celeb Scheuler, you can type either `add n/John Doe` or `a n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Adds a person to Celeb Scheduler. +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Alias: `a` +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":71,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":76,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an appointment: `addAppointment`"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Adds an appointment to Celeb Scheduler. +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Alias: `aa`"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Format: `addAppointment n/APPOINTMENT_NAME l/LOCATION sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"* `add n/Oscars 2018 l/Hollywood sd/23/03/2018 st/14:00 ed/23/03/2018 et/20:00`"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* `add n/Dentist Appointmnt l/Dental Clinic st/15:45`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"****"},{"lineNumber":90,"author":{"gitID":"-"},"content":"* Start and end dates must be of the format dd/mm/yyyy. If the day is a 1 digit number such as the 3rd of July"},{"lineNumber":91,"author":{"gitID":"-"},"content":"it must be prefixed with a 0 (e.g. 03/07/...)."},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Start and end times must be of the format hh:mm. 24 hour format is used for the hour. If either the hour"},{"lineNumber":93,"author":{"gitID":"-"},"content":"or minute is a 1 digit number, you need to prefix it with a 0 (e.g. 09:05)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"* You can omit one or more of the time, date and location fields when using this command."},{"lineNumber":95,"author":{"gitID":"-"},"content":"****"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d  Editing an appointment `[coming in v1.3]`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d  Deleting an appointment `[coming in v1.3]`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Shows a list of all persons in Celeb Scheduler. +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Alias: `l` +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"Edits an existing person in Celeb Scheduler. +"},{"lineNumber":110,"author":{"gitID":"-"},"content":"Alias: `e` +"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"****"},{"lineNumber":114,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":116,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":117,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":118,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":119,"author":{"gitID":"-"},"content":"****"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":126,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Alias: `f` +"},{"lineNumber":132,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"****"},{"lineNumber":135,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":136,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":137,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":139,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":140,"author":{"gitID":"-"},"content":"****"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":145,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":146,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":147,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"Deletes the specified person from Celeb Scheduler. +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Alias: `d` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"****"},{"lineNumber":156,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":157,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":158,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":159,"author":{"gitID":"-"},"content":"****"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":165,"author":{"gitID":"-"},"content":"Deletes the 2nd person in Celeb Scheduler."},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":168,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Alias: `s` +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"****"},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":179,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":180,"author":{"gitID":"-"},"content":"****"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":185,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Selects the 2nd person in Celeb Scheduler."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":188,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"Alias: `h` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":199,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"Restores Celeb Scheduler to the state before the previous _undoable_ command was executed. +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"Alias: `u` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":211,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify Celeb Scheduler\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"Alias: `r` +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":244,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":250,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":251,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":252,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"Clears all entries from Celeb Scheduler. +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"Alias: `c` +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":263,"author":{"gitID":"-"},"content":"Alias: `x` +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"Celeb Scheduler data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Removing a tag : `removeTag`"},{"lineNumber":272,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"Removes the specified tag from every person with it in Celeb Scheduler and shows the number of person(s) affected by this operation. +"},{"lineNumber":274,"author":{"gitID":"WJY-norainu"},"content":"Alias: `rt` +"},{"lineNumber":275,"author":{"gitID":"WJY-norainu"},"content":"Format: `removeTag TAG`"},{"lineNumber":276,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":277,"author":{"gitID":"WJY-norainu"},"content":"[TIP]"},{"lineNumber":278,"author":{"gitID":"-"},"content":"You can remove a tag that does not exist in Celeb Scheduler and it will show 0 person gets affected."},{"lineNumber":279,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":280,"author":{"gitID":"WJY-norainu"},"content":"Examples:"},{"lineNumber":281,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":282,"author":{"gitID":"WJY-norainu"},"content":"* `removeTag friends` +"},{"lineNumber":283,"author":{"gitID":"-"},"content":"Removes the tag, \"friends\" from every person with it in Celeb Scheduler and shows the number of person(s) affected."},{"lineNumber":284,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Show location on map : `showLocation`"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"Shows the specific location in the map interface, by marking the latitude and longitude with a location marker. +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"Alias: `sl` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"Format: `showLocation ma/MapAddress`"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":292,"author":{"gitID":"-"},"content":"The format of the address can be in postal code, road name, location name and building name."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"* `showlocation ma/Punggol` +"},{"lineNumber":297,"author":{"gitID":"-"},"content":"Updates the map by re-centering to the new location \u0027Punggol\u0027 and adding a location marker to it."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":300,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":303,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":308,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Celeb Scheduler folder."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":314,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":315,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":317,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":318,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":319,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":321,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":322,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":323,"author":{"gitID":"-"},"content":"* *RemoveTag* : `removeTag TAG` +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"e.g.`removeTag friends`"},{"lineNumber":325,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":328,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"WJY-norainu":11,"-":318}},{"path":"src/test/java/systemtests/RemoveTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    public void removeTag() throws Exception {"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"        Model model \u003d getModel();"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"        /* ----------------------------------- Perform valid removeTag operations ----------------------------------- */"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: remove tag friends from a non-empty address book that has this tag in tag list, command with leading"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"         * spaces and trailing spaces"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"         * -\u003e tag removed and shows 7 person affected"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"         */"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"        String command \u003d \"   \" + RemoveTagCommand.COMMAND_WORD + \"  \" + FRIENDS_TAG.tagName + \" \";"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(command, FRIENDS_TAG);"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: undo removing tag friends from the list -\u003e tag friends restored */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: redo removing tag friends from the list -\u003e tag friends removed again */"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        model.removeTag(FRIENDS_TAG);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: remove tag [owesMoney] from a non-empty address book that has this tag in tag list"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"         * -\u003e tag removed and shows 1 person affected"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"         */"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        Tag owesMoney \u003d new Tag(\"owesMoney\");"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(owesMoney);"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        /* ----------------------------------- Perform invalid removeTag operations --------------------------------- */"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: missing tag -\u003e rejected */"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RemoveTagCommand.COMMAND_WORD + \"\";"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d \"removesTag \" + VALID_TAG_FRIEND;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: invalid tag name -\u003e rejected */"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RemoveTagCommand.COMMAND_WORD + INVALID_TAG_DESC;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"        /* Case: valid tag name but tag does not exist in the address book -\u003e rejected */"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"        command \u003d RemoveTagCommand.COMMAND_WORD + \" \" + VALID_TAG_FRIEND;"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandFailure(command, String.format(RemoveTagCommand.MESSAGE_TAG_NOT_FOUND, FRIENDS_TAG.toString()));"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"     * Executes the {@code RemoveTagCommand} that removes {@code toRemove} from the model and asserts that the,\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"     * 3. Result display box displays the success message of executing {@code RemoveTagCommand} with the details of"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"     * {@code toRemove}.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":"     * the original empty model.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"    private void assertCommandSuccess(Tag toRemove) throws Exception {"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"        assertCommandSuccess(RemoveTagCommand.COMMAND_WORD + \" \" + toRemove.tagName, toRemove);"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Tag)}. Executes {@code command}"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"     * instead."},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"     * @see RemoveTagCommandSystemTest#assertCommandSuccess(Tag)"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"    private void assertCommandSuccess(String command, Tag toRemove) throws Exception {"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"        int numOfPersonsAffected \u003d expectedModel.removeTag(toRemove);"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"        String expectedResultMessage \u003d String.format(RemoveTagCommand.MESSAGE_DELETE_TAG_SUCCESS,"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"                                                    toRemove.toString(),"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"                                                    numOfPersonsAffected);"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Tag)} except asserts that"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"     * @see RemoveTagCommandSystemTest#assertCommandSuccess(String, Tag)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"        assertResultDisplayAndCommandBoxShowsDefaultStyle();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":74,"-":63}},{"path":"src/test/java/systemtests/ShowLocationCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_MAP_DESC1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_MAP_DESC2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ShowLocationCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void showLocation() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------------ Perform valid showLocation operations --------------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: show location using address (block and street name) of a place"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e location marker shown in map"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        MapAddress newAddress \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(newAddress);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: show location using postal code of a place"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         * -\u003e location marker shown in map"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        newAddress \u003d new MapAddress(\"820296\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(newAddress);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: show location using name of a place (e.g National University of Singapore)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e location marker shown in map"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        newAddress \u003d new MapAddress(\"National University of Singapore\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(newAddress);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid removeTag operations --------------------------------- */"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: missing address and prefix-\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String command \u003d ShowLocationCommand.COMMAND_WORD + \"\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLocationCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d \"showslocation \" + VALID_ADDRESS_MAP_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: correct prefix but missing address -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d ShowLocationCommand.COMMAND_WORD + INVALID_ADDRESS_MAP_DESC2;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: correct prefix but invalid address -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command \u003d ShowLocationCommand.COMMAND_WORD + INVALID_ADDRESS_MAP_DESC1;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: missing address prefix -\u003e rejected */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d ShowLocationCommand.COMMAND_WORD + \" \" + VALID_ADDRESS_MAP_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLocationCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Executes the {@code ShowLocationCommand} that asserts that the,\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code ShowLocationCommand}.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * 4. Shows the location marker of {@code address} in Maps GUI.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * 5. Calendar panel and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(MapAddress address) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ShowLocationCommand.COMMAND_WORD + \" \" + PREFIX_MAP_ADDRESS + address.toString());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Tag)}. Executes {@code command}"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"     * instead."},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"     * @see RemoveTagCommandSystemTest#assertCommandSuccess(Tag)"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d ShowLocationCommand.MESSAGE_SUCCESS;"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Tag)} except asserts that"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"     * @see RemoveTagCommandSystemTest#assertCommandSuccess(String, Tag)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        assertResultDisplayAndCommandBoxShowsDefaultStyle();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":11,"-":118}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Celeb Scheduler - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B4/main/"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `CS2103JAN2018-W14-B4`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"Whether you are a new developer or a long time contributor to the CelebManager Project,"},{"lineNumber":20,"author":{"gitID":"-"},"content":"this developer guide will serve as a helpful reference and source of \"how-to\" information"},{"lineNumber":21,"author":{"gitID":"-"},"content":"when contributing to this project. Included are guides on how to set-up the project locally,"},{"lineNumber":22,"author":{"gitID":"-"},"content":"an overview of the architecture and the different features present and how they are implemented."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"Before we get started on the setup, there are few prerequisites you must have for the setup to be successful. They are,"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":". *JDK* +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"Our programming language of choice is Java in this project. To be able to work with java,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"you will need to have Java Development Kit (JDK) installed. You must install version `1.8.0_60` or later."},{"lineNumber":33,"author":{"gitID":"-"},"content":"You can get the JDK from: +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"http://www.oracle.com/technetwork/java/javase/downloads/index.html"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Some components of this app will not work +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"with earlier versions of Java 8."},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":". *IntelliJ* IDE +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"It is possible to setup without IntelliJ specifically and other IDEs might be used, but it is much simpler"},{"lineNumber":44,"author":{"gitID":"-"},"content":"to carry it out in IntelliJ. All the steps for setup from here on out will be specific to IntelliJ. We highly recommend"},{"lineNumber":45,"author":{"gitID":"-"},"content":"that you too use IntelliJ unless you have prior experience in working with gradle projects. You can get IntelliJ from: +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"https://www.jetbrains.com/idea/"},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"If you want to contribute to this project, you will need to work with a local copy of this project. To do so,"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":58,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":59,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle:"},{"lineNumber":60,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":61,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click `Import Project`."},{"lineNumber":63,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file, select it and click `OK`."},{"lineNumber":64,"author":{"gitID":"-"},"content":". Click `Open as Project`."},{"lineNumber":65,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":66,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources`. (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"To ensure that you have setup the project correctly, +"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":74,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."},{"lineNumber":83,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":84,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":87,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":107,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":114,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":122,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":127,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":154,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":165,"author":{"gitID":"WJY-norainu"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Celeb Scheduler data is changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":178,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":192,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":193,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":206,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":209,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":210,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":211,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":222,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":231,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":237,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":244,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":245,"author":{"gitID":"WJY-norainu"},"content":"* can save the Appointment List data in xml format and read it back."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":258,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":269,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"----"},{"lineNumber":271,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"},{"lineNumber":277,"author":{"gitID":"-"},"content":"----"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":280,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":281,"author":{"gitID":"-"},"content":"----"},{"lineNumber":282,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":"}"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"},{"lineNumber":297,"author":{"gitID":"-"},"content":"----"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":310,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":319,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":328,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":349,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":351,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":358,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":368,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":371,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":377,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":378,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":379,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":381,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":382,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":396,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":397,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":402,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":403,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":404,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"WJY-norainu"},"content":"// tag::removeTag[]"},{"lineNumber":412,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d RemoveTag feature"},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"WJY-norainu"},"content":"This RemoveTag mechanism is facilitated by `RemoveTagCommand` which resides inside `Logic` and `removeTag` which resides in `AddressBook`."},{"lineNumber":416,"author":{"gitID":"WJY-norainu"},"content":"`RemoveTagCommand` removes a specified tag from each person in the address book, and prints out how many persons are affected by this removal."},{"lineNumber":417,"author":{"gitID":"WJY-norainu"},"content":"The following diagram shows the inheritance diagram for `RemoveTagCommand`:"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":".Inheritance diagram for Command"},{"lineNumber":420,"author":{"gitID":"WJY-norainu"},"content":"image::RemoveTagCommandClassDiagram.png[width\u003d\"\"]"},{"lineNumber":421,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":422,"author":{"gitID":"WJY-norainu"},"content":"As you can see from the diagram, `RemoveTagCommand` inherits from the `UndoableCommand`."},{"lineNumber":423,"author":{"gitID":"WJY-norainu"},"content":"Similar to the other undoable commands like `DeleteCommand`, it supports the undo/redo feature."},{"lineNumber":424,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":425,"author":{"gitID":"WJY-norainu"},"content":"Unlike `DeleteCommand` that can raise `PersonNotFoundException` when the `index` of the `person` to be deleted does not exist,"},{"lineNumber":426,"author":{"gitID":"WJY-norainu"},"content":"`RemoveTagCommand` can remove a non-existing tag from the address book, but implicitly tell the user that the tag does not exist"},{"lineNumber":427,"author":{"gitID":"WJY-norainu"},"content":"by showing that, the number of persons affected by the removal is 0."},{"lineNumber":428,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":429,"author":{"gitID":"WJY-norainu"},"content":"The snippet code below shows the implementation of `executeUndoableCommand` in `RemoveTagCommand`:"},{"lineNumber":430,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":431,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":432,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":433,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommand extends UndoableCommand {"},{"lineNumber":434,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":435,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Removed Tag %1$s and %2$s person(s) affected.\";"},{"lineNumber":436,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":437,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":439,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":440,"author":{"gitID":"WJY-norainu"},"content":"        requireNonNull(tagToRemove);"},{"lineNumber":441,"author":{"gitID":"WJY-norainu"},"content":"        int numberOfAffectedPersons \u003d model.removeTag(tagToRemove);"},{"lineNumber":442,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToRemove, numberOfAffectedPersons));"},{"lineNumber":443,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":444,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":445,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":446,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":447,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":448,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":449,"author":{"gitID":"WJY-norainu"},"content":"The snippet code below shows the implementation of `removeTag` in `AddressBook`:"},{"lineNumber":450,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":451,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":452,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":453,"author":{"gitID":"WJY-norainu"},"content":"public class AddressBook {"},{"lineNumber":454,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":455,"author":{"gitID":"WJY-norainu"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":456,"author":{"gitID":"WJY-norainu"},"content":"     * @returns the number of {@code person}s with this {@code tag} removed."},{"lineNumber":457,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":458,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) {"},{"lineNumber":459,"author":{"gitID":"WJY-norainu"},"content":"        int count \u003d 0;"},{"lineNumber":460,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":461,"author":{"gitID":"WJY-norainu"},"content":"            if (person.removeTag(tag)) {"},{"lineNumber":462,"author":{"gitID":"WJY-norainu"},"content":"                count++;"},{"lineNumber":463,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":464,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":465,"author":{"gitID":"WJY-norainu"},"content":"        if (count \u003e 0) {"},{"lineNumber":466,"author":{"gitID":"WJY-norainu"},"content":"            removeUnusedTags();"},{"lineNumber":467,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":468,"author":{"gitID":"WJY-norainu"},"content":"        return count;"},{"lineNumber":469,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":470,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":471,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":472,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":473,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":474,"author":{"gitID":"WJY-norainu"},"content":"Note that `removeUnusedTags` is called inside `removeTag` when there is at least one person affected by the removal."},{"lineNumber":475,"author":{"gitID":"WJY-norainu"},"content":"This is because this operation removes the tag from each person with it, and thus after the operation, no person in the"},{"lineNumber":476,"author":{"gitID":"WJY-norainu"},"content":"address book should have the tag, and hence the unused tag should be removed from `tags` inside the address book."},{"lineNumber":477,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":478,"author":{"gitID":"WJY-norainu"},"content":"Suppose the current address book has two types of tags, `friends` and `husband`."},{"lineNumber":479,"author":{"gitID":"WJY-norainu"},"content":"The snippet below shows the state of `PersonListPanel`:"},{"lineNumber":480,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":481,"author":{"gitID":"WJY-norainu"},"content":".Image of `PersonListPanel` before executing `removeTag friends`"},{"lineNumber":482,"author":{"gitID":"WJY-norainu"},"content":"image::BeforeRemoveTag.png[width\u003d\"\"]"},{"lineNumber":483,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":484,"author":{"gitID":"WJY-norainu"},"content":"After the successful execution of `removeTag friends`, `PersonListPanel` will be updated to the diagram below:"},{"lineNumber":485,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":486,"author":{"gitID":"WJY-norainu"},"content":".Image of `PersonListPanel` after executing `removeTag friends`"},{"lineNumber":487,"author":{"gitID":"WJY-norainu"},"content":"image::AfterRemoveTag.png[width\u003d\"\"]"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the command works:"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"WJY-norainu"},"content":".Sequence diagram of removeTag command"},{"lineNumber":492,"author":{"gitID":"WJY-norainu"},"content":"image::RemoveTagSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Command result for removal of non-existing `tag`"},{"lineNumber":497,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Output `tag` is removed and 0 person affected"},{"lineNumber":498,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Easy to implement."},{"lineNumber":499,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Does not make it explicit to users that the `tag` being removed does not exist in the address book."},{"lineNumber":500,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Output the `tag` cannot be removed"},{"lineNumber":501,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Makes it clear to users that the `tag` does not exist and thus cannot be removed."},{"lineNumber":502,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Does not invalidate the removal and can thus be confusing to users whether this removal is legal."},{"lineNumber":503,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 3:** Output error and invalid command format"},{"lineNumber":504,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Follows the common logical convention and makes it clear to users that the removal is not legal."},{"lineNumber":505,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Requires the creation of additional exception class and exception handling methods."},{"lineNumber":506,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"// tag::showlocation[]"},{"lineNumber":508,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d ShowLocation Feature"},{"lineNumber":509,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"The ShowLocation mechanism is facilitated by the `ShowLocationCommand`, which resides inside `Logic`. It supports the viewing of location"},{"lineNumber":512,"author":{"gitID":"-"},"content":"in the `MapPanel` UI by updating the state of the `MapPanel`. This is done by re-centering the `MapPanel` to the latitude and longitude of the"},{"lineNumber":513,"author":{"gitID":"-"},"content":"location and identifying it with a location marker. This command inherits from `Command` so it *does not support the undo/redo feature*."},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"The following picture shows the marker that is used to identify the location in the `MapPanel`:"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":".Location Marker"},{"lineNumber":518,"author":{"gitID":"-"},"content":"image::LocationMarker.png[width\u003d\"50\"]"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"The following diagram shows the inheritance diagram for `ShowLocationCommand`:"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":".Inheritance diagram for Command"},{"lineNumber":523,"author":{"gitID":"-"},"content":"image::ShowLocationLogicCommandClassDiagram.png[width\u003d\"\"]"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"As you can see from the diagram, `ShowLocationCommand` inherits from the Command class and is not part of the Undoable Command."},{"lineNumber":526,"author":{"gitID":"-"},"content":"Similar to the other commands like `FindCommand` it will not be identified by the undo/redo feature."},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"This command does not use the `Person` `Address` model to search for a specific location, it uses the `MapAddress` model. This is due to"},{"lineNumber":529,"author":{"gitID":"-"},"content":"the due to the difference in address specification details as the `Address` model is too specific for the command to work."},{"lineNumber":530,"author":{"gitID":"-"},"content":"An example would be the details of unit number (e.g #11-111) which will not be valid for this command."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"WJY-norainu"},"content":"The main difference between both model is shown below in the two diagrams."},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"The snippet code below shows the diagram of `Address` model:"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":537,"author":{"gitID":"-"},"content":"----"},{"lineNumber":538,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":539,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":540,"author":{"gitID":"-"},"content":"                \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":541,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":542,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":543,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":544,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":545,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":546,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":547,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":548,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":549,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":550,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":551,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":552,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":553,"author":{"gitID":"-"},"content":"}"},{"lineNumber":554,"author":{"gitID":"-"},"content":"----"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"The snippet code below shows the diagram of `MapAddress` model:"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":559,"author":{"gitID":"-"},"content":"----"},{"lineNumber":560,"author":{"gitID":"-"},"content":"public class MapAddress {"},{"lineNumber":561,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_MAP_CONSTRAINTS \u003d"},{"lineNumber":562,"author":{"gitID":"-"},"content":"            \"Address should be in location name, road name, block and road name or postal code format.\\n\""},{"lineNumber":563,"author":{"gitID":"-"},"content":"                    + \"Note:(Person address may not be valid as it consist of too many details like unit number)\""},{"lineNumber":564,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":565,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":566,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":567,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":568,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":569,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":570,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":571,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid map address."},{"lineNumber":572,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":573,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":574,"author":{"gitID":"-"},"content":"        boolean isValid;"},{"lineNumber":575,"author":{"gitID":"-"},"content":"        Geocoding testAddress \u003d new Geocoding();"},{"lineNumber":576,"author":{"gitID":"-"},"content":"        isValid \u003d testAddress.checkIfAddressCanBeFound(test);"},{"lineNumber":577,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_MAP_VALIDATION_REGEX) \u0026\u0026 isValid;"},{"lineNumber":578,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":579,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":580,"author":{"gitID":"-"},"content":"}"},{"lineNumber":581,"author":{"gitID":"-"},"content":"----"},{"lineNumber":582,"author":{"gitID":"-"},"content":"The difference to note is the `isValidAddress` method, where `Address` only checks for *blank space* whereas `MapAddress`"},{"lineNumber":583,"author":{"gitID":"-"},"content":"checks for *blank space and the validity of location in google server*. Thus, making the command more restrictive to location,"},{"lineNumber":584,"author":{"gitID":"-"},"content":" road, block name and postal code. Any details more than that would result in a higher possibility of it being invalid."},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"This command uses the `GMAPSFX API` and  `Google Maps Web Services API` library. The `GMAPFX API` is used to create the"},{"lineNumber":587,"author":{"gitID":"-"},"content":"`Geocoding` function, which is used to convert `MapAddress` into latitude and longitude form (`LatLng`). The `LatLng` form"},{"lineNumber":588,"author":{"gitID":"-"},"content":"is then used by the command to find the exact location in the `MapPanel`. The `Google Maps Web Services API` allows the"},{"lineNumber":589,"author":{"gitID":"-"},"content":"command to re-center and mark the new location which is then shown to the user."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"Every new input of this command will remove the previous location marker and add the new marker into the map."},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"The snippet below shows the state of `MapPanel` before input of `ShowLocation` command:"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":".Image of Map Panel default state"},{"lineNumber":596,"author":{"gitID":"-"},"content":"image::BeforeInput.png[width\u003d\"400\"]"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"After the input of \"showLocation ma/Punggol\" the `MapPanel` will be updated to the diagram below:"},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":".Image of Map Panel after command input"},{"lineNumber":601,"author":{"gitID":"-"},"content":"image::AfterShowLocationInput.png[width\u003d\"400\"]"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"Any subsequent inputs will remove the previous location marker and update the `MapPanel` with the new marker"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the command works:"},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":".Sequence diagram of showLocation command"},{"lineNumber":608,"author":{"gitID":"-"},"content":"image::ShowLocationSequenceDiagram.png[width\u003d\"\"]"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `showLocationCommand`"},{"lineNumber":613,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Extend `Command`"},{"lineNumber":614,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new developers who will be developing this project as the command is at the same abstraction level as other commands."},{"lineNumber":615,"author":{"gitID":"-"},"content":"** Cons: Does not have the undo/redo feature as it is not part of `UndoableCommand`."},{"lineNumber":616,"author":{"gitID":"-"},"content":"* **Alternative 2:** Extend `UndoableCommand`"},{"lineNumber":617,"author":{"gitID":"-"},"content":"** Pros: Allows for command to have the undo/redo function."},{"lineNumber":618,"author":{"gitID":"-"},"content":"** Cons: Requires more work that may not fit in with our timeline"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Use of address model"},{"lineNumber":621,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `MapAddress`"},{"lineNumber":622,"author":{"gitID":"-"},"content":"** Pros: Allows the clear distinction of requirements between `MapAddress` and `Address` to avoid confusion"},{"lineNumber":623,"author":{"gitID":"-"},"content":"** Cons: Both model are very similar"},{"lineNumber":624,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `Address`"},{"lineNumber":625,"author":{"gitID":"-"},"content":"** Pros: Reduces the amount of code/class in the project"},{"lineNumber":626,"author":{"gitID":"-"},"content":"** Cons: Will be confusing as different requirements for a single model. Lacks proper organisation."},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d AddAppointment feature"},{"lineNumber":629,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":630,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":631,"author":{"gitID":"WJY-norainu"},"content":"The AddAppointment mechanism is facilitated by the `AddAppointmentCommand`, which resides inside `Logic`. It supports the adding of an appointment to an existing calendar."},{"lineNumber":632,"author":{"gitID":"WJY-norainu"},"content":"The appointment, if added successfully, can be viewed in our `CalendarPanel` UI. This is done by retrieving the list of calendars stored in our `CalendarPanel`"},{"lineNumber":633,"author":{"gitID":"WJY-norainu"},"content":"and then adding the appointment to one or more of these calendars. This command extends `Command` so it *does not support the undo/redo feature*."},{"lineNumber":634,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":635,"author":{"gitID":"WJY-norainu"},"content":"To be able to create appointments, add them to calendars and view the calendar with the added appointments, the external CalendarFX package is used. The API for all the CalendarFX classes and methods used can be found http://dlsc.com/wp-content/html/calendarfx/apidocs/index.html[here]."},{"lineNumber":636,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":637,"author":{"gitID":"WJY-norainu"},"content":"* For the calendar, the `CelebCalendar` class is used, which extends the default `Calendar` class from CalendarFX used to describe a calendar."},{"lineNumber":638,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":639,"author":{"gitID":"WJY-norainu"},"content":"* For the appointment, the `Appointment` class is used, which is extended from `Entry`, the default class used to represent an entry in a `Calendar` in CalendarFX."},{"lineNumber":640,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":641,"author":{"gitID":"WJY-norainu"},"content":"* All `CelebCalendar` instances reside in an instance of `CalendarSource`, the class used to store a group of calendars in CalendarFX."},{"lineNumber":642,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":643,"author":{"gitID":"WJY-norainu"},"content":"* This instance of `CalendarSource` is atttached to our `CalendarView` which is the GUI for our calendar."},{"lineNumber":644,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":645,"author":{"gitID":"WJY-norainu"},"content":"[NOTE]"},{"lineNumber":646,"author":{"gitID":"WJY-norainu"},"content":"Inheritance from the base classes of the external package is done so that we can add in additional methods as necessary."},{"lineNumber":647,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":648,"author":{"gitID":"WJY-norainu"},"content":"Right now, the addAppointment command takes in up to 6 parameters. They are:"},{"lineNumber":649,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":650,"author":{"gitID":"WJY-norainu"},"content":"* Appointment name [Compulsory field]"},{"lineNumber":651,"author":{"gitID":"WJY-norainu"},"content":"* Location"},{"lineNumber":652,"author":{"gitID":"WJY-norainu"},"content":"* Start Date"},{"lineNumber":653,"author":{"gitID":"WJY-norainu"},"content":"* Start Time"},{"lineNumber":654,"author":{"gitID":"WJY-norainu"},"content":"* End Date"},{"lineNumber":655,"author":{"gitID":"WJY-norainu"},"content":"* End Time"},{"lineNumber":656,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":657,"author":{"gitID":"WJY-norainu"},"content":"The `AddAppointmentCommandParser` is able to create sensible appointments even if 1 or more of the non-compulsory fields are not included. The snippet code below shows how the parsing is handled:"},{"lineNumber":658,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":659,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":660,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":661,"author":{"gitID":"WJY-norainu"},"content":"public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":662,"author":{"gitID":"WJY-norainu"},"content":"    ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME,"},{"lineNumber":663,"author":{"gitID":"WJY-norainu"},"content":"            PREFIX_START_DATE,  PREFIX_LOCATION, PREFIX_END_TIME, PREFIX_END_DATE);"},{"lineNumber":664,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":665,"author":{"gitID":"WJY-norainu"},"content":"    if (!arePrefixesPresent(argMultiMap, PREFIX_NAME)"},{"lineNumber":666,"author":{"gitID":"WJY-norainu"},"content":"            || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":667,"author":{"gitID":"WJY-norainu"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":668,"author":{"gitID":"WJY-norainu"},"content":"                AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":669,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":670,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":671,"author":{"gitID":"WJY-norainu"},"content":"    try {"},{"lineNumber":672,"author":{"gitID":"WJY-norainu"},"content":"        String appointmentName \u003d ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_NAME)).get();"},{"lineNumber":673,"author":{"gitID":"WJY-norainu"},"content":"        Optional\u003cLocalTime\u003e startTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_START_TIME));"},{"lineNumber":674,"author":{"gitID":"WJY-norainu"},"content":"        Optional\u003cLocalDate\u003e startDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_START_DATE));"},{"lineNumber":675,"author":{"gitID":"WJY-norainu"},"content":"        Optional\u003cLocalTime\u003e endTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_END_TIME));"},{"lineNumber":676,"author":{"gitID":"WJY-norainu"},"content":"        Optional\u003cLocalDate\u003e endDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_END_DATE));"},{"lineNumber":677,"author":{"gitID":"WJY-norainu"},"content":"        Optional\u003cString\u003e locationInput \u003d ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_LOCATION));"},{"lineNumber":678,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":679,"author":{"gitID":"WJY-norainu"},"content":"        String location \u003d null;"},{"lineNumber":680,"author":{"gitID":"WJY-norainu"},"content":"        LocalTime startTime \u003d LocalTime.now();"},{"lineNumber":681,"author":{"gitID":"WJY-norainu"},"content":"        LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":682,"author":{"gitID":"WJY-norainu"},"content":"        LocalTime endTime \u003d LocalTime.now();"},{"lineNumber":683,"author":{"gitID":"WJY-norainu"},"content":"        LocalDate endDate \u003d LocalDate.now();"},{"lineNumber":684,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":685,"author":{"gitID":"WJY-norainu"},"content":"        if (startTimeInput.isPresent()) {"},{"lineNumber":686,"author":{"gitID":"WJY-norainu"},"content":"            startTime \u003d startTimeInput.get();"},{"lineNumber":687,"author":{"gitID":"WJY-norainu"},"content":"            endTime \u003d startTimeInput.get();"},{"lineNumber":688,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":689,"author":{"gitID":"WJY-norainu"},"content":"        if (endTimeInput.isPresent()) {"},{"lineNumber":690,"author":{"gitID":"WJY-norainu"},"content":"            endTime \u003d endTimeInput.get();"},{"lineNumber":691,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":692,"author":{"gitID":"WJY-norainu"},"content":"        if (startDateInput.isPresent()) {"},{"lineNumber":693,"author":{"gitID":"WJY-norainu"},"content":"            startDate \u003d startDateInput.get();"},{"lineNumber":694,"author":{"gitID":"WJY-norainu"},"content":"            endDate \u003d startDateInput.get();"},{"lineNumber":695,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":696,"author":{"gitID":"WJY-norainu"},"content":"        if (endDateInput.isPresent()) {"},{"lineNumber":697,"author":{"gitID":"WJY-norainu"},"content":"            endDate \u003d endDateInput.get();"},{"lineNumber":698,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":699,"author":{"gitID":"WJY-norainu"},"content":"        if (locationInput.isPresent()) {"},{"lineNumber":700,"author":{"gitID":"WJY-norainu"},"content":"            location \u003d locationInput.get();"},{"lineNumber":701,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":702,"author":{"gitID":"WJY-norainu"},"content":"        ..."},{"lineNumber":703,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":704,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":705,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":706,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":707,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":708,"author":{"gitID":"WJY-norainu"},"content":"The format for all the fields are located inside of `Appointment` and are as follows:"},{"lineNumber":709,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":710,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":711,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":712,"author":{"gitID":"WJY-norainu"},"content":"public class Appointment extends Entry {"},{"lineNumber":713,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":714,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":715,"author":{"gitID":"WJY-norainu"},"content":"            \"Appointment names should only contain alphanumeric characters and spaces, and it should not be blank\"; // used for name and location"},{"lineNumber":716,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":717,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":718,"author":{"gitID":"WJY-norainu"},"content":"            \"Time should be a 2 digit number between 00 to 23 followed by a :\""},{"lineNumber":719,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 2 digit number beetween 00 to 59. Some examples include \""},{"lineNumber":720,"author":{"gitID":"WJY-norainu"},"content":"            + \"08:45, 13:45, 00:30\";"},{"lineNumber":721,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":722,"author":{"gitID":"WJY-norainu"},"content":"            \"Date should be a 2 digit number between 01 to 31 followed by a -\""},{"lineNumber":723,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 2 digit number between 01 to 12 followed by a -\""},{"lineNumber":724,"author":{"gitID":"WJY-norainu"},"content":"            + \" followed by a 4 digit number describing a year. Some months might have less than 31 days.\""},{"lineNumber":725,"author":{"gitID":"WJY-norainu"},"content":"            + \" Some examples include: 13-12-2018, 02-05-2019, 28-02-2018\";"},{"lineNumber":726,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":727,"author":{"gitID":"WJY-norainu"},"content":"    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":728,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":729,"author":{"gitID":"WJY-norainu"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")"},{"lineNumber":730,"author":{"gitID":"WJY-norainu"},"content":"            .withResolverStyle(ResolverStyle.STRICT); // prevent incorrect dates"},{"lineNumber":731,"author":{"gitID":"WJY-norainu"},"content":"    ..."},{"lineNumber":732,"author":{"gitID":"WJY-norainu"},"content":"}"},{"lineNumber":733,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":734,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":735,"author":{"gitID":"WJY-norainu"},"content":"The snippet below shows the state of the Celeb Scheduler app before input of the `AddAppointmentCommand`:"},{"lineNumber":736,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":737,"author":{"gitID":"WJY-norainu"},"content":".Image of Celeb Scheduler without any appointments"},{"lineNumber":738,"author":{"gitID":"WJY-norainu"},"content":"image::BeforeAddAppointment.png[width\u003d\"800\"]"},{"lineNumber":739,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":740,"author":{"gitID":"WJY-norainu"},"content":"After input of the command we will have:"},{"lineNumber":741,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":742,"author":{"gitID":"WJY-norainu"},"content":".Image of Celeb Scheduler with newly added appointment"},{"lineNumber":743,"author":{"gitID":"WJY-norainu"},"content":"image::AfterAddAppointment.png[width\u003d\"800\"]"},{"lineNumber":744,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":745,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d Appointment Storage Feature"},{"lineNumber":746,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":747,"author":{"gitID":"WJY-norainu"},"content":"The storing of appointment is facilitated by the `XmlAppointmentListStorage` class, which resides in the `Storage` component."},{"lineNumber":748,"author":{"gitID":"WJY-norainu"},"content":"It supports the retrieval and storage for appointments made by the user."},{"lineNumber":749,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":750,"author":{"gitID":"WJY-norainu"},"content":"During start-up of application, the storage component will be initialized by the `MainApp`, which retrieves information from the specified file path in `UserPrefs`."},{"lineNumber":751,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":752,"author":{"gitID":"WJY-norainu"},"content":"The following code snippet shows how the storage component will be initialized by the `MainApp`."},{"lineNumber":753,"author":{"gitID":"WJY-norainu"},"content":"[source,java]"},{"lineNumber":754,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":755,"author":{"gitID":"WJY-norainu"},"content":"public void init() throws Exception {"},{"lineNumber":756,"author":{"gitID":"WJY-norainu"},"content":"        // initializes application."},{"lineNumber":757,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":758,"author":{"gitID":"WJY-norainu"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":759,"author":{"gitID":"WJY-norainu"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":760,"author":{"gitID":"WJY-norainu"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":761,"author":{"gitID":"WJY-norainu"},"content":"        AppointmentListStorage appointmentListStorage \u003d"},{"lineNumber":762,"author":{"gitID":"WJY-norainu"},"content":"                new XmlAppointmentListStorage(userPrefs.getAppointmentListFilePath());"},{"lineNumber":763,"author":{"gitID":"WJY-norainu"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, appointmentListStorage);"},{"lineNumber":764,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":765,"author":{"gitID":"WJY-norainu"},"content":"        // initializes other component in the application."},{"lineNumber":766,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":767,"author":{"gitID":"WJY-norainu"},"content":"----"},{"lineNumber":768,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":769,"author":{"gitID":"WJY-norainu"},"content":"In the `XmlAppointmentListStorage` class, it allows developers to use methods:"},{"lineNumber":770,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":771,"author":{"gitID":"WJY-norainu"},"content":"* `readAppointmentList`, to retrieve a `ReadOnlyAppointmentList`"},{"lineNumber":772,"author":{"gitID":"WJY-norainu"},"content":"** This is done by checking if the file exist, and load the list from `XmlSerializableAppointmentList`."},{"lineNumber":773,"author":{"gitID":"WJY-norainu"},"content":"* `saveAppointmentList`, to write information into `filePath` specified in `userPrefs`"},{"lineNumber":774,"author":{"gitID":"WJY-norainu"},"content":"** This is done by creating a new file and rewriting to the list in `XmlSerializableAppointmentList`."},{"lineNumber":775,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":776,"author":{"gitID":"WJY-norainu"},"content":"While the `XmlAppointmentListStorage` class allows access to data stored on the hard disk, the `XmlSerializableAppointmentList` class represents the data of the appointment list for the calendar."},{"lineNumber":777,"author":{"gitID":"WJY-norainu"},"content":"In `XmlSerializableAppointmentList`, it contains a `List` of XML formats of appointments `XmlAdaptedAppointment`."},{"lineNumber":778,"author":{"gitID":"WJY-norainu"},"content":"`XmlAdaptedAppointment` will then contain essential information of different `Appointment` in `AppointmentList` in the `Model` component, which includes:"},{"lineNumber":779,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":780,"author":{"gitID":"WJY-norainu"},"content":"* `title` of appointment"},{"lineNumber":781,"author":{"gitID":"WJY-norainu"},"content":"* `interval` of appointment indicating its starting and ending time"},{"lineNumber":782,"author":{"gitID":"WJY-norainu"},"content":"* `fullDay` tag of appointment indicating whether if appointment is a full-day event"},{"lineNumber":783,"author":{"gitID":"WJY-norainu"},"content":"* `calendarName` of which the appointment is allocated to"},{"lineNumber":784,"author":{"gitID":"WJY-norainu"},"content":"* `location` of appointment that is going to happen"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":787,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementing of `AppointmentListStorage`"},{"lineNumber":788,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Adapting existing `AddressBookStorage`"},{"lineNumber":789,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Allows similar structure that can be maintained easily in `Storage` component"},{"lineNumber":790,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Prevents major overhaul in future if necessary"},{"lineNumber":791,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Redefining `AppointmentListStorage`"},{"lineNumber":792,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Allows flexibility in implementation"},{"lineNumber":793,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Confuses developer with different requirements for a single component"},{"lineNumber":794,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":795,"author":{"gitID":"WJY-norainu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Usage of data structures for `Appointment`"},{"lineNumber":796,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 1 (current choice):** Using a single `List`"},{"lineNumber":797,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Allows simplicity"},{"lineNumber":798,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Slows the application if there are too many appointments"},{"lineNumber":799,"author":{"gitID":"WJY-norainu"},"content":"* **Alternative 2:** Using a single `Set` such as `TreeSet`"},{"lineNumber":800,"author":{"gitID":"WJY-norainu"},"content":"** Pros: Lowers impact in speed when there are many appointments"},{"lineNumber":801,"author":{"gitID":"WJY-norainu"},"content":"** Cons: Complicates implementation when speed is not an issue"},{"lineNumber":802,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":804,"author":{"gitID":"-"},"content":"This section shows you how to document your project effectively."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"Use AsciiDoc a lightweight markup language for writing documentation."},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"Chose AsciiDoc(markup language) over markdown language format because it provides more flexibility with regards to formatting."},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e for instructions on how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":815,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e for instructions on how to deploy GitHub pages using Travis."},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"Use https://www.google.com/chrome/browser/desktop/[Google Chrome] to convert documents to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in `docs/` directory to HTML format."},{"lineNumber":828,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":829,"author":{"gitID":"-"},"content":".  Click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":830,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, proceed to click `Save` to save a copy of the file in PDF format. For the best result, use the settings indicated in the screenshot below."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"*Menu below will appear after step 3*"},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":835,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":838,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"Testing is very important as it allows us to find application defects that were made during development, and it should be done constantly. It can be expensive if software testing is done only in the later stages of development, as a bug may affect different components of the project."},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"There are two types of tests that we can run during the development of the project:"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include:"},{"lineNumber":847,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":848,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components of the software. These are in `seedu.address.ui` package."},{"lineNumber":849,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"},{"lineNumber":850,"author":{"gitID":"-"},"content":"..  _Unit tests_ that target the lowest level methods/classes. +"},{"lineNumber":851,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":852,"author":{"gitID":"-"},"content":"..  _Integration tests_ that check the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":853,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":854,"author":{"gitID":"-"},"content":"..  _Hybrids of unit and integration tests_ that check multiple code units as well as how they are connected together. +"},{"lineNumber":855,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"*Method 1: Using Gradle (headless)*"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":867,"author":{"gitID":"-"},"content":"GUI tests can be run in _headless_ mode due to the https://github.com/TestFX/TestFX[TestFX] library. GUI tests do not show up on the screen in headless mode, which allows you to work on other matters while tests are running."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":870,"author":{"gitID":"-"},"content":"Using Gradle (headless) is the most reliable way to run tests. Other testing methods may fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":873,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"*Method 3: Using IntelliJ JUnit test runner*"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":882,"author":{"gitID":"-"},"content":"* To run a subset of tests, right-click on a test package or a test class, and choose `Run \u0027Tests in \u0027\u003ctest package or test class\u003e\u0027\u0027`"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":886,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":889,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"WJY-norainu"},"content":"Dev Ops is a software engineering culture and practice that aims at unifying software development (Dev) and software operations (Ops)."},{"lineNumber":894,"author":{"gitID":"WJY-norainu"},"content":"Dev Ops advocates automation and monitoring at all steps of software construction. This section illustrates how we adopt this practice in developing Celeb Scheduler."},{"lineNumber":895,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"WJY-norainu"},"content":"We use Gradle for build automation. +"},{"lineNumber":899,"author":{"gitID":"WJY-norainu"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more details."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"WJY-norainu"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. +"},{"lineNumber":904,"author":{"gitID":"WJY-norainu"},"content":"See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"WJY-norainu"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. +"},{"lineNumber":909,"author":{"gitID":"WJY-norainu"},"content":"See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":912,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":913,"author":{"gitID":"WJY-norainu"},"content":"We use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of changed asciidoc files will look"},{"lineNumber":914,"author":{"gitID":"WJY-norainu"},"content":"like when a pull request is merged. +"},{"lineNumber":915,"author":{"gitID":"WJY-norainu"},"content":"See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"WJY-norainu"},"content":"We do the following steps to create a new release:"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":922,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":923,"author":{"gitID":"WJY-norainu"},"content":".  Tag the repo with the version number, e.g. `v0.1`."},{"lineNumber":924,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"WJY-norainu"},"content":"We automate _dependencies_ on third-party libraries using Gradle."},{"lineNumber":929,"author":{"gitID":"WJY-norainu"},"content":"There is no need to include those libraries in the repo or download them manually."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":932,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":933,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":942,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":947,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":952,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":955,"author":{"gitID":"-"},"content":"+"},{"lineNumber":956,"author":{"gitID":"-"},"content":"****"},{"lineNumber":957,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":958,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":959,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":960,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":961,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":962,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":963,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":964,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":965,"author":{"gitID":"-"},"content":"****"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":968,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":973,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":976,"author":{"gitID":"-"},"content":"+"},{"lineNumber":977,"author":{"gitID":"-"},"content":"****"},{"lineNumber":978,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":979,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":980,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":981,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":982,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":983,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":984,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":985,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":986,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":987,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":988,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":989,"author":{"gitID":"-"},"content":"****"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":992,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":997,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1000,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1013,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1014,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1016,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1017,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1018,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1021,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1032,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1033,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1034,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1036,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1037,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1039,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1040,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1041,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1042,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":1045,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":1060,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":1061,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1062,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":1063,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1064,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":1075,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1079,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1080,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1082,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1110,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1115,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1123,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1124,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1129,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1131,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1139,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1151,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1163,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1164,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1183,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"* need to manage several people (celebrities) schedule"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"* has a need to link contacts to appointments"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"**MAJOR**"},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"*Integrating Calendars*: Able to create, list, edit and delete appointments for the celebrities in calendars within the application. (By Muruges)"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"*Adding attendees and POCs*: Able to add a list of celebrities and a list of other Points of Contact for each appointment. (By Muruges)"},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":"*Location on map*: Able to show the location of appointments using address in maps, to allow the"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"celebrity manager to locate specifically the location of appointment. (By Damien)"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"*Route on map*: Able to show the rough route used to calculate the distance and time of travel, this allows"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"the celebrity manager who usually has the responsibility to drive to be familiarised with the travel route. (By Damien)"},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"*Storage of appointments*: Able to parse appointments information from storage, and save new and edited appointment"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"information into storage. (By Tzer Bin)"},{"lineNumber":1242,"author":{"gitID":"-"},"content":""},{"lineNumber":1243,"author":{"gitID":"-"},"content":"*Reminder of appointments*: Able to draft an email template to remind persons associated with the appointment and fill in the addressees\u0027 emails automatically. (By Jinyi)"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"**MINOR**"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"*Viewing Calendars and appointments*: Able to view the existing calendars and the appointments present, replacing the +"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"browser panel. (By Muruges)"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"*Visual Themes*: Able to allow user to customize visual themes of the application. (By Tzer Bin)"},{"lineNumber":1251,"author":{"gitID":"-"},"content":""},{"lineNumber":1252,"author":{"gitID":"-"},"content":"*Change of calendar view*: Able to switch among weekly, monthly and yearly calendar view. (By Jinyi)"},{"lineNumber":1253,"author":{"gitID":"-"},"content":""},{"lineNumber":1254,"author":{"gitID":"-"},"content":"*Removal of tag*: Able to remove a tag from each person with it in the address book. (By Jinyi)"},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":"*Distance and time of travel between 2 location*: Able to calculate the distance and time required to travel between"},{"lineNumber":1257,"author":{"gitID":"-"},"content":"two location to allow the celebrity manager to plan appointments and trips more effectively. (By Damien)"},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1266,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1267,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1268,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"|`* * *` |user | remove appointments to a calendar |  keep my scheduling neat and tidy"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"|`* * *` |user | edit appointment timings |  change the time of the appointment when I need to re-schedule"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"|`* * *` |user | save appointment |  retrieve information of the appointments made"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"|`* * *` |user | change appointment location |  change the venue if the original one is not available"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"|`* * *` |user | change people involved in appointment |  add new people involved or remove people no longer involved"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"|`* * *` |user | have notifications or reminder for urgent upcoming events that I need to take note of |  set my priorities straight"},{"lineNumber":1287,"author":{"gitID":"-"},"content":""},{"lineNumber":1288,"author":{"gitID":"-"},"content":"|`* * *` |user |undo a previous command | remove the change made by mistake"},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"|`* * *` |user |redo a previous command | restore the change removed by mistake"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"|`* * *` |user | add appointments to a calendar | schedule different appointments without time clash"},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":"|`* * *` |user | see the location of a given appointment in a map |  plan for travel"},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":"|`* * *` |user | see various landmarks around a specific location in a road map |  understand better the roads around the location"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"|`* * *` |user | see various landmarks around a specific location in a satelite map |  see in real time the actual layout of the surrounding"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"|`* * *` |user | zoom in and out of the map of given location in a map |  view the location in different level of details"},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":"|`* * *` |user | see the best route of travel by driving between two locations in a map |  plan for the shortest travel"},{"lineNumber":1303,"author":{"gitID":"-"},"content":""},{"lineNumber":1304,"author":{"gitID":"-"},"content":"|`* * *` |user | know if two locations can be reached by driving |  foresee any problems and plan ahead"},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"|`* * *` |user | know the estimated distance between two locations by driving |  plan for my schedules more effectively"},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"|`* * *` |user | know the estimated time of travel between two locations by driving |  plan for my schedules more effectively"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager | associate the appointment with relevant celebrities and parties |  view who are involved"},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager | associate the appointment with relevant contacts |  contact the relevant parties easily"},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager | associate certain appointments with payment |  know if payment is needed for next appointment"},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"|`* * *` |celebrity manager | have multiple schedule calendars |  manage more than 1 different schedules in the event my client is a idol group"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"|`* *` |user with many persons having long names in the address book |auto-fill the name as I key in the command | key in a person’s name without spelling out all names completely"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"|`* *` |user | be able to email directly from the address book | do not need to use another platform to do so"},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"|`* *` |user with many international contacts | group contacts by country code | see my contacts from different countries"},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"|`* *` |user | change the size of different windows of the address book application UI | it looks pleasing to the eyes"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"|`* *` |user who contacts different parties involved in an appointment | draft the message about appointment details automatically | don’t have to do it"},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"|`* *` |user who frequently contacts certain people | sort the contacts by contacting frequency |  find those people I frequently contact easily"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"|`* *` |user | change the colour scheme of the application |  looks pleasing to my eyes"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":"|`* *` |user who has very bad eyesight | change the look and feel of the application such as font size and type |  look at the font properly"},{"lineNumber":1335,"author":{"gitID":"-"},"content":""},{"lineNumber":1336,"author":{"gitID":"-"},"content":"|`* *` |user | blacklist phone numbers |  get rid of spams from other software."},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"|`* *` |celebrity manager | consolidate payments for a certain period |   know if there is any outstanding payment"},{"lineNumber":1339,"author":{"gitID":"-"},"content":""},{"lineNumber":1340,"author":{"gitID":"-"},"content":"|`* *` |celebrity manager | group celebrities up by their different talent (acting, singing, hosting etc.) |  find suitable celebrities for event quickly."},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"|`* *` |celebrity manager managing a same group of celebrities| add event to the group of celebrities at the same time |  save time"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":"|`* *` |celebrity manager |  obtain information or details about the upcoming schedule (show) | keep my client informed and prepared on the content"},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":"|`*` |user of previous versions of the address book |transfer my contacts to the new version | don’t have to add the contacts one-by-one again"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"|`*` |user with poor eyesight | the address book to read out the contacts to me | use it more efficiently"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"|`*` |user who is time conscious |  see the time and date |  plan schedules faster"},{"lineNumber":1353,"author":{"gitID":"-"},"content":""},{"lineNumber":1354,"author":{"gitID":"-"},"content":"|`*` |user | output the contacts to a separate list |  have a backup copy of the contacts"},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"|`*` |celebrity manager | check the celebrities I blacklisted |  organize the blacklist"},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"WJY-norainu"},"content":"(For all use cases below, the *System* is the `Celeb Scheduler` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1371,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler shows a list of persons"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1373,"author":{"gitID":"WJY-norainu"},"content":"4.  Celeb Scheduler deletes the person"},{"lineNumber":1374,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1381,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1382,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1385,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1386,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1387,"author":{"gitID":"WJY-norainu"},"content":"** 3a1. Celeb Scheduler shows an error message."},{"lineNumber":1388,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Auto-fill"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"WJY-norainu"},"content":"1.  User keys in a partially complete command which only has one match in the Celeb Scheduler"},{"lineNumber":1396,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler shows the matched complete command"},{"lineNumber":1397,"author":{"gitID":"WJY-norainu"},"content":"3.  User presses tab to let Celeb Scheduler auto-fill the rest of the command"},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1400,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1401,"author":{"gitID":"-"},"content":""},{"lineNumber":1402,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Undo"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":"1.  User requests to undo"},{"lineNumber":1409,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler undoes the latest executed command that mutates the data"},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1412,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1415,"author":{"gitID":"-"},"content":""},{"lineNumber":1416,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1417,"author":{"gitID":"-"},"content":"* 2a. There is no executed command that mutates the data"},{"lineNumber":1418,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1419,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1420,"author":{"gitID":"WJY-norainu"},"content":"** 2a1. Celeb Scheduler shows an error message."},{"lineNumber":1421,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1422,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1423,"author":{"gitID":"-"},"content":""},{"lineNumber":1424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Redo"},{"lineNumber":1425,"author":{"gitID":"-"},"content":""},{"lineNumber":1426,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1427,"author":{"gitID":"-"},"content":""},{"lineNumber":1428,"author":{"gitID":"-"},"content":"1.  User requests to redo"},{"lineNumber":1429,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler redoes the latest executed undo command"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1432,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1435,"author":{"gitID":"-"},"content":""},{"lineNumber":1436,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1437,"author":{"gitID":"-"},"content":"* 2a. There is no executed undo command."},{"lineNumber":1438,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1439,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1440,"author":{"gitID":"WJY-norainu"},"content":"** 2a1. Celeb Scheduler shows an error message."},{"lineNumber":1441,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1443,"author":{"gitID":"-"},"content":""},{"lineNumber":1444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Emailing"},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1447,"author":{"gitID":"-"},"content":""},{"lineNumber":1448,"author":{"gitID":"-"},"content":"1.  User requests to email to a contact"},{"lineNumber":1449,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler opens the platform of the emailing website"},{"lineNumber":1450,"author":{"gitID":"-"},"content":""},{"lineNumber":1451,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1452,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1453,"author":{"gitID":"-"},"content":""},{"lineNumber":1454,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1455,"author":{"gitID":"-"},"content":""},{"lineNumber":1456,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1457,"author":{"gitID":"-"},"content":"* 1a. Contact does not exist."},{"lineNumber":1458,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1459,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1460,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1461,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1462,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: List contacts by tag"},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1467,"author":{"gitID":"-"},"content":""},{"lineNumber":1468,"author":{"gitID":"-"},"content":"1.  User requests to list contacts by a tag"},{"lineNumber":1469,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler lists out contacts with the specified tag"},{"lineNumber":1470,"author":{"gitID":"-"},"content":""},{"lineNumber":1471,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1472,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1475,"author":{"gitID":"-"},"content":""},{"lineNumber":1476,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"* 2a. There is no people with the tag."},{"lineNumber":1478,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1479,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Blacklist phone number"},{"lineNumber":1482,"author":{"gitID":"-"},"content":""},{"lineNumber":1483,"author":{"gitID":"-"},"content":""},{"lineNumber":1484,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1485,"author":{"gitID":"-"},"content":""},{"lineNumber":1486,"author":{"gitID":"-"},"content":"1.  User requests to blacklist phone number"},{"lineNumber":1487,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler requests the user to confirm black list"},{"lineNumber":1488,"author":{"gitID":"-"},"content":"3.  User confirms"},{"lineNumber":1489,"author":{"gitID":"WJY-norainu"},"content":"4.  Celeb Scheduler adds the phone number to black list"},{"lineNumber":1490,"author":{"gitID":"-"},"content":""},{"lineNumber":1491,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1492,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1497,"author":{"gitID":"-"},"content":"* 1a. Phone number is invalid."},{"lineNumber":1498,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1499,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1500,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1501,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1502,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1503,"author":{"gitID":"-"},"content":""},{"lineNumber":1504,"author":{"gitID":"-"},"content":"* 3a. User does not confirm."},{"lineNumber":1505,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1506,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1507,"author":{"gitID":"-"},"content":""},{"lineNumber":1508,"author":{"gitID":"-"},"content":"* 3b. User enters an invalid confirmation."},{"lineNumber":1509,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1510,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1511,"author":{"gitID":"WJY-norainu"},"content":"** 3b1. Celeb Scheduler shows an error message."},{"lineNumber":1512,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1513,"author":{"gitID":"-"},"content":"Use case resumes at 2."},{"lineNumber":1514,"author":{"gitID":"-"},"content":""},{"lineNumber":1515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Change UI dimensions"},{"lineNumber":1516,"author":{"gitID":"-"},"content":""},{"lineNumber":1517,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1518,"author":{"gitID":"-"},"content":""},{"lineNumber":1519,"author":{"gitID":"-"},"content":"1.  User inputs the new dimension for a specific UI"},{"lineNumber":1520,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler updates the size of the UI indicated"},{"lineNumber":1521,"author":{"gitID":"-"},"content":""},{"lineNumber":1522,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1523,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1524,"author":{"gitID":"-"},"content":""},{"lineNumber":1525,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1526,"author":{"gitID":"-"},"content":""},{"lineNumber":1527,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1528,"author":{"gitID":"-"},"content":"* 1a. New dimensions has conflict with overall dimension of the whole UI."},{"lineNumber":1529,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1530,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1531,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1532,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1533,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1534,"author":{"gitID":"-"},"content":""},{"lineNumber":1535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add appointment"},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"-"},"content":"1.  User requests to add an appointment"},{"lineNumber":1540,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler adds the appointment to the calendar"},{"lineNumber":1541,"author":{"gitID":"-"},"content":""},{"lineNumber":1542,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1543,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1546,"author":{"gitID":"-"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1548,"author":{"gitID":"-"},"content":"* 1a. Appointment to add consist of incorrect details or format."},{"lineNumber":1549,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1550,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1551,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1552,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1553,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1554,"author":{"gitID":"-"},"content":""},{"lineNumber":1555,"author":{"gitID":"-"},"content":"* 2a. Added appointment clashes with existing appointment."},{"lineNumber":1556,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1557,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1558,"author":{"gitID":"WJY-norainu"},"content":"** 2a1. Celeb Scheduler shows an error message."},{"lineNumber":1559,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1560,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1561,"author":{"gitID":"-"},"content":""},{"lineNumber":1562,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View appointment"},{"lineNumber":1563,"author":{"gitID":"-"},"content":""},{"lineNumber":1564,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1565,"author":{"gitID":"-"},"content":""},{"lineNumber":1566,"author":{"gitID":"-"},"content":"1.  User requests to view an appointment"},{"lineNumber":1567,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler shows the appointment details"},{"lineNumber":1568,"author":{"gitID":"-"},"content":""},{"lineNumber":1569,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1570,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1571,"author":{"gitID":"-"},"content":""},{"lineNumber":1572,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1573,"author":{"gitID":"-"},"content":""},{"lineNumber":1574,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1575,"author":{"gitID":"-"},"content":"* 1a. Appointment does not exist."},{"lineNumber":1576,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1577,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1578,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1579,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1580,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1581,"author":{"gitID":"-"},"content":""},{"lineNumber":1582,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Remind attendees of appointment"},{"lineNumber":1583,"author":{"gitID":"-"},"content":""},{"lineNumber":1584,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1585,"author":{"gitID":"-"},"content":""},{"lineNumber":1586,"author":{"gitID":"-"},"content":"1.  User requests to remind appointment"},{"lineNumber":1587,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler sends a pre-drafted email containing appointment details to the attendees"},{"lineNumber":1588,"author":{"gitID":"-"},"content":""},{"lineNumber":1589,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1590,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1591,"author":{"gitID":"-"},"content":""},{"lineNumber":1592,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1593,"author":{"gitID":"-"},"content":""},{"lineNumber":1594,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1595,"author":{"gitID":"-"},"content":"* 1a. Appointment does not exist."},{"lineNumber":1596,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1597,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1598,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1599,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1600,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1601,"author":{"gitID":"-"},"content":""},{"lineNumber":1602,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Remove appointment"},{"lineNumber":1603,"author":{"gitID":"-"},"content":""},{"lineNumber":1604,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1605,"author":{"gitID":"-"},"content":""},{"lineNumber":1606,"author":{"gitID":"-"},"content":"1.  User requests to remove a specified appointment"},{"lineNumber":1607,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler removes the appointment"},{"lineNumber":1608,"author":{"gitID":"-"},"content":""},{"lineNumber":1609,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1610,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1611,"author":{"gitID":"-"},"content":""},{"lineNumber":1612,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1613,"author":{"gitID":"-"},"content":""},{"lineNumber":1614,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1615,"author":{"gitID":"-"},"content":"* 1a. Appointment does not exist."},{"lineNumber":1616,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1617,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1618,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1619,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1620,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1621,"author":{"gitID":"-"},"content":""},{"lineNumber":1622,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit appointment"},{"lineNumber":1623,"author":{"gitID":"-"},"content":""},{"lineNumber":1624,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1625,"author":{"gitID":"-"},"content":""},{"lineNumber":1626,"author":{"gitID":"-"},"content":"1.  User requests to edit a specified appointment"},{"lineNumber":1627,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler changes appointment details and displays new appointment details to user"},{"lineNumber":1628,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1629,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1630,"author":{"gitID":"-"},"content":""},{"lineNumber":1631,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1632,"author":{"gitID":"-"},"content":""},{"lineNumber":1633,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1634,"author":{"gitID":"-"},"content":"* 1a. Appointment does not exist."},{"lineNumber":1635,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1636,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1637,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1638,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1639,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1640,"author":{"gitID":"-"},"content":""},{"lineNumber":1641,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1642,"author":{"gitID":"-"},"content":"* 1b.  Information entered for edit is invalid."},{"lineNumber":1643,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1644,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1645,"author":{"gitID":"WJY-norainu"},"content":"** 1b1. Celeb Scheduler shows an error message."},{"lineNumber":1646,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1647,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1648,"author":{"gitID":"-"},"content":""},{"lineNumber":1649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Set appointment alarm"},{"lineNumber":1650,"author":{"gitID":"-"},"content":""},{"lineNumber":1651,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"-"},"content":"1.  User requests to set an alarm for a specified appointment at a specified time"},{"lineNumber":1654,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler sends reminder whenever the user opens it after the specified time till appointment timing"},{"lineNumber":1655,"author":{"gitID":"-"},"content":""},{"lineNumber":1656,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1657,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1658,"author":{"gitID":"-"},"content":""},{"lineNumber":1659,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1660,"author":{"gitID":"-"},"content":""},{"lineNumber":1661,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1662,"author":{"gitID":"-"},"content":"* 1a. Appointment does not exist."},{"lineNumber":1663,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1664,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1665,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1666,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1667,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1668,"author":{"gitID":"-"},"content":""},{"lineNumber":1669,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Cancel appointment alarm"},{"lineNumber":1670,"author":{"gitID":"-"},"content":""},{"lineNumber":1671,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1672,"author":{"gitID":"-"},"content":""},{"lineNumber":1673,"author":{"gitID":"-"},"content":"1.  User requests to cancel an alarm for a specified appointment"},{"lineNumber":1674,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler cancels the alarm"},{"lineNumber":1675,"author":{"gitID":"-"},"content":""},{"lineNumber":1676,"author":{"gitID":"-"},"content":""},{"lineNumber":1677,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1678,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1679,"author":{"gitID":"-"},"content":""},{"lineNumber":1680,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1681,"author":{"gitID":"-"},"content":""},{"lineNumber":1682,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1683,"author":{"gitID":"-"},"content":"* 1a. Appointment does not exist."},{"lineNumber":1684,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1685,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1686,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1687,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1688,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1689,"author":{"gitID":"-"},"content":""},{"lineNumber":1690,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1691,"author":{"gitID":"-"},"content":"* 1b. No alarm is set for the specified appointment."},{"lineNumber":1692,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1693,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1694,"author":{"gitID":"WJY-norainu"},"content":"** 1b1. Celeb Scheduler shows an error message."},{"lineNumber":1695,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1696,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1697,"author":{"gitID":"-"},"content":""},{"lineNumber":1698,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Consolidate payments"},{"lineNumber":1699,"author":{"gitID":"-"},"content":""},{"lineNumber":1700,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1701,"author":{"gitID":"-"},"content":""},{"lineNumber":1702,"author":{"gitID":"-"},"content":"1.  User requests to consolidate payments within a specific period"},{"lineNumber":1703,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler outputs payments made and pending"},{"lineNumber":1704,"author":{"gitID":"-"},"content":""},{"lineNumber":1705,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1706,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1707,"author":{"gitID":"-"},"content":""},{"lineNumber":1708,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1709,"author":{"gitID":"-"},"content":""},{"lineNumber":1710,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1711,"author":{"gitID":"-"},"content":"* 1a. The period specified is invalid."},{"lineNumber":1712,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1713,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1714,"author":{"gitID":"WJY-norainu"},"content":"** 1a1. Celeb Scheduler shows an error message."},{"lineNumber":1715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1716,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1717,"author":{"gitID":"-"},"content":""},{"lineNumber":1718,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1719,"author":{"gitID":"-"},"content":"* 2a. There is no payment within the specified period."},{"lineNumber":1720,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1721,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1722,"author":{"gitID":"WJY-norainu"},"content":"** 2a1. Celeb Scheduler shows a message that says no payment."},{"lineNumber":1723,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1724,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1725,"author":{"gitID":"-"},"content":""},{"lineNumber":1726,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Associate relevant parties to appointments"},{"lineNumber":1727,"author":{"gitID":"-"},"content":""},{"lineNumber":1728,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1729,"author":{"gitID":"-"},"content":""},{"lineNumber":1730,"author":{"gitID":"-"},"content":"1.  User requests to access appointments."},{"lineNumber":1731,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler provide the list of appointments User has."},{"lineNumber":1732,"author":{"gitID":"-"},"content":"3.  User requests to associate relevant parties to one of the appointments from the list."},{"lineNumber":1733,"author":{"gitID":"WJY-norainu"},"content":"4.  Celeb Scheduler requests input of the relevant parties’ names."},{"lineNumber":1734,"author":{"gitID":"-"},"content":"5.  User enters the names of the parties."},{"lineNumber":1735,"author":{"gitID":"WJY-norainu"},"content":"6.  Celeb Scheduler adds the names to the appointments."},{"lineNumber":1736,"author":{"gitID":"WJY-norainu"},"content":"7.  Celeb Scheduler provides confirmation."},{"lineNumber":1737,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1738,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1739,"author":{"gitID":"-"},"content":""},{"lineNumber":1740,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1741,"author":{"gitID":"-"},"content":""},{"lineNumber":1742,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1743,"author":{"gitID":"-"},"content":"* 4a. User provides contact that is not in contact list."},{"lineNumber":1744,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1745,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1746,"author":{"gitID":"WJY-norainu"},"content":"** 4a1. Celeb Scheduler requests User to create a new contact."},{"lineNumber":1747,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1748,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1749,"author":{"gitID":"-"},"content":"** 4a2. User adds new contact (refer to Add New Contact use case)."},{"lineNumber":1750,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1751,"author":{"gitID":"-"},"content":"Use case resumes from step 5."},{"lineNumber":1752,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1753,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1754,"author":{"gitID":"-"},"content":"* a. At any time, user chooses to cancel"},{"lineNumber":1755,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1756,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1757,"author":{"gitID":"WJY-norainu"},"content":"** a1. Celeb Scheduler provides status."},{"lineNumber":1758,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1759,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1760,"author":{"gitID":"-"},"content":""},{"lineNumber":1761,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Associate points of contact to appointments"},{"lineNumber":1762,"author":{"gitID":"-"},"content":""},{"lineNumber":1763,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1764,"author":{"gitID":"-"},"content":""},{"lineNumber":1765,"author":{"gitID":"-"},"content":"1.  User requests to access appointments."},{"lineNumber":1766,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler provide the list of appointments User has."},{"lineNumber":1767,"author":{"gitID":"-"},"content":"3.  User requests to associate points of contacts to one of the appointments from the list."},{"lineNumber":1768,"author":{"gitID":"WJY-norainu"},"content":"4.  Celeb Scheduler requests input of the points of contact’ names."},{"lineNumber":1769,"author":{"gitID":"-"},"content":"5.  User enters the names of the parties."},{"lineNumber":1770,"author":{"gitID":"WJY-norainu"},"content":"6.  Celeb Scheduler adds the names to the appointments."},{"lineNumber":1771,"author":{"gitID":"WJY-norainu"},"content":"7.  Celeb Scheduler provides confirmation."},{"lineNumber":1772,"author":{"gitID":"-"},"content":""},{"lineNumber":1773,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1774,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1775,"author":{"gitID":"-"},"content":""},{"lineNumber":1776,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1777,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1778,"author":{"gitID":"-"},"content":"* 4a. User provides contact that is not in contact list."},{"lineNumber":1779,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1780,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1781,"author":{"gitID":"WJY-norainu"},"content":"** 4a1. Celeb Scheduler requests User to create a new contact."},{"lineNumber":1782,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1783,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1784,"author":{"gitID":"-"},"content":"** 4a2. User adds new contact (refer to Add New Contact use case)."},{"lineNumber":1785,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1786,"author":{"gitID":"-"},"content":"Use case resumes from step 5."},{"lineNumber":1787,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1788,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1789,"author":{"gitID":"-"},"content":"* a. At any time, user chooses to cancel"},{"lineNumber":1790,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1791,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1792,"author":{"gitID":"WJY-norainu"},"content":"** a1. Celeb Scheduler provides status."},{"lineNumber":1793,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1794,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1795,"author":{"gitID":"-"},"content":""},{"lineNumber":1796,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Associate payments to appointments"},{"lineNumber":1797,"author":{"gitID":"-"},"content":""},{"lineNumber":1798,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"1.  User requests to access appointments."},{"lineNumber":1801,"author":{"gitID":"WJY-norainu"},"content":"2.  Celeb Scheduler provide the list of appointments User has."},{"lineNumber":1802,"author":{"gitID":"-"},"content":"3.  User requests to associate payments to one of the appointments from the list."},{"lineNumber":1803,"author":{"gitID":"WJY-norainu"},"content":"4.  Celeb Scheduler requests input of the payment amount."},{"lineNumber":1804,"author":{"gitID":"-"},"content":"5.  User enters the payment amount."},{"lineNumber":1805,"author":{"gitID":"WJY-norainu"},"content":"6.  Celeb Scheduler adds payment amount to the appointments."},{"lineNumber":1806,"author":{"gitID":"WJY-norainu"},"content":"7.  Celeb Scheduler provides confirmation."},{"lineNumber":1807,"author":{"gitID":"-"},"content":""},{"lineNumber":1808,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1809,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1810,"author":{"gitID":"-"},"content":""},{"lineNumber":1811,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1812,"author":{"gitID":"-"},"content":""},{"lineNumber":1813,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1814,"author":{"gitID":"-"},"content":"* 4a. User provides invalid input."},{"lineNumber":1815,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1816,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1817,"author":{"gitID":"WJY-norainu"},"content":"** 4a1. Celeb Scheduler requests User to provide valid input."},{"lineNumber":1818,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1819,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1820,"author":{"gitID":"-"},"content":"** 4a2. User enters new input."},{"lineNumber":1821,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1822,"author":{"gitID":"-"},"content":"Steps 4a1-4a2 are repeated until input is valid."},{"lineNumber":1823,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1824,"author":{"gitID":"-"},"content":"Use case resumes from step 5."},{"lineNumber":1825,"author":{"gitID":"-"},"content":""},{"lineNumber":1826,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1827,"author":{"gitID":"-"},"content":"* a. At any time, user chooses to cancel"},{"lineNumber":1828,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1829,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1830,"author":{"gitID":"WJY-norainu"},"content":"** a1. Celeb Scheduler provides status."},{"lineNumber":1831,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1832,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1833,"author":{"gitID":"-"},"content":""},{"lineNumber":1834,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1835,"author":{"gitID":"-"},"content":""},{"lineNumber":1836,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1837,"author":{"gitID":"-"},"content":""},{"lineNumber":1838,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1839,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1840,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1841,"author":{"gitID":"-"},"content":".  Should be usable by people with no knowledge about command line input"},{"lineNumber":1842,"author":{"gitID":"-"},"content":".  Should respond to any user command within 10 seconds"},{"lineNumber":1843,"author":{"gitID":"WJY-norainu"},"content":".  Should be backward compatible with data produced by earlier versions of the Celeb Scheduler"},{"lineNumber":1844,"author":{"gitID":"-"},"content":".  Should come with automated unit tests and open source code"},{"lineNumber":1845,"author":{"gitID":"-"},"content":".  Should favor DOS style commands over Unix-style commands"},{"lineNumber":1846,"author":{"gitID":"-"},"content":""},{"lineNumber":1847,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1848,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1849,"author":{"gitID":"-"},"content":""},{"lineNumber":1850,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1851,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1852,"author":{"gitID":"-"},"content":""},{"lineNumber":1853,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1854,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1855,"author":{"gitID":"-"},"content":""},{"lineNumber":1856,"author":{"gitID":"-"},"content":"[[appointment]] Appointment::"},{"lineNumber":1857,"author":{"gitID":"-"},"content":"A meeting between contacts at a specific time, date and location. An appointment has a specific name"},{"lineNumber":1858,"author":{"gitID":"-"},"content":""},{"lineNumber":1859,"author":{"gitID":"-"},"content":"[[attendees]] Attendees::"},{"lineNumber":1860,"author":{"gitID":"-"},"content":"A list of contacts being managed by the User who are attending the appointment"},{"lineNumber":1861,"author":{"gitID":"-"},"content":""},{"lineNumber":1862,"author":{"gitID":"-"},"content":"[[points-of-contacts]] Points of Contacts::"},{"lineNumber":1863,"author":{"gitID":"-"},"content":"A list of contacts involved in an appointment but not attendees"},{"lineNumber":1864,"author":{"gitID":"-"},"content":""},{"lineNumber":1865,"author":{"gitID":"-"},"content":"[[blacklist]] Blacklist::"},{"lineNumber":1866,"author":{"gitID":"-"},"content":"A list of contacts which should be marked for being untrustworthy or unacceptable for whatever reason"},{"lineNumber":1867,"author":{"gitID":"-"},"content":""},{"lineNumber":1868,"author":{"gitID":"-"},"content":"[[UI]] User Interface::"},{"lineNumber":1869,"author":{"gitID":"-"},"content":"The Design and looks of the software"},{"lineNumber":1870,"author":{"gitID":"-"},"content":""},{"lineNumber":1871,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1872,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1873,"author":{"gitID":"-"},"content":""},{"lineNumber":1874,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1875,"author":{"gitID":"-"},"content":""},{"lineNumber":1876,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1877,"author":{"gitID":"-"},"content":""},{"lineNumber":1878,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1879,"author":{"gitID":"-"},"content":""},{"lineNumber":1880,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1881,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1882,"author":{"gitID":"-"},"content":""},{"lineNumber":1883,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1884,"author":{"gitID":"-"},"content":""},{"lineNumber":1885,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1886,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1887,"author":{"gitID":"-"},"content":""},{"lineNumber":1888,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1889,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1890,"author":{"gitID":"-"},"content":""},{"lineNumber":1891,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1892,"author":{"gitID":"-"},"content":""},{"lineNumber":1893,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1894,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1895,"author":{"gitID":"-"},"content":""},{"lineNumber":1896,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1897,"author":{"gitID":"-"},"content":""},{"lineNumber":1898,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1899,"author":{"gitID":"-"},"content":""},{"lineNumber":1900,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1901,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1902,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1903,"author":{"gitID":"-"},"content":""},{"lineNumber":1904,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1905,"author":{"gitID":"-"},"content":""},{"lineNumber":1906,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1907,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1908,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1909,"author":{"gitID":"-"},"content":""},{"lineNumber":1910,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1911,"author":{"gitID":"-"},"content":""},{"lineNumber":1912,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1913,"author":{"gitID":"-"},"content":""},{"lineNumber":1914,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1915,"author":{"gitID":"-"},"content":""},{"lineNumber":1916,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1917,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1918,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1919,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1920,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1921,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1922,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1923,"author":{"gitID":"-"},"content":""},{"lineNumber":1924,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1925,"author":{"gitID":"-"},"content":""},{"lineNumber":1926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1927,"author":{"gitID":"-"},"content":""},{"lineNumber":1928,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1929,"author":{"gitID":"-"},"content":""},{"lineNumber":1930,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1931,"author":{"gitID":"-"},"content":""},{"lineNumber":1932,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"WJY-norainu":336,"-":1596}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":81,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":88,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":97,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":126,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":185,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":192,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseCommand_showLocation() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        MapAddress address \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        ShowLocationCommand command \u003d (ShowLocationCommand) parser.parseCommand("},{"lineNumber":200,"author":{"gitID":"-"},"content":"                ShowLocationCommand.COMMAND_WORD + \" \" + PREFIX_MAP_ADDRESS + address.toString());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(new ShowLocationCommand(address), command);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parseCommand_showLocationAlias() throws Exception {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        MapAddress address \u003d new MapAddress(VALID_ADDRESS_MAP_AMY);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        ShowLocationCommand command \u003d (ShowLocationCommand) parser.parseCommand("},{"lineNumber":208,"author":{"gitID":"-"},"content":"                ShowLocationCommand.COMMAND_ALIAS + \" \" + PREFIX_MAP_ADDRESS + address.toString());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertEquals(new ShowLocationCommand(address), command);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 1\") instanceof RedoCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"WJY-norainu"},"content":"    public void parseCommand_removeTag() throws Exception {"},{"lineNumber":226,"author":{"gitID":"WJY-norainu"},"content":"        Tag tag \u003d FRIENDS_TAG;"},{"lineNumber":227,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("},{"lineNumber":228,"author":{"gitID":"WJY-norainu"},"content":"                RemoveTagCommand.COMMAND_WORD + \" \" + FRIENDS_TAG.tagName);"},{"lineNumber":229,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(new RemoveTagCommand(tag), command);"},{"lineNumber":230,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":232,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"WJY-norainu"},"content":"    public void parseCommand_removeTagAlias() throws Exception {"},{"lineNumber":234,"author":{"gitID":"WJY-norainu"},"content":"        Tag tag \u003d FRIENDS_TAG;"},{"lineNumber":235,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("},{"lineNumber":236,"author":{"gitID":"WJY-norainu"},"content":"                RemoveTagCommand.COMMAND_ALIAS + \" \" + FRIENDS_TAG.tagName);"},{"lineNumber":237,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(new RemoveTagCommand(tag), command);"},{"lineNumber":238,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":19,"-":246}},{"path":"src/test/java/seedu/address/logic/parser/ShowLocationCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.map.ShowLocationCommandParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ShowLocationCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private ShowLocationCommandParser parser \u003d new ShowLocationCommandParser();"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_validArgs_returnsRemoveTagCommand() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        MapAddress address \u003d new MapAddress(VALID_ADDRESS_MAP_BOB);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_MAP_ADDRESS + VALID_ADDRESS_MAP_BOB, new ShowLocationCommand(address));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":28,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLocationCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":4,"-":26}},{"path":"src/test/java/seedu/address/logic/parser/RemoveTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    public void parse_validArgs_returnsRemoveTagCommand() {"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND, new RemoveTagCommand(FRIENDS_TAG));"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":17,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/RemoveTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.FRIENDS_TAG;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalTags.HUSBAND_TAG;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":" * {@code RemoveTagCommand}."},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandTest {"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    public void constructor_nullTag_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        new RemoveTagCommand(null);"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagFirstCommand \u003d prepareCommand(FRIENDS_TAG);"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagSecondCommand \u003d prepareCommand(HUSBAND_TAG);"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(removeTagFirstCommand.equals(removeTagFirstCommand));"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        // same tag -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagFirstCommandCopy \u003d prepareCommand(FRIENDS_TAG);"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        assertTrue(removeTagFirstCommand.equals(removeTagFirstCommandCopy));"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(removeTagFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(removeTagFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        // different tags -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"        assertFalse(removeTagFirstCommand.equals(removeTagSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"    private RemoveTagCommand prepareCommand(Tag tag) {"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(tag);"},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        removeTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"        return removeTagCommand;"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":51,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAP_ADDRESS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 555, Ang Mo Kio, #11-222\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 297, Punggol Central, #01-222\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_MAP_AMY \u003d \"National University Of Singapore\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_MAP_BOB \u003d \"Block 297, Punggol Central\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friends\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_MAP_DESC1 \u003d \" \" + PREFIX_MAP_ADDRESS"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            + \"$$$$\"; // random text not allowed for map addresses"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_MAP_DESC2 \u003d \" \""},{"lineNumber":69,"author":{"gitID":"-"},"content":"            + PREFIX_MAP_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_NAME_OSCAR \u003d \"Oscar Awards\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_NAME_GRAMMY \u003d \"Grammy Awards\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_LOCATION_OSCAR \u003d \"Hollywood\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_LOCATION_GRAMMY \u003d \"New York\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String VALID_START_TIME_OSCAR \u003d \"12:30\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String VALID_START_TIME_GRAMMY \u003d \"18:00\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String VALID_START_DATE_OSCAR \u003d \"12-12-2018\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String VALID_START_DATE_GRAMMY \u003d \"10-10-2019\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String VALID_END_TIME_OSCAR \u003d \"13:30\";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String VALID_END_TIME_GRAMMY \u003d \"19:00\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String VALID_END_DATE_OSCAR \u003d \"12-12-2018\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String VALID_END_DATE_GRAMMY \u003d \"10-10-2019\";"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String APPT_NAME_DESC_OSCAR \u003d \" \" + PREFIX_NAME + VALID_APPOINTMENT_NAME_OSCAR;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String APPT_NAME_DESC_GRAMMY \u003d \" \" + PREFIX_NAME + VALID_APPOINTMENT_NAME_GRAMMY;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String APPT_LOCATION_DESC_OSCAR \u003d \" \" + PREFIX_LOCATION + VALID_APPOINTMENT_LOCATION_OSCAR;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String APPT_LOCATION_DESC_GRAMMY \u003d \" \" + PREFIX_LOCATION + VALID_APPOINTMENT_LOCATION_GRAMMY;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String APPT_START_TIME_DESC_OSCAR \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_OSCAR;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String APPT_START_TIME_DESC_GRAMMY \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_GRAMMY;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String APPT_START_DATE_DESC_OSCAR \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_OSCAR;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String APPT_START_DATE_DESC_GRAMMY \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_GRAMMY;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String APPT_END_TIME_DESC_OSCAR \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_OSCAR;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String APPT_END_TIME_DESC_GRAMMY \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_GRAMMY;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String APPT_END_DATE_DESC_OSCAR \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_OSCAR;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String APPT_END_DATE_DESC_GRAMMY \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_GRAMMY;"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String INVALID_APPT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Dinner \u0026 Dance\"; // \u0027\u0026\u0027 not allowed in name"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String INVALID_APPT_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \"#03-04\"; // \u0027#\u0027 not allowed in name"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String INVALID_START_TIME \u003d \" \" + PREFIX_START_TIME + \"23:61\"; // Minute cannot be more than 60"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String INVALID_START_DATE \u003d \" \" + PREFIX_START_DATE + \"31-02-2018\"; // There is no Feb 31st"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":143,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":198}},{"path":"src/test/java/seedu/address/logic/commands/ShowLocationCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAP_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Contains integration tests and unit tests for"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * {@code ShowLocationCommand}."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ShowLocationCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void constructor_nullAddress_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new ShowLocationCommand(null);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ShowLocationCommand showLocationFirstCommand \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ShowLocationCommand showLocationSecondCommand \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_AMY));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(showLocationFirstCommand.equals(showLocationFirstCommand));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // same tag -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ShowLocationCommand showLocationFirstCommandCopy \u003d prepareCommand(new MapAddress(VALID_ADDRESS_MAP_BOB));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(showLocationFirstCommand.equals(showLocationFirstCommandCopy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(showLocationFirstCommand.equals(1));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(showLocationFirstCommand.equals(null));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(showLocationFirstCommand.equals(showLocationSecondCommand));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns a {@code showLocationCommand} with the parameter {@code address}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private ShowLocationCommand prepareCommand(MapAddress address) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ShowLocationCommand showLocationCommand \u003d new ShowLocationCommand(address);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return showLocationCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":2,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public void addCelebrity(Person celebrity) throws DuplicatePersonException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public ObservableList\u003cCalendar\u003e getCelebCalendars() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public CalendarSource getCelebCalendarSource() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This  method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":159,"author":{"gitID":"WJY-norainu"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"WJY-norainu"},"content":"        public int removeTag(Tag tag) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"WJY-norainu"},"content":"            return -1;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":6,"-":193}},{"path":"src/test/java/seedu/address/logic/parser/calendar/AddAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_GRAMMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_DATE_DESC_OSCAR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_GRAMMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_END_TIME_DESC_OSCAR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_GRAMMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_LOCATION_DESC_OSCAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_GRAMMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_NAME_DESC_OSCAR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_GRAMMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_DATE_DESC_OSCAR;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_GRAMMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPT_START_TIME_DESC_OSCAR;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPT_LOCATION_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPT_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_LOCATION_OSCAR;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_NAME_OSCAR;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_OSCAR;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_OSCAR;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_OSCAR;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_OSCAR;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddAppointmentCommandParserTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .withLocation(VALID_APPOINTMENT_LOCATION_OSCAR).withStartTime(VALID_START_TIME_OSCAR)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_GRAMMY + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                        + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // multiple locations - last location accepted"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_GRAMMY + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                        + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // multiple start times - last start times accepted"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                        + APPT_START_TIME_DESC_GRAMMY + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // multiple start dates - last start date accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                        + APPT_START_DATE_DESC_GRAMMY + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // multiple end times - last end time accepted"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_GRAMMY + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // multiple end dates - last end date accepted"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                        + APPT_END_DATE_DESC_GRAMMY + APPT_START_DATE_DESC_OSCAR"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                        + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parse_locationFieldMissing_success() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withStartDate(VALID_START_DATE_OSCAR)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withEndTime(VALID_END_TIME_OSCAR).withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                        + APPT_START_DATE_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parse_startTimeFieldMissing_success() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                        + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parse_startDateFieldMissing_success() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                        + APPT_END_DATE_DESC_OSCAR,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parseStartTimeAndStartDateFieldMissing_success() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withEndTime(VALID_END_TIME_OSCAR).withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + APPT_END_DATE_DESC_OSCAR, new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parse_endTimeFieldMissing_success() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).withStartTime(VALID_START_TIME_OSCAR)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withEndDate(VALID_END_DATE_OSCAR).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_END_DATE_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                        + APPT_START_DATE_DESC_OSCAR,"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parse_endDateFieldMissing_success() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withEndTime(VALID_END_TIME_OSCAR)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_START_DATE_OSCAR).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_END_TIME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                        + APPT_START_DATE_DESC_OSCAR,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parseEndTimeAndEndDateFieldMissing_success() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .withStartTime(VALID_START_TIME_OSCAR).withStartDate(VALID_START_DATE_OSCAR).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR + APPT_START_TIME_DESC_OSCAR"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                + APPT_START_DATE_DESC_OSCAR, new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseAllTimeAndDateFieldsMissing_success() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder().withName(VALID_APPOINTMENT_NAME_OSCAR).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, APPT_NAME_DESC_OSCAR, new AddAppointmentCommand(expectedAppointment, 0));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_APPOINTMENT_NAME_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR, expectedMessage);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_APPT_NAME_DESC + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR, Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // invalid location"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, APPT_NAME_DESC_OSCAR + INVALID_APPT_LOCATION_DESC"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + APPT_START_DATE_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR, Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // invalid start time"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                + INVALID_START_TIME + APPT_START_DATE_DESC_OSCAR, Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // invalid start date"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + APPT_START_TIME_DESC_OSCAR + INVALID_START_DATE, Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_APPT_NAME_DESC + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + APPT_START_TIME_DESC_OSCAR + INVALID_START_DATE, Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + APPT_NAME_DESC_OSCAR + APPT_LOCATION_DESC_OSCAR"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + APPT_START_TIME_DESC_OSCAR + APPT_START_DATE_DESC_OSCAR,"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":198}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"            .withPerson(AMY).build();"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithBobAndAlice \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"            .withPerson(ALICE).build();"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithAlice \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"    public void removeTag_existentTag_tagRemoved() throws Exception {"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"    public void removePerson_theOnlyPersonWithHusbandTagRemoved_tagListUpdated() throws Exception {"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithBobAndAlice.removePerson(BOB);"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAlice);"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"    public void updatePerson_theOnlyPersonWithFriendTagUpdated_tagListUpdated() throws Exception {"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"        Person aliceWithoutFriendTag \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithAlice.updatePerson(ALICE, aliceWithoutFriendTag);"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(aliceWithoutFriendTag).build();"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithAlice);"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e celebrities \u003d FXCollections.observableArrayList();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getCelebritiesList() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return celebrities;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":41,"-":100}},{"path":"src/test/java/seedu/address/testutil/TypicalTags.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":"public class TypicalTags {"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"    public static final Tag FRIENDS_TAG \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"    public static final Tag HUSBAND_TAG \u003d new Tag(VALID_TAG_HUSBAND);"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":8,"-":6}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A utility class to help with building Appointment objects."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class AppointmentBuilder {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Oscars 2018\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_LOCATION \u003d null;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final LocalTime DEFAULT_START_TIME \u003d LocalTime.now();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final LocalDate DEFAULT_START_DATE \u003d LocalDate.now();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final LocalTime DEFAULT_END_TIME \u003d LocalTime.now();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final LocalDate DEFAULT_END_DATE \u003d LocalDate.now();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String location;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private LocalTime startTime;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private LocalDate startDate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private LocalTime endTime;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private LocalDate endDate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public AppointmentBuilder() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        name \u003d DEFAULT_NAME;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        location \u003d DEFAULT_LOCATION;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        startTime \u003d DEFAULT_START_TIME;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        startDate \u003d DEFAULT_START_DATE;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        endDate \u003d DEFAULT_END_DATE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        endTime \u003d DEFAULT_END_TIME;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Initializes the AppointmentBuilder with the data of {@code apptToCopy}"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public AppointmentBuilder(Appointment apptToCopy) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        name \u003d apptToCopy.getTitle();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        location \u003d apptToCopy.getLocation();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        startTime \u003d apptToCopy.getStartTime();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        startDate \u003d apptToCopy.getStartDate();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        endTime \u003d apptToCopy.getEndTime();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        endDate \u003d apptToCopy.getEndDate();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code name} of the {@code Appointment} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AppointmentBuilder withName(String name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code location} of the {@code Appointment} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AppointmentBuilder withLocation(String location) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.location \u003d location;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code startTime} of the {@code Appointment} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public AppointmentBuilder withStartTime(String startTime) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.startTime \u003d LocalTime.parse(startTime, Appointment.TIME_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.endTime \u003d this.startTime;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Sets the {@code startDate} of the {@code Appointment} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AppointmentBuilder withStartDate(String startDate) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.startDate \u003d LocalDate.parse(startDate, Appointment.DATE_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.endDate \u003d this.startDate;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code endTime} of the {@code Appointment} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public AppointmentBuilder withEndTime(String endTime) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.endTime \u003d LocalTime.parse(endTime, Appointment.TIME_FORMAT);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the {@code endDate} of the {@code Appointment} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public AppointmentBuilder withEndDate(String endDate) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.endDate \u003d LocalDate.parse(endDate, Appointment.DATE_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Appointment build() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return new Appointment(name, startTime, startDate, location, endTime, endDate);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":100}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.map.ShowLocationCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.calendar.AddAppointmentCommandParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.map.ShowLocationCommandParser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case AddAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"        case RemoveTagCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"        case RemoveTagCommand.COMMAND_ALIAS:"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"            return new RemoveTagCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case ShowLocationCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case ShowLocationCommand.COMMAND_ALIAS:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new ShowLocationCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":5,"-":115}},{"path":"src/main/java/seedu/address/logic/parser/calendar/AddAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.calendar.AddAppointmentCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddAppointmentCommand object for execution"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not comform to the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                PREFIX_START_DATE,  PREFIX_LOCATION, PREFIX_END_TIME, PREFIX_END_DATE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_NAME)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            String appointmentName \u003d ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Optional\u003cLocalTime\u003e startTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_START_TIME));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Optional\u003cLocalDate\u003e startDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_START_DATE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Optional\u003cLocalTime\u003e endTimeInput \u003d ParserUtil.parseTime(argMultiMap.getValue(PREFIX_END_TIME));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Optional\u003cLocalDate\u003e endDateInput \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_END_DATE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e locationInput \u003d ParserUtil.parseGeneralName(argMultiMap.getValue(PREFIX_LOCATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            String location \u003d null;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            LocalTime startTime \u003d LocalTime.now();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            LocalDate startDate \u003d LocalDate.now();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            LocalTime endTime \u003d LocalTime.now();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            LocalDate endDate \u003d LocalDate.now();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            if (startTimeInput.isPresent()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                startTime \u003d startTimeInput.get();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                endTime \u003d startTimeInput.get();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            if (endTimeInput.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                endTime \u003d endTimeInput.get();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            if (startDateInput.isPresent()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                startDate \u003d startDateInput.get();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                endDate \u003d startDateInput.get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            if (endDateInput.isPresent()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                endDate \u003d endDateInput.get();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            if (locationInput.isPresent()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                location \u003d locationInput.get();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"            Appointment appt \u003d new Appointment(appointmentName, startTime, startDate, location, endTime, endDate);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new AddAppointmentCommand(appt, 0); // Let index be 0 for now since we only have one cal"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":83}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.map.MapAddress;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static MapAddress parseMapAddress(String address) throws IllegalValueException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!MapAddress.isValidAddress(trimmedAddress)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MapAddress.MESSAGE_ADDRESS_MAP_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return new MapAddress(trimmedAddress);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Optional\u003cMapAddress\u003e parseMapAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseMapAddress(address.get())) : Optional.empty();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Parses a {@code String time} into a {@code LocalTime}."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code time} is invalid."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public static LocalTime parseTime(String time) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        requireNonNull(time);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            LocalTime lt \u003d LocalTime.parse(time, Appointment.TIME_FORMAT);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return lt;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cLocalTime\u003e time} into an {@code Optional\u003cLocalTime\u003e} if {@code time} is present."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public static Optional\u003cLocalTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        requireNonNull(time);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Parses a {@code String date} into a {@code LocalDate}."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public static LocalDate parseDate(String date) throws IllegalValueException {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        requireNonNull(date);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            LocalDate ld \u003d LocalDate.parse(date, Appointment.DATE_FORMAT);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            return ld;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cLocalDate\u003e date} into an {@code Optional\u003cLocalDate\u003e} if {@code date} is present."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public static Optional\u003cLocalDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        requireNonNull(date);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Validates if a {@code String name} into a valid name."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public static String parseGeneralName(String name) throws IllegalValueException {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (!Appointment.isValidName(trimmedName)) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return trimmedName;"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cString\u003e} if {@code name} is present and valid."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public static Optional\u003cString\u003e parseGeneralName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseGeneralName(name.get())) : Optional.empty();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":281}},{"path":"src/main/java/seedu/address/logic/parser/RemoveTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":" * Parses input arguments and creates a new RemoveTagCommand object"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveTagCommand"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":"     * and returns a RemoveTagCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"WJY-norainu"},"content":"    public RemoveTagCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"WJY-norainu"},"content":"        //check if there is an input for tag"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"        if (args.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"        //check if args is a valid tag name"},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"            Tag targetTag \u003d ParserUtil.parseTag(args);"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":"            return new RemoveTagCommand(targetTag);"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":"            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":24,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/calendar/AddAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.CelebCalendar;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Adds an appointment to a calendar."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddAppointmentCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"addAppointment\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"aa\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the celebrity calendar. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"APPOINTMENT NAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_START_TIME + \"START TIME \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_START_DATE + \"START DATE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_END_TIME + \"END TIME \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_END_DATE + \"END DATE\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"Oscars 2018 \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_START_TIME + \"18:00 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_START_DATE + \"23-04-2018 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_LOCATION + \"Hollywood \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_END_TIME + \"20:00 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_END_DATE + \"23-04-2018\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Added appointment successfully\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final int calendarIndex;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final Appointment appt;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates an AddAppointmentCommand with the following parameters"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param appt The created appointment"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param calendarIndex The index of the calendar we want to add to"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddAppointmentCommand(Appointment appt, int calendarIndex) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(appt);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.calendarIndex \u003d calendarIndex; // just use first calendar for now since we only created one calendar"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.appt \u003d appt;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        CelebCalendar cal \u003d (CelebCalendar) model.getCelebCalendars().get(calendarIndex);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        cal.addEntry(appt);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof AddAppointmentCommand"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 appt.equals(((AddAppointmentCommand) other).appt));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":70}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"    public static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":150,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":201,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":208,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":209,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":210,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":236}},{"path":"src/main/java/seedu/address/logic/commands/RemoveTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_PERSON;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":11,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":" * Removes a tag from every person who has it in the address book"},{"lineNumber":14,"author":{"gitID":"WJY-norainu"},"content":" * and shows the number of people affected by the operation."},{"lineNumber":15,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"public class RemoveTagCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":18,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_WORD \u003d \"removeTag\";"},{"lineNumber":19,"author":{"gitID":"WJY-norainu"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"            + \": Removes a tag from every person who has it in the list and shows the number of people affected \""},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"            + \"by this operation.\\n\""},{"lineNumber":24,"author":{"gitID":"WJY-norainu"},"content":"            + \"Parameters: TAG (must be a non-empty string)\\n\""},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends\";"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":27,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"The tag %1$s does not exist and thus cannot be removed.\";"},{"lineNumber":28,"author":{"gitID":"WJY-norainu"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Removed tag %1$s and %2$s person(s) affected.\";"},{"lineNumber":29,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"    public final Tag tagToRemove;"},{"lineNumber":31,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":32,"author":{"gitID":"WJY-norainu"},"content":"    public RemoveTagCommand(Tag tagToRemove) {"},{"lineNumber":33,"author":{"gitID":"WJY-norainu"},"content":"        requireNonNull(tagToRemove);"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"        this.tagToRemove \u003d tagToRemove;"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"WJY-norainu"},"content":"        requireNonNull(tagToRemove);"},{"lineNumber":41,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":42,"author":{"gitID":"WJY-norainu"},"content":"        int numberOfAffectedPersons \u003d 0;"},{"lineNumber":43,"author":{"gitID":"WJY-norainu"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"WJY-norainu"},"content":"            numberOfAffectedPersons \u003d model.removeTag(tagToRemove);"},{"lineNumber":45,"author":{"gitID":"WJY-norainu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":46,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagToRemove.toString()));"},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":"        return new CommandResult(String.format("},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"                MESSAGE_DELETE_TAG_SUCCESS,"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"                tagToRemove.toString(),"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":"                numberOfAffectedPersons));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"                || (other instanceof RemoveTagCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"                \u0026\u0026 this.tagToRemove.equals(((RemoveTagCommand) other).tagToRemove));"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"}"}],"authorContributionMap":{"WJY-norainu":52,"-":12}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":" * Signals that the operation is unable to find the specified appointment."},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"public class AppointmentNotFoundException extends Exception {}"}],"authorContributionMap":{"WJY-norainu":6}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Wraps all data required for an appointment, inheriting from a class of our calendar library"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Appointment extends Entry {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            \"Appointment names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            \"Time should be a 2 digit number between 00 to 23 followed by a :\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \" followed by a 2 digit number beetween 00 to 59. Some examples include \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"08:45, 13:45, 00:30\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            \"Date should be a 2 digit number between 01 to 31 followed by a -\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \" followed by a 2 digit number between 01 to 12 followed by a -\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \" followed by a 4 digit number describing a year. Some months might have less than 31 days.\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \" Some examples include: 13-12-2018, 02-05-2019, 28-02-2018\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withResolverStyle(ResolverStyle.STRICT); // prevent incorrect dates"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    // Minimum duration for an appointment is at least 1 minute"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Duration minDuration \u003d Duration.ofMinutes(1);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Appointment(String title, LocalTime startTime, LocalDate startDate,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                       String location, LocalTime endTime, LocalDate endDate) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(requireNonNull(title));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireNonNull(startTime);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(startDate);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(endTime);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(endDate);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.setMinimumDuration(minDuration);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.changeStartTime(startTime);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.changeStartDate(startDate);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.changeEndTime(endTime);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.changeEndDate(endDate);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.setLocation(location);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals (Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Appointment otherAppt \u003d (Appointment) other;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Objects.equals(otherAppt.getTitle(), this.getTitle())"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(otherAppt.getLocation(), this.getLocation())"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 (otherAppt.getStartTime().getHour() \u003d\u003d this.getStartTime().getHour())"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 (otherAppt.getStartTime().getMinute() \u003d\u003d this.getStartTime().getMinute());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":1,"-":83}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"     * @returns {@code true} if the {@code person} has the specified {@code tag},"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"     * else false."},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    public boolean hasTag(Tag targetTag) {"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e newTags \u003d tags.toSet();"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"        for (Tag tag: newTags) {"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"            if (tag.equals(targetTag)) {"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"                return true;"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"        return false;"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns if the person is tagged as a celebrity"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean isCelebrity() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Tag celeb \u003d new Tag(\"celebrity\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this.hasTag(celeb);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":14,"-":108}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.EditCommand.createEditedPerson;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniquePersonList celebrities;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        celebrities \u003d new UniquePersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setCelebrities(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.celebrities.setPersons(persons);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedCelebrityList \u003d filterCelebrities(syncedPersonList);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            setCelebrities(syncedCelebrityList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"     * @returns the number of {@code person}s with this {@code tag} removed."},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException, TagNotFoundException {"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"        boolean tagExists \u003d false;"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":"        for (Tag existingTag: tags) {"},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"            if (existingTag.equals(tag)) {"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"                tagExists \u003d true;"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        if (!tagExists) {"},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"            throw new TagNotFoundException();"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":"        int count \u003d 0;"},{"lineNumber":109,"author":{"gitID":"WJY-norainu"},"content":"        //is it possible to have two people with everything the same except for tag?"},{"lineNumber":110,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":111,"author":{"gitID":"WJY-norainu"},"content":"            if (person.hasTag(tag)) {"},{"lineNumber":112,"author":{"gitID":"WJY-norainu"},"content":"                //get the new tag set with the specified tag removed"},{"lineNumber":113,"author":{"gitID":"WJY-norainu"},"content":"                Set\u003cTag\u003e oldTags \u003d person.getTags();"},{"lineNumber":114,"author":{"gitID":"WJY-norainu"},"content":"                Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":115,"author":{"gitID":"WJY-norainu"},"content":"                for (Tag tagToKeep: oldTags) {"},{"lineNumber":116,"author":{"gitID":"WJY-norainu"},"content":"                    if (tagToKeep.equals(tag)) {"},{"lineNumber":117,"author":{"gitID":"WJY-norainu"},"content":"                        continue;"},{"lineNumber":118,"author":{"gitID":"WJY-norainu"},"content":"                    }"},{"lineNumber":119,"author":{"gitID":"WJY-norainu"},"content":"                    newTags.add(tagToKeep);"},{"lineNumber":120,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":121,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":122,"author":{"gitID":"WJY-norainu"},"content":"                //create a new person with the specified tag removed to replace the person"},{"lineNumber":123,"author":{"gitID":"WJY-norainu"},"content":"                EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"},{"lineNumber":124,"author":{"gitID":"WJY-norainu"},"content":"                editPersonDescriptor.setTags(newTags);"},{"lineNumber":125,"author":{"gitID":"WJY-norainu"},"content":"                Person editedPerson \u003d createEditedPerson(person, editPersonDescriptor);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":127,"author":{"gitID":"WJY-norainu"},"content":"                persons.setPerson(person, syncedEditedPerson);"},{"lineNumber":128,"author":{"gitID":"WJY-norainu"},"content":"                removeUnusedTags();"},{"lineNumber":129,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":130,"author":{"gitID":"WJY-norainu"},"content":"                count++;"},{"lineNumber":131,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"        return count;"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":150,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Adds a celebrity to the celebrity list in the address book."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void addCelebrity(Person p) throws DuplicatePersonException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        celebrities.add(p);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":178,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":179,"author":{"gitID":"WJY-norainu"},"content":"        removeUnusedTags();"},{"lineNumber":180,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Filters through a list of persons and returns those with a celebrity tag"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private ArrayList\u003cPerson\u003e filterCelebrities(List\u003cPerson\u003e persons) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        ArrayList\u003cPerson\u003e celebrities \u003d new ArrayList\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        for (Person p : persons) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            if (p.isCelebrity()) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                celebrities.add(p);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return celebrities;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"WJY-norainu"},"content":"     * Removes all {@code tag}s that are not used by any {@code person} in this {@code AddressBook}."},{"lineNumber":197,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"WJY-norainu"},"content":"    private void removeUnusedTags() {"},{"lineNumber":199,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e usedTags \u003d getUsedTags();"},{"lineNumber":200,"author":{"gitID":"WJY-norainu"},"content":"        tags.setTags(usedTags);"},{"lineNumber":201,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":203,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"WJY-norainu"},"content":"     * @return a set of {@code tag}s that are used at least by one {@code person} in the person list."},{"lineNumber":205,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"WJY-norainu"},"content":"    private Set\u003cTag\u003e getUsedTags() {"},{"lineNumber":207,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e usedTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":208,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":209,"author":{"gitID":"WJY-norainu"},"content":"            Set\u003cTag\u003e tagsOfThisPerson \u003d person.getTags();"},{"lineNumber":210,"author":{"gitID":"WJY-norainu"},"content":"            for (Tag tag: tagsOfThisPerson) {"},{"lineNumber":211,"author":{"gitID":"WJY-norainu"},"content":"                if (!usedTags.contains(tag)) {"},{"lineNumber":212,"author":{"gitID":"WJY-norainu"},"content":"                    usedTags.add(tag);"},{"lineNumber":213,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":214,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":215,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"WJY-norainu"},"content":"        return usedTags;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":234,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":237,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":246,"author":{"gitID":"WJY-norainu"},"content":"            removeUnusedTags();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getCelebritiesList() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        return celebrities.asObservableList();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":285,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":286,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.celebrities.equals(((AddressBook) other).celebrities);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags, celebrities);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":71,"-":225}},{"path":"src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"WJY-norainu"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":3,"author":{"gitID":"WJY-norainu"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":" */"},{"lineNumber":6,"author":{"gitID":"WJY-norainu"},"content":"public class TagNotFoundException extends Exception {}"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":""}],"authorContributionMap":{"WJY-norainu":7}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.CelebCalendar;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final CalendarSource celebCalendarSource;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        celebCalendarSource \u003d new CalendarSource(\"Celeb Calendar Source\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        initializeCalendarSource(celebCalendarSource);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (person.isCelebrity()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            addCelebrity(person);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addCelebrity(Person person) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        addressBook.addCelebrity(person);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        celebCalendarSource.getCalendars().add(new CelebCalendar(person));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException, TagNotFoundException {"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":"        int numPersonsAffected \u003d addressBook.removeTag(tag);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        return numPersonsAffected;"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Celeb Calendar Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCalendar\u003e getCelebCalendars() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return celebCalendarSource.getCalendars();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public CalendarSource getCelebCalendarSource() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return celebCalendarSource;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Populates our CalendarSource by creating a calendar for every celebrity in our addressbook"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void initializeCalendarSource(CalendarSource calSource) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        ObservableList\u003cPerson\u003e celebrities \u003d addressBook.getCelebritiesList();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        for (Person celebrity : celebrities) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            calSource.getCalendars().add(new CelebCalendar(celebrity));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":8,"-":159}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Adds the given celebrity */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void addCelebrity(Person celebrity) throws DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Fetches the list of CelebCalendars */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    ObservableList\u003cCalendar\u003e getCelebCalendars();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /** Fetches the CalendarSource of the CelebCalendars */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    CalendarSource getCelebCalendarSource();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"    /**Removes the given {@code tag} from all {@code person}s. */"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"    int removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException, TagNotFoundException;"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":5,"-":60}}]
