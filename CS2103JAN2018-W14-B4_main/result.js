var resultJson = [{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public ObservableList\u003cCalendar\u003e getCelebCalendars() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public CalendarSource getCelebCalendarSource() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This  method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":154,"author":{"gitID":"WJY-norainu"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"WJY-norainu"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":5,"-":188}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":8,"author":{"gitID":"WJY-norainu"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":26,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":34,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":35,"author":{"gitID":"WJY-norainu"},"content":"            .withPerson(AMY).build();"},{"lineNumber":36,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithBobAndAlice \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":37,"author":{"gitID":"WJY-norainu"},"content":"            .withPerson(ALICE).build();"},{"lineNumber":38,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithAlice \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":39,"author":{"gitID":"WJY-norainu"},"content":"    private final AddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"WJY-norainu"},"content":"    public void removeTag_nonExistentTag_addressBookUnchanged() {"},{"lineNumber":49,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithAmy.removeTag(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":50,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":51,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":52,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":53,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithAmy);"},{"lineNumber":54,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":56,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"WJY-norainu"},"content":"    public void removeTag_existentTag_tagRemoved() {"},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitID":"WJY-norainu"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"    public void removePerson_theOnlyPersonWithHusbandTagRemoved_tagListUpdated() throws Exception {"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithBobAndAlice.removePerson(BOB);"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAlice);"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":100,"author":{"gitID":"WJY-norainu"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"WJY-norainu"},"content":"    public void updatePerson_theOnlyPersonWithFriendTagUpdated_tagListUpdated() throws Exception {"},{"lineNumber":102,"author":{"gitID":"WJY-norainu"},"content":"        Person aliceWithoutFriendTag \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":103,"author":{"gitID":"WJY-norainu"},"content":"        addressBookWithAlice.updatePerson(ALICE, aliceWithoutFriendTag);"},{"lineNumber":104,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":105,"author":{"gitID":"WJY-norainu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(aliceWithoutFriendTag).build();"},{"lineNumber":106,"author":{"gitID":"WJY-norainu"},"content":"        assertEquals(expectedAddressBook, addressBookWithAlice);"},{"lineNumber":107,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":50,"-":94}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"WJY-norainu"},"content":"     * Removes a {@code tag} if it is in the tag list of this {@code person}."},{"lineNumber":64,"author":{"gitID":"WJY-norainu"},"content":"     * @returns true if this {@code person} has the specified {@code tag}, else false."},{"lineNumber":65,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"WJY-norainu"},"content":"    public boolean removeTag(Tag toRemove) {"},{"lineNumber":67,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e newTags \u003d tags.toSet();"},{"lineNumber":68,"author":{"gitID":"WJY-norainu"},"content":"        boolean containsTheTag \u003d newTags.remove(toRemove);"},{"lineNumber":69,"author":{"gitID":"WJY-norainu"},"content":"        if (containsTheTag) {"},{"lineNumber":70,"author":{"gitID":"WJY-norainu"},"content":"            tags.setTags(newTags);"},{"lineNumber":71,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"WJY-norainu"},"content":"        return containsTheTag;"},{"lineNumber":73,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":13,"-":100}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /** Fetches the list of CelebCalendars */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    ObservableList\u003cCalendar\u003e getCelebCalendars();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /** Fetches the CalendarSource of the CelebCalendars */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    CalendarSource getCelebCalendarSource();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"WJY-norainu"},"content":"    /**Removes the given {@code tag} from all {@code person}s. */"},{"lineNumber":59,"author":{"gitID":"WJY-norainu"},"content":"    void removeTag(Tag tag);"},{"lineNumber":60,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":4,"-":57}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"WJY-norainu"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":81,"author":{"gitID":"WJY-norainu"},"content":"     * @returns the number of {@code person}s with this {@code tag} removed."},{"lineNumber":82,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"WJY-norainu"},"content":"    public int removeTag(Tag tag) {"},{"lineNumber":84,"author":{"gitID":"WJY-norainu"},"content":"        int count \u003d 0;"},{"lineNumber":85,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":86,"author":{"gitID":"WJY-norainu"},"content":"            if (person.removeTag(tag)) {"},{"lineNumber":87,"author":{"gitID":"WJY-norainu"},"content":"                count++;"},{"lineNumber":88,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"WJY-norainu"},"content":"        if (count \u003e 0) {"},{"lineNumber":91,"author":{"gitID":"WJY-norainu"},"content":"            removeUnusedTags();"},{"lineNumber":92,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"WJY-norainu"},"content":"        return count;"},{"lineNumber":94,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":110,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":132,"author":{"gitID":"WJY-norainu"},"content":"        removeUnusedTags();"},{"lineNumber":133,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":135,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"WJY-norainu"},"content":"     * Removes all {@code tag}s that are not used by any {@code person} in this {@code AddressBook}."},{"lineNumber":137,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"WJY-norainu"},"content":"    private void removeUnusedTags() {"},{"lineNumber":139,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e usedTags \u003d getUsedTags();"},{"lineNumber":140,"author":{"gitID":"WJY-norainu"},"content":"        tags.setTags(usedTags);"},{"lineNumber":141,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":143,"author":{"gitID":"WJY-norainu"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"WJY-norainu"},"content":"     * @return a set of {@code tag}s that are used at least by one {@code person} in the person list."},{"lineNumber":145,"author":{"gitID":"WJY-norainu"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"WJY-norainu"},"content":"    private Set\u003cTag\u003e getUsedTags() {"},{"lineNumber":147,"author":{"gitID":"WJY-norainu"},"content":"        Set\u003cTag\u003e usedTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"WJY-norainu"},"content":"        for (Person person: persons) {"},{"lineNumber":149,"author":{"gitID":"WJY-norainu"},"content":"            Set\u003cTag\u003e tagsOfThisPerson \u003d person.getTags();"},{"lineNumber":150,"author":{"gitID":"WJY-norainu"},"content":"            for (Tag tag: tagsOfThisPerson) {"},{"lineNumber":151,"author":{"gitID":"WJY-norainu"},"content":"                if (!usedTags.contains(tag)) {"},{"lineNumber":152,"author":{"gitID":"WJY-norainu"},"content":"                    usedTags.add(tag);"},{"lineNumber":153,"author":{"gitID":"WJY-norainu"},"content":"                }"},{"lineNumber":154,"author":{"gitID":"WJY-norainu"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"WJY-norainu"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"WJY-norainu"},"content":"        return usedTags;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":174,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":177,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":186,"author":{"gitID":"WJY-norainu"},"content":"            removeUnusedTags();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":43,"-":187}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.calendar.CelebCalendar;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"WJY-norainu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final CalendarSource celebCalendarSource;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        celebCalendarSource \u003d new CalendarSource(\"Test Celeb Calendar Source\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        CelebCalendar testCalendar1 \u003d new CelebCalendar(\"Paul McCartney\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CelebCalendar testCalendar2 \u003d new CelebCalendar(\"John Lennon\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        celebCalendarSource.getCalendars().addAll(testCalendar1, testCalendar2);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"WJY-norainu"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"WJY-norainu"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":97,"author":{"gitID":"WJY-norainu"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":98,"author":{"gitID":"WJY-norainu"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"WJY-norainu"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Celeb Calendar Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCalendar\u003e getCelebCalendars() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return celebCalendarSource.getCalendars();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public CalendarSource getCelebCalendarSource() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return celebCalendarSource;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WJY-norainu":6,"-":141}}]
