var resultJson = [{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"    @ClassRule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":158,"author":{"gitID":"NUSe0032202"},"content":"     * {@code expectedResultMessage}, the model contains the same person objects as {@code expectedModel}, the storage"},{"lineNumber":159,"author":{"gitID":"NUSe0032202"},"content":"     * contains the same person objects as those from TypicalPersons and the person list panel displays the persons"},{"lineNumber":160,"author":{"gitID":"NUSe0032202"},"content":"     * in the model correctly."},{"lineNumber":161,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":163,"author":{"gitID":"NUSe0032202"},"content":"    protected void assertApplicationDisplaysExpectedSecondVersion(String expectedCommandInput,"},{"lineNumber":164,"author":{"gitID":"NUSe0032202"},"content":"                                                                  String expectedResultMessage, Model expectedModel) {"},{"lineNumber":165,"author":{"gitID":"NUSe0032202"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":166,"author":{"gitID":"NUSe0032202"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":167,"author":{"gitID":"NUSe0032202"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":168,"author":{"gitID":"NUSe0032202"},"content":"        assertEquals(getTypicalAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":169,"author":{"gitID":"NUSe0032202"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":170,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":172,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":188,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":199,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \", \"+\")"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                    + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":219,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":262,"NUSe0032202":23}},{"path":"src/test/java/systemtests/SortCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortAddress.MESSAGE_SUCCESS_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortCommand.CHOICE_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortCommand.CHOICE_NAME;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortName.MESSAGE_SUCCESS_NAME;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.parser.SortCommandParser;"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"public class SortCommandSystemTest extends AddCommandSystemTest {"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"    private static final String MESSAGE_INVALID_SORT_COMMAND_FORMAT \u003d"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.POSSIBLE_CHOICES);"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"    private static final String MESSAGE_INVALID_SORT_COMMAND_FORMAT_2 \u003d"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.SAVE_OPTION);"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"    public void sort() throws UniquePersonList.AddressBookIsEmpty, LoadLookUpTableException {"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"        /*Case: sort the addressbook by name with save not enabled, command with leading and trailing spaces"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"        -\u003e sorted by name */"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"        Model expectedModelName \u003d getModel();"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"        String commandSortName \u003d \" \" + SortCommand.COMMAND_WORD + \" \" + CHOICE_NAME;"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"        expectedModelName.sortAddressBook(1, 0);"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandSuccessSecondVersion(commandSortName, expectedModelName, MESSAGE_SUCCESS_NAME);"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"        /*Case: sort the addressbook by address with save not enabled, command with leading and trailing spaces"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"        -\u003e sorted by address */"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":"        Model expectedModelAddress \u003d getModel();"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"        String commandSortAddress \u003d \" \" + SortCommand.COMMAND_WORD + \" \" + CHOICE_ADDRESS;"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"        expectedModelAddress.sortAddressBook(2, 0);"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandSuccessSecondVersion(commandSortAddress, expectedModelAddress, MESSAGE_SUCCESS_ADDRESS);"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"        /*Case: sort the addressbook by name with save enabled, command with leading and trailing spaces"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"        -\u003e sorted by name */"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"        expectedModelName \u003d getModel();"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"        commandSortName \u003d \" \" + SortCommand.COMMAND_WORD + \" \" + CHOICE_NAME + \" \" + SortCommandParser.SAVE;"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"        expectedModelName.sortAddressBook(1, 1);"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandSuccess(commandSortName, expectedModelName, MESSAGE_SUCCESS_NAME);"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"        /*Case: sort the addressbook by address with save enabled, command with leading and trailing spaces"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"         -\u003e sorted by address */"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"        expectedModelAddress \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"        commandSortAddress \u003d \" \" + SortCommand.COMMAND_WORD + \" \" + CHOICE_ADDRESS + \" \" + SortCommandParser.SAVE;"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"        expectedModelAddress.sortAddressBook(2, 1);"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandSuccess(commandSortAddress, expectedModelAddress, MESSAGE_SUCCESS_ADDRESS);"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"        /* --------------------------------- Performing invalid sort operation ------------------------------------ */"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"        /* Case: invalid sort option (\"zZt\") -\u003e rejected */"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"        String command \u003d SortCommand.COMMAND_WORD + \" zZt\";"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_SORT_COMMAND_FORMAT);"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"        /* Case: invalid sort option (\"@\u0026 se\") -\u003e rejected */"},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" @\u0026 se\";"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_SORT_COMMAND_FORMAT);"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"        /* Case: invalid save option (\" n cxh\") -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" n cxh\";"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_SORT_COMMAND_FORMAT_2);"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":"        /* Case: invalid save option (\" a 78%@!*\") -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" a 78%@!*\";"},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_SORT_COMMAND_FORMAT_2);"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"NUSe0032202"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"NUSe0032202"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"NUSe0032202"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"NUSe0032202"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"NUSe0032202"},"content":"     * 4. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"NUSe0032202"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":83,"author":{"gitID":"NUSe0032202"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":84,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"NUSe0032202"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":86,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":88,"author":{"gitID":"NUSe0032202"},"content":"    public void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":89,"author":{"gitID":"NUSe0032202"},"content":"        executeCommand(command);"},{"lineNumber":90,"author":{"gitID":"NUSe0032202"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":92,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":95,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"NUSe0032202"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that instead of"},{"lineNumber":97,"author":{"gitID":"NUSe0032202"},"content":"     * comparing the addressbook in storage with expectedModel , comparison is with addressbook loaded with data"},{"lineNumber":98,"author":{"gitID":"NUSe0032202"},"content":"     * from TypicalPersons to assert that the addressbook has not been saved at all in line with the save option."},{"lineNumber":99,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"NUSe0032202"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpectedSecondVersion(String, String, Model)"},{"lineNumber":101,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":103,"author":{"gitID":"NUSe0032202"},"content":"    public void assertCommandSuccessSecondVersion(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":104,"author":{"gitID":"NUSe0032202"},"content":"        executeCommand(command);"},{"lineNumber":105,"author":{"gitID":"NUSe0032202"},"content":"        assertApplicationDisplaysExpectedSecondVersion(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":107,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":110,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"NUSe0032202"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"NUSe0032202"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"NUSe0032202"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"NUSe0032202"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"NUSe0032202"},"content":"     * 4. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"NUSe0032202"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":117,"author":{"gitID":"NUSe0032202"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"NUSe0032202"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":120,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":122,"author":{"gitID":"NUSe0032202"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":123,"author":{"gitID":"NUSe0032202"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":124,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":125,"author":{"gitID":"NUSe0032202"},"content":"        executeCommand(command);"},{"lineNumber":126,"author":{"gitID":"NUSe0032202"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":127,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":128,"author":{"gitID":"NUSe0032202"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":129,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":131,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":132,"author":{"gitID":"NUSe0032202"},"content":""}],"authorContributionMap":{"-":2,"NUSe0032202":130}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cReadOnlyPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(logic, TYPICAL_PERSONS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            ReadOnlyPerson expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"NUSe0032202":7}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, logic, 1);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"        personCard \u003d new PersonCard(personWithTags, logic, 2);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"        PersonCard personCard \u003d new PersonCard(person, logic, 0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"        PersonCard copy \u003d new PersonCard(person, logic, 0);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, logic, 0)));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":"        assertFalse(personCard.equals(new PersonCard(person, logic, 1)));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":78,"NUSe0032202":14}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Labradorites"},"content":"        //@@author Labradorites"},{"lineNumber":115,"author":{"gitID":"Labradorites"},"content":"        /* Case: find phone number of person in address book -\u003e 1 persons found */"},{"lineNumber":116,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":117,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"Labradorites"},"content":"        //@@author"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":172,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":6,"-":192}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":1,"-":123}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, logic, 0));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":50,"NUSe0032202":7}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"Labradorites"},"content":"    //---------------- Tests for containsAny --------------------------------------"},{"lineNumber":141,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":142,"author":{"gitID":"Labradorites"},"content":"    //@@author Labradorites"},{"lineNumber":143,"author":{"gitID":"Labradorites"},"content":"    /*"},{"lineNumber":144,"author":{"gitID":"Labradorites"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":145,"author":{"gitID":"Labradorites"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":146,"author":{"gitID":"Labradorites"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":147,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"Labradorites"},"content":"    public void containsAny_validInputs_correctResult() {"},{"lineNumber":150,"author":{"gitID":"Labradorites"},"content":"        // Matches multiple words in sentence"},{"lineNumber":151,"author":{"gitID":"Labradorites"},"content":"        assertTrue(StringUtil.containsAny(\"111 222 333  444\", \"222\"));"},{"lineNumber":152,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Labradorites"},"content":"    //@@author"},{"lineNumber":154,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":15,"-":159}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"    private static final int NUMBER \u003d 0;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":49,"author":{"gitID":"henryheyhey92"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, NUMBER);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":2,"-":74}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":61,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":88,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"NUSe0032202"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":90,"author":{"gitID":"NUSe0032202"},"content":"        SortCommand command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" n\");"},{"lineNumber":91,"author":{"gitID":"NUSe0032202"},"content":"        assertTrue(command instanceof SortCommand);"},{"lineNumber":92,"author":{"gitID":"NUSe0032202"},"content":"        command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" a\");"},{"lineNumber":93,"author":{"gitID":"NUSe0032202"},"content":"        assertTrue(command instanceof SortCommand);"},{"lineNumber":94,"author":{"gitID":"NUSe0032202"},"content":"        command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" a se\");"},{"lineNumber":95,"author":{"gitID":"NUSe0032202"},"content":"        assertTrue(command instanceof SortCommand);"},{"lineNumber":96,"author":{"gitID":"NUSe0032202"},"content":"        command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" n se\");"},{"lineNumber":97,"author":{"gitID":"NUSe0032202"},"content":"        assertTrue(command instanceof SortCommand);"},{"lineNumber":98,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":128,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":143,"NUSe0032202":14}},{"path":"src/test/java/systemtests/FindPhoneCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_84;"},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"public class FindPhoneCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"    public void findPhone() {"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"         * -\u003e 2 persons found"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"         */"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"        String command \u003d \"   \" + FindPhoneCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_84 + \"   \";"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, HOON, IDA); // Phone numbers of Hoon and Ida contain \"84\""},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"         * -\u003e 2 persons found"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"         */"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_84;"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 8482424\";"},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, HOON);"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 8482424 8482131\";"},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, HOON, IDA);"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 8482131 8482424\";"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 8482424 8482131 8482424\";"},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":61,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":62,"author":{"gitID":"Labradorites"},"content":"         * -\u003e 2 persons found"},{"lineNumber":63,"author":{"gitID":"Labradorites"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 8482424 8482131 123456789\";"},{"lineNumber":65,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":68,"author":{"gitID":"Labradorites"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":69,"author":{"gitID":"Labradorites"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitID":"Labradorites"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":71,"author":{"gitID":"Labradorites"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"Labradorites"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"Labradorites"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":78,"author":{"gitID":"Labradorites"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":79,"author":{"gitID":"Labradorites"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":80,"author":{"gitID":"Labradorites"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(HOON);"},{"lineNumber":81,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_84;"},{"lineNumber":82,"author":{"gitID":"Labradorites"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":83,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, IDA);"},{"lineNumber":84,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":85,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":86,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":87,"author":{"gitID":"Labradorites"},"content":"        /* Case: find person in address book, keyword is other part of phone -\u003e 0 persons found */"},{"lineNumber":88,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":89,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":90,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":93,"author":{"gitID":"Labradorites"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":94,"author":{"gitID":"Labradorites"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":95,"author":{"gitID":"Labradorites"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":96,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_84;"},{"lineNumber":97,"author":{"gitID":"Labradorites"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":98,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, HOON);"},{"lineNumber":99,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":100,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":102,"author":{"gitID":"Labradorites"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":103,"author":{"gitID":"Labradorites"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":104,"author":{"gitID":"Labradorites"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":105,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":107,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Labradorites"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":109,"author":{"gitID":"Labradorites"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":110,"author":{"gitID":"Labradorites"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":111,"author":{"gitID":"Labradorites"},"content":"     * These verifications are done by"},{"lineNumber":112,"author":{"gitID":"Labradorites"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"Labradorites"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":114,"author":{"gitID":"Labradorites"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":115,"author":{"gitID":"Labradorites"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":116,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Labradorites"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":118,"author":{"gitID":"Labradorites"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"Labradorites"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":120,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":121,"author":{"gitID":"Labradorites"},"content":"        executeCommand(command);"},{"lineNumber":122,"author":{"gitID":"Labradorites"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"Labradorites"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":124,"author":{"gitID":"Labradorites"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":125,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":127,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"Labradorites"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":129,"author":{"gitID":"Labradorites"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":130,"author":{"gitID":"Labradorites"},"content":"     * These verifications are done by"},{"lineNumber":131,"author":{"gitID":"Labradorites"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"Labradorites"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":133,"author":{"gitID":"Labradorites"},"content":"     * error style."},{"lineNumber":134,"author":{"gitID":"Labradorites"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":135,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"Labradorites"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":137,"author":{"gitID":"Labradorites"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":138,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":139,"author":{"gitID":"Labradorites"},"content":"        executeCommand(command);"},{"lineNumber":140,"author":{"gitID":"Labradorites"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":141,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":142,"author":{"gitID":"Labradorites"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":143,"author":{"gitID":"Labradorites"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":144,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":134,"-":11}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":"public class SortCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"    public void parse_validArgs_returnsSortCommand() {"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"        assertParseSuccess(parser, \"a\", new SortCommand(\"a\", 0));"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"        //invalid sort option"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"        assertParseFailure(parser, \" ^G\u0026F\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"                SortCommand.POSSIBLE_CHOICES));"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"        //invalid save option"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"        assertParseFailure(parser, \"a @V\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"                SortCommand.SAVE_OPTION));"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"}"}],"authorContributionMap":{"-":5,"NUSe0032202":24}},{"path":"src/test/java/seedu/address/logic/parser/FindPhoneCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"public class FindPhoneCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    private FindPhoneCommandParser parser \u003d new FindPhoneCommandParser();"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPhoneCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    public void parse_validArgs_returnsFindPhoneCommand() {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"        FindPhoneCommand expectedFindPhoneCommand \u003d"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"                new FindPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"85355255\", \"22222222\")));"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \" 85355255 22222222\", expectedFindPhoneCommand);"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \" \\n 85355255 \\n \\t 22222222  \\t\", expectedFindPhoneCommand);"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":26,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":80,"author":{"gitID":"NUSe0032202"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags()"},{"lineNumber":81,"author":{"gitID":"NUSe0032202"},"content":"                .withBirthday(\"DOB not initialised\")"},{"lineNumber":82,"author":{"gitID":"NUSe0032202"},"content":"                .build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + PHONE_DESC_BOB"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + VALID_PHONE_BOB"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + VALID_PHONE_BOB"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                        + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                + INVALID_ADDRESS_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":136,"NUSe0032202":3}},{"path":"src/test/java/seedu/address/logic/parser/CopyCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.CopyCommand;"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"public class CopyCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"    private CopyCommandParser parser \u003d new CopyCommandParser();"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"    public void parse_validArgs_returnsCopyCommand() {"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"        assertParseSuccess(parser, \" 1 n\", new CopyCommand(Index.fromOneBased(1), \"n\"));"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"        //invalid index specified"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"        assertParseFailure(parser, \" @ n\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"                CopyCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"        //invalid choice specified"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"        assertParseFailure(parser, \" 1 ^%F\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"                CopyCommand.POSSIBLE_CHOICES));"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"}"}],"authorContributionMap":{"-":9,"NUSe0032202":22}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortAddress.MESSAGE_SUCCESS_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_EMPTY;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortName.MESSAGE_SUCCESS_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand."},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"public class SortCommandTest {"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"    public void execute_sortAddressBookByName_success() throws UniquePersonList.AddressBookIsEmpty,"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"            LoadLookUpTableException {"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"n\", 0, model);"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"        expectedModel.sortAddressBook(1, 0);"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandSuccess(sortCommand, model, MESSAGE_SUCCESS_NAME, expectedModel);"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"    public void execute_sortAddressBookByAddress_success() throws UniquePersonList.AddressBookIsEmpty,"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"            LoadLookUpTableException {"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"a\", 0, model);"},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"        expectedModel.sortAddressBook(2, 0);"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandSuccess(sortCommand, model, MESSAGE_SUCCESS_ADDRESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"    public void execute_sortEmptyAddressBookByName_throwsAddressBookIsEmptyException()"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"            throws UniquePersonList.AddressBookIsEmpty {"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"        ModelManager testModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"        testModel.resetData(new AddressBook());"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"n\", 0, testModel);"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandFailure(sortCommand, testModel, MESSAGE_EMPTY);"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"    public void execute_sortEmptyAddressBookByAddress_throwsAddressBookIsEmptyException()"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"            throws UniquePersonList.AddressBookIsEmpty {"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"        ModelManager testModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"        testModel.resetData(new AddressBook());"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"        SortCommand sortCommand \u003d prepareCommand(\"a\", 0, testModel);"},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"        assertCommandFailure(sortCommand, testModel, MESSAGE_EMPTY);"},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"     * Returns a {@code SortCommand} with parameters {@code option} and {@code saveOption}."},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"    private SortCommand prepareCommand(String option, int saveOption, Model model) {"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"        SortCommand sortCommand \u003d new SortCommand(option, saveOption);"},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":"        return sortCommand;"},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":"//@@author"}],"authorContributionMap":{"-":15,"NUSe0032202":59}},{"path":"src/test/java/seedu/address/logic/parser/GoogleAddressCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.GoogleAddressCommand;"},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"public class GoogleAddressCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    private GoogleAddressCommandParser parser \u003d new GoogleAddressCommandParser();"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"    public void parse_validArgs_returnsGoogleAddressCommand() {"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \"1\", new GoogleAddressCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"                GoogleAddressCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"                GoogleAddressCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"                GoogleAddressCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"                GoogleAddressCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \"1 -1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"                GoogleAddressCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":30,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/ListTagsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Labradorites"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.ListTagsCommand;"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"public class ListTagsCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"    private ListTagsCommandParser parser \u003d new ListTagsCommandParser();"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"    public void parse_validArgs_returnsListTagsCommand() {"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"        //No argument at input"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \"\", new ListTagsCommand(\"\"));"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"        //Multiple whitespace in argument at input"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \" \", new ListTagsCommand(\"\"));"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        //f as argument at input"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \" f\", new ListTagsCommand(\"f\"));"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \" e\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"                ListTagsCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \" f1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"                ListTagsCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \" 222\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"                ListTagsCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":30,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/FindTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"public class FindTagCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    private FindTagCommandParser parser \u003d new FindTagCommandParser();"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    public void parse_validArgs_returnsFindTagCommand() {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"        FindTagCommand expectedFindTagCommand \u003d"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"neighbours\", \"family\")));"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \" neighbours family\", expectedFindTagCommand);"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"        assertParseSuccess(parser, \" \\n neighbours \\n \\t family  \\t\", expectedFindTagCommand);"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":26,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"NUSe0032202"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"Labradorites"},"content":"        public void save() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":122,"author":{"gitID":"NUSe0032202"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":127,"author":{"gitID":"NUSe0032202"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"NUSe0032202"},"content":"        public void copy(ReadOnlyPerson target, String choice) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":132,"author":{"gitID":"NUSe0032202"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"NUSe0032202"},"content":"        public void sortAddressBook(int option, int saveOption) {"},{"lineNumber":140,"author":{"gitID":"NUSe0032202"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"NUSe0032202"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"Labradorites"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"NUSe0032202"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"NUSe0032202"},"content":"        public List\u003cString\u003e getTagsListAsString(List\u003cTag\u003e tagStringList) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":158,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"NUSe0032202"},"content":"        public List\u003cTag\u003e getNormalTagsList() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"NUSe0032202"},"content":"        public List\u003cTag\u003e getFilteredTagsList() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"Labradorites"},"content":"            return null;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":5,"-":176,"NUSe0032202":24}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"henryheyhey92"},"content":"/******/"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":3,"-":73}},{"path":"src/test/java/seedu/address/logic/commands/ListTagsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListTagsCommand."},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"public class ListTagsCommandTest {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"    private ListTagsCommand listTagsCommand;"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    private ListTagsCommand listFilteredTagsCommand;"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"        listTagsCommand \u003d new ListTagsCommand(\"\");"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        listFilteredTagsCommand \u003d new ListTagsCommand(\"f\");"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"        listTagsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"        listFilteredTagsCommand.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"    public void execute_listIsNotFiltered_showsUnfiltered() {"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"        assertCommandResult(listTagsCommand, String.format(ListTagsCommand.MESSAGE_SUCCESS,"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":"                String.join(\"\\n\", expectedModel.getTagsListAsString(expectedModel.getNormalTagsList()))));"},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"    public void execute_listIsFiltered_showsFiltered() {"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":"        assertCommandResult(listFilteredTagsCommand, String.format(ListTagsCommand.MESSAGE_SUCCESS,"},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"                String.join(\"\\n\", expectedModel.getTagsListAsString(expectedModel.getFilteredTagsList()))));"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":"    private void assertCommandResult(ListTagsCommand listTagsCommand, String expectedMessage) {"},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        assertEquals(expectedMessage, listTagsCommand.execute().feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":38,"-":15}},{"path":"src/test/java/seedu/address/logic/commands/FindPhoneCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPhoneCommand}."},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"public class FindPhoneCommandTest {"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"123\"));"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"567\"));"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"        FindPhoneCommand findFirstCommand \u003d new FindPhoneCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"        FindPhoneCommand findSecondCommand \u003d new FindPhoneCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"        FindPhoneCommand findFirstCommandCopy \u003d new FindPhoneCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":61,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Labradorites"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"Labradorites"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"Labradorites"},"content":"        FindPhoneCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":68,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"Labradorites"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"Labradorites"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"Labradorites"},"content":"        FindPhoneCommand command \u003d prepareCommand(\"95352563 9482224 9482427\");"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Labradorites"},"content":"     * Parses {@code userInput} into a {@code FindPhoneCommand}."},{"lineNumber":77,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Labradorites"},"content":"    private FindPhoneCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"Labradorites"},"content":"        FindPhoneCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"Labradorites"},"content":"                new FindPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"Labradorites"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"Labradorites"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":85,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Labradorites"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"Labradorites"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"Labradorites"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"Labradorites"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Labradorites"},"content":"    private void assertCommandSuccess(FindPhoneCommand command, String expectedMessage,"},{"lineNumber":92,"author":{"gitID":"Labradorites"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":93,"author":{"gitID":"Labradorites"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitID":"Labradorites"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":95,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":96,"author":{"gitID":"Labradorites"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":97,"author":{"gitID":"Labradorites"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":98,"author":{"gitID":"Labradorites"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":99,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":75,"-":25}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"            .withTags(\"friends\")"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"46 Pasir Ris Ave 5, #98-143\")"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"            .withTags(\"family\")"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"Blk 13 Bukit Batok East Ave 7, #04-15\")"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"            .withTags(\"colleagues\")"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"Geylang lorong Ave 5,#05-17\")"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"Blk 7 Tampines Street 15,#03-17\")"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"Aljunied Ave 18,#02-35\")"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withTags(\"classmates\")"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withTags(\"classmates\")"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"            .withBirthday(\"DOB not initialised\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":"    public static final String KEYWORD_MATCHING_84 \u003d \"84\"; // A keyword that matches 84"},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"    public static final String KEYWORD_MATCHING_CLASSMATES \u003d \"classmates\"; // A keyword that matches friends"},{"lineNumber":74,"author":{"gitID":"henryheyhey92"},"content":"    public static final String KEYWORD_MATCHING_A \u003d \"A\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":1,"Labradorites":6,"-":70,"NUSe0032202":19}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"DOB not initialised\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"            Birthday defaultBirthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail,"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"                    defaultAddress, defaultBirthday, defaultTags);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"NUSe0032202"},"content":"     * Sets the {@code  Birthday} of the {@code Person} that we are building."},{"lineNumber":102,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"NUSe0032202"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":104,"author":{"gitID":"NUSe0032202"},"content":"        this.person.setBirthday(new Birthday(birthday));"},{"lineNumber":105,"author":{"gitID":"NUSe0032202"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":111,"NUSe0032202":13}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"import seedu.address.commons.events.ui.GoogleAddressEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"    public static final String GOOGLE_MAPS_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/maps/place/\";"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName.replaceAll(\" \", \"+\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"    //@@author Labradorites"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":"    private void loadAddressPage(ReadOnlyPerson person) {"},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"        loadPage(GOOGLE_MAPS_SEARCH_URL_PREFIX + person.getAddress().value.replaceAll(\" \", \"+\"));"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":"    //@@author"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":80,"author":{"gitID":"Labradorites"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Labradorites"},"content":"    //@@author Labradorites"},{"lineNumber":84,"author":{"gitID":"Labradorites"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"Labradorites"},"content":"    private void handleGoogleAddressEvent(GoogleAddressEvent event) {"},{"lineNumber":86,"author":{"gitID":"Labradorites"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":87,"author":{"gitID":"Labradorites"},"content":"        loadAddressPage(event.getPersonToSearch());"},{"lineNumber":88,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":18,"-":71}},{"path":"src/main/java/seedu/address/ui/Ui.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /** Stops the UI. */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    void stop();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":"    void pause();"},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":2,"-":16}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":53,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"henryheyhey92"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"henryheyhey92"},"content":"    public void pause() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":2,"-":125}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"henryheyhey92"},"content":"    private StatusBar totalPersons;"},{"lineNumber":43,"author":{"gitID":"henryheyhey92"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"henryheyhey92"},"content":"    //@@author henryheyhey92"},{"lineNumber":47,"author":{"gitID":"henryheyhey92"},"content":"    public StatusBarFooter(String saveLocation, int totalPersons) {"},{"lineNumber":48,"author":{"gitID":"henryheyhey92"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"henryheyhey92"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":50,"author":{"gitID":"henryheyhey92"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":51,"author":{"gitID":"henryheyhey92"},"content":"        setTotalPersons(totalPersons);"},{"lineNumber":52,"author":{"gitID":"henryheyhey92"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":53,"author":{"gitID":"henryheyhey92"},"content":"    } //@@author"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":77,"author":{"gitID":"henryheyhey92"},"content":"    //@@author henryheyhey92"},{"lineNumber":78,"author":{"gitID":"henryheyhey92"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":79,"author":{"gitID":"henryheyhey92"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) total\");"},{"lineNumber":80,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"henryheyhey92"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":89,"author":{"gitID":"henryheyhey92"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":16,"-":73,"NUSe0032202":2}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"henryheyhey92"},"content":"    //@@author henryheyhey92"},{"lineNumber":35,"author":{"gitID":"henryheyhey92"},"content":"    @Subscribe"},{"lineNumber":36,"author":{"gitID":"henryheyhey92"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":37,"author":{"gitID":"henryheyhey92"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":38,"author":{"gitID":"henryheyhey92"},"content":"        /* Platform.runLater(() -\u003e displayed.setValue(event.message)); */"},{"lineNumber":39,"author":{"gitID":"henryheyhey92"},"content":"        displayed.setValue(event.message);"},{"lineNumber":40,"author":{"gitID":"henryheyhey92"},"content":"    } //@@author"},{"lineNumber":41,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"}"}],"authorContributionMap":{"henryheyhey92":9,"-":32,"NUSe0032202":1}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.MainApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/address_book_32.png\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":108,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":114,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":118,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"NUSe0032202"},"content":"        personListPanel \u003d new PersonListPanel(logic, logic.getFilteredPersonList());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"henryheyhey92"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":141,"author":{"gitID":"henryheyhey92"},"content":"                logic.getFilteredPersonList().size());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":146,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":147,"author":{"gitID":"KiKanNG"},"content":"        setTheme(\"DarkTheme.css\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":226,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":227,"author":{"gitID":"KiKanNG"},"content":"    //@@author kikanng"},{"lineNumber":228,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"KiKanNG"},"content":"     * Set color theme"},{"lineNumber":230,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"KiKanNG"},"content":"    private void setTheme(String themeUrl) {"},{"lineNumber":232,"author":{"gitID":"KiKanNG"},"content":"        this.getPrimaryStage().getScene().getStylesheets().clear();"},{"lineNumber":233,"author":{"gitID":"KiKanNG"},"content":"        this.getPrimaryStage().getScene().getStylesheets().add(MainApp.class"},{"lineNumber":234,"author":{"gitID":"KiKanNG"},"content":"                .getResource(\"/view/\" + themeUrl).toExternalForm());"},{"lineNumber":235,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":237,"author":{"gitID":"KiKanNG"},"content":"    @Subscribe"},{"lineNumber":238,"author":{"gitID":"KiKanNG"},"content":"    private void handleChangeThemeEvent(ChangeThemeEvent event) {"},{"lineNumber":239,"author":{"gitID":"KiKanNG"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":240,"author":{"gitID":"KiKanNG"},"content":"        setTheme(event.getTheme());"},{"lineNumber":241,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":243,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"KiKanNG"},"content":"     * Change color theme to light"},{"lineNumber":245,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"KiKanNG"},"content":"    @FXML"},{"lineNumber":247,"author":{"gitID":"KiKanNG"},"content":"    public void handleLightTheme() {"},{"lineNumber":248,"author":{"gitID":"KiKanNG"},"content":"        setTheme(\"LightTheme.css\");"},{"lineNumber":249,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":251,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"KiKanNG"},"content":"     * Change color theme to dark"},{"lineNumber":253,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"KiKanNG"},"content":"    @FXML"},{"lineNumber":255,"author":{"gitID":"KiKanNG"},"content":"    public void handleDarkTheme() {"},{"lineNumber":256,"author":{"gitID":"KiKanNG"},"content":"        setTheme(\"DarkTheme.css\");"},{"lineNumber":257,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"KiKanNG"},"content":"    //@@author"},{"lineNumber":259,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":2,"KiKanNG":39,"-":218,"NUSe0032202":1}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"    public PersonListPanel(Logic logic, ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"        this.logic \u003d logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"                personList, (person) -\u003e new PersonCard(person, logic, personList.indexOf(person) + 1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":86,"NUSe0032202":5}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"NUSe0032202"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":5,"author":{"gitID":"henryheyhey92"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"henryheyhey92"},"content":"import java.util.Random;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"    private static String[] colors \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":"    private static HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"    private final Logic logic;"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"    private SelectBirthdayWindow calendar;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"    private Label birthday;"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"henryheyhey92"},"content":"     * method for giving a tag name to the person. Eg: family, friends...etc"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"henryheyhey92"},"content":"     * @param person"},{"lineNumber":63,"author":{"gitID":"henryheyhey92"},"content":"     * @param displayedIndex"},{"lineNumber":64,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"    public PersonCard(ReadOnlyPerson person, Logic logic, int displayedIndex) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"        this.logic \u003d logic;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        bindListeners(person);"},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"henryheyhey92"},"content":"     * Add color tag to the category"},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"henryheyhey92"},"content":"     * @param tagValue"},{"lineNumber":78,"author":{"gitID":"henryheyhey92"},"content":"     * @return"},{"lineNumber":79,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"henryheyhey92"},"content":"    private static String getColorForTag(String tagValue) {"},{"lineNumber":81,"author":{"gitID":"henryheyhey92"},"content":"        if (!tagColors.containsKey(tagValue)) {"},{"lineNumber":82,"author":{"gitID":"henryheyhey92"},"content":"            tagColors.put(tagValue, colors[random.nextInt(colors.length)]);"},{"lineNumber":83,"author":{"gitID":"henryheyhey92"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"henryheyhey92"},"content":"        return tagColors.get(tagValue);"},{"lineNumber":85,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":87,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"NUSe0032202"},"content":"     * Updates the birthday label to display the date picked and changes the specified person\u0027s birthday"},{"lineNumber":89,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":91,"author":{"gitID":"NUSe0032202"},"content":"    @FXML"},{"lineNumber":92,"author":{"gitID":"NUSe0032202"},"content":"    private void showArgs() {"},{"lineNumber":93,"author":{"gitID":"NUSe0032202"},"content":"        requireNonNull(calendar);"},{"lineNumber":94,"author":{"gitID":"NUSe0032202"},"content":"        birthday.setText(calendar.getBirthday());"},{"lineNumber":95,"author":{"gitID":"NUSe0032202"},"content":"        person.getBirthday().edit(calendar.getBirthday());"},{"lineNumber":96,"author":{"gitID":"NUSe0032202"},"content":"        logic.getModel().save();"},{"lineNumber":97,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":100,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"NUSe0032202"},"content":"     * Opens the birthday input window."},{"lineNumber":102,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":104,"author":{"gitID":"NUSe0032202"},"content":"    @FXML"},{"lineNumber":105,"author":{"gitID":"NUSe0032202"},"content":"    public void handleCalendar() {"},{"lineNumber":106,"author":{"gitID":"NUSe0032202"},"content":"        calendar \u003d new SelectBirthdayWindow();"},{"lineNumber":107,"author":{"gitID":"NUSe0032202"},"content":"        calendar.show();"},{"lineNumber":108,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":116,"author":{"gitID":"NUSe0032202"},"content":"        SimpleStringProperty selected \u003d new SimpleStringProperty();"},{"lineNumber":117,"author":{"gitID":"NUSe0032202"},"content":"        selected.setValue(Bindings.convert(person.birthdayProperty()).getValue());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":122,"author":{"gitID":"NUSe0032202"},"content":"        birthday.textProperty().bindBidirectional(selected);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            tags.getChildren().clear();"},{"lineNumber":125,"author":{"gitID":"NUSe0032202"},"content":"            /*person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));*/"},{"lineNumber":126,"author":{"gitID":"henryheyhey92"},"content":"            initTags(person);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"henryheyhey92"},"content":"     * to give a color tag to the person in the list"},{"lineNumber":132,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"henryheyhey92"},"content":"     * @param person"},{"lineNumber":134,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"henryheyhey92"},"content":"    //@@author henryheyhey92"},{"lineNumber":136,"author":{"gitID":"henryheyhey92"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":137,"author":{"gitID":"henryheyhey92"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":138,"author":{"gitID":"henryheyhey92"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":139,"author":{"gitID":"henryheyhey92"},"content":"            tagLabel.setStyle(\"-fx-background-color: \" + getColorForTag(tag.tagName));"},{"lineNumber":140,"author":{"gitID":"henryheyhey92"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":141,"author":{"gitID":"henryheyhey92"},"content":"        });"},{"lineNumber":142,"author":{"gitID":"henryheyhey92"},"content":"    } //@@author"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":37,"-":79,"NUSe0032202":45}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"henryheyhey92"},"content":"    public static final String MESSAGE_UNKNOWN_PERSON \u003d \"No such person\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":1,"-":13}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"KiKanNG"},"content":"    //@@author kikanng"},{"lineNumber":45,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"KiKanNG"},"content":"     * @param sentence cannot be null"},{"lineNumber":47,"author":{"gitID":"KiKanNG"},"content":"     * @param word cannot be null, cannot be empty"},{"lineNumber":48,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"KiKanNG"},"content":"    private static boolean universalCompare(String sentence, String word, boolean startWith,"},{"lineNumber":50,"author":{"gitID":"KiKanNG"},"content":"                                            boolean endWith, boolean ignoreCase) {"},{"lineNumber":51,"author":{"gitID":"KiKanNG"},"content":"        requireNonNull(sentence);"},{"lineNumber":52,"author":{"gitID":"KiKanNG"},"content":"        requireNonNull(word);"},{"lineNumber":53,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":54,"author":{"gitID":"KiKanNG"},"content":"        if (ignoreCase) {"},{"lineNumber":55,"author":{"gitID":"KiKanNG"},"content":"            sentence \u003d sentence.toLowerCase();"},{"lineNumber":56,"author":{"gitID":"KiKanNG"},"content":"            word \u003d word.toLowerCase();"},{"lineNumber":57,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":59,"author":{"gitID":"KiKanNG"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":60,"author":{"gitID":"KiKanNG"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":61,"author":{"gitID":"KiKanNG"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":62,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":63,"author":{"gitID":"KiKanNG"},"content":"        String regex \u003d preppedWord;"},{"lineNumber":64,"author":{"gitID":"KiKanNG"},"content":"        if (!startWith) {"},{"lineNumber":65,"author":{"gitID":"KiKanNG"},"content":"            regex \u003d String.format(\".*\" + regex);"},{"lineNumber":66,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"KiKanNG"},"content":"        if (!endWith) {"},{"lineNumber":68,"author":{"gitID":"KiKanNG"},"content":"            regex \u003d String.format(regex + \".*\");"},{"lineNumber":69,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"KiKanNG"},"content":"        regex \u003d String.format(\"^\" + regex + \"$\");"},{"lineNumber":71,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":72,"author":{"gitID":"KiKanNG"},"content":"        if (sentence.matches(regex)) {"},{"lineNumber":73,"author":{"gitID":"KiKanNG"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"KiKanNG"},"content":"        return false;"},{"lineNumber":76,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":78,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"KiKanNG"},"content":"     * Returns true if the {@code sentence} start with {@code word}."},{"lineNumber":80,"author":{"gitID":"KiKanNG"},"content":"     *   Ignores case, full word match is not required."},{"lineNumber":81,"author":{"gitID":"KiKanNG"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":82,"author":{"gitID":"KiKanNG"},"content":"     *       startWithWordIgnoreCase(\"Abcdef\", \"abc\") \u003d\u003d true"},{"lineNumber":83,"author":{"gitID":"KiKanNG"},"content":"     *       startWithWordIgnoreCase(\"Abcdef\", \"bc\") \u003d\u003d false //not start with \"bc\""},{"lineNumber":84,"author":{"gitID":"KiKanNG"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":85,"author":{"gitID":"KiKanNG"},"content":"     * @param sentence cannot be null"},{"lineNumber":86,"author":{"gitID":"KiKanNG"},"content":"     * @param word cannot be null, cannot be empty"},{"lineNumber":87,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"KiKanNG"},"content":"    public static boolean startWithWordIgnoreCase(String sentence, String word) {"},{"lineNumber":89,"author":{"gitID":"KiKanNG"},"content":"        return universalCompare(sentence, word, true, false, true);"},{"lineNumber":90,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":92,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"KiKanNG"},"content":"     * Returns true if the {@code sentence} end with {@code word}."},{"lineNumber":94,"author":{"gitID":"KiKanNG"},"content":"     *   Ignores case, full word match is not required."},{"lineNumber":95,"author":{"gitID":"KiKanNG"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":96,"author":{"gitID":"KiKanNG"},"content":"     *       endWithWordIgnoreCase(\"Abcdef\", \"def\") \u003d\u003d true"},{"lineNumber":97,"author":{"gitID":"KiKanNG"},"content":"     *       endWithWordIgnoreCase(\"Abcdef\", \"ab\") \u003d\u003d false //not start with \"ab\""},{"lineNumber":98,"author":{"gitID":"KiKanNG"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":99,"author":{"gitID":"KiKanNG"},"content":"     * @param sentence cannot be null"},{"lineNumber":100,"author":{"gitID":"KiKanNG"},"content":"     * @param word cannot be null, cannot be empty"},{"lineNumber":101,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"KiKanNG"},"content":"    public static boolean endWithWordIgnoreCase(String sentence, String word) {"},{"lineNumber":103,"author":{"gitID":"KiKanNG"},"content":"        return universalCompare(sentence, word, false, true, true);"},{"lineNumber":104,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":106,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"KiKanNG"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":108,"author":{"gitID":"KiKanNG"},"content":"     *   Ignores case, matches if sentence contains word."},{"lineNumber":109,"author":{"gitID":"KiKanNG"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":110,"author":{"gitID":"KiKanNG"},"content":"     *       containsAny(\"abcde\", \"abc\") \u003d\u003d true"},{"lineNumber":111,"author":{"gitID":"KiKanNG"},"content":"     *       containsAny(\"ABcdef\", \"def\") \u003d\u003d true"},{"lineNumber":112,"author":{"gitID":"KiKanNG"},"content":"     *       containsAny(\"ABcdef\", \"AC\") \u003d\u003d false //not a full word match"},{"lineNumber":113,"author":{"gitID":"KiKanNG"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":114,"author":{"gitID":"KiKanNG"},"content":"     * @param sentence cannot be null"},{"lineNumber":115,"author":{"gitID":"KiKanNG"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":116,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"KiKanNG"},"content":"    public static boolean containsAny(String sentence, String word) {"},{"lineNumber":118,"author":{"gitID":"KiKanNG"},"content":"        return universalCompare(sentence, word, false, false, true);"},{"lineNumber":119,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":121,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"KiKanNG"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":123,"author":{"gitID":"KiKanNG"},"content":"     *   Ignores case, matches if sentence contains word."},{"lineNumber":124,"author":{"gitID":"KiKanNG"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":125,"author":{"gitID":"KiKanNG"},"content":"     *       exactWord(\"abc\", \"abc\") \u003d\u003d true"},{"lineNumber":126,"author":{"gitID":"KiKanNG"},"content":"     *       exactWord(\"ABcdef\", \"abc\") \u003d\u003d false //not a full word match"},{"lineNumber":127,"author":{"gitID":"KiKanNG"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":128,"author":{"gitID":"KiKanNG"},"content":"     * @param sentence cannot be null"},{"lineNumber":129,"author":{"gitID":"KiKanNG"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":130,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"KiKanNG"},"content":"    public static boolean exactWord(String sentence, String word) {"},{"lineNumber":132,"author":{"gitID":"KiKanNG"},"content":"        return universalCompare(sentence, word, true, true, true);"},{"lineNumber":133,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"Labradorites"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":2,"KiKanNG":90,"-":71}},{"path":"src/test/java/seedu/address/model/person/PhoneContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"/******/"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"public class PhoneContainsKeywordsPredicateTest {"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"123\");"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"123\", \"456\");"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d new PhoneContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"    public void test_phoneContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":"        // Exact keyword"},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"99901234\"));"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"99901234\").build()));"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":"        // Contains one keyword"},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Collections.singletonList(\"22\"));"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"11221234\").build()));"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"        // Multiple keywords"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"33\", \"44\"));"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"11331244\").build()));"},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":"        // Only one matching keyword"},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"55\", \"66\"));"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"00551111\").build()));"},{"lineNumber":61,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":63,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Labradorites"},"content":"    public void test_phoneDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"Labradorites"},"content":"        // Zero keywords"},{"lineNumber":66,"author":{"gitID":"Labradorites"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"Labradorites"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"01234567\").build()));"},{"lineNumber":68,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":69,"author":{"gitID":"Labradorites"},"content":"        // Non-matching keyword"},{"lineNumber":70,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"666\"));"},{"lineNumber":71,"author":{"gitID":"Labradorites"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"91234567\").build()));"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"        // Keywords match name, email and address, but does not match phone"},{"lineNumber":74,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"09876\","},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"                \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":76,"author":{"gitID":"Labradorites"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":77,"author":{"gitID":"Labradorites"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":78,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"henryheyhey92":2,"Labradorites":66,"-":11}},{"path":"src/test/java/seedu/address/model/person/TagContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"/******/"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"public class TagContainsKeywordsPredicateTest {"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"neighbours\");"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"neighbours\", \"friends\");"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"    public void test_tagContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":"        // Exact keyword"},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\"));"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":"        // Multiple keywords"},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"neighbours\"));"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"        // Only one matching keyword"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"colleagues\", \"friends\"));"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"colleagues\").build()));"},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":61,"author":{"gitID":"Labradorites"},"content":"        // Zero keywords"},{"lineNumber":62,"author":{"gitID":"Labradorites"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":63,"author":{"gitID":"Labradorites"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":64,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":65,"author":{"gitID":"Labradorites"},"content":"        // Non-matching keyword"},{"lineNumber":66,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\"));"},{"lineNumber":67,"author":{"gitID":"Labradorites"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"colleagues\").build()));"},{"lineNumber":68,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":69,"author":{"gitID":"Labradorites"},"content":"        // Keywords match name, phone, email and address, but does not match tag"},{"lineNumber":70,"author":{"gitID":"Labradorites"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"09876\","},{"lineNumber":71,"author":{"gitID":"Labradorites"},"content":"                \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"neighbours\").build()));"},{"lineNumber":74,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"henryheyhey92":2,"Labradorites":62,"-":11}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"    /**Returns a reference to the current model */"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"    Model getModel();"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":27,"NUSe0032202":4}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"            Birthday birthday \u003d new Birthday();"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, address, birthday, tagList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":63,"NUSe0032202":3}},{"path":"src/main/java/seedu/address/commons/events/ui/GoogleAddressEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":6,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":" * Represents GoogleAddressCommand executed"},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":"public class GoogleAddressEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"    private final ReadOnlyPerson personToSearch;"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"    public GoogleAddressEvent(ReadOnlyPerson personToSearch) {"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"        this.personToSearch \u003d personToSearch;"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"    public ReadOnlyPerson getPersonToSearch() {"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"        return personToSearch;"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":23,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":6,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":7,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"KiKanNG"},"content":" * Chanage the color theme og the GUI"},{"lineNumber":9,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":"public class ChangeThemeEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":12,"author":{"gitID":"KiKanNG"},"content":"    private String theme;"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":"    public ChangeThemeEvent(String theme) {"},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":"        this.theme \u003d theme;"},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":"    public String getTheme() {"},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"        return theme;"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":22,"-":4}},{"path":"src/main/java/seedu/address/LoginBox.java","lines":[{"lineNumber":1,"author":{"gitID":"henryheyhey92"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":3,"author":{"gitID":"henryheyhey92"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitID":"henryheyhey92"},"content":"import javafx.geometry.Insets;"},{"lineNumber":5,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Modality;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":13,"author":{"gitID":"henryheyhey92"},"content":"//@@author henryheyhey92"},{"lineNumber":14,"author":{"gitID":"henryheyhey92"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"henryheyhey92"},"content":" * This is to create the login window."},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":" */"},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":"public class LoginBox {"},{"lineNumber":18,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":"    private static boolean answer;"},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":"    private static TextField nameInput \u003d new TextField();"},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":"    private static TextField passwordInput \u003d new TextField();"},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"henryheyhey92"},"content":"     * create the login box display"},{"lineNumber":24,"author":{"gitID":"henryheyhey92"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"    public static boolean display(String title) {"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"        //create window"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":"        Stage window \u003d new Stage();"},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":"        window.initModality(Modality.APPLICATION_MODAL);"},{"lineNumber":30,"author":{"gitID":"henryheyhey92"},"content":"        window.setTitle(title);"},{"lineNumber":31,"author":{"gitID":"henryheyhey92"},"content":"        //create Grid"},{"lineNumber":32,"author":{"gitID":"henryheyhey92"},"content":"        GridPane grid \u003d new GridPane();"},{"lineNumber":33,"author":{"gitID":"henryheyhey92"},"content":"        grid.setPadding(new Insets(20, 20, 20, 20));"},{"lineNumber":34,"author":{"gitID":"henryheyhey92"},"content":"        grid.setVgap(10);"},{"lineNumber":35,"author":{"gitID":"henryheyhey92"},"content":"        grid.setHgap(12);"},{"lineNumber":36,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":37,"author":{"gitID":"henryheyhey92"},"content":"        //create label for name and password"},{"lineNumber":38,"author":{"gitID":"henryheyhey92"},"content":"        Label nameLabel \u003d new Label(\"User name:\");"},{"lineNumber":39,"author":{"gitID":"henryheyhey92"},"content":"        GridPane.setConstraints(nameLabel, 1, 2);"},{"lineNumber":40,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":41,"author":{"gitID":"henryheyhey92"},"content":"        Label passwordLabel \u003d new Label(\"Password:\");"},{"lineNumber":42,"author":{"gitID":"henryheyhey92"},"content":"        GridPane.setConstraints(passwordLabel, 1, 3);"},{"lineNumber":43,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":44,"author":{"gitID":"henryheyhey92"},"content":"        // Name and Password input"},{"lineNumber":45,"author":{"gitID":"henryheyhey92"},"content":"        //TextField nameInput \u003d new TextField();"},{"lineNumber":46,"author":{"gitID":"henryheyhey92"},"content":"        nameInput.setPromptText(\"Enter name\");"},{"lineNumber":47,"author":{"gitID":"henryheyhey92"},"content":"        GridPane.setConstraints(nameInput, 2, 2);"},{"lineNumber":48,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":49,"author":{"gitID":"henryheyhey92"},"content":"        //TextField passwordInput \u003d new TextField();"},{"lineNumber":50,"author":{"gitID":"henryheyhey92"},"content":"        passwordInput.setPromptText(\"Password\");"},{"lineNumber":51,"author":{"gitID":"henryheyhey92"},"content":"        GridPane.setConstraints(passwordInput, 2, 3);"},{"lineNumber":52,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":53,"author":{"gitID":"henryheyhey92"},"content":"        //Create login buttons to access app"},{"lineNumber":54,"author":{"gitID":"henryheyhey92"},"content":"        Button yesButton \u003d new Button(\"Login\");"},{"lineNumber":55,"author":{"gitID":"henryheyhey92"},"content":"        GridPane.setConstraints(yesButton, 2, 4);"},{"lineNumber":56,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":57,"author":{"gitID":"henryheyhey92"},"content":"        window.setOnCloseRequest(e -\u003e {"},{"lineNumber":58,"author":{"gitID":"henryheyhey92"},"content":"            e.consume();"},{"lineNumber":59,"author":{"gitID":"henryheyhey92"},"content":"            stop();"},{"lineNumber":60,"author":{"gitID":"henryheyhey92"},"content":"        });"},{"lineNumber":61,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":62,"author":{"gitID":"henryheyhey92"},"content":"        yesButton.setOnAction (e -\u003e {"},{"lineNumber":63,"author":{"gitID":"henryheyhey92"},"content":"            if (isInt(nameInput, passwordInput)) {"},{"lineNumber":64,"author":{"gitID":"henryheyhey92"},"content":"                answer \u003d true;"},{"lineNumber":65,"author":{"gitID":"henryheyhey92"},"content":"                window.close();"},{"lineNumber":66,"author":{"gitID":"henryheyhey92"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"henryheyhey92"},"content":"        });"},{"lineNumber":68,"author":{"gitID":"henryheyhey92"},"content":"        grid.getChildren().addAll(nameLabel, nameInput, passwordLabel, passwordInput, yesButton);"},{"lineNumber":69,"author":{"gitID":"henryheyhey92"},"content":"        window.setScene(new Scene(grid, 350, 200));"},{"lineNumber":70,"author":{"gitID":"henryheyhey92"},"content":"        window.showAndWait();"},{"lineNumber":71,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":72,"author":{"gitID":"henryheyhey92"},"content":"        return answer;"},{"lineNumber":73,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":75,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"henryheyhey92"},"content":"     * to create a exit checker"},{"lineNumber":77,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"henryheyhey92"},"content":"    private static void stop() {"},{"lineNumber":79,"author":{"gitID":"henryheyhey92"},"content":"        boolean answer \u003d ConfirmBox.display(\"Exit Check Protocol\", \"Confirm on exiting the program?\");"},{"lineNumber":80,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":81,"author":{"gitID":"henryheyhey92"},"content":"        if (answer) {"},{"lineNumber":82,"author":{"gitID":"henryheyhey92"},"content":"            Platform.exit();"},{"lineNumber":83,"author":{"gitID":"henryheyhey92"},"content":"            System.exit(0);"},{"lineNumber":84,"author":{"gitID":"henryheyhey92"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":87,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"henryheyhey92"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"henryheyhey92"},"content":"     * @param name"},{"lineNumber":90,"author":{"gitID":"henryheyhey92"},"content":"     * @param pass"},{"lineNumber":91,"author":{"gitID":"henryheyhey92"},"content":"     * @return true or false"},{"lineNumber":92,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"henryheyhey92"},"content":"    private static boolean isInt(TextField name, TextField pass) {"},{"lineNumber":94,"author":{"gitID":"henryheyhey92"},"content":"        String name2 \u003d name.getText();"},{"lineNumber":95,"author":{"gitID":"henryheyhey92"},"content":"        String pass2 \u003d pass.getText();"},{"lineNumber":96,"author":{"gitID":"henryheyhey92"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"henryheyhey92"},"content":"            if (name2.compareTo(\"NUS\") \u003d\u003d 0) {"},{"lineNumber":98,"author":{"gitID":"henryheyhey92"},"content":"                if (pass2.compareTo(\"1234\") \u003d\u003d 0) {"},{"lineNumber":99,"author":{"gitID":"henryheyhey92"},"content":"                    nameInput.setText(\"\");"},{"lineNumber":100,"author":{"gitID":"henryheyhey92"},"content":"                    passwordInput.setText(\"\");"},{"lineNumber":101,"author":{"gitID":"henryheyhey92"},"content":"                    return true;"},{"lineNumber":102,"author":{"gitID":"henryheyhey92"},"content":"                }"},{"lineNumber":103,"author":{"gitID":"henryheyhey92"},"content":"            } else {"},{"lineNumber":104,"author":{"gitID":"henryheyhey92"},"content":"                return false;"},{"lineNumber":105,"author":{"gitID":"henryheyhey92"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"henryheyhey92"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":107,"author":{"gitID":"henryheyhey92"},"content":"            return false;"},{"lineNumber":108,"author":{"gitID":"henryheyhey92"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"henryheyhey92"},"content":"        return false;"},{"lineNumber":110,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"henryheyhey92"},"content":"} //@@author"},{"lineNumber":112,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":113,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":114,"author":{"gitID":"henryheyhey92"},"content":""}],"authorContributionMap":{"henryheyhey92":112,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.CopyCommand;"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.FindCommandLetter;"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.FindEmailCommand;"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.GoogleAddressCommand;"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.ListTagsCommand;"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.logic.commands.XFindCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"KiKanNG"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"KiKanNG"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"henryheyhey92"},"content":"        case FindCommandLetter.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"henryheyhey92"},"content":"            return new FindCommandLetterParser().parse(arguments);"},{"lineNumber":86,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":87,"author":{"gitID":"KiKanNG"},"content":"        case FindEmailCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"KiKanNG"},"content":"            return new FindEmailCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":90,"author":{"gitID":"Labradorites"},"content":"        case FindPhoneCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"Labradorites"},"content":"            return new FindPhoneCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":93,"author":{"gitID":"Labradorites"},"content":"        case FindTagCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"Labradorites"},"content":"            return new FindTagCommandParser().parse(arguments);"},{"lineNumber":95,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":96,"author":{"gitID":"Labradorites"},"content":"        case GoogleAddressCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"Labradorites"},"content":"            return new GoogleAddressCommandParser().parse(arguments);"},{"lineNumber":98,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"Labradorites"},"content":"        case ListTagsCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"Labradorites"},"content":"            return new ListTagsCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":105,"author":{"gitID":"NUSe0032202"},"content":"        case CopyCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"NUSe0032202"},"content":"        case CopyCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"NUSe0032202"},"content":"            return new CopyCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"NUSe0032202"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"NUSe0032202"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":123,"author":{"gitID":"NUSe0032202"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"KiKanNG"},"content":"        case XFindCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"KiKanNG"},"content":"            return new XFindCommandParser().parse(arguments);"},{"lineNumber":130,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":131,"author":{"gitID":"henryheyhey92"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"henryheyhey92"},"content":"            return new LockCommand();"},{"lineNumber":133,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":7,"Labradorites":13,"KiKanNG":10,"-":81,"NUSe0032202":28}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.parser.CopyCommandParser.INDEX_CHOICE;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.parser.CopyCommandParser.INDEX_TARGET;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.parser.SortCommandParser.INDEX_OPTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_INVALID_CHOICE \u003d \"Choice of field to be copied is invalid.\";"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_INVALID_OPTION \u003d \"sort option is invalid.\";"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"    private static final HashSet\u003cCharacter\u003e choices \u003d new HashSet\u003cCharacter\u003e();"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"    static {"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"        choices.add(\u0027n\u0027);"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"        choices.add(\u0027p\u0027);"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"        choices.add(\u0027e\u0027);"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"        choices.add(\u0027a\u0027);"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"     * Parses {@code args} into a {@code String} and returns it. Leading and trailing whitespaces are already"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"     * trimmed."},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"     * @throws IllegalValueException if the specified sort option is invalid"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"     * (input option is not found in HashSet\u003c\u003e choices)."},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"    public static String parseSortOption(String args) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"        if (!choices.contains(args.charAt(INDEX_OPTION))) {"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_OPTION);"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"        } else {"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"            return Character.toString(args.trim().charAt(INDEX_OPTION));"},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"NUSe0032202"},"content":"     * Extracts the user\u0027s choice on which field to be copied. Throws exception {IllegalValueException} if"},{"lineNumber":100,"author":{"gitID":"NUSe0032202"},"content":"     * the choice is an invalid one."},{"lineNumber":101,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":103,"author":{"gitID":"NUSe0032202"},"content":"    public static String parseChoice(String args) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"NUSe0032202"},"content":"        String[] placeHolder \u003d args.trim().split(\"\\\\s+\");"},{"lineNumber":105,"author":{"gitID":"NUSe0032202"},"content":"        if (!choices.contains(placeHolder[INDEX_CHOICE].charAt(INDEX_TARGET))) {"},{"lineNumber":106,"author":{"gitID":"NUSe0032202"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_CHOICE);"},{"lineNumber":107,"author":{"gitID":"NUSe0032202"},"content":"        } else {"},{"lineNumber":108,"author":{"gitID":"NUSe0032202"},"content":"            return placeHolder[INDEX_CHOICE];"},{"lineNumber":109,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":112,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"NUSe0032202"},"content":"     * Parses a {@code Optional\u003cString\u003e birthday} into an {@code Optional\u003cBirthday\u003e} if {@code birthday} is present."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"NUSe0032202"},"content":"    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"},{"lineNumber":136,"author":{"gitID":"NUSe0032202"},"content":"        requireNonNull(birthday);"},{"lineNumber":137,"author":{"gitID":"NUSe0032202"},"content":"        return birthday.isPresent() ? Optional.of(new Birthday(birthday.get())) : Optional.empty();"},{"lineNumber":138,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":95,"NUSe0032202":56}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":"    public static final Prefix PREFIX_NAME_UPPER \u003d new Prefix(\"N/\");"},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"    public static final Prefix PREFIX_PHONE_UPPER \u003d new Prefix(\"P/\");"},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":"    public static final Prefix PREFIX_EMAIL_UPPER \u003d new Prefix(\"E/\");"},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"    public static final Prefix PREFIX_ADDRESS_UPPER \u003d new Prefix(\"A/\");"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":"    public static final Prefix PREFIX_BIRTHDAY_UPPER \u003d new Prefix(\"B/\");"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"    public static final Prefix PREFIX_TAG_UPPER \u003d new Prefix(\"T/\");"},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KiKanNG":7,"-":15,"NUSe0032202":1}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandLetterParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitID":"henryheyhey92"},"content":"import seedu.address.logic.commands.FindCommandLetter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":"import seedu.address.model.person.NameLetterContainsKeywordPredicate;"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":12,"author":{"gitID":"henryheyhey92"},"content":"//@@author henryheyhey92"},{"lineNumber":13,"author":{"gitID":"henryheyhey92"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"henryheyhey92"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":15,"author":{"gitID":"henryheyhey92"},"content":" */"},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":"public class FindCommandLetterParser implements Parser\u003cFindCommandLetter\u003e {"},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"henryheyhey92"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":"    public FindCommandLetter parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"henryheyhey92"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"henryheyhey92"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"henryheyhey92"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":31,"author":{"gitID":"henryheyhey92"},"content":"        return new FindCommandLetter(new NameLetterContainsKeywordPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"henryheyhey92"},"content":"} //@@author"}],"authorContributionMap":{"henryheyhey92":25,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/FindTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":" * Parses input arguments and creates a new FindTagCommand object"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagCommand"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"     * and returns an FindTagCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"    public FindTagCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"        return new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":27,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/FindEmailCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":" * Contains integration tests (interaction with the Model) for {@code FindEmailCommand}."},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"public class FindEmailCommandTest {"},{"lineNumber":33,"author":{"gitID":"KiKanNG"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":35,"author":{"gitID":"KiKanNG"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"KiKanNG"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"KiKanNG"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"KiKanNG"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"KiKanNG"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"KiKanNG"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":42,"author":{"gitID":"KiKanNG"},"content":"        FindEmailCommand findFirstCommand \u003d new FindEmailCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"KiKanNG"},"content":"        FindEmailCommand findSecondCommand \u003d new FindEmailCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":45,"author":{"gitID":"KiKanNG"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"KiKanNG"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":47,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":48,"author":{"gitID":"KiKanNG"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"KiKanNG"},"content":"        FindEmailCommand findFirstCommandCopy \u003d new FindEmailCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"KiKanNG"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":51,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":52,"author":{"gitID":"KiKanNG"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"KiKanNG"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":55,"author":{"gitID":"KiKanNG"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"KiKanNG"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":58,"author":{"gitID":"KiKanNG"},"content":"        // different person -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"KiKanNG"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":60,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":62,"author":{"gitID":"KiKanNG"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"KiKanNG"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":64,"author":{"gitID":"KiKanNG"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"KiKanNG"},"content":"        FindEmailCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"KiKanNG"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":69,"author":{"gitID":"KiKanNG"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"KiKanNG"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":71,"author":{"gitID":"KiKanNG"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":72,"author":{"gitID":"KiKanNG"},"content":"        FindEmailCommand command \u003d prepareCommand(\"heinz werner lydia\");"},{"lineNumber":73,"author":{"gitID":"KiKanNG"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":74,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":76,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"KiKanNG"},"content":"     * Parses {@code userInput} into a {@code FindEmailCommand}."},{"lineNumber":78,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"KiKanNG"},"content":"    private FindEmailCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"KiKanNG"},"content":"        FindEmailCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"KiKanNG"},"content":"                new FindEmailCommand(new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":82,"author":{"gitID":"KiKanNG"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":83,"author":{"gitID":"KiKanNG"},"content":"        return command;"},{"lineNumber":84,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":86,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"KiKanNG"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"KiKanNG"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"KiKanNG"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"KiKanNG"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":91,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"KiKanNG"},"content":"    private void assertCommandSuccess("},{"lineNumber":93,"author":{"gitID":"KiKanNG"},"content":"            FindEmailCommand command, String expectedMessage, List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"KiKanNG"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"KiKanNG"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":97,"author":{"gitID":"KiKanNG"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"KiKanNG"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"KiKanNG"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"Labradorites":1,"KiKanNG":75,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/FindPhoneCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":" * Parses input arguments and creates a new FindPhoneCommand object"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"public class FindPhoneCommandParser implements Parser\u003cFindPhoneCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPhoneCommand"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"     * and returns an FindPhoneCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"    public FindPhoneCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPhoneCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        String[] phoneKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"        return new FindPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(phoneKeywords)));"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":27,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":5,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":9,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":12,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":"     * Parses the given {@code String} of argument in the context of the ChangeThemeCommand"},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"        String[] possibleArgs \u003d {\"light\", \"dark\"};"},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":"        String[] cssFiles \u003d {\"LightTheme.css\", \"DarkTheme.css\"};"},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":"        String arg \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"        if (arg.isEmpty() || !(arg.equals(\"light\") || arg.equals(\"dark\"))) {"},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":"        boolean legalArg \u003d false;"},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":"        for (int i \u003d 0; i \u003c possibleArgs.length; i++) {"},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"            if (arg.equals(possibleArgs[i])) {"},{"lineNumber":33,"author":{"gitID":"KiKanNG"},"content":"                arg \u003d cssFiles[i];  // arg now become the css file path"},{"lineNumber":34,"author":{"gitID":"KiKanNG"},"content":"                legalArg \u003d true;"},{"lineNumber":35,"author":{"gitID":"KiKanNG"},"content":"                break;"},{"lineNumber":36,"author":{"gitID":"KiKanNG"},"content":"            }"},{"lineNumber":37,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":39,"author":{"gitID":"KiKanNG"},"content":"        if (!legalArg) {"},{"lineNumber":40,"author":{"gitID":"KiKanNG"},"content":"            throw new ParseException("},{"lineNumber":41,"author":{"gitID":"KiKanNG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":44,"author":{"gitID":"KiKanNG"},"content":"        return new ChangeThemeCommand(arg);"},{"lineNumber":45,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":47,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":42,"-":5}},{"path":"src/test/java/systemtests/FindLetterCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"henryheyhey92"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"henryheyhey92"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_A;"},{"lineNumber":9,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.FindCommandLetter;"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":"//@@author henryheyhey92"},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":"//reused"},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":"public class FindLetterCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":23,"author":{"gitID":"henryheyhey92"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"henryheyhey92"},"content":"    public void find() {"},{"lineNumber":25,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: find multiple persons in address book, command with with no leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"         * -\u003e 1 persons found"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":"        String command \u003d FindCommandLetter.COMMAND_WORD + \" \" + KEYWORD_MATCHING_A;"},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"henryheyhey92"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":31,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":32,"author":{"gitID":"henryheyhey92"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":33,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":34,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":35,"author":{"gitID":"henryheyhey92"},"content":"         * -\u003e 2 persons found"},{"lineNumber":36,"author":{"gitID":"henryheyhey92"},"content":"         */"},{"lineNumber":37,"author":{"gitID":"henryheyhey92"},"content":"        command \u003d FindCommandLetter.COMMAND_WORD + \" \" + KEYWORD_MATCHING_A;"},{"lineNumber":38,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"henryheyhey92"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":41,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":42,"author":{"gitID":"henryheyhey92"},"content":"        command \u003d FindCommandLetter.COMMAND_WORD + \" \" + \"C\";"},{"lineNumber":43,"author":{"gitID":"henryheyhey92"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":44,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"henryheyhey92"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":47,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":48,"author":{"gitID":"henryheyhey92"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"henryheyhey92"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":50,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":52,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"henryheyhey92"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"henryheyhey92"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":55,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":57,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":58,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":59,"author":{"gitID":"henryheyhey92"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"henryheyhey92"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":61,"author":{"gitID":"henryheyhey92"},"content":"        command \u003d FindCommandLetter.COMMAND_WORD + \" \" + KEYWORD_MATCHING_A;"},{"lineNumber":62,"author":{"gitID":"henryheyhey92"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"henryheyhey92"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE);"},{"lineNumber":64,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"henryheyhey92"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":67,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":68,"author":{"gitID":"henryheyhey92"},"content":"        command \u003d \"lEtTer Meier\";"},{"lineNumber":69,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":70,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":71,"author":{"gitID":"henryheyhey92"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"henryheyhey92"},"content":"        command \u003d \"lEtTer k\";"},{"lineNumber":73,"author":{"gitID":"henryheyhey92"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":74,"author":{"gitID":"henryheyhey92"},"content":"    } //@@author"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":88,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":64,"Labradorites":5,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTagCommand}."},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"public class FindTagCommandTest {"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"friends\"));"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"neighbours\"));"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"        FindTagCommand findFirstCommand \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"        FindTagCommand findSecondCommand \u003d new FindTagCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"        FindTagCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":61,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Labradorites"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"Labradorites"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"Labradorites"},"content":"        FindTagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":68,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"Labradorites"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"Labradorites"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"Labradorites"},"content":"        FindTagCommand command \u003d prepareCommand(\"owesMoney family colleagues\");"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, CARL, DANIEL));"},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Labradorites"},"content":"     * Parses {@code userInput} into a {@code FindTagCommand}."},{"lineNumber":77,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Labradorites"},"content":"    private FindTagCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"Labradorites"},"content":"        FindTagCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"Labradorites"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"Labradorites"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"Labradorites"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":85,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Labradorites"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"Labradorites"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"Labradorites"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"Labradorites"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Labradorites"},"content":"    private void assertCommandSuccess(FindTagCommand command, String expectedMessage,"},{"lineNumber":92,"author":{"gitID":"Labradorites"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":93,"author":{"gitID":"Labradorites"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitID":"Labradorites"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":95,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":96,"author":{"gitID":"Labradorites"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":97,"author":{"gitID":"Labradorites"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":98,"author":{"gitID":"Labradorites"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":99,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":76,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/CopyCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.CopyCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":" * Parses input arguments and creates a new CopyCommand object"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"public class CopyCommandParser implements Parser\u003cCopyCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"    public static final int INDEX_TARGET \u003d 0;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"    public static final int INDEX_CHOICE \u003d 1;"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"     * Parses the given {@code String} of arguments in the context of the CopyCommand"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"     * and returns a CopyCommand object for execution."},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    public CopyCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"        Index index;"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"        String choice;"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"        //Detect empty arguments."},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"        if (args.equals(\"\")) {"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"                    CopyCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":"            index \u003d ParserUtil.parseIndex(args.trim().substring(INDEX_TARGET, args.trim().indexOf(\" \")));"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"            choice \u003d ParserUtil.parseChoice(args);"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.POSSIBLE_CHOICES));"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"        return new CopyCommand(index, choice);"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"//@@author"}],"authorContributionMap":{"-":6,"NUSe0032202":45}},{"path":"src/test/java/seedu/address/logic/commands/GoogleAddressCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"import seedu.address.commons.events.ui.GoogleAddressEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":" * Contains integration tests (interaction with the Model) for {@code GoogleAddressCommand}."},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"public class GoogleAddressCommandTest {"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"    private Model model;"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":62,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Labradorites"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":64,"author":{"gitID":"Labradorites"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":65,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":66,"author":{"gitID":"Labradorites"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":67,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":69,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"Labradorites"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":71,"author":{"gitID":"Labradorites"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":74,"author":{"gitID":"Labradorites"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":77,"author":{"gitID":"Labradorites"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":80,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"Labradorites"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitID":"Labradorites"},"content":"        GoogleAddressCommand googleAddressFirstCommand \u003d new GoogleAddressCommand(INDEX_FIRST_PERSON);"},{"lineNumber":83,"author":{"gitID":"Labradorites"},"content":"        GoogleAddressCommand googleAddressSecondCommand \u003d new GoogleAddressCommand(INDEX_SECOND_PERSON);"},{"lineNumber":84,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":85,"author":{"gitID":"Labradorites"},"content":"        // same object -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"Labradorites"},"content":"        assertTrue(googleAddressFirstCommand.equals(googleAddressFirstCommand));"},{"lineNumber":87,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":88,"author":{"gitID":"Labradorites"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"Labradorites"},"content":"        GoogleAddressCommand googleAddressFirstCommandCopy \u003d new GoogleAddressCommand(INDEX_FIRST_PERSON);"},{"lineNumber":90,"author":{"gitID":"Labradorites"},"content":"        assertTrue(googleAddressFirstCommand.equals(googleAddressFirstCommandCopy));"},{"lineNumber":91,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":92,"author":{"gitID":"Labradorites"},"content":"        // different types -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"Labradorites"},"content":"        assertFalse(googleAddressFirstCommand.equals(1));"},{"lineNumber":94,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":95,"author":{"gitID":"Labradorites"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"Labradorites"},"content":"        assertFalse(googleAddressFirstCommand.equals(null));"},{"lineNumber":97,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":98,"author":{"gitID":"Labradorites"},"content":"        // different person -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"Labradorites"},"content":"        assertFalse(googleAddressFirstCommand.equals(googleAddressSecondCommand));"},{"lineNumber":100,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":102,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"Labradorites"},"content":"     * Executes a {@code GoogleAddressCommand} with the given {@code index}, and checks that {@code GoogleAddressEvent}"},{"lineNumber":104,"author":{"gitID":"Labradorites"},"content":"     * is raised with the correct index."},{"lineNumber":105,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"Labradorites"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":107,"author":{"gitID":"Labradorites"},"content":"        GoogleAddressCommand googleAddressCommand \u003d prepareCommand(index);"},{"lineNumber":108,"author":{"gitID":"Labradorites"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":109,"author":{"gitID":"Labradorites"},"content":"        ReadOnlyPerson personToSearch \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":111,"author":{"gitID":"Labradorites"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"Labradorites"},"content":"            CommandResult commandResult \u003d googleAddressCommand.execute();"},{"lineNumber":113,"author":{"gitID":"Labradorites"},"content":"            assertEquals(String.format(GoogleAddressCommand.MESSAGE_SUCCESS, personToSearch.getName()),"},{"lineNumber":114,"author":{"gitID":"Labradorites"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":115,"author":{"gitID":"Labradorites"},"content":"        } catch (CommandException ce) {"},{"lineNumber":116,"author":{"gitID":"Labradorites"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":117,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":119,"author":{"gitID":"Labradorites"},"content":"        GoogleAddressEvent lastEvent \u003d (GoogleAddressEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":120,"author":{"gitID":"Labradorites"},"content":"        assertEquals(personToSearch, lastEvent.getPersonToSearch());"},{"lineNumber":121,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":123,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"Labradorites"},"content":"     * Executes a {@code GoogleAddressCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":125,"author":{"gitID":"Labradorites"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":126,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"Labradorites"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":128,"author":{"gitID":"Labradorites"},"content":"        GoogleAddressCommand googleAddressCommand \u003d prepareCommand(index);"},{"lineNumber":129,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":130,"author":{"gitID":"Labradorites"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"Labradorites"},"content":"            googleAddressCommand.execute();"},{"lineNumber":132,"author":{"gitID":"Labradorites"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":133,"author":{"gitID":"Labradorites"},"content":"        } catch (CommandException ce) {"},{"lineNumber":134,"author":{"gitID":"Labradorites"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":135,"author":{"gitID":"Labradorites"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":136,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":139,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"Labradorites"},"content":"     * Returns a {@code GoogleAddressCommand} with parameters {@code index}."},{"lineNumber":141,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"Labradorites"},"content":"    private GoogleAddressCommand prepareCommand(Index index) {"},{"lineNumber":143,"author":{"gitID":"Labradorites"},"content":"        GoogleAddressCommand googleAddressCommand \u003d new GoogleAddressCommand(index);"},{"lineNumber":144,"author":{"gitID":"Labradorites"},"content":"        googleAddressCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":145,"author":{"gitID":"Labradorites"},"content":"        return googleAddressCommand;"},{"lineNumber":146,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":119,"-":28}},{"path":"src/main/java/seedu/address/logic/parser/FindEmailCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.logic.commands.FindEmailCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":12,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":" * Parses input arguments and creates a new FindEmailCommand object"},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":"public class FindEmailCommandParser implements Parser\u003cFindEmailCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":"     * Parses the given {@code String} of arguments in the context of the FindEmailCommand"},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"     * and returns an FindEmailCommand object for execution."},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":"    public FindEmailCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEmailCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":"        return new FindEmailCommand(new EmailContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":34,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":27,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"    public static final int INDEX_OPTION \u003d 0;"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"    public static final int INDEX_SAVE_OPTION \u003d 1;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"    public static final String SAVE \u003d \"se\";"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"        String[] placeHolder;"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"        String option;"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"        final int save \u003d 1;"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"        final int noSave \u003d 0;"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"        placeHolder \u003d args.trim().split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"        //Detect empty arguments."},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        if (placeHolder[INDEX_OPTION].equals(\"\")) {"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"                   SortCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"            option \u003d ParserUtil.parseSortOption(placeHolder[INDEX_OPTION]);"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.POSSIBLE_CHOICES));"},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"        if (placeHolder.length \u003d\u003d 1) {"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"            return new SortCommand(option, noSave);"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"        if (placeHolder[INDEX_SAVE_OPTION].compareTo(SAVE) \u003d\u003d 0) {"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"            return new SortCommand(option, save);"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.SAVE_OPTION));"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"}"}],"authorContributionMap":{"-":5,"NUSe0032202":50}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"                        PREFIX_BIRTHDAY, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"            ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY))"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"                    .ifPresent(editPersonDescriptor::setBirthday);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":78,"NUSe0032202":5}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Labradorites"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":3,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":5,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":6,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":" * Finds and lists all persons in address book whose tags contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":"public class FindTagCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"    public static final String COMMAND_WORD \u003d \"findTag\";"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain \""},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"            + \"Example: \" + COMMAND_WORD + \" neighbours\";"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"    public FindTagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"                \u0026\u0026 this.predicate.equals(((FindTagCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":37}},{"path":"src/main/java/seedu/address/logic/commands/FindEmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"KiKanNG"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":3,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":5,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":6,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"KiKanNG"},"content":" * Finds and lists all persons in address book whose email contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"KiKanNG"},"content":" * Keyword matching is not case sensitive."},{"lineNumber":9,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":"public class FindEmailCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":12,"author":{"gitID":"KiKanNG"},"content":"    public static final String COMMAND_WORD \u003d \"findEmail\";"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds persons whose email start with any of the \""},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"            + \"Example: \" + COMMAND_WORD + \" john doe johnny\";"},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"    private final EmailContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"    public FindEmailCommand(EmailContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"KiKanNG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"KiKanNG"},"content":"                || (other instanceof FindEmailCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"KiKanNG"},"content":"                \u0026\u0026 this.predicate.equals(((FindEmailCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":37}},{"path":"src/main/java/seedu/address/logic/commands/SortAddress.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"NUSe0032202"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":" * Actual logic for sorting by address"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"public class SortAddress extends SortCommand implements Comparator\u003cReadOnlyPerson\u003e {"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"    public static final String"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"            MESSAGE_SUCCESS_ADDRESS \u003d \"The address book has been sorted alphabetically according to address\";"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"    public static final int OPTION_ADDRESS \u003d 2;"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"    private static ArrayList\u003cString\u003e table;"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"    private int saveOption;"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"    public SortAddress() throws IOException {"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"        AddressData.initTable();"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"        table \u003d AddressData.getTable();"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"    public SortAddress(Model target, int saveOption) throws IOException {"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"        this.model \u003d target;"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"        this.saveOption \u003d saveOption;"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"    public CommandResult executeUndoableCommand() throws UniquePersonList.AddressBookIsEmpty {"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"            model.sortAddressBook(OPTION_ADDRESS, saveOption);"},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(MESSAGE_SUCCESS_ADDRESS);"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"        } catch (LoadLookUpTableException le) {"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(\"Error with loading data for lookup table\");"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"    public int compare(ReadOnlyPerson a, ReadOnlyPerson b) {"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"        String compareFirst \u003d \"\";"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"        String compareSecond \u003d \"\";"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"        Boolean firstAddressFound \u003d false;"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"        Boolean secondAddressFound \u003d false;"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"        for (String compare : table) {"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"            if (a.getAddress().value.toLowerCase().contains(compare.toLowerCase())) {"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"                compareFirst \u003d compare;"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"                firstAddressFound \u003d true;"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"                break;"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"        for (String compare : table) {"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"            if (b.getAddress().value.toLowerCase().contains(compare.toLowerCase())) {"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"                compareSecond \u003d compare;"},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"                secondAddressFound \u003d true;"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"                break;"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":"        //If the address can\u0027t be found in the table return a positive value to ensure that the person is always placed"},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"        //last"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"        if (firstAddressFound \u003d\u003d false) {"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":"            return 1;"},{"lineNumber":75,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":77,"author":{"gitID":"NUSe0032202"},"content":"        if (secondAddressFound \u003d\u003d false) {"},{"lineNumber":78,"author":{"gitID":"NUSe0032202"},"content":"            return -1;"},{"lineNumber":79,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":81,"author":{"gitID":"NUSe0032202"},"content":"        return compareFirst.compareToIgnoreCase(compareSecond);"},{"lineNumber":82,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"NUSe0032202"},"content":"}"}],"authorContributionMap":{"-":2,"NUSe0032202":82}},{"path":"src/main/java/seedu/address/logic/commands/FindPhoneCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Labradorites"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":3,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":5,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":6,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":" * Finds and lists all persons in address book whose phone numbers contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"public class FindPhoneCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"    public static final String COMMAND_WORD \u003d \"findPhone\";"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose phone contain any of \""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"            + \"the specified numbers() and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"            + \"Example: \" + COMMAND_WORD + \" 999 111 99998888\";"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"    private final PhoneContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public FindPhoneCommand(PhoneContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"                || (other instanceof FindPhoneCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"                \u0026\u0026 this.predicate.equals(((FindPhoneCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":36}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":" * Sorts the addressbook base on name or address"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"    public static final String COMMAND_WORD \u003d \"s\";"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"    public static final String COMMAND_ALIAS \u003d \"sort\";"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"    public static final String CHOICE_NAME \u003d \"n\";"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"    public static final String CHOICE_ADDRESS \u003d \"a\";"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"    public static final String"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"            MESSAGE_EMPTY \u003d \"Addressbook is currently empty please add at least 2 entries before sorting.\";"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"    public static final String POSSIBLE_CHOICES \u003d \"Invalid choice input,the valid choices to be sorted are:\\n\""},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"            + \"1. \" + CHOICE_NAME + \" (name)\\n\""},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"            + \"2. \" + CHOICE_ADDRESS + \" (address)\\n\";"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    public static final String SAVE_OPTION \u003d \"Invalid input for save option, to save please use keyword -\u003e se \";"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the addressbook by name or by address, \""},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"            + \"the state of the addressbook can be saved if specified explicitly.\\n\""},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"            + \"Parameters: SORT_OPTION(must be one of the valid choices)  SAVE_OPTION(optional field)\\n\""},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"            + \"Example: \" + COMMAND_WORD + \" a \" + \"se\";"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"    public static final int SAVE \u003d 1;"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"    protected int saveOption;"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"    private String option;"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"    private CommandResult result;"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"    public SortCommand() {"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":"    public SortCommand(String argument, int saveOption) {"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"        this.option \u003d argument.trim();"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"        this.saveOption \u003d saveOption;"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"        requireNonNull(model);"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"            switch (option)  {"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"            case CHOICE_ADDRESS:"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"                SortCommand address \u003d new SortAddress(model, saveOption);"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"                result \u003d address.executeUndoableCommand();"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"                break;"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"            case CHOICE_NAME:"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"                SortCommand name \u003d new SortName(model, saveOption);"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"                result \u003d name.executeUndoableCommand();"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"                break;"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"            default:"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"                break;"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"            //In the event the user filters the addressbook and no Person is shown, the message gets shown to the"},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"            //user after the sort command is executed."},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"            //hello test"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"            if (model.getFilteredPersonList().isEmpty()) {"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"                return new CommandResult(\"Sorting has been done on addressbook, please list all \""},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"                        + \"contacts to see the changes\");"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"            } else {"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"                return result;"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"            return  new CommandResult(\"Error with internal data\");"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"NUSe0032202"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"NUSe0032202"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"NUSe0032202"},"content":"                || (other instanceof SortCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"NUSe0032202"},"content":"                \u0026\u0026 this.option.equals(((SortCommand) other).option))"},{"lineNumber":81,"author":{"gitID":"NUSe0032202"},"content":"                \u0026\u0026 this.saveOption \u003d\u003d (((SortCommand) other).saveOption); // state check"},{"lineNumber":82,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":84,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":85,"author":{"gitID":"NUSe0032202"},"content":"//@@author"}],"authorContributionMap":{"-":4,"NUSe0032202":81}},{"path":"src/test/java/systemtests/FindTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_CLASSMATES;"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"public class FindTagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"    public void findTag() {"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"         * -\u003e 4 persons found"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"        String command \u003d \"   \" + FindTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_CLASSMATES + \"   \";"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, HOON, IDA); // Tags of HOON and IDA contain \"classmates\""},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"         * -\u003e 2 persons found"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"         */"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_CLASSMATES;"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" family\";"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" family colleagues\";"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL);"},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" colleagues family\";"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" family colleagues family\";"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":63,"author":{"gitID":"Labradorites"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":64,"author":{"gitID":"Labradorites"},"content":"         * -\u003e 2 persons found"},{"lineNumber":65,"author":{"gitID":"Labradorites"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" colleagues family stranger\";"},{"lineNumber":67,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":70,"author":{"gitID":"Labradorites"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"Labradorites"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"Labradorites"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":73,"author":{"gitID":"Labradorites"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"Labradorites"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"Labradorites"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"Labradorites"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":80,"author":{"gitID":"Labradorites"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":81,"author":{"gitID":"Labradorites"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":82,"author":{"gitID":"Labradorites"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(HOON);"},{"lineNumber":83,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_CLASSMATES;"},{"lineNumber":84,"author":{"gitID":"Labradorites"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":85,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, IDA);"},{"lineNumber":86,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":87,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":88,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":89,"author":{"gitID":"Labradorites"},"content":"        /* Case: find person in address book, keyword is part of tag -\u003e 0 persons found */"},{"lineNumber":90,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" class\";"},{"lineNumber":91,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":92,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":93,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":94,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":95,"author":{"gitID":"Labradorites"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":96,"author":{"gitID":"Labradorites"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":97,"author":{"gitID":"Labradorites"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":98,"author":{"gitID":"Labradorites"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_CLASSMATES;"},{"lineNumber":99,"author":{"gitID":"Labradorites"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":100,"author":{"gitID":"Labradorites"},"content":"        ModelHelper.setFilteredList(expectedModel, HOON);"},{"lineNumber":101,"author":{"gitID":"Labradorites"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":102,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":104,"author":{"gitID":"Labradorites"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"Labradorites"},"content":"        command \u003d \"FiNdTaG classmates\";"},{"lineNumber":106,"author":{"gitID":"Labradorites"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":107,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":109,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"Labradorites"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":111,"author":{"gitID":"Labradorites"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":112,"author":{"gitID":"Labradorites"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":113,"author":{"gitID":"Labradorites"},"content":"     * These verifications are done by"},{"lineNumber":114,"author":{"gitID":"Labradorites"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"Labradorites"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":116,"author":{"gitID":"Labradorites"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":117,"author":{"gitID":"Labradorites"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":118,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Labradorites"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":120,"author":{"gitID":"Labradorites"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":121,"author":{"gitID":"Labradorites"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":122,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":123,"author":{"gitID":"Labradorites"},"content":"        executeCommand(command);"},{"lineNumber":124,"author":{"gitID":"Labradorites"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":125,"author":{"gitID":"Labradorites"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":126,"author":{"gitID":"Labradorites"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":127,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":129,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"Labradorites"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":131,"author":{"gitID":"Labradorites"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":132,"author":{"gitID":"Labradorites"},"content":"     * These verifications are done by"},{"lineNumber":133,"author":{"gitID":"Labradorites"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"Labradorites"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":135,"author":{"gitID":"Labradorites"},"content":"     * error style."},{"lineNumber":136,"author":{"gitID":"Labradorites"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":137,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"Labradorites"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":139,"author":{"gitID":"Labradorites"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":140,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":141,"author":{"gitID":"Labradorites"},"content":"        executeCommand(command);"},{"lineNumber":142,"author":{"gitID":"Labradorites"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":143,"author":{"gitID":"Labradorites"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":144,"author":{"gitID":"Labradorites"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":145,"author":{"gitID":"Labradorites"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":146,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":134,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/FindCommandLetter.java","lines":[{"lineNumber":1,"author":{"gitID":"henryheyhey92"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":3,"author":{"gitID":"henryheyhey92"},"content":"import seedu.address.model.person.NameLetterContainsKeywordPredicate;"},{"lineNumber":4,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":5,"author":{"gitID":"henryheyhey92"},"content":"//@@author henryheyhey92"},{"lineNumber":6,"author":{"gitID":"henryheyhey92"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"henryheyhey92"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"henryheyhey92"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"henryheyhey92"},"content":" */"},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":"public class FindCommandLetter extends Command {"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":12,"author":{"gitID":"henryheyhey92"},"content":"    public static final String COMMAND_WORD \u003d \"letter\";"},{"lineNumber":13,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":14,"author":{"gitID":"henryheyhey92"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"henryheyhey92"},"content":"            + \"the specified keywords (non case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":"            + \"Example: \" + COMMAND_WORD + \" A \";"},{"lineNumber":18,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":"    private final NameLetterContainsKeywordPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":"    public FindCommandLetter(NameLetterContainsKeywordPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":25,"author":{"gitID":"henryheyhey92"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":31,"author":{"gitID":"henryheyhey92"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"henryheyhey92"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"henryheyhey92"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"henryheyhey92"},"content":"                || (other instanceof FindCommandLetter // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"henryheyhey92"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommandLetter) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"henryheyhey92"},"content":"} //@@author"}],"authorContributionMap":{"henryheyhey92":37}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":5,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":6,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":7,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"KiKanNG"},"content":" * Change GUI color theme."},{"lineNumber":9,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":12,"author":{"gitID":"KiKanNG"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change GUI color theme.\\n\""},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":"            + \"Example: \" + COMMAND_WORD + \" light/dark\";"},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Changed color theme.\";"},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"    private static String theme;"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"    public ChangeThemeCommand(String theme) {"},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":"        this.theme \u003d theme;"},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(theme));"},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":27,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/SortName.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"NUSe0032202"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":" * Actual logic for sorting by name"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"//author NUSe0032202"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"public class SortName extends SortCommand implements Comparator\u003cReadOnlyPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"    public static final String"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"            MESSAGE_SUCCESS_NAME \u003d \"The address book has been sorted alphabetically according to name\";"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"    public static final int OPTION_NAME \u003d 1;"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"    private Model model;"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"    private int saveOption;"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"    public SortName() {"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    public SortName(Model target, int saveOption) {"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"        this.model \u003d target;"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"        this.saveOption \u003d saveOption;"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"    public CommandResult executeUndoableCommand() throws UniquePersonList.AddressBookIsEmpty {"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"            model.sortAddressBook(OPTION_NAME, saveOption);"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(MESSAGE_SUCCESS_NAME);"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"        } catch (LoadLookUpTableException le) {"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(\"This should never be displayed\");"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"    public int compare(ReadOnlyPerson a, ReadOnlyPerson b) {"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"        return a.getName().fullName.compareToIgnoreCase(b.getName().fullName);"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"//@@author"}],"authorContributionMap":{"-":2,"NUSe0032202":44}},{"path":"src/main/java/seedu/address/logic/commands/LockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"henryheyhey92"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":3,"author":{"gitID":"henryheyhey92"},"content":"import seedu.address.LoginBox;"},{"lineNumber":4,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":5,"author":{"gitID":"henryheyhey92"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":6,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":7,"author":{"gitID":"henryheyhey92"},"content":"//@@author henryheyhey92"},{"lineNumber":8,"author":{"gitID":"henryheyhey92"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"henryheyhey92"},"content":" * lock application"},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":" */"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":"public class LockCommand extends UndoableCommand {"},{"lineNumber":12,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":13,"author":{"gitID":"henryheyhey92"},"content":"    public static final String COMMAND_WORD \u003d \"lock\";"},{"lineNumber":14,"author":{"gitID":"henryheyhey92"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book is unlock!\";"},{"lineNumber":15,"author":{"gitID":"henryheyhey92"},"content":"    private static LoginBox lock;"},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":"    protected Storage storage;"},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"henryheyhey92"},"content":"     * lock the application when command is inputted"},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":"    public LockCommand() {"},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":"        lock \u003d new LoginBox();"},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":"        lock.display (\"AddressBook\");"},{"lineNumber":23,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":25,"author":{"gitID":"henryheyhey92"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":30,"author":{"gitID":"henryheyhey92"},"content":"} //@@author"}],"authorContributionMap":{"henryheyhey92":30}},{"path":"src/main/java/seedu/address/logic/commands/AddressData.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"NUSe0032202"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import java.io.InputStream;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import java.io.InputStreamReader;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.MainApp;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":" * Utility class for sorting the addressbook by address"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"public class AddressData {"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"    private static BufferedReader br;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"    private static String line;"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"    private static ArrayList\u003cString\u003e table \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"     * Initializes the lookup table with values."},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"     * @throws IOException"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"    public static void initTable() throws IOException {"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"        InputStream in \u003d MainApp.class.getResourceAsStream(\"/tables/data.csv\");"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"        br \u003d new BufferedReader(new InputStreamReader(in));"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"        while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"            table.add(line.trim());"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"    public static ArrayList\u003cString\u003e getTable() {"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        return table;"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"}"}],"authorContributionMap":{"NUSe0032202":35}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"henryheyhey92"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \" \";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/CopyCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":" *  Copies the desired data field of a person over to the system clipboard"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"public class CopyCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"    public static final String COMMAND_WORD \u003d \"c\";"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"    public static final String COMMAND_ALIAS \u003d \"copy\";"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"    public static final String CHOICE_NAME \u003d \"n\";"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"    public static final String CHOICE_EMAIL \u003d \"e\";"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"    public static final String CHOICE_PHONE \u003d \"p\";"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"    public static final String CHOICE_ADDRESS \u003d \"a\";"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_SUCCESS_NAME \u003d \"Person\u0027s name has been copied to the clipboard\";"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_SUCCESS_ADDRESS \u003d \"Person\u0027s address has been copied to the clipboard\";"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_SUCCESS_PHONE \u003d \"Person\u0027s phone has been copied to the clipboard\";"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_SUCCESS_EMAIL \u003d \"Person\u0027s email has been copied to the clipboard\";"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Copies the details of the person identified \""},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"            + \"by index number used in the last person listing. \""},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"            + \"Data would be copied to the system clipboard.\\n\""},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"            + \"PREFIX\\n\""},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + CHOICE_NAME;"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"    public static final String POSSIBLE_CHOICES \u003d \"Invalid choice input,the valid choices to be copied are:\\n\""},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":"            + \"1. \" + CHOICE_NAME + \" (name)\\n\""},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"            + \"2. \" + CHOICE_ADDRESS + \" (address)\\n\""},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"            + \"3. \" + CHOICE_EMAIL + \" (email)\\n\""},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"            + \"4. \" + CHOICE_PHONE + \" (phone)\\n\";"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"    private final Index index;"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"    private final String choice;"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"    public CopyCommand(Index index, String choice) {"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"        this.index \u003d index;"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"        this.choice \u003d choice;"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"        ReadOnlyPerson targetPerson \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"        model.copy(targetPerson, choice);"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"        switch (choice) {"},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_NAME:"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(MESSAGE_SUCCESS_NAME);"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_ADDRESS:"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(MESSAGE_SUCCESS_ADDRESS);"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_PHONE:"},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(MESSAGE_SUCCESS_PHONE);"},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_EMAIL:"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(MESSAGE_SUCCESS_EMAIL);"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":75,"author":{"gitID":"NUSe0032202"},"content":"        default:"},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":"            return new CommandResult(\"Error, this message should not be displayed\");"},{"lineNumber":77,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":80,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"NUSe0032202"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"NUSe0032202"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"NUSe0032202"},"content":"                || (other instanceof CopyCommand // instanceof handles nulls"},{"lineNumber":84,"author":{"gitID":"NUSe0032202"},"content":"                \u0026\u0026 this.index.equals(((CopyCommand) other).index))"},{"lineNumber":85,"author":{"gitID":"NUSe0032202"},"content":"                \u0026\u0026 this.choice.equals(((CopyCommand) other).choice); // state check"},{"lineNumber":86,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":88,"author":{"gitID":"NUSe0032202"},"content":"//@@author"}],"authorContributionMap":{"-":9,"NUSe0032202":79}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"    public Model getModel() {"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"        return model;"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"NUSe0032202":5}},{"path":"src/main/java/seedu/address/ui/SelectBirthdayWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"NUSe0032202"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import java.util.Calendar;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":"import javafx.scene.control.DatePicker;"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":" * In-put birthday window of the App."},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"public class SelectBirthdayWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(SelectBirthdayWindow.class);"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"    private final Stage dialogStage;"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    private String birthdate;"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"    private DatePicker birthday;"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"    public SelectBirthdayWindow() {"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"        super(\"Calendar.fxml\");"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"        Scene scene \u003d new Scene(getRoot(), 300, 100);"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"        dialogStage \u003d createDialogStage(\"\", null, scene);"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        dialogStage.setScene(scene);"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"        birthday.setValue(nowLocalDate());"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"        this.birthdayArgs();"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"    private void birthdayArgs() {"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"        birthdate \u003d Integer.toString(birthday.getValue().getDayOfMonth()) + \"/\""},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"                + Integer.toString(birthday.getValue().getMonth().getValue()) + \"/\""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"                + Integer.toString(birthday.getValue().getYear());"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"    public String getBirthday() {"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"        return birthdate;"},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":49,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"NUSe0032202"},"content":"     *  Shows the birthday picker window."},{"lineNumber":51,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"    public void show() {"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"        logger.fine(\"Showing birthday picker.\");"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"        dialogStage.showAndWait();"},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"     * Gets the current calender date"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"     * @return LocalDate"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"    public static final LocalDate nowLocalDate() {"},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"        String date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").format(Calendar.getInstance().getTime());"},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"        LocalDate localDate \u003d LocalDate.parse(date , formatter);"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"        return localDate;"},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"//@@author"}],"authorContributionMap":{"-":8,"NUSe0032202":60}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":103,"author":{"gitID":"NUSe0032202"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"NUSe0032202"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedBirthday, updatedTags);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":136,"author":{"gitID":"NUSe0032202"},"content":"        private Birthday birthday;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":146,"author":{"gitID":"NUSe0032202"},"content":"            this.birthday \u003d toCopy.birthday;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":152,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":154,"author":{"gitID":"NUSe0032202"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.birthday,"},{"lineNumber":155,"author":{"gitID":"NUSe0032202"},"content":"                    this.address, this.tags);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"NUSe0032202"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":191,"author":{"gitID":"NUSe0032202"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":192,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":194,"author":{"gitID":"NUSe0032202"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":195,"author":{"gitID":"NUSe0032202"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":196,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":225,"author":{"gitID":"NUSe0032202"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":213,"NUSe0032202":16}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":"    private String birthday;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"        birthday \u003d source.getBirthday().getBirthday();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":77,"author":{"gitID":"NUSe0032202"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":79,"author":{"gitID":"NUSe0032202"},"content":"        return new Person(name, phone, email, address, birthday, tags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":76,"NUSe0032202":5}},{"path":"src/main/java/seedu/address/logic/parser/ListTagsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":5,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.ListTagsCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":" * Parses input arguments and creates a new ListTagsCommand object"},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"public class ListTagsCommandParser implements Parser\u003cListTagsCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"    public static final String CHOICE \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"     * Parses the given {@code String} of arguments in the context of the ListTagsCommand"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"     * and returns an ListTagsCommand object for execution."},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public ListTagsCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"        if (!(trimmedArgs.equals(CHOICE) || trimmedArgs.isEmpty())) {"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListTagsCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        return new ListTagsCommand(trimmedArgs);"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":26,"-":4}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":49,"author":{"gitID":"henryheyhey92"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":51,"author":{"gitID":"henryheyhey92"},"content":"    private Stage window;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":133,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":161,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"henryheyhey92"},"content":"    //@@author henryheyhey92"},{"lineNumber":182,"author":{"gitID":"henryheyhey92"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"henryheyhey92"},"content":"    public void start(Stage primaryStage) throws Exception {"},{"lineNumber":184,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":185,"author":{"gitID":"henryheyhey92"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":186,"author":{"gitID":"henryheyhey92"},"content":"        window \u003d primaryStage;"},{"lineNumber":187,"author":{"gitID":"henryheyhey92"},"content":"        boolean answer \u003d LoginBox.display(\"AddressBook Login\");"},{"lineNumber":188,"author":{"gitID":"henryheyhey92"},"content":"        if (answer) {"},{"lineNumber":189,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":190,"author":{"gitID":"henryheyhey92"},"content":"            ui.start(primaryStage);"},{"lineNumber":191,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":192,"author":{"gitID":"henryheyhey92"},"content":"            window.setOnCloseRequest(e -\u003e {"},{"lineNumber":193,"author":{"gitID":"henryheyhey92"},"content":"                e.consume();"},{"lineNumber":194,"author":{"gitID":"henryheyhey92"},"content":"                stop();"},{"lineNumber":195,"author":{"gitID":"henryheyhey92"},"content":"            });"},{"lineNumber":196,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":197,"author":{"gitID":"henryheyhey92"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":199,"author":{"gitID":"henryheyhey92"},"content":"    } //@@author"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":203,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":204,"author":{"gitID":"henryheyhey92"},"content":"        boolean answer \u003d ConfirmBox.display(\"Exit Check Protocol\", \"Confirm on exiting the program?\");"},{"lineNumber":205,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":206,"author":{"gitID":"henryheyhey92"},"content":"        if (answer) {"},{"lineNumber":207,"author":{"gitID":"henryheyhey92"},"content":"            //GoodByeBox.display(\"Title\", \"Good bye and have a nice day\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":209,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"            ui.stop();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                storage.saveUserPrefs(userPrefs);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            } catch (IOException e) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"                logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            Platform.exit();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            System.exit(0);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":220,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":233,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":234,"author":{"gitID":"henryheyhey92"},"content":"    public void pause() {"},{"lineNumber":235,"author":{"gitID":"henryheyhey92"},"content":"        ui.pause();"},{"lineNumber":236,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":34,"Labradorites":1,"-":201,"NUSe0032202":1}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"    ObjectProperty\u003cBirthday\u003e birthdayProperty();"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":"    Birthday getBirthday();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"    //@@author Labradorites"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"    String fullTag();"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"    //@@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress())"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"                \u0026\u0026 other.getBirthday().equals(this.getBirthday()));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    default String getAsText() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"                .append(\" Birthday: \")"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"                .append(getBirthday())"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":3,"-":54,"NUSe0032202":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            return new Person[] {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"                    new Address(\"Blk 30 Geylang East Avenue 1, #06-40\"), new Birthday(\"05/08/1994\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":"                    new Address(\"Serangoon North Avenue 6, #02-01\"), new Birthday(\"05/04/1955\"),"},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"                    new Address(\"46 Geylang Bahru, #07-18\"), new Birthday(\"03/07/1965\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 23, #11-04\"), new Birthday(\"02/04/1978\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"                    new Address(\"Blk 436 Serangoon North Avenue 1, #16-43\"), new Birthday(\"01/04/1974\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":"                    new Address(\"Blk 45 Aljunied Avenue 3, #11-31\"), new Birthday(\"08/03/1962\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            };"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":65,"NUSe0032202":8}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    private ObjectProperty\u003cBirthday\u003e birthday;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Birthday birthday, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"        requireAllNonNull(name, phone, email, address, birthday, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(birthday);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(),"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"                source.getBirthday(), source.getTags());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return name.get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"    public ObjectProperty\u003cBirthday\u003e birthdayProperty() {"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"        return birthday;"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":"    public Birthday getBirthday() {"},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"        return birthday.get();"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":75,"author":{"gitID":"NUSe0032202"},"content":"    public void setBirthday(Birthday birthday) {"},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":"        this.birthday.set(requireNonNull(birthday));"},{"lineNumber":77,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return phone.get();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return email.get();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e replacement) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        tags.set(new UniqueTagList(replacement));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":137,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":138,"author":{"gitID":"Labradorites"},"content":"    //@@author Labradorites"},{"lineNumber":139,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"Labradorites"},"content":"    public String fullTag() {"},{"lineNumber":141,"author":{"gitID":"Labradorites"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":142,"author":{"gitID":"Labradorites"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":143,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":144,"author":{"gitID":"Labradorites"},"content":"        return builder.toString().replace(\"][\", \" \").replaceAll(\"[\\\\[\\\\]]\", \"\");"},{"lineNumber":145,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":147,"author":{"gitID":"Labradorites"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":148,"author":{"gitID":"Labradorites"},"content":"        return tags;"},{"lineNumber":149,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":151,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"Labradorites"},"content":"    public boolean equals(Object other) {"},{"lineNumber":153,"author":{"gitID":"Labradorites"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":154,"author":{"gitID":"Labradorites"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":155,"author":{"gitID":"Labradorites"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":156,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":158,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"Labradorites"},"content":"    public int hashCode() {"},{"lineNumber":160,"author":{"gitID":"Labradorites"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":161,"author":{"gitID":"Labradorites"},"content":"        return Objects.hash(name, phone, email, address, birthday, tags);"},{"lineNumber":162,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":164,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"Labradorites"},"content":"    public String toString() {"},{"lineNumber":166,"author":{"gitID":"Labradorites"},"content":"        return getAsText();"},{"lineNumber":167,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":169,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":32,"-":114,"NUSe0032202":23}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortCommand.MESSAGE_EMPTY;"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortName.OPTION_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SortAddress;"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.logic.commands.SortName;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":" * \u003cp\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":28,"author":{"gitID":"-"},"content":" *"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    // used by asObservableList()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.add(new Person(toAdd));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"     * Sorts the addressbook base on selected option"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"     * @param option"},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"     * @throws AddressBookIsEmpty"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"    public void sort(int option) throws AddressBookIsEmpty, LoadLookUpTableException {"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"            if (!internalList.isEmpty()) {"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"                if (option \u003d\u003d OPTION_NAME) {"},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":"                    Collections.sort(internalList, new SortName());"},{"lineNumber":71,"author":{"gitID":"NUSe0032202"},"content":"                } else {"},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"                    Collections.sort(internalList, new SortAddress());"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"                }"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":"            } else {"},{"lineNumber":75,"author":{"gitID":"NUSe0032202"},"content":"                throw new AddressBookIsEmpty();"},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"NUSe0032202"},"content":"        } catch (IOException e) {"},{"lineNumber":78,"author":{"gitID":"NUSe0032202"},"content":"            throw new LoadLookUpTableException();"},{"lineNumber":79,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        internalList.set(index, new Person(editedPerson));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        for (final ReadOnlyPerson person : persons) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            replacement.add(new Person(person));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":155,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"NUSe0032202"},"content":"     * Exception gets thrown if the addressbook is empty."},{"lineNumber":157,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":159,"author":{"gitID":"NUSe0032202"},"content":"    public static class AddressBookIsEmpty extends CommandException {"},{"lineNumber":160,"author":{"gitID":"NUSe0032202"},"content":"        protected AddressBookIsEmpty() {"},{"lineNumber":161,"author":{"gitID":"NUSe0032202"},"content":"            super(MESSAGE_EMPTY);"},{"lineNumber":162,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":122,"NUSe0032202":43}},{"path":"src/main/java/seedu/address/logic/commands/ListTagsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Labradorites"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":5,"author":{"gitID":"Labradorites"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":" * Lists all unique tags added to AddressBook or PersonListPanel depending on choice to the user."},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":" * Does not show duplicate tags."},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"public class ListTagsCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"    public static final String FILTERED \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"    public static final String COMMAND_WORD \u003d \"listTags\";"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"List all tags:\\n%1$s\";"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"    public static final String MESSAGE_NO_TAGS \u003d \"There are no tags available.\";"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds tags according to choice.\\n\""},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"            + \"1. To list all tags available in AddressBook: \" + COMMAND_WORD + \"\\n\""},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"            + \"2. To list all tags of persons currently shown below: \" + COMMAND_WORD + \" \" + FILTERED + \"\\n\";"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    private List\u003cString\u003e listOfTags \u003d null;"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"    private String option;"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    public ListTagsCommand(String argument) {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        this.option \u003d argument;"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"    public List\u003cString\u003e getListOfTags() {"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"        return listOfTags;"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"        switch (option) {"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"        case FILTERED:"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":"            listOfTags \u003d model.getTagsListAsString(model.getFilteredTagsList());"},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"            break;"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"        default:"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"            listOfTags \u003d model.getTagsListAsString(model.getNormalTagsList());"},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":"            break;"},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        if (listOfTags.isEmpty()) {"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"            return new CommandResult(MESSAGE_NO_TAGS);"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", listOfTags)));"},{"lineNumber":52,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":54,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Labradorites"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"Labradorites"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"Labradorites"},"content":"                || (other instanceof ListTagsCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"Labradorites"},"content":"                \u0026\u0026 this.option.equals(((ListTagsCommand) other).option)); // state check"},{"lineNumber":59,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":59,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/GoogleAddressCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"Labradorites"},"content":"import seedu.address.logic.commands.GoogleAddressCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":" * Parses input arguments and creates a new GoogleAddressCommand object"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"public class GoogleAddressCommandParser implements Parser\u003cGoogleAddressCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"     * Parses the given {@code String} of arguments in the context of the GoogleAddressCommand"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"     * and returns an GoogleAddressCommand object for execution."},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"    public GoogleAddressCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"            return new GoogleAddressCommand(index);"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoogleAddressCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":26,"-":7}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"henryheyhey92":2,"-":29}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.fullTag(), keyword));"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":25,"-":7}},{"path":"src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":9,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Labradorites"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Phone} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"public class PhoneContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsAny(person.getPhone().value, keyword));"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":25,"-":7}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"NUSe0032202"},"content":"    public void sort(int option)throws UniquePersonList.AddressBookIsEmpty, LoadLookUpTableException {"},{"lineNumber":96,"author":{"gitID":"NUSe0032202"},"content":"        persons.sort(option);"},{"lineNumber":97,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":118,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *  @see #syncMasterTagListWith(Person)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":196,"NUSe0032202":4}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Validates given tag name."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given tag name string is invalid."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Tag(String name) throws IllegalValueException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!isValidTagName(trimmedName)) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.tagName \u003d trimmedName;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    //@@author Labradorites"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"    /*"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"     * Returns tag name."},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"    public String getTagName() {"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"        return tagName;"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":"    //@@author"},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":9,"-":58}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.CopyCommand.CHOICE_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.CopyCommand.CHOICE_EMAIL;"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.CopyCommand.CHOICE_NAME;"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.CopyCommand.CHOICE_PHONE;"},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"import static seedu.address.logic.commands.SortCommand.SAVE;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":"import java.awt.Toolkit;"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"import java.awt.datatransfer.Clipboard;"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"import java.awt.datatransfer.StringSelection;"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":"import java.util.Comparator;"},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":"import java.util.stream.Collectors;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":37,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"    private final Toolkit toolkit;"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"    private final Clipboard clipboard;"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":"    private Predicate\u003cReadOnlyPerson\u003e sortListPredicate;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":"        this.toolkit \u003d Toolkit.getDefaultToolkit();"},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"        this.clipboard \u003d toolkit.getSystemClipboard();"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"        this.sortListPredicate \u003d PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"NUSe0032202"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":81,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"NUSe0032202"},"content":"    //Note FilteredList is unmodifiable hence sorting is done on internal list."},{"lineNumber":94,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":95,"author":{"gitID":"NUSe0032202"},"content":"    public synchronized void sortAddressBook(int option, int saveOption) throws UniquePersonList.AddressBookIsEmpty,"},{"lineNumber":96,"author":{"gitID":"NUSe0032202"},"content":"            LoadLookUpTableException {"},{"lineNumber":97,"author":{"gitID":"NUSe0032202"},"content":"        addressBook.sort(option);"},{"lineNumber":98,"author":{"gitID":"NUSe0032202"},"content":"        updateFilteredPersonList(sortListPredicate);"},{"lineNumber":99,"author":{"gitID":"NUSe0032202"},"content":"        if (saveOption \u003d\u003d SAVE) {"},{"lineNumber":100,"author":{"gitID":"NUSe0032202"},"content":"            indicateAddressBookChanged();"},{"lineNumber":101,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":104,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"NUSe0032202"},"content":"    public void save() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"NUSe0032202"},"content":"    //@@author NUSe0032202"},{"lineNumber":118,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"NUSe0032202"},"content":"    public void copy(ReadOnlyPerson person, String choice) {"},{"lineNumber":120,"author":{"gitID":"NUSe0032202"},"content":"        Person target \u003d new Person(person);"},{"lineNumber":121,"author":{"gitID":"NUSe0032202"},"content":"        StringSelection sel;"},{"lineNumber":122,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":123,"author":{"gitID":"NUSe0032202"},"content":"        switch (choice) {"},{"lineNumber":124,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_NAME:"},{"lineNumber":125,"author":{"gitID":"NUSe0032202"},"content":"            sel \u003d new StringSelection(target.getName().fullName);"},{"lineNumber":126,"author":{"gitID":"NUSe0032202"},"content":"            clipboard.setContents(sel, null);"},{"lineNumber":127,"author":{"gitID":"NUSe0032202"},"content":"            break;"},{"lineNumber":128,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":129,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_PHONE:"},{"lineNumber":130,"author":{"gitID":"NUSe0032202"},"content":"            sel \u003d new StringSelection(target.getPhone().value);"},{"lineNumber":131,"author":{"gitID":"NUSe0032202"},"content":"            clipboard.setContents(sel, null);"},{"lineNumber":132,"author":{"gitID":"NUSe0032202"},"content":"            break;"},{"lineNumber":133,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":134,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_EMAIL:"},{"lineNumber":135,"author":{"gitID":"NUSe0032202"},"content":"            sel \u003d new StringSelection(target.getEmail().value);"},{"lineNumber":136,"author":{"gitID":"NUSe0032202"},"content":"            clipboard.setContents(sel, null);"},{"lineNumber":137,"author":{"gitID":"NUSe0032202"},"content":"            break;"},{"lineNumber":138,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":139,"author":{"gitID":"NUSe0032202"},"content":"        case CHOICE_ADDRESS:"},{"lineNumber":140,"author":{"gitID":"NUSe0032202"},"content":"            sel \u003d new StringSelection(target.getAddress().value);"},{"lineNumber":141,"author":{"gitID":"NUSe0032202"},"content":"            clipboard.setContents(sel, null);"},{"lineNumber":142,"author":{"gitID":"NUSe0032202"},"content":"            break;"},{"lineNumber":143,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":144,"author":{"gitID":"NUSe0032202"},"content":"        default:"},{"lineNumber":145,"author":{"gitID":"NUSe0032202"},"content":"            break;"},{"lineNumber":146,"author":{"gitID":"NUSe0032202"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"NUSe0032202"},"content":"    //@@author"},{"lineNumber":149,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"Labradorites"},"content":"    //@@author Labradorites"},{"lineNumber":160,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"Labradorites"},"content":"    public List\u003cString\u003e getTagsListAsString(List\u003cTag\u003e tagsList) {"},{"lineNumber":162,"author":{"gitID":"Labradorites"},"content":"        List\u003cString\u003e tagsStringList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":163,"author":{"gitID":"Labradorites"},"content":"        tagsList.forEach(tag -\u003e tagsStringList.add(tag.toString().replaceAll(\"[\\\\[\\\\]]\", \"\")));"},{"lineNumber":164,"author":{"gitID":"Labradorites"},"content":"        return tagsStringList;"},{"lineNumber":165,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":167,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"Labradorites"},"content":"    public List\u003cTag\u003e getNormalTagsList() {"},{"lineNumber":169,"author":{"gitID":"Labradorites"},"content":"        List\u003cTag\u003e listofNormalTags \u003d getAddressBook().getTagList().sorted();"},{"lineNumber":170,"author":{"gitID":"Labradorites"},"content":"        return listofNormalTags;"},{"lineNumber":171,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":173,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"Labradorites"},"content":"    public List\u003cTag\u003e getFilteredTagsList() {"},{"lineNumber":175,"author":{"gitID":"Labradorites"},"content":"        List\u003cTag\u003e unsortedListOfTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":177,"author":{"gitID":"Labradorites"},"content":"        getFilteredPersonList().forEach(persons -\u003e unsortedListOfTags.addAll(persons.getTags()));"},{"lineNumber":178,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":179,"author":{"gitID":"Labradorites"},"content":"        //Removes duplicate tags to ensure all tags are unique"},{"lineNumber":180,"author":{"gitID":"Labradorites"},"content":"        List\u003cTag\u003e listOfFilteredTags \u003d unsortedListOfTags.stream().distinct().collect(Collectors.toList());"},{"lineNumber":181,"author":{"gitID":"Labradorites"},"content":"        //Sorts tags in alphabetical order"},{"lineNumber":182,"author":{"gitID":"Labradorites"},"content":"        listOfFilteredTags.sort(Comparator.comparing(Tag::getTagName));"},{"lineNumber":183,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":184,"author":{"gitID":"Labradorites"},"content":"        return listOfFilteredTags;"},{"lineNumber":185,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"Labradorites"},"content":"    //@@author"},{"lineNumber":187,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":203,"author":{"gitID":"NUSe0032202"},"content":"        sortListPredicate \u003d predicate;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":34,"-":121,"NUSe0032202":69}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Labradorites"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"import seedu.address.model.person.exceptions.LoadLookUpTableException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"NUSe0032202"},"content":"     * Copies a single data field of the person specified by {@code person},the choice of field to be"},{"lineNumber":54,"author":{"gitID":"NUSe0032202"},"content":"     * copied is specified by {@code choice}."},{"lineNumber":55,"author":{"gitID":"NUSe0032202"},"content":"     * @param person"},{"lineNumber":56,"author":{"gitID":"NUSe0032202"},"content":"     * @param choice"},{"lineNumber":57,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"NUSe0032202"},"content":"    void copy(ReadOnlyPerson person, String choice);"},{"lineNumber":59,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":60,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"NUSe0032202"},"content":"     * Utility function to save the state of the addressbook.This function is only used when editing birthday\u0027s"},{"lineNumber":62,"author":{"gitID":"NUSe0032202"},"content":"     * from the GUI."},{"lineNumber":63,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"NUSe0032202"},"content":"    void save();"},{"lineNumber":65,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":66,"author":{"gitID":"NUSe0032202"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"NUSe0032202"},"content":"     *  Sorts the addressbook base on name or address"},{"lineNumber":68,"author":{"gitID":"NUSe0032202"},"content":"     *  option \u003d 1 {sorts by name}"},{"lineNumber":69,"author":{"gitID":"NUSe0032202"},"content":"     *  option \u003d 2 {sorts by address}"},{"lineNumber":70,"author":{"gitID":"NUSe0032202"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"NUSe0032202"},"content":"    void sortAddressBook (int option, int saveOption) throws UniquePersonList.AddressBookIsEmpty,"},{"lineNumber":73,"author":{"gitID":"NUSe0032202"},"content":"            LoadLookUpTableException;"},{"lineNumber":74,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":75,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"NUSe0032202"},"content":"     * Returns a unique tags list as {@code List\u003cString\u003e}"},{"lineNumber":77,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Labradorites"},"content":"    List\u003cString\u003e getTagsListAsString(List\u003cTag\u003e tagStringList);"},{"lineNumber":79,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":80,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Labradorites"},"content":"     * Returns list of all unique tags present in AddressBook that are sorted alphabetically"},{"lineNumber":82,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Labradorites"},"content":"    List\u003cTag\u003e getNormalTagsList();"},{"lineNumber":84,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":85,"author":{"gitID":"Labradorites"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Labradorites"},"content":"     * Returns list of all unique tags currently present in PersonListPanel that are sorted alphabetically"},{"lineNumber":87,"author":{"gitID":"Labradorites"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"Labradorites"},"content":"    List\u003cTag\u003e getFilteredTagsList();"},{"lineNumber":89,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Labradorites":15,"-":50,"NUSe0032202":25}},{"path":"src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":9,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":12,"author":{"gitID":"KiKanNG"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":"        .anyMatch(keyword -\u003e StringUtil.startWithWordIgnoreCase(person.getEmail().toString(), keyword));"},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":25,"-":7}},{"path":"src/main/java/seedu/address/model/person/exceptions/LoadLookUpTableException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":" *  Signals to the user that there is a problem with loading data into the lookup table"},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"public class LoadLookUpTableException extends Exception {"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"    public LoadLookUpTableException() {"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":"        super(\"Error with loading data for the lookup table\");"},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":"}"}],"authorContributionMap":{"-":2,"NUSe0032202":8}},{"path":"src/main/java/seedu/address/ConfirmBox.java","lines":[{"lineNumber":1,"author":{"gitID":"henryheyhey92"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":3,"author":{"gitID":"henryheyhey92"},"content":"import javafx.geometry.Pos;"},{"lineNumber":4,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.Scene;"},{"lineNumber":5,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"henryheyhey92"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitID":"henryheyhey92"},"content":"import javafx.stage.Modality;"},{"lineNumber":9,"author":{"gitID":"henryheyhey92"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"henryheyhey92"},"content":" * To confirm that the user wanted to exit the program"},{"lineNumber":13,"author":{"gitID":"henryheyhey92"},"content":" * Avoid accidental shutdown of the addressbook"},{"lineNumber":14,"author":{"gitID":"henryheyhey92"},"content":" */"},{"lineNumber":15,"author":{"gitID":"henryheyhey92"},"content":"//@@author henryheyhey92"},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":"public class ConfirmBox {"},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":"    private static boolean answer;"},{"lineNumber":18,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":"     * To display the Confirm exit box"},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":"     * @param title"},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":"     * @param message"},{"lineNumber":23,"author":{"gitID":"henryheyhey92"},"content":"     * @return"},{"lineNumber":24,"author":{"gitID":"henryheyhey92"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"henryheyhey92"},"content":"    public static boolean display(String title, String message) {"},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"        Stage window \u003d new Stage();"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"        window.initModality(Modality.APPLICATION_MODAL);"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":"        window.setTitle(title);"},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":"        window.setMinWidth(350);"},{"lineNumber":30,"author":{"gitID":"henryheyhey92"},"content":"        window.setMinHeight(150);"},{"lineNumber":31,"author":{"gitID":"henryheyhey92"},"content":"        Label label \u003d new Label();"},{"lineNumber":32,"author":{"gitID":"henryheyhey92"},"content":"        label.setText(message);"},{"lineNumber":33,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":34,"author":{"gitID":"henryheyhey92"},"content":"        //Create two buttons"},{"lineNumber":35,"author":{"gitID":"henryheyhey92"},"content":"        Button yesButton \u003d new Button(\"Yes\");"},{"lineNumber":36,"author":{"gitID":"henryheyhey92"},"content":"        Button noButton \u003d new Button(\"No\");"},{"lineNumber":37,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":38,"author":{"gitID":"henryheyhey92"},"content":"        //Clicking will set answer and close window"},{"lineNumber":39,"author":{"gitID":"henryheyhey92"},"content":"        yesButton.setOnAction(e -\u003e {"},{"lineNumber":40,"author":{"gitID":"henryheyhey92"},"content":"            answer \u003d true;"},{"lineNumber":41,"author":{"gitID":"henryheyhey92"},"content":"            window.close();"},{"lineNumber":42,"author":{"gitID":"henryheyhey92"},"content":"        });"},{"lineNumber":43,"author":{"gitID":"henryheyhey92"},"content":"        noButton.setOnAction(e -\u003e {"},{"lineNumber":44,"author":{"gitID":"henryheyhey92"},"content":"            answer \u003d false;"},{"lineNumber":45,"author":{"gitID":"henryheyhey92"},"content":"            window.close();"},{"lineNumber":46,"author":{"gitID":"henryheyhey92"},"content":"        });"},{"lineNumber":47,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":48,"author":{"gitID":"henryheyhey92"},"content":"        VBox layout \u003d new VBox(10);"},{"lineNumber":49,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":50,"author":{"gitID":"henryheyhey92"},"content":"        //Add buttons"},{"lineNumber":51,"author":{"gitID":"henryheyhey92"},"content":"        layout.getChildren().addAll(label, yesButton, noButton);"},{"lineNumber":52,"author":{"gitID":"henryheyhey92"},"content":"        layout.setAlignment(Pos.CENTER);"},{"lineNumber":53,"author":{"gitID":"henryheyhey92"},"content":"        Scene scene \u003d new Scene(layout);"},{"lineNumber":54,"author":{"gitID":"henryheyhey92"},"content":"        window.setScene(scene);"},{"lineNumber":55,"author":{"gitID":"henryheyhey92"},"content":"        window.showAndWait();"},{"lineNumber":56,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":57,"author":{"gitID":"henryheyhey92"},"content":"        //Make sure to return answer"},{"lineNumber":58,"author":{"gitID":"henryheyhey92"},"content":"        return answer;"},{"lineNumber":59,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"henryheyhey92"},"content":"}"},{"lineNumber":61,"author":{"gitID":"henryheyhey92"},"content":""}],"authorContributionMap":{"henryheyhey92":61}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","lines":[{"lineNumber":1,"author":{"gitID":"NUSe0032202"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":3,"author":{"gitID":"NUSe0032202"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"NUSe0032202"},"content":" * Represents a Person\u0027s birthday in the address book."},{"lineNumber":5,"author":{"gitID":"NUSe0032202"},"content":" */"},{"lineNumber":6,"author":{"gitID":"NUSe0032202"},"content":"//@@author NUSe0032202"},{"lineNumber":7,"author":{"gitID":"NUSe0032202"},"content":"public class Birthday {"},{"lineNumber":8,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":9,"author":{"gitID":"NUSe0032202"},"content":"    private String birthday;"},{"lineNumber":10,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":11,"author":{"gitID":"NUSe0032202"},"content":"    //Default when adding a new person"},{"lineNumber":12,"author":{"gitID":"NUSe0032202"},"content":"    public Birthday() {"},{"lineNumber":13,"author":{"gitID":"NUSe0032202"},"content":"        this.birthday \u003d \"DOB not initialised\";"},{"lineNumber":14,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":16,"author":{"gitID":"NUSe0032202"},"content":"    //Use this when editing a person\u0027s birthday"},{"lineNumber":17,"author":{"gitID":"NUSe0032202"},"content":"    public Birthday(String input) {"},{"lineNumber":18,"author":{"gitID":"NUSe0032202"},"content":"        this.birthday \u003d input.trim();"},{"lineNumber":19,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":21,"author":{"gitID":"NUSe0032202"},"content":"    public String getBirthday() {"},{"lineNumber":22,"author":{"gitID":"NUSe0032202"},"content":"        return birthday;"},{"lineNumber":23,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":25,"author":{"gitID":"NUSe0032202"},"content":"    //Edit via Java date picker"},{"lineNumber":26,"author":{"gitID":"NUSe0032202"},"content":"    public void edit(String input) {"},{"lineNumber":27,"author":{"gitID":"NUSe0032202"},"content":"        this.birthday \u003d input;"},{"lineNumber":28,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":30,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"NUSe0032202"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitID":"NUSe0032202"},"content":"        return birthday;"},{"lineNumber":33,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":35,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"NUSe0032202"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"NUSe0032202"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"NUSe0032202"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"NUSe0032202"},"content":"                \u0026\u0026 this.birthday.equals(((Birthday) other).birthday)); // state check"},{"lineNumber":40,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":42,"author":{"gitID":"NUSe0032202"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"NUSe0032202"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"NUSe0032202"},"content":"        return birthday.hashCode();"},{"lineNumber":45,"author":{"gitID":"NUSe0032202"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"NUSe0032202"},"content":""},{"lineNumber":47,"author":{"gitID":"NUSe0032202"},"content":"}"},{"lineNumber":48,"author":{"gitID":"NUSe0032202"},"content":"//@@author"}],"authorContributionMap":{"NUSe0032202":48}},{"path":"src/main/java/seedu/address/logic/commands/GoogleAddressCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"Labradorites"},"content":"import seedu.address.commons.events.ui.GoogleAddressEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Labradorites"},"content":"//@@author Labradorites"},{"lineNumber":13,"author":{"gitID":"Labradorites"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Labradorites"},"content":" * Searches index of person selected in Google Maps and displays searched results in browser to the user."},{"lineNumber":15,"author":{"gitID":"Labradorites"},"content":" * Index must be a positive integer and must be an index on the list shown."},{"lineNumber":16,"author":{"gitID":"Labradorites"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Labradorites"},"content":"public class GoogleAddressCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"Labradorites"},"content":"    public static final String COMMAND_WORD \u003d \"gAddress\";"},{"lineNumber":19,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":20,"author":{"gitID":"Labradorites"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches for person\u0027s address in GoogleMaps.\\n\""},{"lineNumber":21,"author":{"gitID":"Labradorites"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"Labradorites"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":24,"author":{"gitID":"Labradorites"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Searched %1$s on GoogleMaps\";"},{"lineNumber":25,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":26,"author":{"gitID":"Labradorites"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":28,"author":{"gitID":"Labradorites"},"content":"    public GoogleAddressCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"Labradorites"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":32,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Labradorites"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"Labradorites"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":35,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":36,"author":{"gitID":"Labradorites"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":37,"author":{"gitID":"Labradorites"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":38,"author":{"gitID":"Labradorites"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":40,"author":{"gitID":"Labradorites"},"content":"        ReadOnlyPerson personToSearch \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":41,"author":{"gitID":"Labradorites"},"content":"        EventsCenter.getInstance().post(new GoogleAddressEvent(personToSearch));"},{"lineNumber":42,"author":{"gitID":"Labradorites"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personToSearch.getName()));"},{"lineNumber":43,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Labradorites"},"content":""},{"lineNumber":45,"author":{"gitID":"Labradorites"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"Labradorites"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"Labradorites"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"Labradorites"},"content":"                || (other instanceof GoogleAddressCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"Labradorites"},"content":"                \u0026\u0026 this.targetIndex.equals(((GoogleAddressCommand) other).targetIndex)); // state check"},{"lineNumber":50,"author":{"gitID":"Labradorites"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Labradorites"},"content":"}"}],"authorContributionMap":{"Labradorites":41,"-":10}},{"path":"src/main/java/seedu/address/model/person/NameLetterContainsKeywordPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"henryheyhey92"},"content":"//@@author henryheyhey92"},{"lineNumber":8,"author":{"gitID":"henryheyhey92"},"content":"//reused"},{"lineNumber":9,"author":{"gitID":"henryheyhey92"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"henryheyhey92"},"content":" *  return the name that matches the key letter"},{"lineNumber":11,"author":{"gitID":"henryheyhey92"},"content":" */"},{"lineNumber":12,"author":{"gitID":"henryheyhey92"},"content":"public class NameLetterContainsKeywordPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"henryheyhey92"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":15,"author":{"gitID":"henryheyhey92"},"content":"    public NameLetterContainsKeywordPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"henryheyhey92"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":19,"author":{"gitID":"henryheyhey92"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"henryheyhey92"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":21,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":22,"author":{"gitID":"henryheyhey92"},"content":"        //String letter \u003d person.getName().fullName;"},{"lineNumber":23,"author":{"gitID":"henryheyhey92"},"content":"        if (keywords.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"henryheyhey92"},"content":"            return keywords.stream()"},{"lineNumber":25,"author":{"gitID":"henryheyhey92"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(\" \", keyword));"},{"lineNumber":26,"author":{"gitID":"henryheyhey92"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"henryheyhey92"},"content":"        if (keywords.get(0).length() \u003e 1) {"},{"lineNumber":28,"author":{"gitID":"henryheyhey92"},"content":"            return keywords.stream()"},{"lineNumber":29,"author":{"gitID":"henryheyhey92"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(\"\", keyword));"},{"lineNumber":30,"author":{"gitID":"henryheyhey92"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"henryheyhey92"},"content":"            String letter2 \u003d String.valueOf(person.getName().fullName.charAt(0));"},{"lineNumber":32,"author":{"gitID":"henryheyhey92"},"content":"            //System.out.println(letter2.length());"},{"lineNumber":33,"author":{"gitID":"henryheyhey92"},"content":"            return keywords.stream()"},{"lineNumber":34,"author":{"gitID":"henryheyhey92"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(letter2, keyword));"},{"lineNumber":35,"author":{"gitID":"henryheyhey92"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":38,"author":{"gitID":"henryheyhey92"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"henryheyhey92"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"henryheyhey92"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"henryheyhey92"},"content":"                || (other instanceof NameLetterContainsKeywordPredicate // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"henryheyhey92"},"content":"                \u0026\u0026 this.keywords.equals(((NameLetterContainsKeywordPredicate) other).keywords)); // state check"},{"lineNumber":43,"author":{"gitID":"henryheyhey92"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"henryheyhey92"},"content":""},{"lineNumber":45,"author":{"gitID":"henryheyhey92"},"content":"} //@@author"}],"authorContributionMap":{"henryheyhey92":39,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/XFindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"KiKanNG"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_UPPER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_UPPER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_UPPER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_UPPER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_UPPER;"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.model.person.XFindPredicate;"},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":" * A more powerful find tool"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":"public class XFindCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"    public static final String COMMAND_WORD \u003d \"xFind\";"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Advance find feature, \""},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":"            + \"can find everything containing the keywords\\n\""},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_NAME_UPPER + \"NAME or \""},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_PHONE_UPPER + \"PHONE or \""},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_EMAIL_UPPER + \"EMAIL or \""},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_ADDRESS_UPPER + \"ADDRESS or \""},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_TAG_UPPER + \"TAG\\n\""},{"lineNumber":33,"author":{"gitID":"KiKanNG"},"content":"            + \"if you want to only search for items start with the keywords, use \""},{"lineNumber":34,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_NAME + PREFIX_PHONE + PREFIX_EMAIL + PREFIX_ADDRESS + PREFIX_TAG + \"instead\\n\""},{"lineNumber":35,"author":{"gitID":"KiKanNG"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_NAME_UPPER + \"John Alan or \""},{"lineNumber":37,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_PHONE_UPPER + \"98765432 or \""},{"lineNumber":38,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_EMAIL_UPPER + \"johnd@example.com or \""},{"lineNumber":39,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_ADDRESS_UPPER + \"Clementi or \""},{"lineNumber":40,"author":{"gitID":"KiKanNG"},"content":"            + PREFIX_TAG_UPPER + \"friends\";"},{"lineNumber":41,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":42,"author":{"gitID":"KiKanNG"},"content":"    public static final String MESSAGE_BOUND \u003d COMMAND_WORD + \": only one parameter is allowed\";"},{"lineNumber":43,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":44,"author":{"gitID":"KiKanNG"},"content":"    private final XFindPredicate predicate;"},{"lineNumber":45,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":46,"author":{"gitID":"KiKanNG"},"content":"    public XFindCommand(XFindPredicate predicate) {"},{"lineNumber":47,"author":{"gitID":"KiKanNG"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":48,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":50,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"KiKanNG"},"content":"    public CommandResult execute() {"},{"lineNumber":52,"author":{"gitID":"KiKanNG"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":53,"author":{"gitID":"KiKanNG"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":54,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":56,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"KiKanNG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"KiKanNG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"KiKanNG"},"content":"                || (other instanceof XFindCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"KiKanNG"},"content":"                \u0026\u0026 this.predicate.equals(((XFindCommand) other).predicate)); // state check"},{"lineNumber":61,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":56,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/XFindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_UPPER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_UPPER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_UPPER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_UPPER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_UPPER;"},{"lineNumber":14,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":15,"author":{"gitID":"KiKanNG"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"KiKanNG"},"content":"import java.util.stream.Stream;"},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.logic.commands.XFindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.model.person.XFindPredicate;"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"public class XFindCommandParser implements Parser\u003cXFindCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"KiKanNG"},"content":"    public XFindCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"KiKanNG"},"content":"        Prefix[] prefixes \u003d {PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_NAME_UPPER,"},{"lineNumber":36,"author":{"gitID":"KiKanNG"},"content":"            PREFIX_PHONE_UPPER, PREFIX_EMAIL_UPPER, PREFIX_ADDRESS_UPPER, PREFIX_TAG_UPPER};"},{"lineNumber":37,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":38,"author":{"gitID":"KiKanNG"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, prefixes);"},{"lineNumber":39,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":40,"author":{"gitID":"KiKanNG"},"content":"        if (!arePrefixesPresent(argMultimap, prefixes)) {"},{"lineNumber":41,"author":{"gitID":"KiKanNG"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, XFindCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":44,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":45,"author":{"gitID":"KiKanNG"},"content":"        // figure out what arg it carries"},{"lineNumber":46,"author":{"gitID":"KiKanNG"},"content":"        int count \u003d 0;"},{"lineNumber":47,"author":{"gitID":"KiKanNG"},"content":"        String tokenizedArgs \u003d null;"},{"lineNumber":48,"author":{"gitID":"KiKanNG"},"content":"        Prefix prefix \u003d null;"},{"lineNumber":49,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":50,"author":{"gitID":"KiKanNG"},"content":"        for (Prefix candidate: prefixes) {"},{"lineNumber":51,"author":{"gitID":"KiKanNG"},"content":"            if (arePrefixesPresent(argMultimap, candidate)) {"},{"lineNumber":52,"author":{"gitID":"KiKanNG"},"content":"                tokenizedArgs \u003d argMultimap.getValue(candidate).get();"},{"lineNumber":53,"author":{"gitID":"KiKanNG"},"content":"                prefix \u003d candidate;"},{"lineNumber":54,"author":{"gitID":"KiKanNG"},"content":"                count++;"},{"lineNumber":55,"author":{"gitID":"KiKanNG"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":58,"author":{"gitID":"KiKanNG"},"content":"        if (count !\u003d 1) {        // more than one arg is found"},{"lineNumber":59,"author":{"gitID":"KiKanNG"},"content":"            throw new ParseException("},{"lineNumber":60,"author":{"gitID":"KiKanNG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, XFindCommand.MESSAGE_BOUND));"},{"lineNumber":61,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":63,"author":{"gitID":"KiKanNG"},"content":"        // retrieve value"},{"lineNumber":64,"author":{"gitID":"KiKanNG"},"content":"        String trimmedArgs \u003d tokenizedArgs.trim();"},{"lineNumber":65,"author":{"gitID":"KiKanNG"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":66,"author":{"gitID":"KiKanNG"},"content":"            throw new ParseException("},{"lineNumber":67,"author":{"gitID":"KiKanNG"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, XFindCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":70,"author":{"gitID":"KiKanNG"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":71,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":72,"author":{"gitID":"KiKanNG"},"content":"        return new XFindCommand(new XFindPredicate(Arrays.asList(keywords), prefix));"},{"lineNumber":73,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":75,"author":{"gitID":"KiKanNG"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"KiKanNG"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":77,"author":{"gitID":"KiKanNG"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":78,"author":{"gitID":"KiKanNG"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"KiKanNG"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":80,"author":{"gitID":"KiKanNG"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":81,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":83,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":74,"-":9}},{"path":"src/main/java/seedu/address/model/person/XFindPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"KiKanNG"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS_UPPER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_UPPER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME_UPPER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE_UPPER;"},{"lineNumber":11,"author":{"gitID":"KiKanNG"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_UPPER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":17,"author":{"gitID":"KiKanNG"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":18,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":19,"author":{"gitID":"KiKanNG"},"content":"//@@author kikanng"},{"lineNumber":20,"author":{"gitID":"KiKanNG"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"KiKanNG"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":22,"author":{"gitID":"KiKanNG"},"content":" */"},{"lineNumber":23,"author":{"gitID":"KiKanNG"},"content":"public class XFindPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"KiKanNG"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":25,"author":{"gitID":"KiKanNG"},"content":"    private Prefix prefix;"},{"lineNumber":26,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":27,"author":{"gitID":"KiKanNG"},"content":"    public XFindPredicate(List\u003cString\u003e keywords, Prefix prefix) {"},{"lineNumber":28,"author":{"gitID":"KiKanNG"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":29,"author":{"gitID":"KiKanNG"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":30,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":32,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"KiKanNG"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":34,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_ADDRESS_UPPER) {"},{"lineNumber":35,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":36,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsAny(person.getAddress().toString(), keyword));"},{"lineNumber":37,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":39,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_EMAIL_UPPER) {"},{"lineNumber":40,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":41,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsAny(person.getEmail().toString(), keyword));"},{"lineNumber":42,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":44,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_NAME_UPPER) {"},{"lineNumber":45,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":46,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsAny(person.getName().toString(), keyword));"},{"lineNumber":47,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":49,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_PHONE_UPPER) {"},{"lineNumber":50,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":51,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsAny(person.getPhone().toString(), keyword));"},{"lineNumber":52,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":54,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_TAG_UPPER) {"},{"lineNumber":55,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":56,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsAny(person.getTags().toString(), keyword));"},{"lineNumber":57,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":59,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_ADDRESS) {"},{"lineNumber":60,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":61,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.startWithWordIgnoreCase(person.getAddress().toString(), keyword));"},{"lineNumber":62,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":64,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_EMAIL) {"},{"lineNumber":65,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":66,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.startWithWordIgnoreCase(person.getEmail().toString(), keyword));"},{"lineNumber":67,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":69,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_NAME) {"},{"lineNumber":70,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":71,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.startWithWordIgnoreCase(person.getName().toString(), keyword));"},{"lineNumber":72,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":74,"author":{"gitID":"KiKanNG"},"content":"        if (prefix \u003d\u003d PREFIX_PHONE) {"},{"lineNumber":75,"author":{"gitID":"KiKanNG"},"content":"            return keywords.stream()"},{"lineNumber":76,"author":{"gitID":"KiKanNG"},"content":"                    .anyMatch(keyword -\u003e StringUtil.startWithWordIgnoreCase(person.getPhone().toString(), keyword));"},{"lineNumber":77,"author":{"gitID":"KiKanNG"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":79,"author":{"gitID":"KiKanNG"},"content":"        // if (prefix \u003d\u003d PREFIX_TAG)"},{"lineNumber":80,"author":{"gitID":"KiKanNG"},"content":"        return keywords.stream()"},{"lineNumber":81,"author":{"gitID":"KiKanNG"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsAny(person.getTags().toString(), keyword));"},{"lineNumber":82,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":84,"author":{"gitID":"KiKanNG"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"KiKanNG"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"KiKanNG"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"KiKanNG"},"content":"                || (other instanceof XFindPredicate // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"KiKanNG"},"content":"                \u0026\u0026 this.keywords.equals(((XFindPredicate) other).keywords)); // state check"},{"lineNumber":89,"author":{"gitID":"KiKanNG"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"KiKanNG"},"content":""},{"lineNumber":91,"author":{"gitID":"KiKanNG"},"content":"}"}],"authorContributionMap":{"KiKanNG":82,"-":9}}]
