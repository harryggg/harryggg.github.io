var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"STUtor is developed by the https://travis-ci.org/CS2103JAN2018-W11-B1/main.svg?branch\u003dmaster team. +"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Akshay Narayan"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"image::okkhoy.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"{empty}[https://github.com/okkhoy[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"Role: Project Supervisor"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Danny Ng Ming Xuan"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"image::dannyngmx94.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/dannyngmx94[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"Role: Testing"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: UI"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Ng Xin Ler"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"image::sherlynng.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/sherylnng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"Role: Documentation, Code quality"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: Storage"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Wang Zi"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"image::alexawangzi.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/alexawangzi[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"Role: Integration, Scheduling and tracking"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: Model"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Yan Hong Yao Alvin"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"image::aussiroth.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/aussiroth[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"Role: Team Lead"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: Logic"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Aussiroth":26,"-":28}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"\u003d STUtor"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"https://travis-ci.org/CS2103JAN2018-W11-B1/main[image:https://travis-ci.org/CS2103JAN2018-W11-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"https://ci.appveyor.com/project/alexawangzi/main/branch/master[image:https://ci.appveyor.com/api/projects/status/uawhtnq68lp8dg2e/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"https://coveralls.io/github/CS2103JAN2018-W11-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W11-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d UI"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"ifdef::env-github[]"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"* Match Student and Tutor Mock Up"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"ifdef::env-github[]"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"image::docs/images/UiMatch.png[width\u003d\"600\"]"},{"lineNumber":20,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"* This is a desktop Address Book application, specialised for people who need to coordinate tutors with students."},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"* Whether working for a tuition company, or as a freelance, this will help you keep track of everything going on with your students and tutors."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"* Original source for the code in this project is the Addressbook-level4 created by the SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":36,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":37,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"alexawangzi":3,"Aussiroth":4,"sherlynng":8,"-":24}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"\u003d STUtor - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"By: `Team W11-B1`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"STUtor is for those who *prefer to use a desktop app for managing contacts*. More importantly, STUtor is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, STUtor can get your student and tutor management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` $/10 sub/Math lvl/Secondary 1 stat/NotMatched: adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* For advanced users, a shorter alias for most commands exist to reduce typing. These are provided in the information for each command."},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help` or `h`"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add` or `a`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS $/BUDGET sub/SUBJECT lvl/EDUCATION_LEVEL t/Student [t/TAG]...`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"A person must have at least one tag (Tutor/Student)"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"The budget, subject, education level and status of each person will be displayed as tags"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 $/150 sub/Math lvl/Secondary 1`t/Tutor"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 $/200 sub/Physics lvl/Secondary 4 t/Student`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list` or `l`"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all students : `listStudent` or `ls`"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"Shows a list of all students in the address book. +"},{"lineNumber":86,"author":{"gitID":"-"},"content":"Format: `listStudent`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `listTutor` or `lt`"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Shows a list of all tutors in the address book. +"},{"lineNumber":91,"author":{"gitID":"-"},"content":"Format: `listTutor`"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit` or `e`"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":96,"author":{"gitID":"Aussiroth"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [$/BUDGET] [sub/SUBJECT] [lvl/EDUCATION_LEVEL] [t/TAG]...`"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"****"},{"lineNumber":99,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":100,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":101,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":102,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"* The attribute tags will still remain after any changes to the other tags."},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"* The attribute tags will automatically update to reflect any changes to the actual attributes."},{"lineNumber":106,"author":{"gitID":"-"},"content":"****"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find` or `f`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":118,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"****"},{"lineNumber":121,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":122,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":125,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":126,"author":{"gitID":"-"},"content":"****"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":132,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":133,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete` or `d`"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"****"},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":144,"author":{"gitID":"-"},"content":"****"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":149,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select` or `s`"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":158,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"****"},{"lineNumber":161,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":162,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":163,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":164,"author":{"gitID":"-"},"content":"****"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":172,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `h`"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":178,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":182,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `u`"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":205,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `r`"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c`"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":254,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":265,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":266,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":268,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":270,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":272,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":273,"author":{"gitID":"-"},"content":"* *ListStudent* : `listStudent`"},{"lineNumber":274,"author":{"gitID":"-"},"content":"* *ListTutor* : `listTutor`"},{"lineNumber":275,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":276,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":277,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":278,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":279,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":280,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"alexawangzi":6,"Aussiroth":7,"-":267}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"        //getBrowserPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"        //getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"        //assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"        //assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        //assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"        //assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":6,"-":83}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_AMY;"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_STUDENT;"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_UNMATCHED;"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_UNMATCHED;"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":85,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":86,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":89,"author":{"gitID":"Aussiroth"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + SUBJECT_DESC_AMY + \"  \" + LEVEL_DESC_AMY + \"  \""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + \"  \" + PRICE_DESC_AMY + ROLE_DESC_AMY + \"  \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"        System.out.println(command);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":107,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_AMY).withPrice(PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withRole(ROLE_STUDENT).withStatus(STATUS_UNMATCHED)"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + ROLE_DESC_AMY"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":117,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_AMY).withPrice(PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withTags(VALID_TAG_FRIEND).withStatus(STATUS_UNMATCHED)"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + ROLE_DESC_AMY"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":127,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_AMY).withPrice(PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withTags(VALID_TAG_FRIEND).withStatus(STATUS_UNMATCHED)"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + ROLE_DESC_AMY"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":137,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_BOB).withPrice(PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withTags(VALID_TAG_FRIEND).withStatus(STATUS_UNMATCHED)"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + ROLE_DESC_AMY"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_FRIEND + EMAIL_DESC_BOB + LEVEL_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + ROLE_DESC_BOB + PRICE_DESC_BOB;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"Friend\";"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY;"},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":188,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY;"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":194,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY;"},{"lineNumber":199,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":200,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY;"},{"lineNumber":205,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":206,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"        /* Case: missing price -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY;"},{"lineNumber":211,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":212,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"        /* Case: missing subject -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY;"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":"        /* Case: missing level -\u003e rejected */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED;"},{"lineNumber":221,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":222,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":229,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":230,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":236,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":237,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":241,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":242,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":243,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":247,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":248,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":249,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":254,"author":{"gitID":"alexawangzi"},"content":"                + INVALID_PRICE_DESC + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":255,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":256,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":258,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid subject -\u003e rejected */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":260,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + INVALID_SUBJECT_DESC + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":261,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":262,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":263,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":264,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid level -\u003e rejected */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":266,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + INVALID_LEVEL_DESC + ROLE_DESC_AMY"},{"lineNumber":267,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":268,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":269,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":270,"author":{"gitID":"alexawangzi"},"content":"        /* Case: invalid role -\u003e rejected */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":272,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + INVALID_ROLE_DESC"},{"lineNumber":273,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":274,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":275,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":278,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":279,"author":{"gitID":"alexawangzi"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":322,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":324,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":339,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":340,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":341,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":343,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":344,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":61,"Aussiroth":50,"-":243}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"    /*"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"    }*/"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":123,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":3,"-":265}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"\u003d STUtor - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B1/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"By: `Team W11-B1`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":373,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":384,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Automatic creation of tags from person attributes"},{"lineNumber":389,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":390,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d Creation of the `Tag`"},{"lineNumber":391,"author":{"gitID":"Aussiroth"},"content":"We have made it such that the attributes `Price`, `Subject`, `Level` and `Status` of a person each have a tag with the value added to the person."},{"lineNumber":392,"author":{"gitID":"Aussiroth"},"content":"This is done when user performs `add` or `edit` command."},{"lineNumber":393,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":394,"author":{"gitID":"Aussiroth"},"content":"In the AddCommandParser, after successfully parsing the `Price`, `Subject`, `Level`, `Status` input, the code has been modified such that a new `Tag` containing the correct value and attribute is automatically created after."},{"lineNumber":395,"author":{"gitID":"Aussiroth"},"content":"For the EditCommand, the `createEditedPerson` command will remove the previous attribute tags in the `Person` list of tags, then recreate the attribute tags using the new `Person` class attribute values."},{"lineNumber":396,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":397,"author":{"gitID":"Aussiroth"},"content":"The idea for this is implemented this way:"},{"lineNumber":398,"author":{"gitID":"Aussiroth"},"content":"[source,java]"},{"lineNumber":399,"author":{"gitID":"Aussiroth"},"content":"----"},{"lineNumber":400,"author":{"gitID":"Aussiroth"},"content":"private static Person createEditedPerson(...) {"},{"lineNumber":401,"author":{"gitID":"Aussiroth"},"content":"\t/* code to update the attributes here */"},{"lineNumber":402,"author":{"gitID":"Aussiroth"},"content":"    Set\u003cTag\u003e attributeTags \u003d new HashSet\u003c\u003e(updatedTags);"},{"lineNumber":403,"author":{"gitID":"Aussiroth"},"content":"\tattributeTags.remove(new Tag(personToEdit.getPrice().toString()));"},{"lineNumber":404,"author":{"gitID":"Aussiroth"},"content":"\t/* similar code to remove the other attribute tags... */"},{"lineNumber":405,"author":{"gitID":"Aussiroth"},"content":"\tattributeTags.add(new Tag(updatedPrice.toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":406,"author":{"gitID":"Aussiroth"},"content":"\t/* similar code to add the new attribute tags... */"},{"lineNumber":407,"author":{"gitID":"Aussiroth"},"content":"\treturn new Person(...)"},{"lineNumber":408,"author":{"gitID":"Aussiroth"},"content":"}"},{"lineNumber":409,"author":{"gitID":"Aussiroth"},"content":"----"},{"lineNumber":410,"author":{"gitID":"Aussiroth"},"content":"[NOTE]"},{"lineNumber":411,"author":{"gitID":"Aussiroth"},"content":"Since the `Price`, `Subject`, `Level` and `Status` attributes have been parsed and checked to conform to expected values, there is no need to reparse the values when creating them as a `Tag`. +"},{"lineNumber":412,"author":{"gitID":"Aussiroth"},"content":"The acceptable inputs for a `Tag` must necessarily allow all the acceptable inputs for `Price`, `Subject`, `Level` and `Status` to prevent errors."},{"lineNumber":413,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":414,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d `Tag` class attributes"},{"lineNumber":415,"author":{"gitID":"Aussiroth"},"content":"The `Tag` class can support the ability to classify which attribute the tag was created from. This is done by adding an enum `AllTagsType` to the `Tag` class."},{"lineNumber":416,"author":{"gitID":"Aussiroth"},"content":"A tag can be created without being from an attribute, with just a tag name. In this case, creating a `Tag` with no provided `AllTagsType` will initialise the `tagType` to `DEFAULT`."},{"lineNumber":417,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":418,"author":{"gitID":"Aussiroth"},"content":"This is the current `Tag` class in UML notation."},{"lineNumber":419,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":420,"author":{"gitID":"Aussiroth"},"content":"image::TagClassDiagram.png[width\u003d\"600\"]"},{"lineNumber":421,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":422,"author":{"gitID":"Aussiroth"},"content":"This new attribute is used to implement the capability to standardize all tags created as a `Price` attribute to have the same color, all tags created as a `Subject` attribute to have the same color, and so on."},{"lineNumber":423,"author":{"gitID":"Aussiroth"},"content":"This has been implemented as a new overloaded `getTagColorStyleFor` method, which takes in a Tag instead of a String."},{"lineNumber":424,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":425,"author":{"gitID":"Aussiroth"},"content":"The method idea is implemented this way:"},{"lineNumber":426,"author":{"gitID":"Aussiroth"},"content":"[source,java]"},{"lineNumber":427,"author":{"gitID":"Aussiroth"},"content":"----"},{"lineNumber":428,"author":{"gitID":"Aussiroth"},"content":"private String getTagColorStyleFor(Tag tag) {"},{"lineNumber":429,"author":{"gitID":"Aussiroth"},"content":"        switch (tag.tagType) {"},{"lineNumber":430,"author":{"gitID":"Aussiroth"},"content":"        case SUBJECT:"},{"lineNumber":431,"author":{"gitID":"Aussiroth"},"content":"\t\t//return color"},{"lineNumber":432,"author":{"gitID":"Aussiroth"},"content":"        case LEVEL:"},{"lineNumber":433,"author":{"gitID":"Aussiroth"},"content":"\t\t//return color"},{"lineNumber":434,"author":{"gitID":"Aussiroth"},"content":"        case STATUS:"},{"lineNumber":435,"author":{"gitID":"Aussiroth"},"content":"\t\t//return color"},{"lineNumber":436,"author":{"gitID":"Aussiroth"},"content":"        case PRICE:"},{"lineNumber":437,"author":{"gitID":"Aussiroth"},"content":"\t\t//return color"},{"lineNumber":438,"author":{"gitID":"Aussiroth"},"content":"        default:"},{"lineNumber":439,"author":{"gitID":"Aussiroth"},"content":"\t\t//return color"},{"lineNumber":440,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":441,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":442,"author":{"gitID":"Aussiroth"},"content":"----"},{"lineNumber":443,"author":{"gitID":"Aussiroth"},"content":"[NOTE]"},{"lineNumber":444,"author":{"gitID":"Aussiroth"},"content":"As shown from this code snippet, any tag that is not set to one of the 4 attributes will fall through to the default type, where they will have the same color. This is currently done as such to prevent accidental collisions of color with the 4 attribute tags."},{"lineNumber":445,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":446,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d Storage Implementation"},{"lineNumber":447,"author":{"gitID":"Aussiroth"},"content":"The method for storing tags has also been changed slightly. While previously just the `tagName` needed to be stored. Now both the `tagName` and `tagType` must be stored."},{"lineNumber":448,"author":{"gitID":"Aussiroth"},"content":"This has been accomplished by having XML store the single field in the form \"TAGNAME,TAGTYPE\"."},{"lineNumber":449,"author":{"gitID":"Aussiroth"},"content":"The respective tagName and tagType can be obtained by splitting the read string representing the tag data from the file around the \",\" separator. Since tags can only be alphanumeric, this provides a safe character to split around."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Method of saving tag information in the saved XML file"},{"lineNumber":454,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":455,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 1 (current choice):** Keep the `XmlAdaptedTag` stored in a single XML field."},{"lineNumber":456,"author":{"gitID":"Aussiroth"},"content":"** Pros: There is no need to change the format of the XML file."},{"lineNumber":457,"author":{"gitID":"Aussiroth"},"content":"** Cons: Need to ensure that the `tagName` and `tagType` can be clearly split when saved to the XML file, and retrieved back."},{"lineNumber":458,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 2:** Change the format of `XmlAdaptedTag`"},{"lineNumber":459,"author":{"gitID":"Aussiroth"},"content":"** Pros: Easier for advanced users to edit without causing an error, easy to retrieve values from file."},{"lineNumber":460,"author":{"gitID":"Aussiroth"},"content":"** Cons: Risks causing issues with how `Tag` is saved as part of `XmlAdaptedPerson` and by itself as `XmlAdaptedTag`"},{"lineNumber":461,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":462,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Case-insensitive input"},{"lineNumber":463,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":465,"author":{"gitID":"alexawangzi"},"content":"We made input of fields case-insensitive to reduce hassles for the user."},{"lineNumber":466,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":467,"author":{"gitID":"alexawangzi"},"content":"After parsing and validation, the field entered is converted to \u003c\u003cproper-case, proper case\u003e\u003e internally,"},{"lineNumber":468,"author":{"gitID":"alexawangzi"},"content":"so tags generated from the field information will be standardized and more readable for the user."},{"lineNumber":469,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":470,"author":{"gitID":"alexawangzi"},"content":"The exceptions are `price` and `phone` as they consist only numbers and require no conversion."},{"lineNumber":471,"author":{"gitID":"alexawangzi"},"content":"`email` is converted to all lower-case to follow the convention."},{"lineNumber":472,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":473,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Model Implementation"},{"lineNumber":474,"author":{"gitID":"alexawangzi"},"content":"We utilise the `ProperCaseConverter` object to convert all parsed and valid input into proper case."},{"lineNumber":475,"author":{"gitID":"alexawangzi"},"content":"See the example below for an actual implementation found in the `Role` class."},{"lineNumber":476,"author":{"gitID":"alexawangzi"},"content":"All the fields utilise the `ProperCaseConverter` object in a similar way."},{"lineNumber":477,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":478,"author":{"gitID":"alexawangzi"},"content":"[source,java]"},{"lineNumber":479,"author":{"gitID":"alexawangzi"},"content":"----"},{"lineNumber":480,"author":{"gitID":"alexawangzi"},"content":"public class Role{"},{"lineNumber":481,"author":{"gitID":"alexawangzi"},"content":" //...other implementations..."},{"lineNumber":482,"author":{"gitID":"alexawangzi"},"content":" public Role(String role) {"},{"lineNumber":483,"author":{"gitID":"alexawangzi"},"content":"         //... Validating input..."},{"lineNumber":484,"author":{"gitID":"alexawangzi"},"content":"         ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":485,"author":{"gitID":"alexawangzi"},"content":"         this.value \u003d pc.convertToProperCase(role);"},{"lineNumber":486,"author":{"gitID":"alexawangzi"},"content":"     }"},{"lineNumber":487,"author":{"gitID":"alexawangzi"},"content":" //...other implementations..."},{"lineNumber":488,"author":{"gitID":"alexawangzi"},"content":"}"},{"lineNumber":489,"author":{"gitID":"alexawangzi"},"content":"----"},{"lineNumber":490,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":491,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Shortcuts for the user in filling fields"},{"lineNumber":492,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":494,"author":{"gitID":"alexawangzi"},"content":"Due to the nature of the application, the user will input certain information repetitively."},{"lineNumber":495,"author":{"gitID":"alexawangzi"},"content":"For example, `role` can only be one of `student` or `tutor`."},{"lineNumber":496,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":497,"author":{"gitID":"alexawangzi"},"content":"Thus, we have created shortcuts to help improving efficiency in filling the fields."},{"lineNumber":498,"author":{"gitID":"alexawangzi"},"content":"We currently support shortcuts for `subject`, `level`, `status`, and `role`."},{"lineNumber":499,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":500,"author":{"gitID":"sherlynng"},"content":"[width\u003d\"59%\",cols\u003d\"\u003c30%,\u003c35%,\u003c35%\",options\u003d\"header\",]"},{"lineNumber":501,"author":{"gitID":"sherlynng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":502,"author":{"gitID":"alexawangzi"},"content":"|Applicable field |Shortcut |Equivalence in full"},{"lineNumber":503,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/chem`| `sub/chemistry`"},{"lineNumber":504,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/phy`| `/physics`"},{"lineNumber":505,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/chi`| `sub/chinese`"},{"lineNumber":506,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/eng`| `sub/english`"},{"lineNumber":507,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/us`| `lvl/upper sec`"},{"lineNumber":508,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/ls`| `lvl/lower sec`"},{"lineNumber":509,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/up`| `lvl/upper pri`"},{"lineNumber":510,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/lp`| `lvl/lower pri`"},{"lineNumber":511,"author":{"gitID":"alexawangzi"},"content":"|status | `stat/nm`| `stat/not matched`"},{"lineNumber":512,"author":{"gitID":"alexawangzi"},"content":"|status | `stat/m`| `stat/matched`"},{"lineNumber":513,"author":{"gitID":"alexawangzi"},"content":"|role | `r/t`| `r/tutor`"},{"lineNumber":514,"author":{"gitID":"alexawangzi"},"content":"|role | `r/s`| `r/student`"},{"lineNumber":515,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":516,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":517,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Model Implementation"},{"lineNumber":518,"author":{"gitID":"alexawangzi"},"content":"The shortcut is first validated, then the field information is converted to its full form."},{"lineNumber":519,"author":{"gitID":"alexawangzi"},"content":"Below is the function that performs conversion in the Role class. Other classes follow similar implementation."},{"lineNumber":520,"author":{"gitID":"alexawangzi"},"content":"[source,java]"},{"lineNumber":521,"author":{"gitID":"alexawangzi"},"content":"----"},{"lineNumber":522,"author":{"gitID":"alexawangzi"},"content":" public String convertToFullRole(String original) {"},{"lineNumber":523,"author":{"gitID":"alexawangzi"},"content":"      String cur \u003d original.toLowerCase();"},{"lineNumber":524,"author":{"gitID":"alexawangzi"},"content":"       if (cur \u003d\u003d null) {"},{"lineNumber":525,"author":{"gitID":"alexawangzi"},"content":"           return \"\";"},{"lineNumber":526,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"s\")) {"},{"lineNumber":527,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"student\";"},{"lineNumber":528,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"t\")) {"},{"lineNumber":529,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"tutor\";"},{"lineNumber":530,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":531,"author":{"gitID":"alexawangzi"},"content":"       return cur;"},{"lineNumber":532,"author":{"gitID":"alexawangzi"},"content":" }"},{"lineNumber":533,"author":{"gitID":"alexawangzi"},"content":"----"},{"lineNumber":534,"author":{"gitID":"alexawangzi"},"content":"[NOTE]"},{"lineNumber":535,"author":{"gitID":"alexawangzi"},"content":"The user can input shortcuts in case-insensitive fashion."},{"lineNumber":536,"author":{"gitID":"alexawangzi"},"content":"For instance, the user may input `add n/jOHN dOE p/98765432 e/johND@eXaMpLe.com a/NUS #04-02 $/50 sub/PHy lvl/uP stat/nM t/T`"},{"lineNumber":537,"author":{"gitID":"alexawangzi"},"content":", the stored entry will be `John Doe Phone: 98765432 Email: johnd@example.com Address: NUS #04-02 Tags: [Tutor][Upper Pri][50][Physics][Not Matched]`"},{"lineNumber":538,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filter feature"},{"lineNumber":540,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":542,"author":{"gitID":"-"},"content":"We have added the `filter` command which inherit from `Command`. The user can `filter` according to the attributes `Subject`, `Level` and `Status` of a person."},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the filter command works:"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"image::FilterCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":549,"author":{"gitID":"-"},"content":"The user must input arguments in case sensitive and full fashion."},{"lineNumber":550,"author":{"gitID":"-"},"content":"For instance, the entry `filter maTH` will not work."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d UI Modifications"},{"lineNumber":553,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":554,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Browser Panel"},{"lineNumber":555,"author":{"gitID":"sherlynng"},"content":"The browser panel is modified to show the selected person’s details instead of opening up a URL."},{"lineNumber":556,"author":{"gitID":"sherlynng"},"content":"This allows better visualization of a person’s details as each person now has up 9 attributes: `Name`, `Phone`,"},{"lineNumber":557,"author":{"gitID":"sherlynng"},"content":"`Address`, `Email`, `Role`, `Status`, `Subject`, `Level`, `Price` to be displayed."},{"lineNumber":558,"author":{"gitID":"sherlynng"},"content":"Below shows the modifications made:"},{"lineNumber":559,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":560,"author":{"gitID":"sherlynng"},"content":"**Before**"},{"lineNumber":561,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":562,"author":{"gitID":"sherlynng"},"content":"image::OldBrowserPanel.png[width\u003d\"500\"]"},{"lineNumber":563,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":564,"author":{"gitID":"sherlynng"},"content":"**After**"},{"lineNumber":565,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":566,"author":{"gitID":"sherlynng"},"content":"image::NewBrowserPanel.png[width\u003d\"500\"]"},{"lineNumber":567,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":568,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":569,"author":{"gitID":"sherlynng"},"content":"The UI is modified using SceneBuilder and the layout is specified in link:{repoURL}/blob/master/src/main/resources/view/BrowserPanel.fxml[`BrowserPanel.fxml`]."},{"lineNumber":570,"author":{"gitID":"sherlynng"},"content":"link:{repoURL}/blob/master/src/main/java/seedu/address/ui/BrowserPanel.java[`BrowserPanel.java`] subscribes to `handlePersonPanelSelectionChangedEvent`, where this allows the browser panel to"},{"lineNumber":571,"author":{"gitID":"sherlynng"},"content":"be updated whenever the user selects on a specific person."},{"lineNumber":572,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":573,"author":{"gitID":"sherlynng"},"content":"We choose to place the person\u0027s name at the top of the browser panel for easy identification of a person while"},{"lineNumber":574,"author":{"gitID":"sherlynng"},"content":"other details are organized in a table format for easy reference. Rows of the table are also alternately colored"},{"lineNumber":575,"author":{"gitID":"sherlynng"},"content":"to increase readability."},{"lineNumber":576,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":577,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":578,"author":{"gitID":"sherlynng"},"content":"In the case if the person attribute is null (except `Name` cannot be null), it will be displayed as \" - \""},{"lineNumber":579,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":580,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":581,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":582,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Layout of Browser Panel"},{"lineNumber":583,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":584,"author":{"gitID":"sherlynng"},"content":"* **Alternative 1 (current choice):** Use table to display person details with a column specifying the type of attribute"},{"lineNumber":585,"author":{"gitID":"sherlynng"},"content":"and the other specifying the actual content."},{"lineNumber":586,"author":{"gitID":"sherlynng"},"content":"** Pros: Easy to read and refer to."},{"lineNumber":587,"author":{"gitID":"sherlynng"},"content":"** Cons: May not look visually appealing."},{"lineNumber":588,"author":{"gitID":"sherlynng"},"content":"* **Alternative 2:** Centralized display of person details without usage of tables and reference to the type of attribute."},{"lineNumber":589,"author":{"gitID":"sherlynng"},"content":"** Pros: Visually appealing."},{"lineNumber":590,"author":{"gitID":"sherlynng"},"content":"** Cons: Locating an attribute may not be easy due to lack of labelling."},{"lineNumber":591,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":592,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Person Card"},{"lineNumber":593,"author":{"gitID":"sherlynng"},"content":"Person card is improved to show the list of person’s details more concisely and clearly."},{"lineNumber":594,"author":{"gitID":"sherlynng"},"content":"Below shows the improvements made:"},{"lineNumber":595,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":596,"author":{"gitID":"sherlynng"},"content":"**Before**"},{"lineNumber":597,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":598,"author":{"gitID":"sherlynng"},"content":"image::OldPersonCard.png[width\u003d\"300\"]"},{"lineNumber":599,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":600,"author":{"gitID":"sherlynng"},"content":"**After**"},{"lineNumber":601,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":602,"author":{"gitID":"sherlynng"},"content":"image::NewPersonCard.png[width\u003d\"300\"]"},{"lineNumber":603,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":604,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Removal of Unncessary Information"},{"lineNumber":605,"author":{"gitID":"sherlynng"},"content":"Besides `Name`, all other details are removed from the person card. We choose to remove it as these details can"},{"lineNumber":606,"author":{"gitID":"sherlynng"},"content":"be easily viewed by selecting on the person card since the browser panel now shows the full details of a person."},{"lineNumber":607,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":608,"author":{"gitID":"sherlynng"},"content":"As such, we decided to only leave the neccessary details that the user will frequently refer"},{"lineNumber":609,"author":{"gitID":"sherlynng"},"content":"to in the person card. This helps to reduce cluttering on the side panel and allows the user to be able to view a"},{"lineNumber":610,"author":{"gitID":"sherlynng"},"content":"longer list of people at one time."},{"lineNumber":611,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":612,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Coloring of Tags"},{"lineNumber":613,"author":{"gitID":"sherlynng"},"content":"To allow easy identification of the category that a tag belongs to, different colors are used for different attributes"},{"lineNumber":614,"author":{"gitID":"sherlynng"},"content":"of a person. A standardized color is used for each attribute and its color is stored in `Tag` such that the color"},{"lineNumber":615,"author":{"gitID":"sherlynng"},"content":"will be retained when the user reopens the application."},{"lineNumber":616,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":622,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":627,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":640,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":641,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":642,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":645,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":648,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":655,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":660,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":667,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":680,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":681,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":682,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":683,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":684,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":685,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":686,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":687,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":688,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":692,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":712,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":719,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":720,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":721,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":726,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":727,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":730,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":740,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":745,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":750,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":753,"author":{"gitID":"-"},"content":"+"},{"lineNumber":754,"author":{"gitID":"-"},"content":"****"},{"lineNumber":755,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":756,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":757,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":758,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":761,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":762,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":763,"author":{"gitID":"-"},"content":"****"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":774,"author":{"gitID":"-"},"content":"+"},{"lineNumber":775,"author":{"gitID":"-"},"content":"****"},{"lineNumber":776,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":777,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":779,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":780,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":781,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":782,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":783,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":784,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":785,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":786,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":787,"author":{"gitID":"-"},"content":"****"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":795,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":798,"author":{"gitID":"-"},"content":"+"},{"lineNumber":799,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":800,"author":{"gitID":"-"},"content":"+"},{"lineNumber":801,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"+"},{"lineNumber":803,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":804,"author":{"gitID":"-"},"content":"+"},{"lineNumber":805,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":806,"author":{"gitID":"-"},"content":"+"},{"lineNumber":807,"author":{"gitID":"-"},"content":"****"},{"lineNumber":808,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":809,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":810,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":811,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":812,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":813,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":814,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":815,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":816,"author":{"gitID":"-"},"content":"****"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":819,"author":{"gitID":"-"},"content":"+"},{"lineNumber":820,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":821,"author":{"gitID":"-"},"content":"+"},{"lineNumber":822,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":823,"author":{"gitID":"-"},"content":"+"},{"lineNumber":824,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":825,"author":{"gitID":"-"},"content":"+"},{"lineNumber":826,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"+"},{"lineNumber":828,"author":{"gitID":"-"},"content":"****"},{"lineNumber":829,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":830,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":831,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":832,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":833,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":834,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":835,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":836,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":837,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":838,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":839,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":840,"author":{"gitID":"-"},"content":"****"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":843,"author":{"gitID":"-"},"content":"+"},{"lineNumber":844,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":845,"author":{"gitID":"-"},"content":"+"},{"lineNumber":846,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":847,"author":{"gitID":"-"},"content":"+"},{"lineNumber":848,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":849,"author":{"gitID":"-"},"content":"+"},{"lineNumber":850,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":851,"author":{"gitID":"-"},"content":"+"},{"lineNumber":852,"author":{"gitID":"-"},"content":"****"},{"lineNumber":853,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":854,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":855,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":856,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":857,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":858,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":859,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":860,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":861,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":862,"author":{"gitID":"-"},"content":"****"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":870,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":873,"author":{"gitID":"-"},"content":"+"},{"lineNumber":874,"author":{"gitID":"-"},"content":"****"},{"lineNumber":875,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":876,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":877,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":878,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":879,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":880,"author":{"gitID":"-"},"content":"****"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":883,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":890,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":891,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":896,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":897,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":898,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":903,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":908,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":913,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":916,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":921,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":922,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":927,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":928,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":929,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":932,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":937,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":944,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":949,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":956,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":961,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":962,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":965,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":976,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":981,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":984,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":995,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"* Tutor coordinator"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"* has a need to manage and schedule a significant number of tutors and students"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"* prefer desktop applications over other types"},{"lineNumber":1017,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI applications"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"*Value proposition*: efficient pairing of students and tutors based on criteria such as subject, budget, location, availability"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"sherlynng"},"content":"*Feature Contributions*:"},{"lineNumber":1024,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1025,"author":{"gitID":"sherlynng"},"content":"[width\u003d\"59%\",cols\u003d\"\u003c30%,\u003c35%,\u003c35%\",options\u003d\"header\",]"},{"lineNumber":1026,"author":{"gitID":"sherlynng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1027,"author":{"gitID":"sherlynng"},"content":"|Name |Minor Enhancement |Major Enhancement"},{"lineNumber":1028,"author":{"gitID":"sherlynng"},"content":"|Danny NG Ming Xuan |Create new command to filter the person list with respect to the various tags in"},{"lineNumber":1029,"author":{"gitID":"sherlynng"},"content":"Person card. This will enable the user to view people with tags he/she is interested in.|Create `viewStats` command."},{"lineNumber":1030,"author":{"gitID":"sherlynng"},"content":"This allows the user to view information such as number of students/tutors/matched and more in the form of graph."},{"lineNumber":1031,"author":{"gitID":"sherlynng"},"content":"|NG Xin Ler |Change browser panel to view Person\u0027s details and remove all attributes except name and tags in"},{"lineNumber":1032,"author":{"gitID":"sherlynng"},"content":"Person card. This helps to improve the readability of Person details and reduce cluttering on the side panel.|"},{"lineNumber":1033,"author":{"gitID":"sherlynng"},"content":"Create `unmatch` command. This allows the user to unmatch a pair of Tutor and Student in the event where the pair is"},{"lineNumber":1034,"author":{"gitID":"sherlynng"},"content":"wrongly matched or either the Tutor or Student wants to change a matching."},{"lineNumber":1035,"author":{"gitID":"sherlynng"},"content":"|WANG Zi |Create shortcut for the user in filling subject, level, status and role. For instance, `sub/eng` and"},{"lineNumber":1036,"author":{"gitID":"sherlynng"},"content":"`sub/english` both result in adding the subject English. After that, accommodate case-insensitive input, and"},{"lineNumber":1037,"author":{"gitID":"sherlynng"},"content":"standardize display to follow \u003c\u003cproper-case, proper case\u003e\u003e."},{"lineNumber":1038,"author":{"gitID":"sherlynng"},"content":"|Create `match` command. This allows the user to match a pair of Tutor and Student from a list of potential matches."},{"lineNumber":1039,"author":{"gitID":"sherlynng"},"content":"|YAN Hong Yao Alvin | Automatically generate tags for some attribute fields. This makes them easy to view by the user |"},{"lineNumber":1040,"author":{"gitID":"sherlynng"},"content":"Allow all non-name fields to be optional. This makes input easier for the user as the add command is extremely long otherwise."},{"lineNumber":1041,"author":{"gitID":"sherlynng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1042,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1043,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1052,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new tutor/student |"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a tutor/student |remove entries that I no longer need"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"|`* * *` |user |find a tutor/student by name |locate details of persons without having to go through the entire list"},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"|`* * *` |user |edit the \u003c\u003ccriteria, criteria\u003e\u003e of a tutor/student |change criteria without re-adding the entry"},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"|`* * *` |user |list all tutors or students separately |view a cleaner list without mixing tutors and students"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"|`* * *` |user |set a tutor/student’s \u003c\u003cstatus, status\u003e\u003e |know who is available"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"|`* * *` |user |mark a tutor/student as \u003c\u003cmatched, matched\u003e\u003e with some other tutor/student for a certain subject |identify tutor/student status"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"|`* *` |user |protect the app with a password |ensure confidentiality of the contacts"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"|`* *` |user |tag a person with role, subject, level, and status |identify details of each tutor/student easily"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"|`* *` |user |sort matching list by budget |find the best match at the lowest price"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"|`* *` |user |rate a tutor according to student’s feedback |identify tutors’ capability for future references"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"|`* *` |user |store a list of all tutor/student that have been matched |I can have a cleaner list consisting of only unmatched tutor/student and also able to refer to past records if required"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"|`* *` |user |find all pairs of tutor/students that are \u003c\u003cmatching-in-progress, matching in progress\u003e\u003e |easily set a pair to matched or unmatched depending if they have agreed upon the tutoring"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"|`* *` |user |indicate the special request by tutor/student (e.g. prefer female tutor)|consider these factors when performing match"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"|`* *` |user |change theme of the app |personalise the app to user’s preference"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"|`* *` |forgetful user | view password hint |recall my password"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"|`* *` |user with poor eyesight |change the font and font size |easily read the output text"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"|`*` |user |add upload tutors’ qualifications via pdf file |add in data easily without typing them down individually"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"|`*` |user |view the location markers of tutor/student on a map |see the geographical concentration of tutors/students"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"|`*` |user |automatically send email to the matched pair of tutor and student |inform both parties efficiently"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"|`*` |user |select a particular criteria and get tutors/students fulfilling that criteria | easily find a suitable tutor/student if one criteria takes priority"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"|`*` |user |allow a tutor/student to have multiple subject to teach/learn |have more possibilities when matching tutors and students"},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"|`*` |user |sort the matching list by distance |pair tutor/student who lives nearer to each other"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"|`*` |user |sync database to google |work on multiple devices without losing data"},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"|`*` |user |view statistics on tutor/student numbers and statuses |have a clearer picture of the status of tutor/student"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"|`*` |user |auto-match tutor and student based on available time slots |save time in matching schedules"},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"Aussiroth"},"content":"(For all use cases below, the *System* is the `STUtor` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1123,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor shows a list of persons"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1125,"author":{"gitID":"Aussiroth"},"content":"4.  STUtor deletes the person"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1133,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1139,"author":{"gitID":"Aussiroth"},"content":"** 3a1. STUtor shows an error message."},{"lineNumber":1140,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit the criteria of a certain tutor/student"},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"1.  User requests to edit a criteria of a certain tutor/student"},{"lineNumber":1149,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor updates the criteria"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"* 1a. The given tutor/student is invalid."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1159,"author":{"gitID":"Aussiroth"},"content":"** 1a1. STUtor shows an error message."},{"lineNumber":1160,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Input a certain criteria of a student/tutor and get back a list of tutor/student fulfilling that criteria"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"1.  User requests a certain criteria of student/tutor (e.g. budget: below 200)"},{"lineNumber":1169,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor shows a list of tutor/student fulfilling that criteria"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"* 1a. The given criteria is invalid"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1179,"author":{"gitID":"Aussiroth"},"content":"** 1a1. STUtor shows an error message."},{"lineNumber":1180,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1185,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Match tutor and student"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"1.  User requests to show a list of all tutors/students"},{"lineNumber":1194,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor returns a list of all tutors/students"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"3.  User selects a tutor/student for matching"},{"lineNumber":1196,"author":{"gitID":"Aussiroth"},"content":"4.  STUtor returns a list of students/tutors that fulfils the criteria of tutor/student selected"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"5.  User creates a match with the most suitable criteria"},{"lineNumber":1198,"author":{"gitID":"Aussiroth"},"content":"6.  STUtor creates the match and updates the status of the matched tutor and student to ‘Matching-in-progress’"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1208,"author":{"gitID":"Aussiroth"},"content":"** 3a1. STUtor shows an error message."},{"lineNumber":1209,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"* 4a. The list is empty (no tutor/student fulfills the criteria)"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Confirm a match"},{"lineNumber":1219,"author":{"gitID":"-"},"content":""},{"lineNumber":1220,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"1.  User requests for a list of pending matches"},{"lineNumber":1223,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor shows a list of ‘Matching-in-progress’ entries"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"3.  User select a particular entry"},{"lineNumber":1225,"author":{"gitID":"Aussiroth"},"content":"4.  STUtor updates the status of the tutor and student"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1233,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1238,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1240,"author":{"gitID":"Aussiroth"},"content":"** 3a1. STUtor shows an error message."},{"lineNumber":1241,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1248,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1249,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1250,"author":{"gitID":"-"},"content":".  Should be fast in responding to request (within 2 seconds)"},{"lineNumber":1251,"author":{"gitID":"-"},"content":""},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"sherlynng"},"content":"[[proper-case]] Proper case::"},{"lineNumber":1265,"author":{"gitID":"sherlynng"},"content":"Proper case is any text that is written with each of the first letters of every word being capitalized."},{"lineNumber":1266,"author":{"gitID":"sherlynng"},"content":"For example, \"This Is An Example Of Proper Case.\""},{"lineNumber":1267,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[[criteria]] Criteria::"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"Subject and grade level"},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"[[match]] Match::"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"A tutor and a student are paired for a subject"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"[[matched]] Matched::"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"Tutor and student have confirmed the match and are ready to start lessons"},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"[[matching-in-progress]] Matching in progress::"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"Waiting for tutor and student to confirm the match"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[[status]] Status::"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"Includes unmatch, matching-in-progress, matched"},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"[[unmatch]] Unmatch::"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"A tutor/student does not have any match"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1296,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1301,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1304,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1316,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1322,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1332,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1334,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1336,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"alexawangzi":74,"Aussiroth":88,"sherlynng":93,"-":1092}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.ui.PersonCard.TAG_COLOR_STYLES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"     * Asserts that {@code actualBrowser} displays the details of {@code expectedPerson}."},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"    public static void assertBrowserDisplaysPerson(Person expectedPerson, BrowserPanelHandle actualBrowser) {"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getName().fullName, actualBrowser.getName());"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getPhone().value, actualBrowser.getPhone());"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getEmail().value, actualBrowser.getEmail());"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getAddress().value, actualBrowser.getAddress());"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getStatus().value, actualBrowser.getStatus());"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getSubject().value, actualBrowser.getSubject());"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getLevel().value, actualBrowser.getLevel());"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"        assertEquals(\"$\" + expectedPerson.getPrice().value + \" / hr\", actualBrowser.getPrice());"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the has code of the tag\u0027s content."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"        /*expectedTags.forEach(tag -\u003e"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"                    actualCard.getTagStyleClasses(tag)));*/"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":3,"sherlynng":14,"-":95}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":158,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_addCommandPressTab_autofill() {"},{"lineNumber":160,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"add n/ p/ e/ a/ $/ sub/ lvl/ stat/ r/\";"},{"lineNumber":161,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":162,"author":{"gitID":"sherlynng"},"content":"        // checks for add command word"},{"lineNumber":163,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"add\");"},{"lineNumber":164,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":"        // checks for add command word alias"},{"lineNumber":169,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"a\");"},{"lineNumber":170,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":171,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":172,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":174,"author":{"gitID":"sherlynng"},"content":"        // checks if tab works correctly"},{"lineNumber":175,"author":{"gitID":"sherlynng"},"content":"        /*expectedOutput \u003d \"add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50\""},{"lineNumber":176,"author":{"gitID":"sherlynng"},"content":"                + \" sub/Math lvl/Lower Sec stat/Not Matched r/Student\";"},{"lineNumber":177,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d enterPersonDetails();"},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);*/"},{"lineNumber":179,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":181,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_addCommandPressDelete_removePreviousPrefix() {"},{"lineNumber":183,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"add p/ e/ a/ $/ sub/ lvl/ stat/ r/\";"},{"lineNumber":184,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":185,"author":{"gitID":"sherlynng"},"content":"        // checks for add command word"},{"lineNumber":186,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"add\");"},{"lineNumber":187,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":188,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.DELETE);"},{"lineNumber":189,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":190,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":191,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":192,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":194,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_selectCommandPressTab_autofill() {"},{"lineNumber":196,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"select 1\";"},{"lineNumber":197,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":198,"author":{"gitID":"sherlynng"},"content":"        // checks for select command word"},{"lineNumber":199,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"select\");"},{"lineNumber":200,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":201,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":202,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":203,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":204,"author":{"gitID":"sherlynng"},"content":"        // checks for select command word alias"},{"lineNumber":205,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"s\");"},{"lineNumber":206,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":207,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":208,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":209,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":211,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_deleteCommandPressTab_autofill() {"},{"lineNumber":213,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"delete 1\";"},{"lineNumber":214,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":215,"author":{"gitID":"sherlynng"},"content":"        // checks for delete command word"},{"lineNumber":216,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"delete\");"},{"lineNumber":217,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":218,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":219,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":220,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":221,"author":{"gitID":"sherlynng"},"content":"        // checks for delete command word alias"},{"lineNumber":222,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"d\");"},{"lineNumber":223,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":224,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":225,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":226,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":228,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_editCommandPressTab_autofill() {"},{"lineNumber":230,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"edit 1 n/ p/ e/ a/ $/ sub/ lvl/ stat/ r/\";"},{"lineNumber":231,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":232,"author":{"gitID":"sherlynng"},"content":"        // checks for edit command word"},{"lineNumber":233,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"edit\");"},{"lineNumber":234,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":235,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":236,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":237,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":238,"author":{"gitID":"sherlynng"},"content":"        // checks for edit command word alias"},{"lineNumber":239,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"e\");"},{"lineNumber":240,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":241,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":242,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":243,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":245,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"sherlynng"},"content":"     * Enters Person details using GUI robot"},{"lineNumber":247,"author":{"gitID":"sherlynng"},"content":"     * @return String entered by GUI robot"},{"lineNumber":248,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"sherlynng"},"content":"    private String enterPersonDetails() {"},{"lineNumber":250,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"John Doe\");"},{"lineNumber":251,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":252,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"98765432\");"},{"lineNumber":253,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":254,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"johnd@example.com\");"},{"lineNumber":255,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":256,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"311, Clementi Ave 2, #02-25\");"},{"lineNumber":257,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":258,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"50\");"},{"lineNumber":259,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":260,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"Math\");"},{"lineNumber":261,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":262,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"Lower Sec\");"},{"lineNumber":263,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":264,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"Not Matched\");"},{"lineNumber":265,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":266,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"Student\");"},{"lineNumber":267,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":268,"author":{"gitID":"sherlynng"},"content":"        return commandBoxHandle.getInput();"},{"lineNumber":269,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":113,"-":157}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertBrowserDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStubStudent;"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStubTutor;"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"    //private PersonPanelSelectionChangedEvent selectionChangedEventStubPersonOnlyNameSpecified;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    //private Person personOnlyNameSpecified;"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"        /*personOnlyNameSpecified  \u003d new PersonBuilder().withName(\"Hilda Lim\")"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"                .withAddress(null).withEmail(null).withPhone(null)"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"                .withPrice(null).withSubject(null).withStatus(null).withLevel(null)"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"                .withTags(new String[0]).build();*/"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"        selectionChangedEventStubStudent \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"        selectionChangedEventStubTutor \u003d new PersonPanelSelectionChangedEvent(new PersonCard(BENSON, 0));"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"        //selectionChangedEventStubPersonOnlyNameSpecified \u003d"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"        //        new PersonPanelSelectionChangedEvent(new PersonCard(personOnlyNameSpecified, 0));"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"    public void display() {"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"        // student"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"        Person student \u003d ALICE;"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"        postNow(selectionChangedEventStubStudent);"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"        assertBrowserDisplay(student);"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        // tutor"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"        Person tutor \u003d BENSON;"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"        postNow(selectionChangedEventStubTutor);"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        assertBrowserDisplay(tutor);"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"        // person with only name specified"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        //postNow(selectionChangedEventStubTutor);"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        //assertBrowserDisplay(personOnlyNameSpecified);"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"     * Asserts that {@code browserPanel} displays the details of {@code expectedPerson} correctly."},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"    private void assertBrowserDisplay(Person expectedPerson) {"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        // verify person details are displayed correctly"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        assertBrowserDisplaysPerson(expectedPerson, browserPanelHandle);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":43,"-":28}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_SUBJECT \u003d \"English\";"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_LEVEL \u003d \"lower Sec\";"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_STATUS \u003d \"not Matched\";"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_ROLE \u003d \"student\";"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_PRICE \u003d \"77\";"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList("},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"            new XmlAdaptedTag(\"friends\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":89,"author":{"gitID":"Aussiroth"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_SUBJECT,"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"                VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":97,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":99,"author":{"gitID":"Aussiroth"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_SUBJECT,"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"                VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":107,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_SUBJECT,"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"                VALID_LEVEL, VALID_STATUS,  VALID_ROLE, VALID_TAGS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"                builder.withPerson(new PersonBuilder().build()).build());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":7,"Aussiroth":7,"-":141}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.ListStudentCommand;"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.ListTutorCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_addAliased() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAliased(person));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_clearAliased() throws Exception {"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":78,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_deleteAliased() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":94,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":97,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":99,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_editAliased() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":103,"author":{"gitID":"Aussiroth"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""},{"lineNumber":104,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_historyAliased() throws Exception {"},{"lineNumber":143,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"},{"lineNumber":144,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_listAliased() throws Exception {"},{"lineNumber":162,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS) instanceof ListCommand);"},{"lineNumber":163,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":164,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_selectAliased() throws Exception {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":176,"author":{"gitID":"Aussiroth"},"content":"                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_redoCommandWordAliased_returnsRedoCommand() throws Exception {"},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_undoCommandWordAliased_returnsUndoCommand() throws Exception {"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_removeTag() throws Exception {"},{"lineNumber":207,"author":{"gitID":"Aussiroth"},"content":"        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"                RemoveTagCommand.COMMAND_WORD + \" \" + VALID_TAG_FRIEND);"},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new RemoveTagCommand(new Tag(VALID_TAG_FRIEND)), command);"},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":212,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_removeTagAliased() throws Exception {"},{"lineNumber":214,"author":{"gitID":"Aussiroth"},"content":"        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":"                RemoveTagCommand.COMMAND_WORD_ALIAS + \" \" + VALID_TAG_FRIEND);"},{"lineNumber":216,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new RemoveTagCommand(new Tag(VALID_TAG_FRIEND)), command);"},{"lineNumber":217,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":219,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_listStudent() throws Exception {"},{"lineNumber":221,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD) instanceof ListStudentCommand);"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD + \" 3\") instanceof ListStudentCommand);"},{"lineNumber":223,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":225,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_listStudentAliased() throws Exception {"},{"lineNumber":227,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD_ALIAS) instanceof ListStudentCommand);"},{"lineNumber":228,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":229,"author":{"gitID":"Aussiroth"},"content":"                ListStudentCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListStudentCommand);"},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":232,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_listTutor() throws Exception {"},{"lineNumber":234,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListTutorCommand.COMMAND_WORD) instanceof ListTutorCommand);"},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListTutorCommand.COMMAND_WORD + \" 3\") instanceof ListTutorCommand);"},{"lineNumber":236,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":238,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_listTutorAliased() throws Exception {"},{"lineNumber":240,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListTutorCommand.COMMAND_WORD_ALIAS) instanceof ListTutorCommand);"},{"lineNumber":241,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListTutorCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListTutorCommand);"},{"lineNumber":242,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":1,"Aussiroth":87,"-":169}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_BOB;"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_UNMATCHED;"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_UNMATCHED;"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        /*"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"         Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":83,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":84,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + PRICE_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"                + \" \" + SUBJECT_DESC_BOB + \" \" + LEVEL_DESC_BOB + \" \" + STATUS_DESC_UNMATCHED + TAG_DESC_FRIEND + \" \";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withPrice(PRICE_BOB)"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"                .withSubject(VALID_SUBJECT_BOB).withLevel(VALID_LEVEL_BOB).withStatus(STATUS_UNMATCHED)"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":104,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + PRICE_DESC_BOB + LEVEL_DESC_BOB + STATUS_DESC_UNMATCHED + SUBJECT_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":149,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":154,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_AMY + PRICE_DESC_AMY + SUBJECT_DESC_AMY + LEVEL_DESC_AMY + STATUS_DESC_UNMATCHED"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_AMY"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"        // this"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"        // can be misleading: card selection actually remains unchanged but the"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_NAME_DESC,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_PHONE_DESC,"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_EMAIL_DESC,"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_ADDRESS_DESC,"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_PRICE_DESC,"},{"lineNumber":211,"author":{"gitID":"Aussiroth"},"content":"                Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid subject -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_SUBJECT_DESC,"},{"lineNumber":216,"author":{"gitID":"Aussiroth"},"content":"                Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":217,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid level -\u003e rejected */"},{"lineNumber":219,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_LEVEL_DESC,"},{"lineNumber":221,"author":{"gitID":"Aussiroth"},"content":"                Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":225,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_TAG_DESC,"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":234,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + PRICE_DESC_BOB + LEVEL_DESC_BOB + STATUS_DESC_UNMATCHED + SUBJECT_DESC_BOB"},{"lineNumber":235,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":240,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + PRICE_DESC_BOB + LEVEL_DESC_BOB + STATUS_DESC_UNMATCHED + SUBJECT_DESC_BOB"},{"lineNumber":241,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":268,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":272,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":322,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":324,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":326,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":22,"Aussiroth":49,"-":265}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_TAG_1 \u003d \"Friend\";"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_TAG_2 \u003d \"Neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"-":244}},{"path":"src/test/java/seedu/address/logic/parser/RemoveTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"public class RemoveTagCommandParserTest {"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"abc**\","},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"}"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":""}],"authorContributionMap":{"alexawangzi":2,"Aussiroth":19,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_USAGE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_LEVEL_BOB;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_LEVEL_SHORTCUT_UPPER_SEC;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_NAME_BOB;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_ROLE_BOB;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_ROLE_SHORTCUT_TUTOR;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_STATUS_BOB;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_STATUS_SHORTCUT_UNMATCHED;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_SUBJECT_BOB;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_SUBJECT_SHORTCUT_ENGLISH;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_LOWER_SEC;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_UPPER_SEC;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_LOWER_PRI;"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_LOWER_SEC;"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_LOWER_PRI;"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_LOWER_SEC;"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_UPPER_PRI;"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_UPPER_SEC;"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_UPPER_PRI;"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_UPPER_SEC;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_AMY;"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_BOB;"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_SHORTCUT_STUDENT;"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_SHORTCUT_TUTOR;"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_STUDENT;"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_TUTOR;"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_UNMATCHED;"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_MATCHED;"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_SHORTCUT_MATCHED;"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_SHORTCUT_UNMATCHED;"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_UNMATCHED;"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_CHEMISTRY;"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_CHINESE;"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_CHINESE;"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_ENGLISH;"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_ENGLISH;"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_PHYSICS;"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_CHEMISTRY;"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_CHINESE;"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_ENGLISH;"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_PHYSICS;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_BOB;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":96,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":100,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":101,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":102,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_CHINESE)"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"                .withPrice(PRICE_BOB).withLevel(LEVEL_UPPER_SEC).withRole(ROLE_TUTOR).withStatus(STATUS_UNMATCHED)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_CHINESE + PRICE_DESC_BOB + LEVEL_DESC_UPPER_SEC + ROLE_DESC_BOB"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsMissing_failure() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":161,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withSubject(SUBJECT_ENGLISH)"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"                .withPrice(PRICE_AMY).withLevel(LEVEL_LOWER_SEC).withStatus(STATUS_UNMATCHED).withTags().build();"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"                        + PRICE_DESC_AMY + SUBJECT_DESC_AMY + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED,"},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":"                MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE, MESSAGE_USAGE);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_ENGLISH + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":178,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_ENGLISH + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":183,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_ENGLISH + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":189,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_ENGLISH + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":"        //missing price prefix"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED + PRICE_BOB,"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"                expectedMessage);"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"        //missing subject prefix"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_ENGLISH + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"                expectedMessage);"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"        //missing level prefix"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + VALID_LEVEL_BOB + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"                expectedMessage);"},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_ENGLISH + VALID_LEVEL_BOB + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":218,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":223,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":227,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":232,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":233,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":234,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"        // invalid price"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":237,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + INVALID_PRICE_DESC"},{"lineNumber":238,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":240,"author":{"gitID":"Aussiroth"},"content":"        // invalid subject"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":242,"author":{"gitID":"Aussiroth"},"content":"                + INVALID_SUBJECT_DESC + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":243,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":245,"author":{"gitID":"Aussiroth"},"content":"        // invalid level"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":247,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + INVALID_LEVEL_DESC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":248,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":252,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":253,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"Aussiroth"},"content":"        // invalid status"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":257,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + INVALID_STATUS_DESC + PRICE_DESC_BOB"},{"lineNumber":258,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":259,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":261,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":262,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB,"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":267,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED"},{"lineNumber":268,"author":{"gitID":"alexawangzi"},"content":"                        + ROLE_DESC_BOB + PRICE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":269,"author":{"gitID":"alexawangzi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE, MESSAGE_USAGE));"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":272,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":273,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsCaseInsensitive_success() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":276,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":277,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":278,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":279,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":280,"author":{"gitID":"alexawangzi"},"content":"        // name case insensitive - accepted"},{"lineNumber":281,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, CASE_INSENSITIVE_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":282,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED"},{"lineNumber":283,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":284,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":285,"author":{"gitID":"alexawangzi"},"content":"        // email case insentive - accepted"},{"lineNumber":286,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + CASE_INSENSITIVE_EMAIL_BOB"},{"lineNumber":287,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED"},{"lineNumber":288,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":289,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":290,"author":{"gitID":"alexawangzi"},"content":"        // address case insentive - accepted"},{"lineNumber":291,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":292,"author":{"gitID":"alexawangzi"},"content":"                + CASE_INSENSITIVE_ADDRESS_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":293,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":294,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":295,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":296,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":297,"author":{"gitID":"alexawangzi"},"content":"        // subject case insentive - accepted"},{"lineNumber":298,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":299,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + CASE_INSENSITIVE_SUBJECT_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":300,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":301,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":302,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":303,"author":{"gitID":"alexawangzi"},"content":"        // level case insentive - accepted"},{"lineNumber":304,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":305,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + CASE_INSENSITIVE_LEVEL_BOB"},{"lineNumber":306,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":307,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":308,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":309,"author":{"gitID":"alexawangzi"},"content":"        // status case insentive - accepted"},{"lineNumber":310,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":311,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":312,"author":{"gitID":"alexawangzi"},"content":"                + CASE_INSENSITIVE_STATUS_BOB + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":313,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":314,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":315,"author":{"gitID":"alexawangzi"},"content":"        // role case insentive - accepted"},{"lineNumber":316,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":317,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":318,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + CASE_INSENSITIVE_ROLE_BOB"},{"lineNumber":319,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":320,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":322,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":323,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsShortcut_success() {"},{"lineNumber":324,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":325,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (eng) accepted"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":327,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_ENGLISH)"},{"lineNumber":328,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":329,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":330,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":331,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":332,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_ENGLISH + LEVEL_DESC_UPPER_SEC"},{"lineNumber":333,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":334,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":335,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":336,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":337,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (chi) accepted"},{"lineNumber":338,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":339,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_CHINESE)"},{"lineNumber":340,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":341,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":342,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":343,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":344,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":345,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":346,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":347,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":348,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (chem) accepted"},{"lineNumber":349,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":350,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_CHEMISTRY)"},{"lineNumber":351,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":352,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":353,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":354,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":355,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_CHEMISTRY + LEVEL_DESC_UPPER_SEC"},{"lineNumber":356,"author":{"gitID":"alexawangzi"},"content":"                + CASE_INSENSITIVE_STATUS_BOB + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":357,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":358,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":359,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (phy) accepted"},{"lineNumber":360,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":361,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_PHYSICS)"},{"lineNumber":362,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":363,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":364,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":365,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":366,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_PHYSICS + LEVEL_DESC_UPPER_SEC"},{"lineNumber":367,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":368,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":369,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":370,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (us) accepted"},{"lineNumber":371,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":372,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":373,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":374,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":375,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":376,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":377,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_UPPER_SEC"},{"lineNumber":378,"author":{"gitID":"alexawangzi"},"content":"                + CASE_INSENSITIVE_STATUS_BOB + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":379,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":380,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":381,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (ls) accepted"},{"lineNumber":382,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":383,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":384,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(LEVEL_LOWER_SEC).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":385,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":386,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":387,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":388,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_LOWER_SEC"},{"lineNumber":389,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":390,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":391,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":392,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (up) accepted"},{"lineNumber":393,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":394,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":395,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(LEVEL_UPPER_PRI).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":396,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":397,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":398,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":399,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_UPPER_PRI"},{"lineNumber":400,"author":{"gitID":"alexawangzi"},"content":"                + CASE_INSENSITIVE_STATUS_BOB + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":401,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":402,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":403,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (lp) accepted"},{"lineNumber":404,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":405,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":406,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(LEVEL_LOWER_PRI).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":407,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":408,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":409,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":410,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_LOWER_PRI"},{"lineNumber":411,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":412,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":413,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":414,"author":{"gitID":"alexawangzi"},"content":"        // role short cut (t) accepted"},{"lineNumber":415,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":416,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":417,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB).withRole(ROLE_TUTOR)"},{"lineNumber":418,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":419,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":420,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":421,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":422,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_SHORTCUT_TUTOR"},{"lineNumber":423,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":424,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":425,"author":{"gitID":"alexawangzi"},"content":"        // role short cut (s) accepted"},{"lineNumber":426,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":427,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":428,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":429,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":430,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":431,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":432,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":433,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_SHORTCUT_STUDENT"},{"lineNumber":434,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":435,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":436,"author":{"gitID":"alexawangzi"},"content":"        // status short cut (um) accepted"},{"lineNumber":437,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":438,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":439,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(STATUS_UNMATCHED).withPrice(VALID_PRICE_BOB)"},{"lineNumber":440,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":441,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":442,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":443,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":444,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_SHORTCUT_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":445,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":446,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":447,"author":{"gitID":"alexawangzi"},"content":"        // status short cut (m) accepted"},{"lineNumber":448,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":449,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":450,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(STATUS_MATCHED).withPrice(VALID_PRICE_BOB)"},{"lineNumber":451,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB)"},{"lineNumber":452,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":453,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":454,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":455,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":456,"author":{"gitID":"alexawangzi"},"content":"                + STATUS_SHORTCUT_MATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":457,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":458,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":459,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":460,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":461,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsShortcutAndCaseInsensitive_success() {"},{"lineNumber":462,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":463,"author":{"gitID":"alexawangzi"},"content":"        // using shortcuts in cae insenstive fashion - accepted"},{"lineNumber":464,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":465,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_ENGLISH)"},{"lineNumber":466,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":467,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB)"},{"lineNumber":468,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":469,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":470,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":471,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + CASE_INSENSITIVE_SUBJECT_SHORTCUT_ENGLISH"},{"lineNumber":472,"author":{"gitID":"alexawangzi"},"content":"                + CASE_INSENSITIVE_LEVEL_SHORTCUT_UPPER_SEC + CASE_INSENSITIVE_STATUS_SHORTCUT_UNMATCHED"},{"lineNumber":473,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + CASE_INSENSITIVE_ROLE_SHORTCUT_TUTOR"},{"lineNumber":474,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":475,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":476,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":477,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":295,"Aussiroth":53,"-":130}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"Husband\";"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"Friend\";"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"Unused\";"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_ENGLISH \u003d \"english\";"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_CHINESE \u003d \"chinese\";"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_CHEMISTRY \u003d \"chemistry\";"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_PHYSICS \u003d \"physics\";"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_SUBJECT_AMY \u003d \"math\";"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_SUBJECT_BOB \u003d \"english\";"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_LEVEL_AMY \u003d \"lower Sec\";"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_LEVEL_BOB \u003d \"upper Sec\";"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_STATUS_BOB \u003d \"not matched\";"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_PRICE_BOB \u003d \"113\";"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_ROLE_BOB \u003d \"tutor\";"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_LOWER_SEC \u003d \"lower Sec\";"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_UPPER_SEC \u003d \"upper Sec\";"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_LOWER_PRI \u003d \"lower Pri\";"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_UPPER_PRI \u003d \"upper Pri\";"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_TUTOR \u003d \"tutor\";"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_STUDENT \u003d \"student\";"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"    public static final String PRICE_AMY \u003d \"98\";"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"    public static final String PRICE_BOB \u003d \"113\";"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_UNMATCHED \u003d \"not Matched\";"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_MATCHED \u003d \"matched\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"-1\"; //negative number"},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT + \"fake news\"; //not a listed subject"},{"lineNumber":88,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_LEVEL_DESC \u003d \" \" + PREFIX_LEVEL + \"kindergarden\"; //not a listed level"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"teacher\"; // \u0027teacher\u0027 not allowed in tags"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + \"veryverymatched\"; //not a listed status"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_DESC_ENGLISH \u003d \" \" + PREFIX_SUBJECT + \"english\";"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_DESC_CHINESE \u003d \" \" + PREFIX_SUBJECT + \"chinese\";"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_DESC_LOWER_SEC \u003d \" \" + PREFIX_LEVEL + \"lower Sec\";"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_DESC_UPPER_SEC \u003d \" \" + PREFIX_LEVEL + \"upper Sec\";"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + \"math\";"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + \"english\";"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_DESC_AMY \u003d \" \" + PREFIX_LEVEL + \"lower Sec\";"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_DESC_BOB \u003d \" \" + PREFIX_LEVEL + \"upper Sec\";"},{"lineNumber":101,"author":{"gitID":"Aussiroth"},"content":"    public static final String PRICE_DESC_AMY \u003d \" \" + PREFIX_PRICE + \"98\";"},{"lineNumber":102,"author":{"gitID":"Aussiroth"},"content":"    public static final String PRICE_DESC_BOB \u003d \" \" + PREFIX_PRICE + \"113\";"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + \"student\";"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + \"tutor\";"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_DESC_STUDENT \u003d \" \" + PREFIX_ROLE + \"student\";"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_DESC_TUTOR \u003d \" \" + PREFIX_ROLE + \"tutor\";"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_DESC_UNMATCHED \u003d \" \" + PREFIX_STATUS + \"not matched\";"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_DESC_MATCHED \u003d \" \" + PREFIX_STATUS + \"matched\";"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_NAME_BOB \u003d \" \" + PREFIX_NAME + \"bOb cHoO\";"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_EMAIL_BOB \u003d \" \" + PREFIX_EMAIL + \"bOb@eXaMpLe.CoM\";"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_ADDRESS_BOB  \u003d \" \" + PREFIX_ADDRESS + \"bLOck 123, BoBBy StReEt 3\";"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_SUBJECT_BOB \u003d \" \" + PREFIX_SUBJECT + \"ChiNESe\";"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_LEVEL_BOB \u003d \" \" + PREFIX_LEVEL + \"uPPeR seC\";"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_STATUS_BOB \u003d \" \" + PREFIX_STATUS + \"nOt MAtCHEd\";"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_ROLE_BOB \u003d \" \" + PREFIX_ROLE + \"TutOR\";"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_CHINESE \u003d \" \" + PREFIX_SUBJECT + \"chi\";"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_PHYSICS \u003d \" \" + PREFIX_SUBJECT + \"phy\";"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_CHEMISTRY \u003d \" \" + PREFIX_SUBJECT + \"chem\";"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_ENGLISH \u003d \" \" + PREFIX_SUBJECT + \"eng\";"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_UPPER_SEC \u003d \" \" + PREFIX_LEVEL + \"us\";"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_LOWER_SEC \u003d \" \" + PREFIX_LEVEL + \"ls\";"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_UPPER_PRI \u003d \" \" + PREFIX_LEVEL + \"up\";"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_LOWER_PRI \u003d \" \" + PREFIX_LEVEL + \"lp\";"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_SHORTCUT_UNMATCHED \u003d \" \" + PREFIX_STATUS + \"nm\";"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_SHORTCUT_MATCHED \u003d \" \" + PREFIX_STATUS + \"m\";"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_SHORTCUT_TUTOR \u003d \" \" + PREFIX_ROLE + \"t\";"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_SHORTCUT_STUDENT \u003d \" \" + PREFIX_ROLE + \"s\";"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_SUBJECT_SHORTCUT_ENGLISH \u003d \" \" + PREFIX_SUBJECT + \"eNg\";"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_LEVEL_SHORTCUT_UPPER_SEC \u003d \" \" + PREFIX_LEVEL + \"Us\";"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_STATUS_SHORTCUT_UNMATCHED \u003d \" \" + PREFIX_STATUS + \"nM\";"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"    public static final String   CASE_INSENSITIVE_ROLE_SHORTCUT_TUTOR \u003d \" \" + PREFIX_ROLE + \"T\";"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":179,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":68,"Aussiroth":13,"-":154}},{"path":"src/test/java/seedu/address/logic/commands/RemoveTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":" * {@code RemoveTagCommand}."},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"public class RemoveTagCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public void execute_removeValidTag_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.deleteTag(tagToDelete);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(removeTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    public void execute_removeInvalidTag_failure() throws Exception {"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(\"nonExistingTag\");"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_TAG);"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(removeTagCommand, model, expectedMessage);"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    public void executeUndoRedo_validTag_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        // delete -\u003e first tag deleted"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        removeTagCommand.execute();"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        undoRedoStack.push(removeTagCommand);"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        // undo -\u003e reverts addressbook back to previous state"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        // redo -\u003e same tag deleted again"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.deleteTag(tagToDelete);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    public void executeUndoRedo_invalidTag_failure() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(\"nonExistingTag\");"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_TAG);"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        // execution failed -\u003e removeTagCommand not pushed into undoRedoStack"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(removeTagCommand, model, expectedMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    private RemoveTagCommand prepareCommand(Tag tag) {"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(tag);"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        removeTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        return removeTagCommand;"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":51,"-":45}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    public void checkNameEquality() {"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        //test name against non-name type"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Name(\"Stutor\").equals(null));"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Name(\"Stutor\").equals(new Address(\"Stutor\")));"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if name string is the same"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Name(\"Stutor\").equals(new Name(\"Stutor\")));"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"    public void checkNameHashCode() {"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        Name name \u003d new Name(\"peter jack\");"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(name.hashCode() \u003d\u003d name.fullName.hashCode());"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        name \u003d new Name(\"12345\");"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(name.hashCode() \u003d\u003d name.fullName.hashCode());"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        name \u003d new Name(\"Capital Tan\");"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(name.hashCode() \u003d\u003d name.fullName.hashCode());"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":19,"-":41}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"    public void backupAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":"        String backupfilePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\" + \".backup\";"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"        //Save in backup file and read back"},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"        xmlAddressBookStorage.backupAddressBook(original);"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":"        ReadOnlyAddressBook backup \u003d xmlAddressBookStorage.readAddressBook(backupfilePath).get();"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"        assertEquals(original, new AddressBook(backup));"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":8,"-":129}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    public void checkPhoneEquality() {"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        //test phone against non-phone type"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Phone(\"91009222\").equals(null));"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Phone(\"91009222\").equals(new Address(\"91009222\")));"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if phone string is the same"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Phone(\"91009222\").equals(new Phone(\"91009222\")));"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"    public void checkPhoneHashCode() {"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        Phone phone \u003d new Phone(\"911\");"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(phone.hashCode() \u003d\u003d phone.value.hashCode());"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        phone \u003d new Phone(\"93121534\");"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(phone.hashCode() \u003d\u003d phone.value.hashCode());"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        phone \u003d new Phone(\"124293842033123\");"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(phone.hashCode() \u003d\u003d phone.value.hashCode());"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":19,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.TutorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validStudent, modelStub).execute();"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.feedbackToUser);"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(Arrays.asList(validStudent), modelStub.personsAdded);"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(modelStub.personsAdded.get(modelStub.personsAdded.size() - 1) instanceof Student);"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    public void execute_tutorAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        Tutor validTutor \u003d new TutorBuilder().build();"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validTutor, modelStub).execute();"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTutor), commandResult.feedbackToUser);"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(Arrays.asList(validTutor), modelStub.personsAdded);"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(modelStub.personsAdded.get(modelStub.personsAdded.size() - 1) instanceof Tutor);"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"        public void deleteTag(Tag tag) throws PersonNotFoundException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":36,"-":175}},{"path":"src/test/java/seedu/address/model/person/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"    public void checkEmailEquality() {"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"        //test email against non-email type"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Email(\"test@abc.com\").equals(null));"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Email(\"test@abc.com\").equals(new Address(\"test@abc.com\")));"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if email string is the same"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Email(\"test@abc.com\").equals(new Email(\"test@abc.com\")));"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"    public void checkEmailHashCode() {"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"        Email email \u003d new Email(\"PeterJack_1190@example.com\");"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(email.hashCode() \u003d\u003d email.value.hashCode());"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"        email \u003d new Email(\"test@localhost\");"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(email.hashCode() \u003d\u003d email.value.hashCode());"},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"        email \u003d new Email(\"peter_jack@very-very-very-long-example.com\");"},{"lineNumber":79,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(email.hashCode() \u003d\u003d email.value.hashCode());"},{"lineNumber":80,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":19,"-":62}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_PRICE \u003d \"-50\";"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_LEVEL \u003d \"kindergarden\";"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_SUBJECT \u003d \"fake news\";"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_STATUS \u003d \"very matched\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_SUBJECT \u003d BENSON.getSubject().toString();"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_LEVEL \u003d BENSON.getLevel().toString();"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_STATUS \u003d BENSON.getStatus().toString();"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_PRICE \u003d BENSON.getPrice().toString();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":119,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":130,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, invalidTags);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidLevel_throwsIllegalValueException() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":138,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, INVALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":140,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Level.MESSAGE_LEVEL_CONSTRAINTS;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullLevel_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, VALID_SUBJECT, null, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":148,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Level.class.getSimpleName());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidSubject_throwsIllegalValueException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":155,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, INVALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":157,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullSubject_throwsIllegalValueException() {"},{"lineNumber":163,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, null, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":165,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidPrice_throwsIllegalValueException() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":172,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"                        INVALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":174,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullPrice_throwsIllegalValueException() {"},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"                null, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":182,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":190,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, INVALID_STATUS, VALID_ROLE, VALID_TAGS);"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Status.MESSAGE_STATUS_CONSTRAINTS;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":198,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, null, VALID_ROLE, VALID_TAGS);"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"    public void testXmlAdaptedPersonEquality() {"},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson alice \u003d new XmlAdaptedPerson(ALICE);"},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson copy \u003d new XmlAdaptedPerson(ALICE);"},{"lineNumber":207,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(alice.equals(copy)); //check equality if values are equal"},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(alice.equals(ALICE)); //check not equal if type is different"},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":18,"Aussiroth":58,"-":135}},{"path":"src/test/java/seedu/address/model/person/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    public void checkAddressEquality() {"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        //test address against non-address type"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Address(\"Computing Drive\").equals(null));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Address(\"Computing Drive\").equals(new Name(\"Computing Drive\")));"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if address string is the same"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Address(\"Blk 456, Den Road, #01-355\").equals(new Address(\"Blk 456, Den Road, #01-355\")));"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    public void checkAddressHashCode() {"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        Address address \u003d new Address(\"Blk 456, Den Road, #01-355\");"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(address.hashCode() \u003d\u003d address.value.hashCode());"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        address \u003d new Address(\"-\");"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(address.hashCode() \u003d\u003d address.value.hashCode());"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"        address \u003d new Address(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\");"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(address.hashCode() \u003d\u003d address.value.hashCode());"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":20,"-":37}},{"path":"src/test/java/seedu/address/model/person/SubjectTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"public class SubjectTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Subject(null));"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Subject(invalidSubject));"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"    public void isValidPrice() {"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        // null subject"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubject(null));"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        // invalid subject"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Subject.isValidSubject(\"computer science\")); //subjects not in list"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Subject.isValidSubject(\"malay\"));"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        // valid subjects"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Subject.isValidSubject(\"math\"));"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Subject.isValidSubject(\"English\")); // check that case doesn\u0027t matter"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Subject.isValidSubject(\"chemistrY\"));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    public void checkSubjectEquality() {"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        //test name against non-name type"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Subject(\"math\").equals(null));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Subject(\"math\").equals(new Address(\"math\")));"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if name string is the same"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Subject(\"math\").equals(new Subject(\"math\")));"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"    public void checkSubjectHashCode() {"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        Subject subject \u003d new Subject(\"math\");"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(subject.hashCode() \u003d\u003d subject.value.hashCode());"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        subject \u003d new Subject(\"english\");"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(subject.hashCode() \u003d\u003d subject.value.hashCode());"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        subject \u003d new Subject(\"chemistry\");"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(subject.hashCode() \u003d\u003d subject.value.hashCode());"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":44,"-":12}},{"path":"src/test/java/seedu/address/model/person/StatusTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"public class StatusTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Status(null));"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_invalidStatus_throwsNumberFormatException() {"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"        String invalidStatus \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NumberFormatException.class, () -\u003e new Status(invalidStatus));"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"    public void isValidStatus() {"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        // invalid statuses"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Status.isValidStatus(\"notastatus\")); // not listed statuses"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Status.isValidStatus(\"somewhatmatched\"));"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        // valid status"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Status.isValidStatus(\"not Matched\"));"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Status.isValidStatus(\"matched\"));"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"    public void checkStatusEquality() {"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        //test status against non-status type"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Status(\"matched\").equals(null));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Status(\"matched\").equals(new Tag(\"matched\")));"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if status string is the same"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Status(\"matched\").equals(new Status(\"matched\")));"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    public void checkStatusHashCode() {"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        Status status \u003d new Status(\"not Matched\");"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(status.hashCode() \u003d\u003d status.value.hashCode());"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        status \u003d new Status(\"matched\");"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(status.hashCode() \u003d\u003d status.value.hashCode());"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":42,"-":10}},{"path":"src/test/java/seedu/address/model/person/PriceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"public class PriceTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_invalidPrice_throwsNumberFormatException() {"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"        String invalidPrice \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NumberFormatException.class, () -\u003e new Price(invalidPrice));"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"    public void isValidPrice() {"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        // invalid prices"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Price.isValidPrice(\"-5\")); // negative numbers"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Price.isValidPrice(\"-100\"));"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        // valid prices"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Price.isValidPrice(\"25\"));"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Price.isValidPrice(\"5\")); // single digit"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Price.isValidPrice(\"123456\")); // large number"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    public void checkPriceEquality() {"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        //test price against non-price type"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Price(\"100\").equals(null));"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Price(\"100\").equals(new Tag(\"100\")));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if price string is the same"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Price(\"100\").equals(new Price(\"100\")));"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    public void checkPriceHashCode() {"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        Price price \u003d new Price(\"25\");"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(price.hashCode() \u003d\u003d price.value.hashCode());"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        price \u003d new Price(\"5\");"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(price.hashCode() \u003d\u003d price.value.hashCode());"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        price \u003d new Price(\"123456\");"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(price.hashCode() \u003d\u003d price.value.hashCode());"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":45,"-":10}},{"path":"src/test/java/seedu/address/model/person/LevelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"public class LevelTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Level(null));"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_invalidLevel_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"        String invalidLevel \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Level(invalidLevel));"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"    public void isValidLevel() {"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"        // null level"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Level.isValidLevel(null));"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        // invalid levels"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Level.isValidLevel(\"JC\")); // not accepted levels"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Level.isValidLevel(\"middle Sec\"));"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        // valid levels"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"upper Sec\"));"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"lower Pri\"));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"Upper pri\")); //check case insensitive"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"Lower sec\"));"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"    public void checkLevelEquality() {"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        //test level against non-level type"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Level(\"upper Sec\").equals(null));"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Level(\"upper Sec\").equals(new Tag(\"upper Sec\")));"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if level string is the same"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Level(\"upper Sec\").equals(new Level(\"upper Sec\")));"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    public void checkLevelHashCode() {"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        Level level \u003d new Level(\"upper sec\");"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(level.hashCode() \u003d\u003d level.value.hashCode());"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        level \u003d new Level(\"lower sec\");"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(level.hashCode() \u003d\u003d level.value.hashCode());"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        level \u003d new Level(\"lower pri\");"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(level.hashCode() \u003d\u003d level.value.hashCode());"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":48,"-":10}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class TagTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null tag name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"    public void isValidTagType() {"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        //incorrect string"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Tag.isValidTagType(\"NOTATYPE\"));"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        //correct type"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Tag.isValidTagType(\"SUBJECT\"));"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Tag.isValidTagType(\"STATUS\"));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":12,"-":26}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setPrice(person.getPrice());"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setSubject(person.getSubject());"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setLevel(person.getLevel());"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setStatus(person.getStatus());"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        descriptor.setRole(person.getRole());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Status} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"    public EditPersonDescriptorBuilder withStatus(String status) {"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"        descriptor.setStatus(new Status(status));"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":10,"Aussiroth":4,"-":87}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    private final AddressBook addressBookWithAmyandBob \u003d"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"            new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":84,"content":"     * @@author yamgent"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"     * Reused from https://github.com/se-edu/"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"     * addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    public void removeTag_nonExistingTag_addressBookUnchanged() throws PersonNotFoundException {"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        addressBookWithAmyandBob.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(expectedAddressBook, addressBookWithAmyandBob);"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":96,"content":"     * @@author yamgent"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"     * Reused from https://github.com/se-edu/"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"     * addressbook-level4/pull/790/"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"     * commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws PersonNotFoundException {"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"        addressBookWithAmyandBob.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags().build();"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder()"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"                .withPerson(amyWithoutFriendTag).withPerson(bobWithoutFriendTag).build();"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(expectedAddressBook, addressBookWithAmyandBob);"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"alexawangzi":39,"-":93}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"     * Returns an add command string, using the add command alias, for adding the (@code person)."},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    public static String getAddCommandAliased(Person person) {"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetails(person);"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_PRICE + person.getPrice().value + \" \");"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_SUBJECT + person.getSubject().value + \" \");"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_LEVEL + person.getLevel().value + \" \");"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_STATUS + person.getStatus().value + \" \");"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        sb.append(PREFIX_ROLE + person.getRole().value + \" \");"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":52,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"Aussiroth":15,"-":38}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_PRICE \u003d \"100\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"English\";"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_LEVEL \u003d \"Lower Sec\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_STATUS \u003d \"Not Matched\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_ROLE \u003d \"Student\";"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAGS \u003d \"Friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    private Price price;"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    private Subject subject;"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    private Level level;"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    private Role role;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        level \u003d new Level(DEFAULT_LEVEL);"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        price \u003d personToCopy.getPrice();"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d personToCopy.getSubject();"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        level \u003d personToCopy.getLevel();"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        status \u003d personToCopy.getStatus();"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        role \u003d personToCopy.getRole();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withLevel(String level) {"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d new Level(level);"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withSubject(String subject) {"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withStatus(String status) {"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withPrice(String price) {"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building."},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withRole(String role) {"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":155,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"Aussiroth"},"content":"     * Sets the required attribute tags for the person"},{"lineNumber":157,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"Aussiroth"},"content":"    private void setTags() {"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(price.toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":161,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(subject.toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":162,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(level.toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":163,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(status.toString(), Tag.AllTagTypes.STATUS));"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"        tags.add(new Tag(role.toString(), Tag.AllTagTypes.ROLE));"},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":166,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":168,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"Aussiroth"},"content":"     * Builds a person based off the attributes in this class"},{"lineNumber":170,"author":{"gitID":"Aussiroth"},"content":"     * @return Person with set attributes"},{"lineNumber":171,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"        setTags();"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":"        return new Person(name, phone, email, address, price, subject, level, status, role, tags);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":70,"Aussiroth":15,"-":92}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_AMY;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_BOB;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_STUDENT;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_TUTOR;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_UNMATCHED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_AMY;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"85355255\")"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"50\").withSubject(\"math\").withStatus(\"not Matched\").withLevel(\"lower Sec\")"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Student\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"150\").withSubject(\"english\").withStatus(\"not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Student\").build();"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"20\").withSubject(\"physics\").withStatus(\"not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Student\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"70\").withSubject(\"chemistry\").withStatus(\"not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Tutor\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"210\").withSubject(\"math\").withStatus(\"not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Tutor\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"99\").withSubject(\"english\").withStatus(\"not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Tutor\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"320\").withSubject(\"chinese\").withStatus(\"not Matched\").withLevel(\"lower Sec\")"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Tutor\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withSubject(\"math\")"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"upper Sec\").withPrice(\"1234\").withStatus(\"not Matched\")"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Tutor\").withTags(\"Friend\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\")"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"upper Sec\").withPrice(\"4321\").withStatus(\"not Matched\")"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Tutor\").withTags(\"Friend\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"            .withPrice(PRICE_AMY).withSubject(VALID_SUBJECT_AMY).withLevel(VALID_LEVEL_AMY).withStatus(STATUS_UNMATCHED)"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"            .withRole(ROLE_STUDENT)"},{"lineNumber":80,"author":{"gitID":"Aussiroth"},"content":"            .build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"            .withPrice(PRICE_BOB).withLevel(VALID_LEVEL_BOB).withSubject(VALID_SUBJECT_BOB).withStatus(STATUS_UNMATCHED)"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"            .withRole(ROLE_TUTOR)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":27,"Aussiroth":17,"-":65}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"     * Inputs text in the command box."},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    public void setInput(String input) {"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        click();"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(input));"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"        /* if (getRootNode().getCaretPosition() \u003d\u003d 0) {"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"            guiRobot.interact(() -\u003e getRootNode().setText(input));"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"            guiRobot.interact(() -\u003e getRootNode().insertText(getRootNode().getCaretPosition(), input));"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"        } */"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":13,"-":46}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"    //private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"    /*"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    }*/"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":4,"-":48}},{"path":"src/test/java/guitests/guihandles/BrowserPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"    //private static final String ROLE_FIELD_ID \u003d \"#role\";"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"    private static final String STATUS_FIELD_ID \u003d \"#status\";"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"    private static final String SUBJECT_FIELD_ID \u003d \"#subject\";"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    private static final String LEVEL_FIELD_ID \u003d \"#level\";"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"    private static final String PRICE_FIELD_ID \u003d \"#price\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"    private final Label nameLabel;"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"    private final Label addressLabel;"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"    private final Label phoneLabel;"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    private final Label emailLabel;"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"    //private final Label roleLabel;"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    private final Label statusLabel;"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"    private final Label subjectLabel;"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"    private final Label levelLabel;"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    private final Label priceLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle(Node browserPanelNode) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"        //this.roleLabel \u003d getChildNode(ROLE_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"        this.statusLabel \u003d getChildNode(STATUS_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        this.subjectLabel \u003d getChildNode(SUBJECT_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"        this.levelLabel \u003d getChildNode(LEVEL_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"        this.priceLabel \u003d getChildNode(PRICE_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"    public String getName() {"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"        return nameLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    public String getAddress() {"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"        return addressLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"    public String getPhone() {"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"        return phoneLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"    public String getEmail() {"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        return emailLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"    /*public String getRole() {"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"        return roleLabel.getText();"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"    }*/"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"    public String getStatus() {"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        return statusLabel.getText();"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"    public String getSubject() {"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"        return subjectLabel.getText();"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"    public String getLevel() {"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"        return levelLabel.getText();"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"    public String getPrice() {"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"        return priceLabel.getText();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":55,"-":25}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"    private GridPane grid;"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    private Label name;"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"    private Label id;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"    private Label phone;"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"    private Label address;"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    private Label email;"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"    private Label role;"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"    private Label status;"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"    private Label subject;"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"    private Label level;"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"    private Label price;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        name.setText(\"\");"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"        grid.setVisible(false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"     * Loads a {@code person}\u0027s details into the browser panel."},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"    private void loadPersonDetails(Person person) {"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"        grid.setVisible(true);"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        status.setText(person.getStatus().value);"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        subject.setText(person.getSubject().value);"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"        level.setText(person.getLevel().value);"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        price.setText(\"$\" + person.getPrice().value + \" / hr\");"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"        if (person.getTags().contains(new Tag(\"Student\"))"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"                || person.getTags().contains(new Tag(\"student\"))) {"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"            role.setText(\"Student\");"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"        } else if (person.getTags().contains(new Tag(\"Tutor\"))"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"                || person.getTags().contains(new Tag(\"tutor\"))) {"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"            role.setText(\"Tutor\");"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"        /*if (person.getPhone().value \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"            phone.setText(\" - \");"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"            phone.setText(person.getPhone().value);"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"        if (person.getAddress().value \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"            address.setText(\" - \");"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"            address.setText(person.getAddress().value);"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"        if (person.getEmail().value \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"            email.setText(\" - \");"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"            email.setText(person.getEmail().value);"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"        if (person.getStatus().value \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"            status.setText(\" - \");"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"            status.setText(person.getStatus().value);"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"        if (person.getSubject().value \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"            subject.setText(\" - \");"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":"            subject.setText(person.getSubject().value);"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":"        if (person.getLevel().value \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"            level.setText(\" - \");"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":"            level.setText(person.getLevel().value);"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":"        if (person.getPrice().value \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"            price.setText(\" - \");"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"            price.setText(\"$\" + person.getPrice().value + \" / hr\");"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"        if (person.getTags().contains(new Tag(\"Student\"))"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"            || person.getTags().contains(new Tag(\"student\"))) {"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"            role.setText(\"Student\");"},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":"        } else if (person.getTags().contains(new Tag(\"Tutor\"))"},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"                   || person.getTags().contains(new Tag(\"tutor\"))) {"},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"            role.setText(\"Tutor\");"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":"            role.setText(\" - \");"},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"        }*/"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"        loadPersonDetails(event.getNewSelection().person);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":93,"-":37}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"    private boolean canTab \u003d false;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"        case TAB:"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"            keyEvent.consume();"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"            autofillCommand();"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"        case DELETE:"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"            keyEvent.consume();"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"            deletePreviousPrefix();"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"     * Sets {@code CommandBox}\u0027s text field with input format and"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"     * if next field is present, it positions the caret to the next field."},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"    private void autofillCommand() {"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"        String input \u003d commandTextField.getText();"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"        int nextCaretPosition \u003d -1;"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"        boolean isFirstTime \u003d false; // set this to check for edit command"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"        // first time tab is pressed"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"        switch (input) {"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"        case AddCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(AddCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + PREFIX_PHONE + \" \""},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_PRICE + \" \" + PREFIX_SUBJECT + \" \""},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_LEVEL + \" \" + PREFIX_STATUS + \" \" + PREFIX_ROLE);"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"            canTab \u003d true;"},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":"        case EditCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(EditCommand.COMMAND_WORD + \" 1 \" + PREFIX_NAME + \" \" + PREFIX_PHONE + \" \""},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_PRICE + \" \" + PREFIX_SUBJECT + \" \""},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_LEVEL + \" \" + PREFIX_STATUS + \" \" + PREFIX_ROLE);"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":"            canTab \u003d false;"},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"            isFirstTime \u003d true;"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"        case SelectCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"            canTab \u003d false;"},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"        case DeleteCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"            canTab \u003d false;"},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"        default:"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"            // no autofill"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"        // subsequent times tab is pressed"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"        if (canTab) {"},{"lineNumber":130,"author":{"gitID":"sherlynng"},"content":"            nextCaretPosition \u003d findNextField();"},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"            if (nextCaretPosition !\u003d -1) {"},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"                commandTextField.positionCaret(nextCaretPosition);"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"        if (isFirstTime) {"},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"            canTab \u003d true;"},{"lineNumber":137,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":140,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"sherlynng"},"content":"     * Deletes the previous prefix from current caret position and"},{"lineNumber":142,"author":{"gitID":"sherlynng"},"content":"     * if next field is present, it positions the caret to the next field."},{"lineNumber":143,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"sherlynng"},"content":"    private void deletePreviousPrefix() {"},{"lineNumber":145,"author":{"gitID":"sherlynng"},"content":"        String text \u003d commandTextField.getText();"},{"lineNumber":146,"author":{"gitID":"sherlynng"},"content":"        int caretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":147,"author":{"gitID":"sherlynng"},"content":"        int deleteStart \u003d text.lastIndexOf(\" \", caretPosition - 1);"},{"lineNumber":148,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":149,"author":{"gitID":"sherlynng"},"content":"        if (deleteStart !\u003d -1) {"},{"lineNumber":150,"author":{"gitID":"sherlynng"},"content":"            commandTextField.deleteText(deleteStart, caretPosition);"},{"lineNumber":151,"author":{"gitID":"sherlynng"},"content":"            commandTextField.positionCaret(findNextField());"},{"lineNumber":152,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":155,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"sherlynng"},"content":"     * Finds the next input field from current caret position and"},{"lineNumber":157,"author":{"gitID":"sherlynng"},"content":"     * if next field is present, it positions the caret to the next field."},{"lineNumber":158,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"sherlynng"},"content":"    private int findNextField() {"},{"lineNumber":160,"author":{"gitID":"sherlynng"},"content":"        String text \u003d commandTextField.getText();"},{"lineNumber":161,"author":{"gitID":"sherlynng"},"content":"        int caretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":162,"author":{"gitID":"sherlynng"},"content":"        int nextFieldPosition \u003d text.indexOf(\"/\", caretPosition);"},{"lineNumber":163,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":164,"author":{"gitID":"sherlynng"},"content":"        return nextFieldPosition + 1;"},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":"     * Positions the caret to index position"},{"lineNumber":169,"author":{"gitID":"sherlynng"},"content":"     * and selects the index to be edited."},{"lineNumber":170,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"sherlynng"},"content":"    private void selectIndexToEdit() {"},{"lineNumber":172,"author":{"gitID":"sherlynng"},"content":"        String text \u003d commandTextField.getText();"},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":"        int indexPosition \u003d text.indexOf(\"1\") + 1;"},{"lineNumber":174,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":175,"author":{"gitID":"sherlynng"},"content":"        commandTextField.positionCaret(indexPosition);"},{"lineNumber":176,"author":{"gitID":"sherlynng"},"content":"        commandTextField.selectBackward();"},{"lineNumber":177,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":244,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":117,"-":150}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // use hash code of tag name to generate a random color"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"     * Returns the color style for {@code tag}."},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"     * Uses the tagType value inside the Tag to determine the colour."},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"    private String getTagColorStyleFor(Tag tag) {"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"        switch (tag.tagType) {"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"        case SUBJECT:"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[0]; //subject is teal"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"        case LEVEL:"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[1]; //level is red"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        case STATUS:"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[2]; //status is yellow"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        case PRICE:"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[3]; //price is blue"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"        //fall through to default"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"        default:"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[8]; //all non-attribute are black"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void initTags(Person person) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":25,"-":80}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d \"The tag provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_USAGE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"                        PREFIX_PRICE, PREFIX_SUBJECT, PREFIX_LEVEL, PREFIX_STATUS, PREFIX_ROLE, PREFIX_TAG);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"                PREFIX_PRICE, PREFIX_SUBJECT, PREFIX_LEVEL, PREFIX_ROLE, PREFIX_STATUS)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE, MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"            Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).get();"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"            Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).get();"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"            Level level \u003d ParserUtil.parseLevel(argMultimap.getValue(PREFIX_LEVEL)).get();"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"            Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS)).get();"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"            Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE)).get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"            //        if (!tagList.contains(new Tag(\"Student\")) \u0026\u0026 !tagList.contains(new Tag(\"Tutor\"))) {"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"            //            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"            // + MESSAGE_USAGE, MESSAGE_USAGE));"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"            // }"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"            //Add required attributes to the tag list as in documentation"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"            tagList.add(new Tag(price.toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"            tagList.add(new Tag(subject.toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"            tagList.add(new Tag(level.toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"            tagList.add(new Tag(status.toString(), Tag.AllTagTypes.STATUS));"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"            tagList.add(new Tag(role.toString(), Tag.AllTagTypes.ROLE));"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"            Person person \u003d new Person(name, phone, email, address, price, subject, level, status, role, tagList);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":32,"Aussiroth":5,"-":61}},{"path":"src/test/java/seedu/address/testutil/TutorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"public class TutorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@example.com\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_PRICE \u003d \"100\";"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"english\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_LEVEL \u003d \"lower Sec\";"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_STATUS \u003d \"not Matched\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAGS \u003d \"tutor\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    private Price price;"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    private Subject subject;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    private Level level;"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        level \u003d new Level(DEFAULT_LEVEL);"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder(Person personToCopy) {"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        super();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withName(String name) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withTags(String ... tags) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withAddress(String address) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withPhone(String phone) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withEmail(String email) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withLevel(String level) {"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d new Level(level);"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withSubject(String subject) {"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withStatus(String status) {"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withPrice(String price) {"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":134,"author":{"gitID":"Aussiroth"},"content":"    public void setTags() {"},{"lineNumber":135,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(price.toString()));"},{"lineNumber":136,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(subject.toString()));"},{"lineNumber":137,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(level.toString()));"},{"lineNumber":138,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(status.toString()));"},{"lineNumber":139,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"     * Builds a stutor based off the attributes in this class"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"     * @return Tutor with set attributes"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"    public Tutor build() {"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"        setTags();"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"        return new Tutor(name, phone, email, address, price, subject, level, status, tags);"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":71,"sherlynng":1,"Aussiroth":7,"-":71}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListStudentCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListTutorCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        case AddCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        case EditCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        case SelectCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        case DeleteCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"        case ClearCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"Aussiroth"},"content":"        case FindCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"        case ListCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case ListStudentCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case ListStudentCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new ListStudentCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case ListTutorCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case ListTutorCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new ListTutorCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":"        case HistoryCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"        case UndoCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"        case RedoCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"        case RemoveTagCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"        case RemoveTagCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"            return new RemoveTagCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"Aussiroth":10,"-":106}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"$/\");"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"sub/\");"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_LEVEL \u003d new Prefix(\"lvl/\");"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"stat/\");"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"-":15}},{"path":"src/test/java/seedu/address/testutil/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"public class StudentBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@example.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_PRICE \u003d \"100\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"english\";"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_LEVEL \u003d \"lower Sec\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_STATUS \u003d \"not Matched\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_ROLE \u003d \"student\";"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAGS \u003d \"friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    private Price price;"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    private Subject subject;"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    private Level level;"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    private Role role;"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        level \u003d new Level(DEFAULT_LEVEL);"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder(Person personToCopy) {"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"       super();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withLevel(String level) {"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d new Level(level);"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withSubject(String subject) {"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withStatus(String status) {"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withPrice(String price) {"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building."},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withRole(String role) {"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":146,"author":{"gitID":"Aussiroth"},"content":"    public void setTags() {"},{"lineNumber":147,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(price.toString()));"},{"lineNumber":148,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(subject.toString()));"},{"lineNumber":149,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(level.toString()));"},{"lineNumber":150,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(status.toString()));"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        tags.add(new Tag(role.toString()));"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"     * Builds a student based off the attributes in this class"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"     * @return Student with set attributes"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"    public Student build() {"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"        setTags();"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"        return new Student(name, phone, email, address, price, subject, level, status, tags);"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":88,"sherlynng":1,"Aussiroth":5,"-":69}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"        return new Email(trimmedEmail.toLowerCase());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String price} into a {@code Price}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"    public static Price parsePrice(String price) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(price);"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"        String trimmedPrice \u003d price.trim();"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        if (!Price.isValidPrice(trimmedPrice)) {"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"        return new Price(trimmedPrice);"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e} if {@code price} is present."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cPrice\u003e parsePrice(Optional\u003cString\u003e price) throws IllegalValueException {"},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(price);"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":"        return price.isPresent() ? Optional.of(parsePrice(price.get())) : Optional.empty();"},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String subject} into a {@code Subject}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"    public static Subject parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(subject);"},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":180,"author":{"gitID":"alexawangzi"},"content":"        if (!Subject.isValidSubject(trimmedSubject)) {"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"alexawangzi"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":186,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e subject} into an {@code Optional\u003cSubject\u003e} if {@code subject} is present."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cSubject\u003e parseSubject(Optional\u003cString\u003e subject) throws IllegalValueException {"},{"lineNumber":191,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(subject);"},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":195,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String level} into a {@code Level}."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":199,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code level} is invalid."},{"lineNumber":200,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"alexawangzi"},"content":"    public static Level parseLevel(String level) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(level);"},{"lineNumber":203,"author":{"gitID":"alexawangzi"},"content":"        String trimmedLevel \u003d level.trim();"},{"lineNumber":204,"author":{"gitID":"alexawangzi"},"content":"        if (!Level.isValidLevel(trimmedLevel)) {"},{"lineNumber":205,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"alexawangzi"},"content":"        return new Level(trimmedLevel);"},{"lineNumber":208,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":210,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e level} into an {@code Optional\u003cLevel\u003e} if {@code level} is present."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cLevel\u003e parseLevel(Optional\u003cString\u003e level) throws IllegalValueException {"},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(level);"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":"        return level.isPresent() ? Optional.of(parseLevel(level.get())) : Optional.empty();"},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":219,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String status} into a {@code Status}."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":223,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code status} is invalid."},{"lineNumber":224,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"alexawangzi"},"content":"    public static Status parseStatus(String status) throws IllegalValueException {"},{"lineNumber":226,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(status);"},{"lineNumber":227,"author":{"gitID":"alexawangzi"},"content":"        String trimmedStatus \u003d status.trim();"},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":"        if (!Status.isValidStatus(status)) {"},{"lineNumber":229,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":230,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"alexawangzi"},"content":"        return new Status(trimmedStatus);"},{"lineNumber":232,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":234,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e status} into an {@code Optional\u003cStatus\u003e} if {@code status} is present."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cStatus\u003e parseStatus(Optional\u003cString\u003e status) throws IllegalValueException {"},{"lineNumber":239,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(status);"},{"lineNumber":240,"author":{"gitID":"alexawangzi"},"content":"        return status.isPresent() ? Optional.of(parseStatus(status.get())) : Optional.empty();"},{"lineNumber":241,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":243,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":244,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":245,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String role} into a {@code Role}."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":249,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code role} is invalid."},{"lineNumber":250,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"alexawangzi"},"content":"    public static Role parseRole(String role) throws IllegalValueException {"},{"lineNumber":252,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(role);"},{"lineNumber":253,"author":{"gitID":"alexawangzi"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":254,"author":{"gitID":"alexawangzi"},"content":"        if (!Role.isValidRole(role)) {"},{"lineNumber":255,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":256,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"alexawangzi"},"content":"        return new Role(trimmedRole);"},{"lineNumber":258,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":260,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e role} into an {@code Optional\u003cRole\u003e} if {@code role} is present."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cRole\u003e parseRole(Optional\u003cString\u003e role) throws IllegalValueException {"},{"lineNumber":265,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(role);"},{"lineNumber":266,"author":{"gitID":"alexawangzi"},"content":"        return role.isPresent() ? Optional.of(parseRole(role.get())) : Optional.empty();"},{"lineNumber":267,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":286,"author":{"gitID":"Aussiroth"},"content":"     * Each tag will have the {@code Tags.allTagType} value set to DEFAULT."},{"lineNumber":287,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":108,"Aussiroth":1,"-":187}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"                        PREFIX_PRICE, PREFIX_SUBJECT, PREFIX_LEVEL, PREFIX_STATUS, PREFIX_ROLE, PREFIX_TAG);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"            ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).ifPresent(editPersonDescriptor::setPrice);"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"            ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubject);"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"            ParserUtil.parseLevel(argMultimap.getValue(PREFIX_LEVEL)).ifPresent(editPersonDescriptor::setLevel);"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"            ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS)).ifPresent(editPersonDescriptor::setStatus);"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"            ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE)).ifPresent(editPersonDescriptor::setRole);"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"Aussiroth":8,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_PRICE + \"BUDGET \""},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_SUBJECT + \"SUBJECT \""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_LEVEL + \"LEVEL \""},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_STATUS + \"STATUS \""},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_ROLE + \"ROLE\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_PRICE + \"50 \""},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_SUBJECT + \"Math \""},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_LEVEL + \"Lower Sec \""},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_STATUS + \"Not Matched \""},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_ROLE + \"Student\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":15,"Aussiroth":1,"-":65}},{"path":"src/main/java/seedu/address/logic/parser/RemoveTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Parses input arguments and creates a new RemoveTagCommand object"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"     * Parses the given {@code String} of arguments in the context of the DemoveTagCommand"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     * and returns an RemoveTagCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public RemoveTagCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"            Tag tag \u003d ParserUtil.parseTag(args);"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            return new RemoveTagCommand(tag);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":17,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":36}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        this.tagName \u003d tagName + \",\" + Tag.AllTagTypes.DEFAULT.toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        tagName \u003d source.tagName + \",\" + source.tagType.toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        String[] checkTagNameType \u003d tagName.split(\",\");"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        if (!Tag.isValidTagName(checkTagNameType[0])) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        //additional check if the comma exists"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        if (checkTagNameType.length \u003d\u003d 1) {"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"            logger.warning(\"Could not find tag type in file. Initialising it as DEFAULT type.\");"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"            return new Tag(checkTagNameType[0]);"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        if (!Tag.isValidTagType(checkTagNameType[1])) {"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"            logger.warning(\"Tag Type in file is not recognised. Initialising it as DEFAULT type.\");"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"            checkTagNameType[1] \u003d Tag.AllTagTypes.DEFAULT.toString();"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"        return new Tag(checkTagNameType[0], Tag.AllTagTypes.valueOf(checkTagNameType[1]));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":18,"-":58}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to a fixed temporary storage."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":4,"-":47}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        logger.fine(\"Attempting to write to backup file\");"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":6,"-":92}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"e\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"Aussiroth"},"content":"    private static Person createEditedPerson("},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"            Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        Price updatedPrice \u003d editPersonDescriptor.getPrice().orElse(personToEdit.getPrice());"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        Subject updatedSubject \u003d editPersonDescriptor.getSubject().orElse(personToEdit.getSubject());"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"        Level updatedLevel \u003d editPersonDescriptor.getLevel().orElse(personToEdit.getLevel());"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"        Status updatedStatus \u003d editPersonDescriptor.getStatus().orElse(personToEdit.getStatus());"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"        Role updatedRole \u003d editPersonDescriptor.getRole().orElse(personToEdit.getRole());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"Aussiroth"},"content":"        //create a new modifiable set of tags"},{"lineNumber":125,"author":{"gitID":"Aussiroth"},"content":"        Set\u003cTag\u003e attributeTags \u003d new HashSet\u003c\u003e(updatedTags);"},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":128,"author":{"gitID":"Aussiroth"},"content":"        //clean out old person\u0027s attribute tags, then add the new ones"},{"lineNumber":129,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.remove(new Tag(personToEdit.getPrice().toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":130,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.remove(new Tag(personToEdit.getLevel().toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":131,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.remove(new Tag(personToEdit.getSubject().toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":132,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.remove(new Tag(personToEdit.getStatus().toString(), Tag.AllTagTypes.STATUS));"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.remove(new Tag(personToEdit.getRole().toString(), Tag.AllTagTypes.ROLE));"},{"lineNumber":134,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":135,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.add(new Tag(updatedPrice.toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":136,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.add(new Tag(updatedSubject.toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":137,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.add(new Tag(updatedLevel.toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":138,"author":{"gitID":"Aussiroth"},"content":"        attributeTags.add(new Tag(updatedStatus.toString(), Tag.AllTagTypes.STATUS));"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(updatedRole.toString(), Tag.AllTagTypes.ROLE));"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":141,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"                updatedPrice, updatedSubject, updatedLevel, updatedStatus, updatedRole, attributeTags);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":"        private Price price;"},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"        private Subject subject;"},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"        private Level level;"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"        private Status status;"},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"        private Role role;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":185,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":186,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":"            setPrice(toCopy.price);"},{"lineNumber":193,"author":{"gitID":"Aussiroth"},"content":"            setSubject(toCopy.subject);"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"            setLevel(toCopy.level);"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"            setStatus(toCopy.status);"},{"lineNumber":196,"author":{"gitID":"alexawangzi"},"content":"            setRole(toCopy.role);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":202,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":205,"author":{"gitID":"alexawangzi"},"content":"                    this.price, this.subject, this.level, this.status, this.role, this.tags);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"alexawangzi"},"content":"        public void setPrice(Price price) {"},{"lineNumber":241,"author":{"gitID":"alexawangzi"},"content":"            this.price \u003d price;"},{"lineNumber":242,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":244,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cPrice\u003e getPrice() {"},{"lineNumber":245,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(price);"},{"lineNumber":246,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":248,"author":{"gitID":"alexawangzi"},"content":"        public void setSubject(Subject subject) {"},{"lineNumber":249,"author":{"gitID":"alexawangzi"},"content":"            this.subject \u003d subject;"},{"lineNumber":250,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":252,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cSubject\u003e getSubject() {"},{"lineNumber":253,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(subject);"},{"lineNumber":254,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":256,"author":{"gitID":"alexawangzi"},"content":"        public void setLevel(Level level) {"},{"lineNumber":257,"author":{"gitID":"alexawangzi"},"content":"            this.level \u003d level;"},{"lineNumber":258,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":260,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cLevel\u003e getLevel() {"},{"lineNumber":261,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(level);"},{"lineNumber":262,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":264,"author":{"gitID":"alexawangzi"},"content":"        public void setStatus(Status status) {"},{"lineNumber":265,"author":{"gitID":"alexawangzi"},"content":"            this.status \u003d status;"},{"lineNumber":266,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":268,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cStatus\u003e getStatus() {"},{"lineNumber":269,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(status);"},{"lineNumber":270,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":272,"author":{"gitID":"alexawangzi"},"content":"        public void setRole(Role role) {"},{"lineNumber":273,"author":{"gitID":"alexawangzi"},"content":"            this.role \u003d role;"},{"lineNumber":274,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":276,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cRole\u003e getRole() {"},{"lineNumber":277,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(role);"},{"lineNumber":278,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":280,"author":{"gitID":"alexawangzi"},"content":"        /*"},{"lineNumber":281,"author":{"gitID":"-"},"content":"         *  Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":282,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":283,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":290,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":291,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":292,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":313,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":314,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":315,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":316,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getPrice().equals(e.getPrice())"},{"lineNumber":317,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())"},{"lineNumber":318,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getLevel().equals(e.getLevel())"},{"lineNumber":319,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getStatus().equals(e.getStatus())"},{"lineNumber":320,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":69,"Aussiroth":22,"-":232}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    private String price;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    private String subject;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    private String level;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    private String status;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    private String role;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"                            String price, String subject, String level, String status, String role,"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        this.price \u003d price;"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"        this.status \u003d status;"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"        this.subject \u003d subject;"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"        this.level \u003d level;"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d role;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":89,"author":{"gitID":"Aussiroth"},"content":"        level \u003d source.getLevel().value;"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"        subject \u003d source.getSubject().value;"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"        status \u003d source.getStatus().value;"},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"        price \u003d source.getPrice().value;"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        role \u003d source.getRole().value;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"        if (this.price \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"        if (!Price.isValidPrice(this.price)) {"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"        final Price price \u003d new Price(this.price);"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        if (this.subject \u003d\u003d null) {"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"        if (!Subject.isValidSubject(this.subject)) {"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"        final Subject subject \u003d new Subject(this.subject);"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"        if (this.level \u003d\u003d null) {"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Level.class.getSimpleName()));"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"        if (!Level.isValidLevel(this.level)) {"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":"        final Level level \u003d new Level(this.level);"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"        if (!Status.isValidStatus(this.status)) {"},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"        if (this.role \u003d\u003d null) {"},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"        if (!Role.isValidRole(this.role)) {"},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"        final Role role \u003d new Role(this.role);"},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"        return new Person(name, phone, email, address, price, subject, level, status, role, tags);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":55,"Aussiroth":9,"-":140}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    private String backupFilePath;"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        this.backupFilePath \u003d filePath + \".backup\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"     * @param addressBook cannot be null"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"        saveAddressBook(addressBook, backupFilePath);"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":10,"-":84}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"100\"),"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"math\"),"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"                new Role(\"Student\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"50\"),"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"English\"),"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"                    new Role(\"Student\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"150\"),"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"chinese\"),"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"                    new Role(\"Student\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"70\"),"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"chinese\"),"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"                    new Role(\"Tutor\"),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"20\"),"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"English\"),"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Lower Sec\"),"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"                    new Role(\"Tutor\"),"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"40\"),"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"English\"),"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"                    new Role(\"Tutor\"),"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":35,"-":67}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d pc.convertToProperCase(email);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"-":66}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d pc.convertToProperCase(address);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"-":57}},{"path":"src/main/java/seedu/address/model/person/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s price in the address book."},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"public class Price {"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d \"Price should be a positive integer\\n\";"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public Price(String value) {"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"        requireNonNull(value);"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"        checkArgument(isValidPrice(value), MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d value;"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid status description."},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidPrice(String test) {"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"        return (Integer.parseInt(test) \u003e 0);"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        return this.value;"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        return value.hashCode();"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":30,"Aussiroth":14,"-":3}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    private final Price price;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    private final Subject subject;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    private final Level level;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    private final Role role;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Price price, Subject subject,"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"                  Level level, Status status, Role role, Set\u003cTag\u003e tags) {"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        requireAllNonNull(name, phone, email, address, price, subject, level, status, tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d price;"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d subject;"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d level;"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d role;"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d status;"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    public Price getPrice() {"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        return price;"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    public Subject getSubject() {"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        return subject;"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    public Level getLevel() {"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        return level;"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    public Role getRole() {"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        return role;"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    public Status getStatus() {"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        return status;"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"        return Objects.hash(name, phone, email, address, price, subject, level, status, role, tags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":35,"Aussiroth":3,"-":96}},{"path":"src/main/java/seedu/address/model/person/Status.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s status in the address book."},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidStatus(String)}"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class Status {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] STATUS_VALUES \u003d new String[] { \"matched\", \"m\", \"not matched\", \"nm\"};"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_STATUS \u003d new HashSet\u003c\u003e(Arrays.asList(STATUS_VALUES));"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_STATUS_CONSTRAINTS \u003d \"Status should be one of: \\n\""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"            + SET_ALL_STATUS.toString()"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            + \"\\n\";"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Status}."},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     * @param status A valid statust description."},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public Status(String status) {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(status);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        status.toLowerCase();"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidStatus(status), MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        status \u003d convertToFullStatus(status);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d pc.convertToProperCase(status);"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full status name"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullStatus(String original) {"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        if (cur \u003d\u003d null) {"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"            return \"\";"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"nm\")) {"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"not matched\";"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"m\")) {"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"matched\";"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid status description."},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        return SET_ALL_STATUS.contains(test);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Status) other).value)); // state check"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":57,"Aussiroth":1,"-":21}},{"path":"src/main/java/seedu/address/model/person/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s subject in the address book."},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class Subject {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] SUBJECT_VALUES \u003d"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"            new String[]{\"english\", \"eng\", \"chinese\", \"chi\", \"math\", \"physics\", \"phy\", \"chemistry\", \"chem\"};"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_SUBJECT \u003d new HashSet\u003c\u003e(Arrays.asList(SUBJECT_VALUES));"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d \"Subject should be one of: \\n\""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            + SET_ALL_SUBJECT.toString()"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            + \"\\n\";"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Subject}."},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     * @param subject A valid subject description."},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public Subject(String subject) {"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(subject);"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        subject.toLowerCase();"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d convertToFullSubject(subject);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d pc.convertToProperCase(subject);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full subject name"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullSubject(String original) {"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        if (cur \u003d\u003d null) {"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"            return \"\";"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"eng\")) {"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"english\";"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"chi\")) {"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"chinese\";"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"phy\")) {"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"physics\";"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"chem\")) {"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"chemistry\";"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid subject description."},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidSubject(String test) {"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        return SET_ALL_SUBJECT.contains(test);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Subject // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Subject) other).value)); // state check"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":60,"Aussiroth":2,"-":21}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        this.fullName \u003d pc.convertToProperCase(name);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"-":58}},{"path":"src/main/java/seedu/address/model/person/Tutor.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":" * Represents a Tutor in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"public class Tutor extends Person {"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"     * Every field must be present and not null."},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"     * @param name"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     * @param phone"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"     * @param email"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"     * @param address"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     * @param price"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"     * @param subject"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"     * @param level"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"     * @param status"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"     * @param tags"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    public Tutor(Name name, Phone phone, Email email, Address address, Price price,"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"                 Subject subject, Level level, Status status, Set\u003cTag\u003e tags) {"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        super(name, phone, email, address, price, subject, level, status, new Role(\"student\"), tags);"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":25,"-":5}},{"path":"src/main/java/seedu/address/model/person/Student.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":" * Represents a Student in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"public class Student extends Person {"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"     * Every field must be present and not null."},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"     * @param name"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"     * @param phone"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     * @param email"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"     * @param address"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"     * @param price"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"     * @param subject"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"     * @param level"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"     * @param status"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     * @param tags"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public Student(Name name, Phone phone, Email email, Address address,"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"                   Price price, Subject subject, Level level, Status status, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        super(name, phone, email, address, price, subject, level, status, new Role(\"student\"), tags);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":27,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/RemoveTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":" * Deletes a tag from the address book."},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"public class RemoveTagCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD \u003d \"removeTag\";"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"rt\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            + \": Removes a tag from the addressbook.\\n\""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"            + \"Parameters: tag name(must be a valid tag existing in addressbook\\n\""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends\";"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    private Tag targetTag;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public RemoveTagCommand(Tag targetTag) {"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        this.targetTag \u003d targetTag;"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(targetTag);"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"            model.deleteTag(targetTag);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, targetTag));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d lastShownList.stream()"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"                .map(Person::getTags)"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"                .flatMap(Set::stream)"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        if (!tagsInPersons.contains(targetTag)) {"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof RemoveTagCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.targetTag.equals(((RemoveTagCommand) other).targetTag)); // state check"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"}"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":""}],"authorContributionMap":{"alexawangzi":41,"-":27}},{"path":"src/main/java/seedu/address/model/person/ProperCaseConverter.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":" * Helper class to change a string to proper class"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"class ProperCaseConverter {"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"     * convert the value string to proper case"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"    public String convertToProperCase(String original) {"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"        StringBuilder properCase \u003d new StringBuilder();"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"        boolean nextProperCase \u003d true;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"        original \u003d original.toLowerCase();"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"        for (char c : original.toCharArray()) {"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"            if (Character.isSpaceChar(c)) {"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"                nextProperCase \u003d true;"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            } else if (nextProperCase) {"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"                c \u003d Character.toUpperCase(c);"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"                nextProperCase \u003d false;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            }"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            properCase.append(c);"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"        return properCase.toString();"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":28}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should contain only \""},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"            + \"alphanumeric characters and spaces\";"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"     * This represents all the tag types."},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public enum AllTagTypes { SUBJECT, STATUS, LEVEL, PRICE, ROLE, DEFAULT }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    public final AllTagTypes tagType;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"     * tagType will be initialised with the AllTagTypes.DEFAULT value."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        this.tagType \u003d AllTagTypes.DEFAULT;"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"     * @param tagType A valid tag type."},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    public Tag(String tagName, AllTagTypes tagType) {"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        this.tagType \u003d tagType;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"     * returns true if given string is a valid tag type."},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"     * @param test A string to test."},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"    public static boolean isValidTagType(String test) {"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"        for (AllTagTypes tType : AllTagTypes.values()) {"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"            if (tType.toString().equals(test)) {"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        return false;"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":1,"Aussiroth":28,"-":60}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":94,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"        removeUnusedTags();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"                person.getPrice(), person.getSubject(), person.getLevel(), person.getStatus(), person.getRole(),"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"                correctTagReferences);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"     * Removes {@code tag} from this {@code AddressBook}."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":197,"author":{"gitID":"alexawangzi"},"content":"    public void removeTag(Tag tag) throws PersonNotFoundException {"},{"lineNumber":198,"author":{"gitID":"alexawangzi"},"content":"        for (Person person : persons) {"},{"lineNumber":199,"author":{"gitID":"alexawangzi"},"content":"            removeTagFromPerson(tag, person);"},{"lineNumber":200,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":203,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":205,"author":{"gitID":"alexawangzi"},"content":"     * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":206,"author":{"gitID":"alexawangzi"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":207,"content":"     * @@author yamgent"},{"lineNumber":208,"author":{"gitID":"alexawangzi"},"content":"     * Reused from https://github.com/se-edu/"},{"lineNumber":209,"author":{"gitID":"alexawangzi"},"content":"     * addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":210,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"alexawangzi"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":212,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":213,"author":{"gitID":"alexawangzi"},"content":"        if (!updatedTags.remove(tag)) {"},{"lineNumber":214,"author":{"gitID":"alexawangzi"},"content":"            return;"},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":"        Person updatedPerson \u003d new Person (person.getName(), person.getPhone(),"},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"                person.getEmail(), person.getAddress(), person.getPrice(),"},{"lineNumber":218,"author":{"gitID":"alexawangzi"},"content":"               person.getSubject(), person.getLevel(), person.getStatus(), person.getRole(),"},{"lineNumber":219,"author":{"gitID":"alexawangzi"},"content":"                updatedTags);"},{"lineNumber":220,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":221,"author":{"gitID":"alexawangzi"},"content":"            updatePerson(person, updatedPerson);"},{"lineNumber":222,"author":{"gitID":"alexawangzi"},"content":"        } catch (DuplicatePersonException dupe) {"},{"lineNumber":223,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":224,"author":{"gitID":"alexawangzi"},"content":"                     + \"See Person#equals(Object).\");"},{"lineNumber":225,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":230,"author":{"gitID":"alexawangzi"},"content":"     * Removes unsed {@code tag} from this {@code AddressBook}."},{"lineNumber":231,"content":"     * @@author yamgent"},{"lineNumber":232,"author":{"gitID":"alexawangzi"},"content":"     * Reused from https://github.com/se-edu/"},{"lineNumber":233,"author":{"gitID":"alexawangzi"},"content":"     * addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":234,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"alexawangzi"},"content":"    private void removeUnusedTags() {"},{"lineNumber":236,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":237,"author":{"gitID":"alexawangzi"},"content":"                           .map(Person::getTags)"},{"lineNumber":238,"author":{"gitID":"alexawangzi"},"content":"                .flatMap(Set::stream)"},{"lineNumber":239,"author":{"gitID":"alexawangzi"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":240,"author":{"gitID":"alexawangzi"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":241,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"alexawangzi":52,"-":188}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"    public void deleteTag (Tag tag)throws PersonNotFoundException {"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":7,"-":120}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that filter all person with student tag */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d person -\u003e person.getTags().contains(new Tag(\"student\"));"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that filter all person with student tag */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_TUTORS \u003d person -\u003e person.getTags().contains(new Tag(\"tutor\"));"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"     * Delete a tag from the addressbook"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"     * @param tag"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    void deleteTag (Tag tag)throws PersonNotFoundException;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":8,"-":53}},{"path":"src/main/java/seedu/address/model/person/Level.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s level in the address book."},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLevel(String)}"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class Level {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] LEVEL_VALUES \u003d"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"            new String[] { \"lower sec\", \"ls\", \"upper sec\", \"us\", \"lower pri\", \"lp\", \"upper pri\", \"up\" };"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_LEVEL \u003d new HashSet\u003c\u003e(Arrays.asList(LEVEL_VALUES));"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_LEVEL_CONSTRAINTS \u003d \"Person Level should be \""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            + \"of the format \u003cgrade\u003e\u003ceducation\u003e \""},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"            + \"1. The education should be one of the education system listed in.\\n\""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            + \"2. This is followed by a whitespace and then a number to represent the grade. \""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            + \"The grade must be consistent with the specific education system indicated earlier.\\n\";"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Level}."},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"     * @param level A valid level description."},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public Level(String level) {"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(level);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        level.toLowerCase();"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidLevel(level), MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        level \u003d convertToFullLevel(level);"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d pc.convertToProperCase(level);"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full level name"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullLevel(String original) {"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        if (cur \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"            return \"\";"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"ls\")) {"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"lower sec\";"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"us\")) {"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"upper sec\";"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"lp\")) {"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"lower pri\";"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"up\")) {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"upper pri\";"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid level description."},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidLevel(String test) {"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"        return SET_ALL_LEVEL.contains(test);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Level // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Level) other).value)); // state check"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":64,"Aussiroth":2,"-":21}},{"path":"src/main/java/seedu/address/model/person/Role.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s role in the address book."},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class Role {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] ROLES_VALUES \u003d new String[] { \"student\", \"s\", \"tutor\", \"t\"};"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_ROLES \u003d new HashSet\u003c\u003e(Arrays.asList(ROLES_VALUES));"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d \"Role should be one of: \\n\""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"            + SET_ALL_ROLES.toString()"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            + \"\\n\";"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Role}."},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     * @param role A valid role description."},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public Role(String role) {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(role);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        role.toLowerCase();"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        role \u003d convertToFullRole(role);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d pc.convertToProperCase(role);"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full role name"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullRole(String original) {"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        if (cur \u003d\u003d null) {"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"            return \"\";"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"s\")) {"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"student\";"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"t\")) {"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"tutor\";"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid role description."},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidRole(String test) {"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        return SET_ALL_ROLES.contains(test);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Role // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Role) other).value)); // state check"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":59,"-":21}}]
