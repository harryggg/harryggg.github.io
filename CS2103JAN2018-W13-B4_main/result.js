var resultJson = [{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"dominickenn"},"content":"\u003d PrioriTask"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":"https://travis-ci.org/CS2103JAN2018-W13-B4/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/guekling/main[image:https://ci.appveyor.com/api/projects/status/84nh61dlot5vlxpr?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W13-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W13-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"PrioriTask is a desktop task management application. It is not just any task management application, but a combination of the to-do list, calendar and reminder features, with an added bonus of an automatic updating and sorting of your tasks based on priority levels."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"PrioriTask\u0027s main aim is to help busy university students keep track of their many tasks and priorities. This application is most suitable for students who:"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* have an endless number of tasks to keep track of"},{"lineNumber":21,"author":{"gitID":"-"},"content":"* require help to monitor their tasks and their levels of importance"},{"lineNumber":22,"author":{"gitID":"-"},"content":"* would like assistance in task planning"},{"lineNumber":23,"author":{"gitID":"-"},"content":"* prefer a digital organizer over a physical organizer"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"Do you have any of the characteristics listed above? If so, then PrioriTask is the application for you!"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"So what are you waiting for? Get started by downloading the link:https://github.com/CS2103JAN2018-W13-B4/main/releases[application], and reading the"},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003c\u003cUserGuide#, user guide\u003e\u003e or \u003c\u003cDeveloperGuide#, developer guide\u003e\u003e now!"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* This application is based on the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by _https://github.com/se-edu/[SE-EDU] initiative_."},{"lineNumber":41,"author":{"gitID":"-"},"content":"* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":42,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":43,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"dominickenn":2,"-":43}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"//import static seedu.organizer.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"//import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"public class SampleDataTest extends OrganizerSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    protected Organizer getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /*Does not work due to need for login to display tasks on tasklistpanel"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    Might want to remove the loadSampleData feature either way, does not make sense to have it"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void organizer_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Task[] expectedList \u003d SampleDataUtil.getSampleTasks();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertListMatching(getTaskListPanel(), expectedList);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }*/"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":51}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"/*"},{"lineNumber":2,"author":{"gitID":"-"},"content":"// Commented out as it takes too long on travis, please uncomment before running local tests"},{"lineNumber":3,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"public class ClearCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"/* Case: clear non-empty organizer book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * spaces -\u003e cleared"},{"lineNumber":19,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"/* Case: undo clearing organizer book -\u003e original organizer book restored *//*"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, defaultModel);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"/* Case: redo clearing organizer book -\u003e cleared *//*"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"/* Case: selects first card in task list and clears organizer book -\u003e cleared and no card selected *//*"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original organizer book"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        selectTask(Index.fromOneBased(1));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"/* Case: filters the task list before clearing -\u003e entire organizer book cleared *//*"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original organizer book"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"/* Case: clear empty organizer book -\u003e cleared *//*"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"/* Case: mixed case command word -\u003e rejected *//*"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":56,"author":{"gitID":"-"},"content":" * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":57,"author":{"gitID":"-"},"content":" * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":58,"author":{"gitID":"-"},"content":" * These verifications are done by"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":" * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":61,"author":{"gitID":"-"},"content":" *"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":63,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.deleteCurrentUserTasks();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"    */"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":" * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":" * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":" * These verifications are done by"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":" * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":" * Also verifies that the {@code expectedResultMessage} is displayed"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":" *//*"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"    public void assertCommandSuccess(String command, String expectedResultMessage) {"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        expectedModel.deleteCurrentUserTasks();"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(command, expectedResultMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":88,"author":{"gitID":"-"},"content":" * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":89,"author":{"gitID":"-"},"content":" * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":90,"author":{"gitID":"-"},"content":" *"},{"lineNumber":91,"author":{"gitID":"-"},"content":" * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":92,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":101,"author":{"gitID":"-"},"content":" * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":102,"author":{"gitID":"-"},"content":" * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":103,"author":{"gitID":"-"},"content":" * These verifications are done by"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":" * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":106,"author":{"gitID":"-"},"content":" * error style."},{"lineNumber":107,"author":{"gitID":"-"},"content":" *"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":109,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"*/"}],"authorContributionMap":{"dominickenn":22,"-":97}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"\u003d PrioriTask - User Guide"},{"lineNumber":3,"author":{"gitID":"-"},"content":":linkcss:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":icons: font"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":toclevels: 5"},{"lineNumber":7,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":8,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":9,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":10,"author":{"gitID":"-"},"content":":sectnumlevels: 5"},{"lineNumber":11,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":12,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":13,"author":{"gitID":"-"},"content":":stylesheet: guides-style.css"},{"lineNumber":14,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":15,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":16,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":18,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":19,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":20,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B4/main"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"By: `CS2103JAN2018-W13-B4`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"PrioriTask is a desktop task management application. It is not just any task management application, but a combination of the to-do list, calendar and reminder features, with an added bonus of an automatic updating and sorting of your tasks based on priority levels. It helps you keep track of your tasks, while providing you with at-a-glance views of upcoming tasks by day, week or month. PrioriTask is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"With PrioriTask, you can:"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"- Keep track of your tasks and their deadlines, with reminders of approaching deadlines and at-a-glance views of upcoming tasks by day, week or month."},{"lineNumber":31,"author":{"gitID":"-"},"content":"- Manage your tasks\u0027 priorities with our automatic updating and sorting feature, so that you will never have to worry about deciding which task to start working on."},{"lineNumber":32,"author":{"gitID":"-"},"content":"- Maintain your list of tasks effectively with our easy-to-remember and user-friendly commands, which can help you get your tasks organised faster than traditional GUI applications."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Getting Started"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"_This section explains how to download, launch, and start using PrioriTask._"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting Up"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Ensure that you have Java `1.8.0_60` or later installed in your computer. You may download the latest version of Java http://www.oracle.com/technetwork/java/javase/downloads/index.html[here]."},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"PrioriTask works best on Java `1.8.0_60` or later. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"It will not work with earlier versions of Java 8 (i.e. Java `1.8.0_51` and below)."},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Download the latest `organizer.jar` link:{repoURL}/releases[here]."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":".Downloading the latest `organizer.jar`"},{"lineNumber":54,"author":{"gitID":"-"},"content":"image::UserGuideQuickStart1.png[width\u003d\"600\"]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"+"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for PrioriTask."},{"lineNumber":58,"author":{"gitID":"-"},"content":".  Double-click the file to start the application. The main page should appear in a few seconds (refer to \u003c\u003cfig-Ui\u003e\u003e)."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":"[[fig-Ui]]"},{"lineNumber":62,"author":{"gitID":"-"},"content":".PrioriTask\u0027s main page"},{"lineNumber":63,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":64,"author":{"gitID":"-"},"content":"+"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":".. If the application is unable to start, refer to \u003c\u003cFAQ\u003e\u003e for the solution."},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Proceed to \u003c\u003cSigning Up\u003e\u003e for instructions on creating an account on PrioriTask."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Signing Up"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":". Type the command [example-no-box]#`signup u/USERNAME p/PASSWORD`# in the command box, replacing the `USERNAME` and `PASSWORD` with your own."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"+"},{"lineNumber":75,"author":{"gitID":"-"},"content":".Signing up for an account"},{"lineNumber":76,"author":{"gitID":"-"},"content":"image::UserGuideQuickStart2.png[width\u003d\"790\"]"},{"lineNumber":77,"author":{"gitID":"-"},"content":"+"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":". Press kbd:[Enter] to execute the command. Your sign up will be confirmed in the result display box upon a successful registration (refer to \u003c\u003cfig-QuickStart3\u003e\u003e)."},{"lineNumber":80,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":81,"author":{"gitID":"-"},"content":"The [parameters]#`USERNAME`# and [parameters]#`PASSWORD`# parameters can only take in alphabetical and numerical values. They will not accept spaces and special symbols (e.g. %, $, etc.). +"},{"lineNumber":82,"author":{"gitID":"-"},"content":"A warning message will be displayed in the result display box if your [parameters]#`USERNAME`# or [parameters]#`PASSWORD`# contains characters that are not allowed."},{"lineNumber":83,"author":{"gitID":"-"},"content":"+"},{"lineNumber":84,"author":{"gitID":"-"},"content":"[[fig-QuickStart3]]"},{"lineNumber":85,"author":{"gitID":"-"},"content":".Confirmation message upon successful sign up"},{"lineNumber":86,"author":{"gitID":"-"},"content":"image::UserGuideQuickStart3.png[width\u003d\"790\"]"},{"lineNumber":87,"author":{"gitID":"-"},"content":"+"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":". Proceed to \u003c\u003cLogging In\u003e\u003e for instructions on logging into your account on PrioriTask."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging In"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":". Type the command [example-no-box]#`login u/USERNAME p/PASSWORD`# in the command box, replacing the `USERNAME` and `PASSWORD` with your own."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"+"},{"lineNumber":96,"author":{"gitID":"-"},"content":".Logging into an account"},{"lineNumber":97,"author":{"gitID":"-"},"content":"image::UserGuideQuickStart4.png[width\u003d\"790\"]"},{"lineNumber":98,"author":{"gitID":"-"},"content":"+"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":". Press kbd:[Enter] to execute the command. Your login will be confirmed in the result display box (refer to \u003c\u003cfig-QuickStart6\u003e\u003e)."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"+"},{"lineNumber":103,"author":{"gitID":"-"},"content":"[[fig-QuickStart6]]"},{"lineNumber":104,"author":{"gitID":"-"},"content":".Confirmation message upon successful login"},{"lineNumber":105,"author":{"gitID":"-"},"content":"image::UserGuideQuickStart5.png[width\u003d\"790\"]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"+"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":". Proceed to \u003c\u003cUsing PrioriTask\u003e\u003e to learn more about using the application, or head straight to \u003c\u003cTask Management Features\u003e\u003e to start managing your tasks."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"\u003d\u003d Using PrioriTask"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"_This section explains the functions and usages of PrioriTask\u0027s different features._"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d The Different Sections of PrioriTask"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"The PrioriTask application consists of six different sections (refer to \u003c\u003cfig-DifferentComponents\u003e\u003e)."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"[[fig-DifferentComponents]]"},{"lineNumber":119,"author":{"gitID":"-"},"content":".The Different Sections of PrioriTask"},{"lineNumber":120,"author":{"gitID":"-"},"content":"image::UserGuideDifferentComponents.png[width\u003d\"790\"]"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"Given below is a quick overview of each section."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":". `Menu Bar`, where you will be able to,"},{"lineNumber":125,"author":{"gitID":"-"},"content":".. Exit the application (`File` \u003e `Exit`)."},{"lineNumber":126,"author":{"gitID":"-"},"content":".. Open the Help Window (`Help` \u003e `Help  F1`)."},{"lineNumber":127,"author":{"gitID":"-"},"content":". `Command Box`, where you input the command to be executed. Press kbd:[Enter] to execute the command after you have finished typing."},{"lineNumber":128,"author":{"gitID":"-"},"content":". `Result Display Box`, which displays a successful or warning message depending on the command you execute."},{"lineNumber":129,"author":{"gitID":"-"},"content":". `Task List Panel`, which displays the tasks and their respective details. The tasks are organised by their priority levels, with the highest priority level at the top."},{"lineNumber":130,"author":{"gitID":"-"},"content":". `Calendar Panel`, which displays the calendar a chronic overview of the deadlines of all your tasks. It will display the current month by default."},{"lineNumber":131,"author":{"gitID":"-"},"content":". `Status Bar Footer`, which displays,"},{"lineNumber":132,"author":{"gitID":"-"},"content":".. The date and time of the last time you have made changes to the data."},{"lineNumber":133,"author":{"gitID":"-"},"content":".. The total number of tasks being shown in the `Task List Panel`."},{"lineNumber":134,"author":{"gitID":"-"},"content":".. The folder address of where your data file is being stored."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Command Format"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"PrioriTask is a CLI application. All features are executed primarily via the command box."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"In the following sections, you will be introduced to several commands and their command formats. Here are a few things to take note of:"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"* The command word and alias are case-sensitive."},{"lineNumber":143,"author":{"gitID":"-"},"content":"** icon:check[] Typing `help` executes the command."},{"lineNumber":144,"author":{"gitID":"-"},"content":"** icon:times[] Typing `Help`, `heLp` or `HELP` does not execute the command."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user."},{"lineNumber":146,"author":{"gitID":"-"},"content":"** E.g. In `add n/NAME`, `NAME` is a parameter which can be used as `add n/CS2103T Developer Guide`."},{"lineNumber":147,"author":{"gitID":"-"},"content":"* Items in square brackets are optional."},{"lineNumber":148,"author":{"gitID":"-"},"content":"** E.g `n/NAME [t/TAG]` can be used as `n/CS2103T Developer Guide t/CS2103` or as `n/CS2103T Developer Guide`."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times."},{"lineNumber":150,"author":{"gitID":"-"},"content":"** E.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), or `t/CS2103`, `t/CS2103 t/CS2101` etc."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* Parameters can be in any order."},{"lineNumber":152,"author":{"gitID":"-"},"content":"** E.g. If the command specifies `n/NAME p/PRIORITY_LEVEL`, `p/PRIORITY_LEVEL n/NAME` is also acceptable."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003d\u003d User Features"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"_This section explains the commands specific to command inquiry and *User* account management._"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":162,"author":{"gitID":"-"},"content":"[format-title]#Format:# `help`"},{"lineNumber":163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Signing up: `signup` or `su` `[since v1.3]`"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Sign up for a PrioriTask account. +"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":171,"author":{"gitID":"-"},"content":"[format-title]#Format:# `signup u/USERNAME p/PASSWORD`"},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":176,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"* [example]#`signup u/patrick p/pat19503`#"},{"lineNumber":179,"author":{"gitID":"-"},"content":"* [example]#`signup u/mary p/m4ry`#"},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging in: `login` or `in` `[since v1.4]`"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"Login to PrioriTask. +"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":187,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":188,"author":{"gitID":"-"},"content":"[format-title]#Format:# `login u/USERNAME p/PASSWORD`"},{"lineNumber":189,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"* [example]#`login u/patrick p/pat19503`#"},{"lineNumber":196,"author":{"gitID":"-"},"content":"* [example]#`login u/mary p/m4ry`#"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding question: `addqa` `[since v1.4]`"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"Add a question for password retrieval. +"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":205,"author":{"gitID":"-"},"content":"Must be currently logged in to a user account on PrioriTask."},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":209,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":210,"author":{"gitID":"-"},"content":"[format-title]#Format:# `addqa q/QUESTION a/ANSWER`"},{"lineNumber":211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":215,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"* [example]#`addqa q/are you male? a/yes#"},{"lineNumber":218,"author":{"gitID":"-"},"content":"* [example]#`addqa q/are you female? a/yes`#"},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Retrieving question for user\u0027s password: `forgotpassword` or `fp` `[since v1.4]`"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"Retrieve question for user\u0027s password +"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":227,"author":{"gitID":"-"},"content":"[format-title]#Format:# `forgotpassword u/USERNAME `"},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":232,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* [example]#`forgotpassword u/patrick`#"},{"lineNumber":235,"author":{"gitID":"-"},"content":"* [example]#`forgotpassword u/mary`#"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Answering question: `answer` or `ans` `[since v1.4]`"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"Answer a user\u0027s question to retrieve the password +"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":244,"author":{"gitID":"-"},"content":"[format-title]#Format:# `answer u/USERNAME a/ANSWER`"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":249,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"* [example]#`answer u/patrick a/yes`#"},{"lineNumber":252,"author":{"gitID":"-"},"content":"* [example]#`answer u/mary a/no`#"},{"lineNumber":253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an account `[coming in v2.0]`"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"Delete a user account to stop using PrioriTask."},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"Exit the program. +"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":265,"author":{"gitID":"-"},"content":"[format-title]#Format:# `exit`"},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"\u003d\u003d Task Management Features"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"_This section explains what a *Task* is, and the commands to manage them._"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"[.noteblock]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":274,"author":{"gitID":"-"},"content":"[noteblock-title]#*Task Parameters*#"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"* [parameters]#`NAME`#"},{"lineNumber":277,"author":{"gitID":"-"},"content":"** A name can only be alphanumeric characters and spaces, and should not be blank."},{"lineNumber":278,"author":{"gitID":"-"},"content":"** It is *compulsory* to set a name."},{"lineNumber":279,"author":{"gitID":"-"},"content":"* [parameters]#`STATUS`#"},{"lineNumber":280,"author":{"gitID":"-"},"content":"** A state can only be one of two values : *Done* or *Not Done*."},{"lineNumber":281,"author":{"gitID":"-"},"content":"** By *default*, every new task is marked as *Not Done*."},{"lineNumber":282,"author":{"gitID":"-"},"content":"* [parameters]#`PRIORITY LEVEL`#"},{"lineNumber":283,"author":{"gitID":"-"},"content":"** A priority level can range from *0* (lowest) to *9* (highest)."},{"lineNumber":284,"author":{"gitID":"-"},"content":"** It is *optional* to set a priority level. If the user does not specify a priority level, PrioriTask will automatically set it to its *default level* : *0*."},{"lineNumber":285,"author":{"gitID":"-"},"content":"** Priority levels are automatically updated by gradual incremental steps, based on the date added, current date, and deadline."},{"lineNumber":286,"author":{"gitID":"-"},"content":"** If a task is still uncompleted after the deadline has passed, its priority level will be at the *maximum level* : *9*."},{"lineNumber":287,"author":{"gitID":"-"},"content":"* [parameters]#`DESCRIPTION`#"},{"lineNumber":288,"author":{"gitID":"-"},"content":"** A description can be any value (i.e. alphabet, numbers, special symbols)."},{"lineNumber":289,"author":{"gitID":"-"},"content":"** It is *optional* to have a description."},{"lineNumber":290,"author":{"gitID":"-"},"content":"* [parameters]#`DATEADDED`#"},{"lineNumber":291,"author":{"gitID":"-"},"content":"** A date added is in the format of *YYYY-MM-DD*."},{"lineNumber":292,"author":{"gitID":"-"},"content":"** It is automatically set upon task addition."},{"lineNumber":293,"author":{"gitID":"-"},"content":"* [parameters]#`DATECOMPLETED`#"},{"lineNumber":294,"author":{"gitID":"-"},"content":"** A date completed is in the format of *YYYY-MM-DD*."},{"lineNumber":295,"author":{"gitID":"-"},"content":"** It is automatically set upon toggling a task\u0027s completion."},{"lineNumber":296,"author":{"gitID":"-"},"content":"* [parameters]#`DEADLINE`#"},{"lineNumber":297,"author":{"gitID":"-"},"content":"** A deadline is in the format of YYYY-MM-DD."},{"lineNumber":298,"author":{"gitID":"-"},"content":"** It is *compulsory* to have a deadline."},{"lineNumber":299,"author":{"gitID":"-"},"content":"* [parameters]#`SUBTASK`#"},{"lineNumber":300,"author":{"gitID":"-"},"content":"** A task can have any number of subtasks (including 0)."},{"lineNumber":301,"author":{"gitID":"-"},"content":"** It is *optional* to have subtasks."},{"lineNumber":302,"author":{"gitID":"-"},"content":"** More information about subtask parameters can be found in \u003c\u003cSubtask Management Features\u003e\u003e."},{"lineNumber":303,"author":{"gitID":"-"},"content":"* [parameters]#`TAG`#"},{"lineNumber":304,"author":{"gitID":"-"},"content":"** A task can have any number of tags (including 0)."},{"lineNumber":305,"author":{"gitID":"-"},"content":"** It is *optional* to have tags."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a task: `add` or `a`"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Add a task to the PrioriTask. +"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":315,"author":{"gitID":"-"},"content":"[format-title]#Format:# `add n/NAME d/DEADLINE [p/PRIORITY_LEVEL] [des/DESCRIPTION] [t/TAG]…​`"},{"lineNumber":316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":320,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"* [example]#`add n/CS2103T Developer Guide p/9 d/2018-03-02 des/Write Introduction`#"},{"lineNumber":323,"author":{"gitID":"-"},"content":"* [example]#`add n/CS2101 Script p/8 d/2018-03-05 des/Script should be 500 words long t/CS2101`#"},{"lineNumber":324,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all tasks : `list` or `l`"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"Show a list of all tasks in the PrioriTask. +"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":332,"author":{"gitID":"-"},"content":"[format-title]#Format:# `list`"},{"lineNumber":333,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"* _[Coming in v2.0]_ Shows a list of all tasks (regardless of status), all completed tasks, or all uncompleted tasks."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a task : `edit` or `e`"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"Edit an existing task in the PrioriTask. +"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":343,"author":{"gitID":"-"},"content":"[format-title]#Format:# `edit INDEX [n/NAME] [p/PRIORITY_LEVEL] [d/DEADLINE] [des/DESCRIPTION] [t/TAG]…​`"},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"* Edits the task at the specified `INDEX`. The index refers to the index number shown in the last task listing. The index *must be a positive integer* (i.e. 1, 2, 3, ...)."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":348,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":349,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the task will be removed (i.e adding of tags is not cumulative)."},{"lineNumber":350,"author":{"gitID":"dominickenn"},"content":"* You can remove all the task\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":353,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":354,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"* [example]#`edit 1 p/9 d/2018-12-30`# +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"Edits the priority level and deadline of the 1st task to be `9` and `2018-12-30` respectively."},{"lineNumber":358,"author":{"gitID":"-"},"content":"* [example]#`edit 2 n/CS2101 Final Assignment t/`# +"},{"lineNumber":359,"author":{"gitID":"-"},"content":"Edits the name of the 2nd task to be `CS2101 Final Assignment` and clears all existing tags."},{"lineNumber":360,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating tasks `[since v1.2]`"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"Depending on the suffix (or lack of) at the end of the `find` command, you can find tasks whose names, descriptions and/or deadlines contain any of the given keywords. +"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"****"},{"lineNumber":367,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `Developer` will match `developer`"},{"lineNumber":368,"author":{"gitID":"-"},"content":"* Keywords for deadlines should be in the format of YYYY-MM-DD."},{"lineNumber":369,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Guide Developer` will match `Developer Guide`"},{"lineNumber":370,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Guide` will not match `Guides`"},{"lineNumber":371,"author":{"gitID":"-"},"content":"* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `CS2101 Guide` will return `CS2101 Script`, `Developer Guide`."},{"lineNumber":372,"author":{"gitID":"-"},"content":"****"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating tasks: `find` or `f`"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"Find tasks whose names, descriptions and deadlines contain any of the given keywords. +"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":380,"author":{"gitID":"-"},"content":"[format-title]#Format:# `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":381,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"IMPORTANT: Only the name, description and deadline are searched."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":387,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"* [example]#`find Guide`# +"},{"lineNumber":390,"author":{"gitID":"-"},"content":"Returns `User Guide` and `Developer Guide`"},{"lineNumber":391,"author":{"gitID":"-"},"content":"* [example]#`f CS2101 Developer User`# +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"Returns any task having names or descriptions `CS2101`, `Developer`, or `User`"},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating tasks by name: `findn` or `fn`"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"Find tasks whose names contain any of the given keywords. +"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":400,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":401,"author":{"gitID":"-"},"content":"[format-title]#Format:# `findn KEYWORD [MORE_KEYWORDS]` or `fn KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"IMPORTANT: Only the name is searched."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":408,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"* [example]#`findn Guide`# +"},{"lineNumber":411,"author":{"gitID":"-"},"content":"Returns `User Guide` and `Developer Guide`"},{"lineNumber":412,"author":{"gitID":"-"},"content":"* [example]#`fn CS2101 Developer User`# +"},{"lineNumber":413,"author":{"gitID":"-"},"content":"Returns any task having names `CS2101`, `Developer`, or `User`"},{"lineNumber":414,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating tasks by description: `finddes` or `fdes`"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"Find tasks whose descriptions contain any of the given keywords. +"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":422,"author":{"gitID":"-"},"content":"[format-title]#Format:# `finddes KEYWORD [MORE_KEYWORDS]` or `fdes KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":423,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"IMPORTANT: Only the description is searched."},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":428,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":429,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"* [example]#`finddes Study`# +"},{"lineNumber":432,"author":{"gitID":"-"},"content":"Returns tasks with descriptions `Study midterms` and `study chapter 2`."},{"lineNumber":433,"author":{"gitID":"-"},"content":"* [example]#`fdes Study Update Chapter`# +"},{"lineNumber":434,"author":{"gitID":"-"},"content":"Returns any task having descriptions containing words `Study`, `Update`, or `Chapter`."},{"lineNumber":435,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating tasks by deadline: `findd` or `fd`"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"Find tasks whose deadlines contain any of the given keywords. +"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":443,"author":{"gitID":"-"},"content":"[format-title]#Format:# `findd KEYWORD [MORE_KEYWORDS]` or `fd KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"IMPORTANT: Only the deadline is searched."},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":450,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"* [example]#`findd 2018-03-17`# +"},{"lineNumber":453,"author":{"gitID":"-"},"content":"Returns tasks with deadlines `2018-03-17`."},{"lineNumber":454,"author":{"gitID":"-"},"content":"* [example]#`fd 2018-03-17 2018-09-04 2018-03-21`# +"},{"lineNumber":455,"author":{"gitID":"-"},"content":"Returns any task having deadlines `2018-03-17`, `2018-09-04`, or `2018-03-21`."},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating tasks by tag `[coming in v2.0]`"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"_Locate all tasks with a common tag_"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a task : `delete` or `d`"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"Delete the specified task from the PrioriTask. +"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":467,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":468,"author":{"gitID":"-"},"content":"[format-title]#Format:# `delete INDEX`"},{"lineNumber":469,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"* Delete the task at the specified `INDEX`."},{"lineNumber":472,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":473,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* (i.e. 1, 2, 3, ...)."},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":477,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"* [example]#`list`# +"},{"lineNumber":480,"author":{"gitID":"-"},"content":"[example]#`delete 2`# +"},{"lineNumber":481,"author":{"gitID":"-"},"content":"Deletes the 2nd task in the PrioriTask."},{"lineNumber":482,"author":{"gitID":"-"},"content":"* [example]#`find Developer`# +"},{"lineNumber":483,"author":{"gitID":"-"},"content":"[example]#`delete 1`# +"},{"lineNumber":484,"author":{"gitID":"dominickenn"},"content":"Deletes the 1st task in the results of the `find` command."},{"lineNumber":485,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a task : `select` or `s`"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"Select the task identified by the index number used in the last task listing. +"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":492,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":493,"author":{"gitID":"-"},"content":"[format-title]#Format:# `select INDEX`"},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"* Selects the task and shows full details of the task at the specified `INDEX`."},{"lineNumber":497,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":498,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* (i.e. `1, 2, 3, ...`)."},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":502,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"* [example]#`list`# +"},{"lineNumber":505,"author":{"gitID":"-"},"content":"[example]#`select 2`# +"},{"lineNumber":506,"author":{"gitID":"-"},"content":"Selects the 2nd task in the PrioriTask."},{"lineNumber":507,"author":{"gitID":"-"},"content":"* [example]#`find Developer`# +"},{"lineNumber":508,"author":{"gitID":"-"},"content":"[example]#`select 1`# +"},{"lineNumber":509,"author":{"gitID":"dominickenn"},"content":"Selects the 1st task in the results of the `find` command."},{"lineNumber":510,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Mark task as complete: `toggle` or `t` `[since v1.2]`"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"Toggle the status of the task identified by the index number used in the last task listing"},{"lineNumber":515,"author":{"gitID":"-"},"content":"between `Done` and `Not Done`. +"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":518,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":519,"author":{"gitID":"-"},"content":"[format-title]#Format:# `toggle INDEX`"},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"* Toggle the status of the task at the specified `INDEX`."},{"lineNumber":523,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":524,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* (i.e. `1, 2, 3, ...`)."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":527,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":528,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"* [example]#`list`# +"},{"lineNumber":531,"author":{"gitID":"-"},"content":"[example]#`toggle 1`# +"},{"lineNumber":532,"author":{"gitID":"-"},"content":"Toggle the first task in the PrioriTask."},{"lineNumber":533,"author":{"gitID":"-"},"content":"* [example]#`find homework`# +"},{"lineNumber":534,"author":{"gitID":"-"},"content":"[example]#`toggle 1`# +"},{"lineNumber":535,"author":{"gitID":"-"},"content":"Toggle the first task in th result of `find homework` command."},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all tasks : `clear` or `c`"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"Clear all of your tasks from PrioriTask. +"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":544,"author":{"gitID":"-"},"content":"[format-title]#Format:# `clear`"},{"lineNumber":545,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"\u003d\u003d Subtask Management Features"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"_This section explains what a *Subtask* is, and the commands to manage them._"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"[.noteblock]"},{"lineNumber":552,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":553,"author":{"gitID":"-"},"content":"[noteblock-title]#*Subtask Parameters*#"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"* [parameters]#`NAME`#"},{"lineNumber":556,"author":{"gitID":"-"},"content":"** A name can only be alphanumeric characters and spaces, and should not be blank."},{"lineNumber":557,"author":{"gitID":"-"},"content":"** It is *compulsory* to set a name."},{"lineNumber":558,"author":{"gitID":"-"},"content":"* [parameters]#`STATUS`#"},{"lineNumber":559,"author":{"gitID":"-"},"content":"** A state can only be one of two values : *Done* or *Not Done*."},{"lineNumber":560,"author":{"gitID":"-"},"content":"** By *default*, every new task is marked as *Not Done*."},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a subtask to a task : `adds` or `as` `[since v1.2]`"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"Add a subtask to an existing task. +"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":570,"author":{"gitID":"-"},"content":"[format-title]#Format:# `adds INDEX [n/NAME]`"},{"lineNumber":571,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"* Adds the subtask at the specified `INDEX`. The index refers to the index number shown in the last subtask listing. The index *must be a positive integer* (i.e. 1, 2, 3, ...)."},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":577,"author":{"gitID":"-"},"content":"[example-title]#Example:#"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"* [example]#`adds 1 n/Submit report`# +"},{"lineNumber":580,"author":{"gitID":"-"},"content":"Adds a subtask with name `Submit report` to the 1st task."},{"lineNumber":581,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Mark subtask as complete: `toggle-subtask` or `ts` `[since v1.3]`"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"Toggle the status of the subtask identified by the index number used in the last subtask listing"},{"lineNumber":586,"author":{"gitID":"-"},"content":"between `Done` and `Not Done`. +"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":590,"author":{"gitID":"-"},"content":"[format-title]#Format:# `toggle-subtask TASK_INDEX SUBTASK_INDEX`"},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"* Toggle the status of the `SUBTASK_INDEX`-th subtask of task at the specified by `TASK_INDEX`."},{"lineNumber":594,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":595,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* (i.e. `1, 2, 3, ...`)."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":598,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":599,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"* [example]#`list`# +"},{"lineNumber":602,"author":{"gitID":"-"},"content":"[example]#`toggle-subtask 1 1`# +"},{"lineNumber":603,"author":{"gitID":"-"},"content":"Toggles the first subtask of the first task in the PrioriTask."},{"lineNumber":604,"author":{"gitID":"-"},"content":"* [example]#`find homework`# +"},{"lineNumber":605,"author":{"gitID":"-"},"content":"[example]#`toggle-subtask 2 4`# +"},{"lineNumber":606,"author":{"gitID":"-"},"content":"Toggles the fourth subtask of the second task in th result of `find homework` command."},{"lineNumber":607,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a subtask from a task: `delete-subtask` or `ds` `[since v1.3]`"},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"Delete the specified subtask from the PrioriTask. +"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":614,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":615,"author":{"gitID":"-"},"content":"[format-title]#Format:# `delete-subtask TASK_INDEX SUBTASK_INDEX`"},{"lineNumber":616,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"* Delete the `SUBTASK_INDEX`-th subtask of task at the specified by `SUBTASK_INDEX`."},{"lineNumber":619,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":620,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* (i.e. `1, 2, 3, ...`)."},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":623,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":624,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"* [example]#`list`# +"},{"lineNumber":627,"author":{"gitID":"-"},"content":"[example]#`delete-subtask 1 1`# +"},{"lineNumber":628,"author":{"gitID":"-"},"content":"Deletes the first subtask of the first task in the PrioriTask."},{"lineNumber":629,"author":{"gitID":"-"},"content":"* [example]#`find cleaning`# +"},{"lineNumber":630,"author":{"gitID":"-"},"content":"[example]#`delete-subtask 2 4`# +"},{"lineNumber":631,"author":{"gitID":"-"},"content":"Deletes the fourth subtask of the second task in th result of `find cleaning` command."},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a subtask `[coming in v2.0]`"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"_Edit the name of a subtask_"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Reorder subtask `[coming in v2.0]`"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"_Reorder subtasks using a given condition_"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"\u003d\u003d Calendar Features"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"The calendar allows you to have a chronic overview of the deadlines of all your tasks. Tasks on the calendar changes according to the last task listing. By default, you will view the current month when you first open PrioriTask. The diagram below (refer to \u003c\u003cfig-UserGuideCalendarFeature1\u003e\u003e) shows how the calendar would look like when displayed with task entries."},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":647,"author":{"gitID":"-"},"content":"The calendar is best viewed fully-maximised on a 13” computer screen. +"},{"lineNumber":648,"author":{"gitID":"-"},"content":"The display of the calendar may differ from pictures on other computer screens."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"[[fig-UserGuideCalendarFeature1]]"},{"lineNumber":651,"author":{"gitID":"-"},"content":".PrioriTask\u0027s main page"},{"lineNumber":652,"author":{"gitID":"-"},"content":"image::UserGuideCalendarFeature1.png[width\u003d\"790\"]"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"In future releases, the calendar will support,"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"* Displaying of only the uncompleted tasks on the calendar."},{"lineNumber":657,"author":{"gitID":"-"},"content":"* Viewing of the calendar by days, weeks and years."},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Go to current month: `cmonth` or `cm` `[since v1.4]`"},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"Change the view of the calendar to that of the current month. +"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":664,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":665,"author":{"gitID":"-"},"content":"[format-title]#Format:# `cmonth`"},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":669,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":670,"author":{"gitID":"-"},"content":"[example-title]#Example:#"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"* Current month is `April 2018` +"},{"lineNumber":673,"author":{"gitID":"-"},"content":"Views `December 2018` +"},{"lineNumber":674,"author":{"gitID":"-"},"content":"[example]#`cmonth`# +"},{"lineNumber":675,"author":{"gitID":"-"},"content":"Goes to `April 2018`"},{"lineNumber":676,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Go to previous month: `pmonth` or `pm` `[since v1.4]`"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"Chang the view of the calendar to that of the previous month. +"},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":683,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":684,"author":{"gitID":"-"},"content":"[format-title]#Format:# `pmonth`"},{"lineNumber":685,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":688,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":689,"author":{"gitID":"-"},"content":"[example-title]#Example:#"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"* Views `March 2018` +"},{"lineNumber":692,"author":{"gitID":"-"},"content":"[example]#`pmonth`# +"},{"lineNumber":693,"author":{"gitID":"-"},"content":"Goes to `February 2018`"},{"lineNumber":694,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Go to next month: `nmonth` or `nm` `[since v1.4]`"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"Chang the view of the calendar to that of the next month. +"},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":701,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":702,"author":{"gitID":"-"},"content":"[format-title]#Format:# `nmonth`"},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":706,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":707,"author":{"gitID":"-"},"content":"[example-title]#Example:#"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"* Views `March 2018` +"},{"lineNumber":710,"author":{"gitID":"-"},"content":"[example]#`nmonth`# +"},{"lineNumber":711,"author":{"gitID":"-"},"content":"Goes to `April 2018`"},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d PrioriTask Features"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"_This section explains the commands which access and manage PrioriTask data._"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"List all the commands that you have entered in reverse chronological order. +"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":723,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":724,"author":{"gitID":"-"},"content":"[format-title]#Format:# `history`"},{"lineNumber":725,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":728,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":729,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":730,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"Restore the PrioriTask to the state before the previous _undoable_ command was executed. +"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":738,"author":{"gitID":"-"},"content":"[format-title]#Format:# `undo`"},{"lineNumber":739,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":742,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":743,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the PrioriTask\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":744,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":747,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":748,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"* [example]#`delete 1`# +"},{"lineNumber":751,"author":{"gitID":"-"},"content":"[example]#`list`# +"},{"lineNumber":752,"author":{"gitID":"-"},"content":"[example]#`undo`# (reverses the `delete 1` command) +"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"* [example]#`select 1`# +"},{"lineNumber":755,"author":{"gitID":"-"},"content":"[example]#`list`# +"},{"lineNumber":756,"author":{"gitID":"-"},"content":"[example]#`undo`# +"},{"lineNumber":757,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"* [example]#`delete 1`# +"},{"lineNumber":760,"author":{"gitID":"-"},"content":"[example]#`clear`# +"},{"lineNumber":761,"author":{"gitID":"-"},"content":"[example]#`undo`# (reverses the `clear` command) +"},{"lineNumber":762,"author":{"gitID":"-"},"content":"[example]#`undo`# (reverses the `delete 1` command) +"},{"lineNumber":763,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"Reverse the most recent `undo` command. +"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"[.format]"},{"lineNumber":770,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":771,"author":{"gitID":"-"},"content":"[format-title]#Format:# `redo`"},{"lineNumber":772,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"[.example]"},{"lineNumber":775,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":776,"author":{"gitID":"-"},"content":"[example-title]#Examples:#"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"* [example]#`delete 1`# +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"[example]#`undo`# (reverses the `delete 1` command) +"},{"lineNumber":780,"author":{"gitID":"-"},"content":"[example]#`redo`# (reapplies the `delete 1` command) +"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"* [example]#`delete 1`# +"},{"lineNumber":783,"author":{"gitID":"-"},"content":"[example]#`redo`# +"},{"lineNumber":784,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"* [example]#`delete 1`# +"},{"lineNumber":787,"author":{"gitID":"-"},"content":"[example]#`clear`# +"},{"lineNumber":788,"author":{"gitID":"-"},"content":"[example]#`undo`# (reverses the `clear` command) +"},{"lineNumber":789,"author":{"gitID":"-"},"content":"[example]#`undo`# (reverses the `delete 1` command) +"},{"lineNumber":790,"author":{"gitID":"-"},"content":"[example]#`redo`# (reapplies the `delete 1` command) +"},{"lineNumber":791,"author":{"gitID":"-"},"content":"[example]#`redo`# (reapplies the `clear` command) +"},{"lineNumber":792,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"PrioriTask data is saved in the hard disk automatically after any data-altering command is called. +"},{"lineNumber":797,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Recover past data `[coming in v2.0]`"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"_Restore data from a recent date (coming in v2.0)_"},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d Reminders `[coming in v2.0]`"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"_This section explains the commands to manage the reminder system (coming in v2.0)_"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"[qanda]"},{"lineNumber":810,"author":{"gitID":"-"},"content":"I am unable to start the application. Double-clicking on the `jar` file doesn\u0027t work. What do I do?:::"},{"lineNumber":811,"author":{"gitID":"-"},"content":"For Windows Users::"},{"lineNumber":812,"author":{"gitID":"-"},"content":". Find your Java JDK directory."},{"lineNumber":813,"author":{"gitID":"-"},"content":". Open `Command Prompt`."},{"lineNumber":814,"author":{"gitID":"-"},"content":". Change the directory to your Java JDK directory."},{"lineNumber":815,"author":{"gitID":"-"},"content":". Execute the command `\"JAVA_JDK_EXE_FILE_DIRECTORY_PATH\" -jar YOUR_JAR_FILE_NAME.jar`."},{"lineNumber":816,"author":{"gitID":"-"},"content":".. E.g. `\"C:\\Program Files\\Java\\jdk1.8.0_102\\bin\\javaw.exe\" -jar YOUR_JAR_FILE_NAME.jar`"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"For Mac/Linux Users::"},{"lineNumber":819,"author":{"gitID":"-"},"content":". Open `Terminal`."},{"lineNumber":820,"author":{"gitID":"-"},"content":". Execute the command `java -jar YOUR_JAR_FILE_NAME.jar`."},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"How do I transfer my data to another computer?:::"},{"lineNumber":824,"author":{"gitID":"-"},"content":"Install the application in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous PrioriTask folder."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d User Features"},{"lineNumber":829,"author":{"gitID":"-"},"content":"* *Exit* : [format-no-box]#`exit`#"},{"lineNumber":830,"author":{"gitID":"-"},"content":"* *Help* : [format-no-box]#`help`#"},{"lineNumber":831,"author":{"gitID":"-"},"content":"* *Login* : [format-no-box]#`login u/USERNAME p/PASSWORD`#"},{"lineNumber":832,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`login u/patrick p/pat12351`#"},{"lineNumber":833,"author":{"gitID":"-"},"content":"* *Logout* : [format-no-box]#`logout`#"},{"lineNumber":834,"author":{"gitID":"-"},"content":"* *Sign Up* : [format-no-box]#`signup u/USERNAME p/PASSWORD`#"},{"lineNumber":835,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`signup u/patrick p/pat12351`#"},{"lineNumber":836,"author":{"gitID":"-"},"content":"* *Add Question* : [format-no-box]#`addqa q/QUESTION a/ANSWER`#"},{"lineNumber":837,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`addqa q/are cats cool? a/yes`#"},{"lineNumber":838,"author":{"gitID":"-"},"content":"* *Retrieve Question* : [format-no-box]#`forgotpassword u/USERNAME`#"},{"lineNumber":839,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`forgotpassword u/david`#"},{"lineNumber":840,"author":{"gitID":"-"},"content":"* *Answer Question* : [format-no-box]#`answer u/USERNAME a/ANSWER`#"},{"lineNumber":841,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`answer u/david a/yes`#"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Task Management Features"},{"lineNumber":844,"author":{"gitID":"-"},"content":"* *Add* : [format-no-box]#`add n/NAME [p/PRIORITY_LEVEL] d/DEADLINE [des/DESCRIPTION] [t/TAG]…`# +"},{"lineNumber":845,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`add n/CS2101 Script p/8 d/2018-03-05 des/Script should be 500 words long t/CS2101 t/PhaseA`#"},{"lineNumber":846,"author":{"gitID":"-"},"content":"* *Clear* : [format-no-box]#`clear`#"},{"lineNumber":847,"author":{"gitID":"-"},"content":"* *Delete* : [format-no-box]#`delete INDEX`# +"},{"lineNumber":848,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`delete 3`#"},{"lineNumber":849,"author":{"gitID":"-"},"content":"* *Edit* : [format-no-box]#`edit INDEX [n/NAME] [p/PRIORITY_LEVEL] [d/DEADLINE] [des/DESCRIPTION] [t/TAG]…​`# +"},{"lineNumber":850,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`edit 1 p/9 d/2018-12-30`#"},{"lineNumber":851,"author":{"gitID":"-"},"content":"* *Find* : [format-no-box]#`find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`# +"},{"lineNumber":852,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`find CS2103 update 2018-03-17`#"},{"lineNumber":853,"author":{"gitID":"-"},"content":"** *Find Name* : [format-no-box]#`findn KEYWORD [MORE_KEYWORDS]` or `fn KEYWORD [MORE_KEYWORDS]`# +"},{"lineNumber":854,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`findn Developer User`#"},{"lineNumber":855,"author":{"gitID":"-"},"content":"** *Find Description* : [format-no-box]#`finddes KEYWORD [MORE_KEYWORDS]` or `fdes KEYWORDS [MORE_KEYWORDS]`# +"},{"lineNumber":856,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`finddes study update`#"},{"lineNumber":857,"author":{"gitID":"-"},"content":"** *Find Deadline* : [format-no-box]#`findd KEYWORD [MORE_KEYWORDS]` or `fd KEYWORDS [MORE_KEYWORDS]`# +"},{"lineNumber":858,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`findd 2018-03-17 2018-09-07`#"},{"lineNumber":859,"author":{"gitID":"-"},"content":"* *List* : [format-no-box]#`list`#"},{"lineNumber":860,"author":{"gitID":"-"},"content":"* *Select* : [format-no-box]#`select INDEX`# +"},{"lineNumber":861,"author":{"gitID":"-"},"content":"e.g.[example-no-box]#`select 2`#"},{"lineNumber":862,"author":{"gitID":"-"},"content":"* *Toggle* : [format-no-box]#`toggle INDEX`# +"},{"lineNumber":863,"author":{"gitID":"-"},"content":"e.g.[example-no-box]#`toggle 3`#"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Subtask Management Features"},{"lineNumber":866,"author":{"gitID":"-"},"content":"* *Add Subtask* : [format-no-box]#`adds INDEX n/NAME`# +"},{"lineNumber":867,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`adds 1 n/Submit Report`#"},{"lineNumber":868,"author":{"gitID":"-"},"content":"* *Delete Subtask* : [format-no-box]#`delete-subtask TASK_INDEX SUBTASK_INDEX`# +"},{"lineNumber":869,"author":{"gitID":"-"},"content":"e.g. [example-no-box]#`delete-subtask 2 3`#"},{"lineNumber":870,"author":{"gitID":"-"},"content":"* *Toggle Subtask* : [format-no-box]#`toggle-subtask TASK_INDEX SUBTASK_INDEX`# +"},{"lineNumber":871,"author":{"gitID":"-"},"content":"e.g.[example-no-box]#`toggle-subtask 3 2`#"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Features"},{"lineNumber":874,"author":{"gitID":"-"},"content":"* *Go To Current Month* : [format-no-box]#`cmonth`#"},{"lineNumber":875,"author":{"gitID":"-"},"content":"* *Go To Next Month* : [format-no-box]#`nmonth`#"},{"lineNumber":876,"author":{"gitID":"-"},"content":"* *Go To Previous Month* : [format-no-box]#`pmonth`#"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d PrioriTask Features"},{"lineNumber":879,"author":{"gitID":"-"},"content":"* *History* : [format-no-box]#`history`#"},{"lineNumber":880,"author":{"gitID":"-"},"content":"* *Undo* : [format-no-box]#`undo`#"},{"lineNumber":881,"author":{"gitID":"-"},"content":"* *Redo* : [format-no-box]#`redo`#"},{"lineNumber":882,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"dominickenn":3,"-":879}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"/*"},{"lineNumber":2,"author":{"gitID":"-"},"content":"// Commented out as it takes too long on travis, please uncomment before running local tests"},{"lineNumber":3,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_STUDY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_EXAM;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.EXAM;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.INTERVIEWPREP;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.MAKEPRESENT;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.STUDY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskUtil;"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"public class AddCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void add_undoRedo() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"/* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- *//*"},{"lineNumber":56,"author":{"gitID":"-"},"content":" */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"/* Case: add a task without tags to a non-empty organizer, command with leading spaces and trailing spaces"},{"lineNumber":58,"author":{"gitID":"-"},"content":" * -\u003e added"},{"lineNumber":59,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Task toAdd \u003d EXAM;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_EXAM + \"  \" + PRIORITY_DESC_EXAM + \" \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + DEADLINE_DESC_EXAM + \"   \" + DESCRIPTION_DESC_EXAM + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"/* Case: undo adding Exam to the list -\u003e Exam deleted *//*"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"/* Case: redo adding Exam to the list -\u003e Exam added again *//*"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        model.addTask(toAdd);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void add_sameTasks() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Task toAdd;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String command;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"/* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- *//*"},{"lineNumber":83,"author":{"gitID":"-"},"content":" */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"/* Case: add a task with all fields same as another task in the organizer book except name -\u003e added *//*"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_STUDY"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"/* Case: add a task with all fields same as another task in the organizer book except priority -\u003e added *//*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"/* Case: add a task with all fields same as another task in the organizer book except deadline -\u003e added *//*"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_STUDY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_EXAM"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"/* Case: add a task with all fields same as another task in the organizer book except description -\u003e added *//*"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_STUDY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_STUDY"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void add_withMissingNonCompulsoryParameters() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Task toAdd;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String command;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"/* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- *//*"},{"lineNumber":126,"author":{"gitID":"-"},"content":" */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"/* Case: add to empty organizer book -\u003e added *//*"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        deleteAllTasks();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(GROCERY);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"/* Case: add a task with tags, command with parameters in random order -\u003e added *//*"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        toAdd \u003d STUDY;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY + DESCRIPTION_DESC_STUDY + NAME_DESC_STUDY"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + DEADLINE_DESC_STUDY;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"/* Case: add a task, missing tags -\u003e added *//*"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(MAKEPRESENT);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        //@@guekling"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"/* Case: add a task, missing description -\u003e added *//*"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // deleteAllTasks();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM).withPriority"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                (VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM).withDescription(\"\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + TAG_DESC_FRIEND;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":149,"content":"        //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void add_performAddInDifferentSituations() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"/* -------------------------- Perform add operation on the shown filtered list ------------------------------ *//*"},{"lineNumber":155,"author":{"gitID":"-"},"content":" */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"/* Case: filters the task list before adding -\u003e added *//*"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(INTERVIEWPREP);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"/* ------------------------ Perform add operation while a task card is selected --------------------------- *//*"},{"lineNumber":161,"author":{"gitID":"-"},"content":" */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"/* Case: selects first card in the task list, add a task -\u003e added, card selection remains unchanged *//*"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        selectTask(Index.fromOneBased(1));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandSuccess(STUDY);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void add_invalidOperationsAddDuplicate() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String command;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(MAKEPRESENT);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"/* ----------------------------------- Perform invalid add operations --------------------------------------- *//*"},{"lineNumber":172,"author":{"gitID":"-"},"content":" */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"/* Case: add a duplicate task -\u003e rejected *//*"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d TaskUtil.getAddCommand(MAKEPRESENT);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"/* Case: add a duplicate task except with different tags -\u003e rejected *//*"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalTasks#GROCERY"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // Organizer#addTask(Task)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d TaskUtil.getAddCommand(MAKEPRESENT) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void add_invalidOperationsMissingParameters() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        String command;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"/* Case: missing name -\u003e rejected *//*"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"/* Case: missing deadline -\u003e rejected *//*"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void add_invalidOperationsInvalidParameters() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Task toAdd;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        String command;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"/* Case: invalid keyword -\u003e rejected *//*"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM).withPriority"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                (VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM).withDescription(\"\")"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        command \u003d \"addss \" + TaskUtil.getTaskDetails(toAdd);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"/* Case: invalid name -\u003e rejected *//*"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"/* Case: invalid priority -\u003e rejected *//*"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                + INVALID_PRIORITY_DESC + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"/* Case: invalid deadline -\u003e rejected *//*"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + INVALID_DEADLINE_DESC + DESCRIPTION_DESC_EXAM;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"/* Case: invalid tag -\u003e rejected *//*"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":232,"author":{"gitID":"-"},"content":" * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":" * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":" * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":" * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":236,"author":{"gitID":"-"},"content":" * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":" * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"},{"lineNumber":238,"author":{"gitID":"-"},"content":" * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":" * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":" * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":" * Verifications 1, 3 and 4 are performed by"},{"lineNumber":242,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":" *"},{"lineNumber":244,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":245,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":246,"author":{"gitID":"dominickenn"},"content":"    private void assertCommandSuccess(Task toAdd) {"},{"lineNumber":247,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(TaskUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":251,"author":{"gitID":"dominickenn"},"content":" * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code command}"},{"lineNumber":252,"author":{"gitID":"-"},"content":" * instead."},{"lineNumber":253,"author":{"gitID":"-"},"content":" *"},{"lineNumber":254,"author":{"gitID":"dominickenn"},"content":" * @see AddCommandSystemTest#assertCommandSuccess(Task)"},{"lineNumber":255,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":256,"author":{"gitID":"dominickenn"},"content":"    private void assertCommandSuccess(String command, Task toAdd) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            expectedModel.addTask(toAdd);"},{"lineNumber":260,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":268,"author":{"gitID":"dominickenn"},"content":" * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts that"},{"lineNumber":269,"author":{"gitID":"-"},"content":" * the,\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":" * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":" * 2. {@code Model}, {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"},{"lineNumber":272,"author":{"gitID":"-"},"content":" * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":" *"},{"lineNumber":274,"author":{"gitID":"dominickenn"},"content":" * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"},{"lineNumber":275,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":285,"author":{"gitID":"-"},"content":" * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":" * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":" * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":" * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":" * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":" * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":" * Verifications 1, 3 and 4 are performed by"},{"lineNumber":292,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":" *"},{"lineNumber":294,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":295,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"},{"lineNumber":305,"author":{"gitID":"-"},"content":"*/"}],"authorContributionMap":{"null":1,"dominickenn":13,"-":291}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"/*"},{"lineNumber":2,"author":{"gitID":"-"},"content":"// Commented out as it takes too long on travis, please uncomment before running local tests"},{"lineNumber":3,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TestUtil.getPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_REVISION;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"public class DeleteCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"/* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- *//*"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"/* Case: delete the first task in the list, command with leading spaces and trailing spaces -\u003e deleted *//*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TASK.getOneBased() + \"       \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Task deletedTask \u003d removePerson(expectedModel, INDEX_FIRST_TASK);"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedTask);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"/* Case: delete the last task in the list -\u003e deleted *//*"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"/* Case: undo deleting the last task in the list -\u003e last task restored *//*"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"/* Case: redo deleting the last task in the list -\u003e last task deleted again *//*"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"/* Case: delete the middle task in the list -\u003e deleted *//*"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"/* ------------------ Performing delete operation while a filtered list is being shown ---------------------- *//*"},{"lineNumber":58,"author":{"gitID":"-"},"content":" */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"/* Case: filtered task list, delete index within bounds of organizer and task list -\u003e deleted *//*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_REVISION);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_TASK;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"/* Case: filtered task list, delete index within bounds of organizer but out of bounds of task list"},{"lineNumber":66,"author":{"gitID":"-"},"content":" * -\u003e rejected"},{"lineNumber":67,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_REVISION);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getOrganizer().getTaskList().size();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"/* --------------------- Performing delete operation while a task card is selected ------------------------ *//*"},{"lineNumber":74,"author":{"gitID":"-"},"content":" */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"/* Case: delete the selected task -\u003e task list panel selects the task before the deleted task *//*"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        showAllTasks();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        selectTask(selectedIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        deletedTask \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedTask);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"/* --------------------------------- Performing invalid delete operation ------------------------------------ *//*"},{"lineNumber":87,"author":{"gitID":"-"},"content":" */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"/* Case: invalid index (0) -\u003e rejected *//*"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"/* Case: invalid index (-1) -\u003e rejected *//*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"/* Case: invalid index (size + 1) -\u003e rejected *//*"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":98,"author":{"gitID":"-"},"content":"                getModel().getOrganizer().getTaskList().size() + 1);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"/* Case: invalid arguments (alphabets) -\u003e rejected *//*"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"/* Case: invalid arguments (extra argument) -\u003e rejected *//*"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"/* Case: mixed case command word -\u003e rejected *//*"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":113,"author":{"gitID":"-"},"content":" * Removes the {@code Task} at the specified {@code index} in {@code model}\u0027s organizer book."},{"lineNumber":114,"author":{"gitID":"-"},"content":" *"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":" * @return the removed task"},{"lineNumber":116,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"    private Task removePerson(Model model, Index index) {"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        Task targetTask \u003d getPerson(model, index);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            model.deleteTask(targetTask);"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"targetTask is retrieved from model.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        return targetTask;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":" * Deletes the task at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":129,"author":{"gitID":"-"},"content":" * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":130,"author":{"gitID":"-"},"content":" *"},{"lineNumber":131,"author":{"gitID":"-"},"content":" * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":132,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"        Task deletedTask \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedTask);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":138,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":142,"author":{"gitID":"-"},"content":" * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":" * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":" * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":" * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":" * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":" * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":" * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":" * Verifications 1 to 3 are performed by"},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":151,"author":{"gitID":"-"},"content":" *"},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":153,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":159,"author":{"gitID":"-"},"content":" * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":160,"author":{"gitID":"-"},"content":" * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":161,"author":{"gitID":"-"},"content":" *"},{"lineNumber":162,"author":{"gitID":"-"},"content":" * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":179,"author":{"gitID":"-"},"content":" * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":" * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":" * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":" * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":" * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":" * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":" * Verifications 1 to 3 are performed by"},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":" *"},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"},{"lineNumber":199,"author":{"gitID":"-"},"content":"*/"}],"authorContributionMap":{"dominickenn":18,"-":181}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"//import seedu.organizer.ui.CalendarPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"public class HelpCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getTaskListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getCalendarPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":92}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.TestApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyOrganizer\u003e addressBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":72}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"//// Commented out as it takes too long on travis, please uncomment before running local tests"},{"lineNumber":2,"author":{"gitID":"-"},"content":"//"},{"lineNumber":3,"author":{"gitID":"-"},"content":"//package systemtests;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"//"},{"lineNumber":5,"author":{"gitID":"-"},"content":"//import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"//import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"//"},{"lineNumber":8,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_REVISION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_REVISION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_REVISION;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_STUDY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_REVISION;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIENDS;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"////import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"//import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"////import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"//import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"//import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"//import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"//import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"//import static seedu.organizer.testutil.TypicalTasks.STUDY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"//"},{"lineNumber":38,"author":{"gitID":"-"},"content":"//import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"//"},{"lineNumber":40,"author":{"gitID":"-"},"content":"//import seedu.organizer.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"//import seedu.organizer.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"//import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"//import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"//import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.Model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.tag.Tag;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.task.Deadline;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.task.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.task.Priority;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.task.Task;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"//import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"//import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"//import seedu.organizer.testutil.TaskUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"//"},{"lineNumber":56,"author":{"gitID":"-"},"content":"//public class EditCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"//"},{"lineNumber":58,"author":{"gitID":"-"},"content":"//    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"//    public void edit_unfilteredList() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"//        Model model \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"//"},{"lineNumber":62,"author":{"gitID":"-"},"content":"/* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"//        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":64,"author":{"gitID":"-"},"content":"//         * -\u003e edited"},{"lineNumber":65,"author":{"gitID":"-"},"content":"//         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"//"},{"lineNumber":67,"author":{"gitID":"-"},"content":"//        Index index \u003d INDEX_FIRST_TASK;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"//        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""},{"lineNumber":69,"author":{"gitID":"-"},"content":"//                + NAME_DESC_STUDY + \"  \" + PRIORITY_DESC_STUDY + \" \" + DEADLINE_DESC_STUDY"},{"lineNumber":70,"author":{"gitID":"-"},"content":"//                + \"  \" + DESCRIPTION_DESC_STUDY + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"//        Task editedTask \u003d new TaskBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"//                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_STUDY)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"//                .withDescription(VALID_DESCRIPTION_STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"//"},{"lineNumber":76,"author":{"gitID":"-"},"content":"//        /* Case: undo editing the last task in the list -\u003e last task restored */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"//        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"//"},{"lineNumber":81,"author":{"gitID":"-"},"content":"//        /* Case: redo editing the last task in the list -\u003e last task edited again */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"//        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"//        model.updateTask(getModel().getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), editedTask);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"//"},{"lineNumber":87,"author":{"gitID":"-"},"content":"//        /* Case: edit a task with new values same as existing values -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":89,"author":{"gitID":"-"},"content":"//                + NAME_DESC_REVISION + PRIORITY_DESC_REVISION + DEADLINE_DESC_REVISION"},{"lineNumber":90,"author":{"gitID":"-"},"content":"//                + DESCRIPTION_DESC_REVISION;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, index, REVISION);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"//"},{"lineNumber":93,"author":{"gitID":"-"},"content":"//        /*Commented out as it hangs the tests, tested this test case manually and it works @@dominickenn*/"},{"lineNumber":94,"author":{"gitID":"-"},"content":"//        //        /* Case: edit some fields -\u003e edited */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"//        //        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"//        //        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"//        //        Task taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"//        //        editedTask \u003d new TaskBuilder(taskToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"//        //        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"//        //"},{"lineNumber":101,"author":{"gitID":"-"},"content":"//        //        /* Case: clear tags -\u003e cleared */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"//        //        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"//        //        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"//        //        editedTask \u003d new TaskBuilder(taskToEdit).withTags().build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"//        //        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"//"},{"lineNumber":108,"author":{"gitID":"-"},"content":"//    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"//    public void edit_filteredList() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"//        Index index;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"//        String command;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"//        Task taskToEdit;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"//        Task editedTask;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"//"},{"lineNumber":115,"author":{"gitID":"-"},"content":"/* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"//        /* Case: filtered task list, edit index within bounds of organizer book and task list -\u003e edited */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"//        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"//        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"//        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_EXAM;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"//        taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"//        editedTask \u003d new TaskBuilder(taskToEdit).withName(VALID_NAME_EXAM).build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"//"},{"lineNumber":125,"author":{"gitID":"-"},"content":"//        /* Case: filtered task list, edit index within bounds of organizer book but out of bounds of task list"},{"lineNumber":126,"author":{"gitID":"-"},"content":"//         * -\u003e rejected"},{"lineNumber":127,"author":{"gitID":"-"},"content":"//         */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"//        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"//        int invalidIndex \u003d getModel().getOrganizer().getTaskList().size();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_EXAM,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"//                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"//"},{"lineNumber":134,"author":{"gitID":"-"},"content":"//    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"//    public void edit_taskCardSelected() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"//        Index index;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"//        String command;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"//"},{"lineNumber":139,"author":{"gitID":"-"},"content":"//        /* --------------------- Performing edit operation while a task card is selected -------------------------- */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"//        /* Case: selects first card in the task list, edit a task -\u003e edited, card selection remains unchanged but"},{"lineNumber":141,"author":{"gitID":"-"},"content":"//         * browser url changes"},{"lineNumber":142,"author":{"gitID":"-"},"content":"//         */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"//        showAllTasks();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"//        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"//        selectTask(index);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":147,"author":{"gitID":"-"},"content":"//                + NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":148,"author":{"gitID":"-"},"content":"//                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"//        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":150,"author":{"gitID":"-"},"content":"//        // browser\u0027s url is updated to reflect the new task\u0027s name"},{"lineNumber":151,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, index, STUDY, index);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"//"},{"lineNumber":154,"author":{"gitID":"-"},"content":"//    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"//    public void edit_invalidOperation() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"//        Index index;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"//        String command;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"//        int invalidIndex;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"//"},{"lineNumber":160,"author":{"gitID":"-"},"content":"/* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"//        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_STUDY,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"//"},{"lineNumber":165,"author":{"gitID":"-"},"content":"//        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_STUDY,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"//"},{"lineNumber":169,"author":{"gitID":"-"},"content":"//        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"//        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_STUDY,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"//                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"//"},{"lineNumber":174,"author":{"gitID":"-"},"content":"//        /* Case: missing index -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_STUDY,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"//                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"//"},{"lineNumber":178,"author":{"gitID":"-"},"content":"//        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"},{"lineNumber":180,"author":{"gitID":"-"},"content":"//                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"//"},{"lineNumber":182,"author":{"gitID":"-"},"content":"//        /* Case: invalid name -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":184,"author":{"gitID":"-"},"content":"//                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"//"},{"lineNumber":186,"author":{"gitID":"-"},"content":"//        /* Case: invalid priority -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_PRIORITY_DESC,"},{"lineNumber":188,"author":{"gitID":"-"},"content":"//                Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"//"},{"lineNumber":190,"author":{"gitID":"-"},"content":"//        /* Case: invalid deadline -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_DEADLINE_DESC,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"//                Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"//"},{"lineNumber":194,"author":{"gitID":"-"},"content":"//        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":196,"author":{"gitID":"-"},"content":"//                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"//"},{"lineNumber":198,"author":{"gitID":"-"},"content":"//        /* Case: edit a task with new values same as another task\u0027s values -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"//        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"//        assertFalse(getModel().getFilteredTaskList()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"//                .get(index.getZeroBased()).equals(REVISION));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":203,"author":{"gitID":"-"},"content":"//                + NAME_DESC_REVISION + PRIORITY_DESC_REVISION + DEADLINE_DESC_REVISION"},{"lineNumber":204,"author":{"gitID":"-"},"content":"//                + DESCRIPTION_DESC_REVISION + TAG_DESC_FRIENDS;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"//"},{"lineNumber":207,"author":{"gitID":"-"},"content":"//        /* Case: edit a task with new values same as another task\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"//        executeCommand(TaskUtil.getAddCommand(STUDY));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"//        assertTrue(getModel().getOrganizer().getTaskList().contains(STUDY));"},{"lineNumber":210,"author":{"gitID":"-"},"content":"//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"//                + NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":212,"author":{"gitID":"-"},"content":"//                + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"//"},{"lineNumber":216,"author":{"gitID":"-"},"content":"//    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"//     * Performs the same verification as {@code assertCommandSuccess(String, Index, Task, Index)} except that"},{"lineNumber":218,"author":{"gitID":"-"},"content":"//     * the browser url and selected card remain unchanged."},{"lineNumber":219,"author":{"gitID":"-"},"content":"//     *"},{"lineNumber":220,"author":{"gitID":"-"},"content":"//     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":221,"author":{"gitID":"-"},"content":"//     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Task, Index)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"//     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"//    private void assertCommandSuccess(String command, Index toEdit, Task editedTask) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, toEdit, editedTask, null);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"//"},{"lineNumber":227,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":228,"author":{"gitID":"-"},"content":" * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":" * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"dominickenn"},"content":" * 2. Asserts that the model related components are updated to reflect the task at index {@code toEdit} being"},{"lineNumber":231,"author":{"gitID":"dominickenn"},"content":" * updated to values specified {@code editedTask}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":" *"},{"lineNumber":233,"author":{"gitID":"-"},"content":" * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":234,"author":{"gitID":"-"},"content":" * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":235,"author":{"gitID":"-"},"content":" */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"//    private void assertCommandSuccess(String command, Index toEdit, Task editedTask,"},{"lineNumber":237,"author":{"gitID":"-"},"content":"//                                      Index expectedSelectedCardIndex) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"//        Model expectedModel \u003d getModel();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"//        try {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"//            expectedModel.updateTask("},{"lineNumber":241,"author":{"gitID":"-"},"content":"//                    expectedModel.getFilteredTaskList().get(toEdit.getZeroBased()), editedTask);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"//            expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"//        } catch (DuplicateTaskException | TaskNotFoundException e) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"//            throw new IllegalArgumentException("},{"lineNumber":245,"author":{"gitID":"-"},"content":"//                    \"editedTask is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":246,"author":{"gitID":"-"},"content":"//        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"//"},{"lineNumber":248,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, expectedModel,"},{"lineNumber":249,"author":{"gitID":"-"},"content":"//                String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask), expectedSelectedCardIndex);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"//"},{"lineNumber":252,"author":{"gitID":"-"},"content":"//    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"//     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":254,"author":{"gitID":"-"},"content":"//     * browser url and selected card remain unchanged."},{"lineNumber":255,"author":{"gitID":"-"},"content":"//     *"},{"lineNumber":256,"author":{"gitID":"-"},"content":"//     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":257,"author":{"gitID":"-"},"content":"//     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"//"},{"lineNumber":262,"author":{"gitID":"-"},"content":"//    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"//     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"//     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"//     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"//     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"//     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":268,"author":{"gitID":"-"},"content":"//     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"//     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"//     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"//     * Verifications 1 to 3 are performed by"},{"lineNumber":272,"author":{"gitID":"-"},"content":"//     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"//     *"},{"lineNumber":274,"author":{"gitID":"-"},"content":"//     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"//     * @see OrganizerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":276,"author":{"gitID":"-"},"content":"//     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":278,"author":{"gitID":"-"},"content":"//                                      Index expectedSelectedCardIndex) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"//        executeCommand(command);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"//        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"//        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"//        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"//            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"//        } else {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"//            assertSelectedCardUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"//        }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"//        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"//"},{"lineNumber":291,"author":{"gitID":"-"},"content":"//    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"//     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"//     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"//     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"//     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"//     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"//     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"//     * Verifications 1 to 3 are performed by"},{"lineNumber":299,"author":{"gitID":"-"},"content":"//     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"//     *"},{"lineNumber":301,"author":{"gitID":"-"},"content":"//     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":302,"author":{"gitID":"-"},"content":"//     */"},{"lineNumber":303,"author":{"gitID":"-"},"content":"//    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"//        Model expectedModel \u003d getModel();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"//"},{"lineNumber":306,"author":{"gitID":"-"},"content":"//        executeCommand(command);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"//        assertSelectedCardUnchanged();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"//        assertCommandBoxShowsErrorStyle();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"//        assertStatusBarUnchanged();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"//    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"//}"}],"authorContributionMap":{"dominickenn":2,"-":310}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static void setFilteredList(Model model, List\u003cTask\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public static void setFilteredList(Model model, Task... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":33}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"/*"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public class ErrorDialogGuiTest extends OrganizerSystemTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":23,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"},{"lineNumber":26,"author":{"gitID":"-"},"content":"*/"}],"authorContributionMap":{"dominickenn":1,"-":25}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"/*"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class SelectCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"/* ------------------------ Perform select operations on the shown unfiltered list -------------------------- *//*"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"/* Case: select the first card in the task list, command with leading spaces and trailing spaces"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * -\u003e selected"},{"lineNumber":25,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \"   \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_TASK);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"/* Case: select the last card in the task list -\u003e selected *//*"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalTasks().size());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"/* Case: undo previous selection -\u003e rejected *//*"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"/* Case: redo selecting last card in the list -\u003e rejected *//*"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"/* Case: select the middle card in the task list -\u003e selected *//*"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"/* Case: select the current selected card -\u003e selected *//*"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"/* ------------------------ Perform select operations on the shown filtered list ---------------------------- *//*"},{"lineNumber":53,"author":{"gitID":"-"},"content":" */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"/* Case: filtered task list, select index within bounds of organizer book but out of bounds of task list"},{"lineNumber":55,"author":{"gitID":"-"},"content":" * -\u003e rejected"},{"lineNumber":56,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getOrganizer().getTaskList().size();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"/* Case: filtered task list, select index within bounds of organizer book and task list -\u003e selected *//*"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredTaskList().size());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"/* ----------------------------------- Perform invalid select operations ------------------------------------ *//*"},{"lineNumber":68,"author":{"gitID":"-"},"content":" */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"/* Case: invalid index (0) -\u003e rejected *//*"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"/* Case: invalid index (-1) -\u003e rejected *//*"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"/* Case: invalid index (size + 1) -\u003e rejected *//*"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"/* Case: invalid arguments (alphabets) -\u003e rejected *//*"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":83,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"/* Case: invalid arguments (extra argument) -\u003e rejected *//*"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":87,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"/* Case: mixed case command word -\u003e rejected *//*"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"/* Case: select from empty organizer book -\u003e rejected *//*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        deleteAllTasks();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":99,"author":{"gitID":"-"},"content":" * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":" * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":" * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":" * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":" * {@code expectedSelectedCardIndex} of the selected task.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":" * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":" * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":" * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":" * Verifications 1, 3 and 4 are performed by"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":" *"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":112,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":116,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getTaskListPanel().getSelectedCardIndex();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":130,"author":{"gitID":"-"},"content":" * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":" * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":" * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":" * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":" * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":" * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":" * Verifications 1, 3 and 4 are performed by"},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":" *"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":140,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"*/"}],"authorContributionMap":{"dominickenn":8,"-":142}},{"path":"src/test/java/seedu/organizer/ui/TaskListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class TaskListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalTasks());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_TASK);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private TaskListPanelHandle taskListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        TaskListPanel taskListPanel \u003d new TaskListPanel(TYPICAL_TASKS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(taskListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                TaskListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"            taskListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"            Task expectedTask \u003d TYPICAL_TASKS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysTask(expectedTask, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        TaskCardHandle expectedCard \u003d taskListPanelHandle.getTaskCardHandle(INDEX_SECOND_TASK.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        TaskCardHandle selectedCard \u003d taskListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":53}},{"path":"src/test/java/seedu/organizer/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":" * A GUI unit test class for Organizer."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":37}},{"path":"src/test/java/seedu/organizer/ui/TaskCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TaskCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        Task taskWithNoTags \u003d new TaskBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"        TaskCard taskCard \u003d new TaskCard(taskWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(taskCard);"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"        assertCardDisplay(taskCard, taskWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        Task taskWithTags \u003d new TaskBuilder().build();"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        taskCard \u003d new TaskCard(taskWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(taskCard);"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        assertCardDisplay(taskCard, taskWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        TaskCard taskCard \u003d new TaskCard(task, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        // same task, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        TaskCard copy \u003d new TaskCard(task, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(taskCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(taskCard.equals(taskCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(taskCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(taskCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        // different task, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        Task differentTask \u003d new TaskBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        // same task, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        assertFalse(taskCard.equals(new TaskCard(task, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify task name is displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCardDisplaysTask(expectedTask, taskCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":17,"-":55}},{"path":"src/test/java/systemtests/OrganizerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"//import static guitests.guihandles.WebViewUtil.waitUntilCalendarLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"//import static seedu.organizer.ui.CalendarPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"//import static seedu.organizer.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.StatusBarFooter.TOTAL_TASKS_STATUS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"//import static seedu.organizer.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"//import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"//import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"//import seedu.organizer.MainApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.TestApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TypicalTasks;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"//import seedu.organizer.ui.CalendarPanel;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.CommandBox;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":" * A system test class for Organizer, which provides access to handles of GUI components and helper methods"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":50,"author":{"gitID":"-"},"content":" */"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"public abstract class OrganizerSystemTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        testApp.loginAdmin();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"    protected Organizer getInitialData() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TypicalTasks.getTypicalOrganizer();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public TaskListPanelHandle getTaskListPanel() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Displays all persons in the organizer book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void showAllTasks() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getOrganizer().getTaskList().size(), getModel().getFilteredTaskList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void showTasksWithName(String keyword) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(FindNameCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getOrganizer().getTaskList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"     * Selects the task at {@code index} of the displayed list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected void selectTask(Index index) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Deletes all persons in the organizer book."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void deleteAllTasks() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getOrganizer().getTaskList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same task objects as {@code expectedModel}"},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":"     * and the task list panel displays the persons in the model correctly."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getOrganizer(), testApp.readStorageOrganizer());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Calls {@code TaskListPanelHandle} and {@code StatusBarFooterHandle} to remember their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberTotalTasksStatus();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getTaskListPanel().rememberSelectedTaskCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"dominickenn"},"content":"     * of the previously selected task."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @see CalendarPanelHandle#isUrlChanged()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /*assertFalse(getCalendarPanel().isUrlChanged());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertFalse(getTaskListPanel().isAnyCardSelected());*/"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the task in the task list panel at"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see CalendarPanelHandle#isUrlChanged()"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        /*String selectedCardName \u003d getTaskListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(CalendarPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getCalendarPanel().getLoadedUrl());"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getTaskListPanel().getSelectedCardIndex());*/"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the browser\u0027s url and the selected card in the task list panel remain unchanged."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @see CalendarPanelHandle#isUrlChanged()"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        /*assertFalse(getCalendarPanel().isUrlChanged());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertFalse(getTaskListPanel().isSelectedTaskCardChanged());*/"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertFalse(handle.isTotalTasksStatusChanged());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        //Does not apply as login occurs first"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        //assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location and the total task"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     + list remains the same."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        //Does not apply due to login"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertFalse(handle.isTotalTasksStatusChanged());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getCalendarPanel().getLoadedUrl"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            //        ());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            //Does not apply as login occurs first"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            //assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            assertEquals(String.format(TOTAL_TASKS_STATUS, getModel().getOrganizer().getCurrentUserTaskList().size()),"},{"lineNumber":293,"author":{"gitID":"-"},"content":"                getStatusBarFooter().getTotalTasksStatus());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Asserts that the sync status in the status bar was changed to the timing of"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, and total tasks was changed to match the total"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * number of persons in the address book, while the save location remains the same."},{"lineNumber":303,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"        final int totalTasks \u003d testApp.getModel().getOrganizer().getTaskList().size();"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        assertEquals(String.format(TOTAL_TASKS_STATUS, totalTasks), handle.getTotalTasksStatus());"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":319,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":314}},{"path":"src/test/java/seedu/organizer/ui/CalendarPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.getTypicalExecutedCommands;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.YearMonth;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.MonthViewHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"public class CalendarPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        (getTypicalExecutedCommands());"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    private static final int SUNDAY \u003d 7;"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    private static final int FIRST_ROW \u003d 0;"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    private static final int MAX_NUM_OF_DAYS \u003d 35;"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    private static final double DAYS_IN_WEEK \u003d 7.0;"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    private CalendarPanelHandle calendarPanelHandle;"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    private MonthViewHandle monthViewHandle;"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    private YearMonth currentYearMonth;"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        calendarPanel \u003d new CalendarPanel(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        uiPartRule.setUiPart(calendarPanel);"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":""},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        calendarPanelHandle \u003d new CalendarPanelHandle(calendarPanel.getRoot());"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        monthViewHandle \u003d new MonthViewHandle(calendarPanel.getMonthView().getRoot());"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":""},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        currentYearMonth \u003d YearMonth.now();"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":""},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"    public void display() {"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        // verify that calendar title is displayed correctly"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        monthViewHandle.getCalendarTitleText();"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        String expectedTitle \u003d currentYearMonth.getMonth().toString() + \" \" + currentYearMonth.getYear();"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTitle, monthViewHandle.getCalendarTitleText());"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":""},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        // verify that the first date of the month is displayed in the correct row and column"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        Node startDateNode \u003d monthViewHandle.getPrintedDateNode(1);"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        int startDateRow \u003d monthViewHandle.getRowIndex(startDateNode);"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        int startDateColumn \u003d monthViewHandle.getColumnIndex(startDateNode);"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        int expectedStartDateColumn \u003d getExpectedDateColumn(currentYearMonth, 1);"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":""},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        assertEquals(FIRST_ROW, startDateRow);"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedStartDateColumn, startDateColumn);"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":""},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        // verify that the last date of the month is displayed in the correct row and column"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        int lastDate \u003d currentYearMonth.lengthOfMonth();"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"        Node lastDateNode \u003d monthViewHandle.getPrintedDateNode(lastDate);"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        int lastDateRow \u003d monthViewHandle.getRowIndex(lastDateNode);"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"        int lastDateColumn \u003d monthViewHandle.getColumnIndex(lastDateNode);"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        int expectedLastDateColumn \u003d getExpectedDateColumn(currentYearMonth, lastDate);"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        int expectedLastDateRow \u003d getExpectedDateRow(currentYearMonth, lastDate);"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":""},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedLastDateColumn, lastDateColumn);"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedLastDateRow, lastDateRow);"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":""},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"     * Retrieves the expected column index of a {@code date}."},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"    private int getExpectedDateColumn(YearMonth yearMonth, int date) {"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        int expectedDateColumn \u003d yearMonth.atDay(date).getDayOfWeek().getValue();"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":""},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"        if (expectedDateColumn \u003d\u003d SUNDAY) {"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"            expectedDateColumn \u003d 0;"},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":""},{"lineNumber":84,"author":{"gitID":"guekling"},"content":"        return expectedDateColumn;"},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":""},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"guekling"},"content":"     * Retrieves the expected row index of a {@code date}."},{"lineNumber":89,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"guekling"},"content":"    private int getExpectedDateRow(YearMonth yearMonth, int date) {"},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"        int startDay \u003d yearMonth.atDay(1).getDayOfWeek().getValue();"},{"lineNumber":92,"author":{"gitID":"guekling"},"content":""},{"lineNumber":93,"author":{"gitID":"guekling"},"content":"        if (startDay \u003d\u003d SUNDAY) {"},{"lineNumber":94,"author":{"gitID":"guekling"},"content":"            startDay \u003d 0;"},{"lineNumber":95,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"guekling"},"content":""},{"lineNumber":97,"author":{"gitID":"guekling"},"content":"        int totalDays \u003d startDay + date;"},{"lineNumber":98,"author":{"gitID":"guekling"},"content":""},{"lineNumber":99,"author":{"gitID":"guekling"},"content":"        if (totalDays \u003c\u003d MAX_NUM_OF_DAYS) {"},{"lineNumber":100,"author":{"gitID":"guekling"},"content":"            return (int) (date / DAYS_IN_WEEK);"},{"lineNumber":101,"author":{"gitID":"guekling"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"guekling"},"content":"            return FIRST_ROW;"},{"lineNumber":103,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":87,"-":18}},{"path":"src/test/java/systemtests/FindNameCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"/*"},{"lineNumber":2,"author":{"gitID":"-"},"content":"// Commented out as it takes too long on travis, please uncomment before running local tests"},{"lineNumber":3,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.HOMEWORK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_DO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class FindNameCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void find_successful() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"/* Case: find multiple tasks in organizer, command with leading spaces and trailing spaces"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * -\u003e 2 tasks found"},{"lineNumber":29,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_DO + \"   \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, HOMEWORK, PROJECT); // first names of HOMEWORK and PROJECT are \"Do\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"/* Case: repeat previous find command where task list is displaying the tasks we are finding"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * -\u003e 2 tasks found"},{"lineNumber":38,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_DO;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"/* Case: find task where task list is not displaying the task we are finding -\u003e 1 task found *//*"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Spring\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, SPRINGCLEAN);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"/* Case: find multiple tasks in organizer, 2 keywords -\u003e 2 tasks found *//*"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Spring Prepare\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, SPRINGCLEAN, PREPAREBREAKFAST);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"/* Case: find multiple tasks in organizer, 2 keywords in reversed order -\u003e 2 tasks found *//*"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Prepare Spring\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"/* Case: find multiple tasks in organizer, 2 keywords with 1 repeat -\u003e 2 tasks found *//*"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Prepare Spring Prepare\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"/* Case: find multiple tasks in organizer, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":66,"author":{"gitID":"-"},"content":" * -\u003e 2 tasks found"},{"lineNumber":67,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Prepare Spring NonMatchingKeyWord\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"/* Case: find same tasks in organizer after deleting 1 of them -\u003e 1 task found *//*"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getOrganizer().getTaskList().contains(PREPAREBREAKFAST));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SPRING;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, SPRINGCLEAN);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"/* Case: find task in organizer, keyword is same as name but of different case -\u003e 1 task found *//*"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Spring\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void find_undoRedoRejected() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"/* Case: find multiple tasks in organizer -\u003e 2 tasks found *//*"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_DO;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, HOMEWORK, PROJECT); // first names of HOMEWORK and PROJECT are \"Do\""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"/* Case: undo previous find command -\u003e rejected *//*"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"/* Case: redo previous find command -\u003e rejected *//*"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void find_noTasksFound() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String command;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"/* Case: find task in organizer, keyword is substring of name -\u003e 0 tasks found *//*"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"/* Case: find task in organizer, name is substring of keyword -\u003e 0 tasks found *//*"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Springs\";"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"/* Case: find task not in organizer -\u003e 0 tasks found *//*"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Swim\";"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"/* Case: find priority number of task in organizer -\u003e 0 tasks found *//*"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + HOMEWORK.getPriority().value;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"/* Case: find organizer of task in organizer -\u003e 0 tasks found *//*"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + HOMEWORK.getDescription().value;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"/* Case: find email of task in organizer book -\u003e 0 persons found *//*"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + HOMEWORK.getDeadline().toString();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"/* Case: find tags of task in organizer -\u003e 0 tasks found *//*"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(HOMEWORK.getTags());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"/* Case: find task in empty organizer -\u003e 0 tasks found *//*"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        deleteAllTasks();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SPRING;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, HOMEWORK);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void find_taskCardSelected() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String command;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"/* Case: find while a task is selected -\u003e selected card deselected *//*"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        showAllTasks();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        selectTask(Index.fromOneBased(1));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(getTaskListPanel().getHandleToSelectedCard().getName().equals(HOMEWORK.getName().fullName));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Homework\";"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, HOMEWORK);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void find_rejected() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"/* Case: mixed case command word -\u003e rejected *//*"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String command \u003d \"FiNd Meier\";"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":180,"author":{"gitID":"-"},"content":" * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":181,"author":{"gitID":"-"},"content":" * box displays {@code Messages#MESSAGE_TASKS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":182,"author":{"gitID":"-"},"content":" * and the model related components equal to {@code expectedModel}."},{"lineNumber":183,"author":{"gitID":"-"},"content":" * These verifications are done by"},{"lineNumber":184,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":" * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":186,"author":{"gitID":"-"},"content":" * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":187,"author":{"gitID":"-"},"content":" *"},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":192,"author":{"gitID":"-"},"content":"                MESSAGE_TASKS_LISTED_OVERVIEW, expectedModel.getFilteredTaskList().size());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":200,"author":{"gitID":"-"},"content":" * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":201,"author":{"gitID":"-"},"content":" * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":202,"author":{"gitID":"-"},"content":" * These verifications are done by"},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":" * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":" * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":205,"author":{"gitID":"-"},"content":" * error style."},{"lineNumber":206,"author":{"gitID":"-"},"content":" *"},{"lineNumber":207,"author":{"gitID":"dominickenn"},"content":" * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":208,"author":{"gitID":"-"},"content":" *//*"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"}"},{"lineNumber":218,"author":{"gitID":"-"},"content":"*/"}],"authorContributionMap":{"dominickenn":4,"-":214}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d PrioriTask - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":linkcss:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":icons: font"},{"lineNumber":4,"author":{"gitID":"-"},"content":":source-highlighter: coderay"},{"lineNumber":5,"author":{"gitID":"-"},"content":":coderay-css: style"},{"lineNumber":6,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":8,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":9,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":10,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":11,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":12,"author":{"gitID":"-"},"content":":stylesheet: guides-style.css"},{"lineNumber":13,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":16,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":17,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":18,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B4/main"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"By: `CS2103JAN2018-W13-B4`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"PrioriTask is a desktop task management application. It is not just any task management application, but a combination of the to-do list, calendar and reminder features, with an added bonus of an automatic updating and sorting of your tasks based on priority levels. It helps you keep track of your tasks, while providing you with at-a-glance views of upcoming tasks by day, week or month."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"PrioriTask is a fairly new application that has much room for improvement. We welcome any form of contributions to the PrioriTask project, be it from beginners or seasoned Java developers. Whether you\u0027re a new developer or an experienced contributor, this guide can serve as a helpful reference and source for information about writing code for the PrioriTask project."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"This developer\u0027s guide consists of the following sections."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cGetting Started\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cImplementation\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cDocumentation\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cTesting\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cDev Ops\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Getting Started"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"This section contains information to help you get started developing for PrioriTask. The simple list below will ensure that you get up and running with the application in no time."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"* \u003c\u003cInstalling prerequisites\u003e\u003e"},{"lineNumber":42,"author":{"gitID":"-"},"content":"* \u003c\u003cSetting up the project in your computer\u003e\u003e"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* \u003c\u003cVerifying the setup\u003e\u003e"},{"lineNumber":44,"author":{"gitID":"-"},"content":"* \u003c\u003cConfiguring the project before writing code\u003e\u003e"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* \u003c\u003cGetting started with developing\u003e\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Installing prerequisites"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"Before working on PrioriTask, ensure that you have the following software installed."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":54,"author":{"gitID":"-"},"content":"PrioriTask works best on JDK `1.8.0_60` or later. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"It will not work with earlier versions of Java 8."},{"lineNumber":56,"author":{"gitID":"-"},"content":"+"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":59,"author":{"gitID":"-"},"content":"+"},{"lineNumber":60,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":61,"author":{"gitID":"-"},"content":"PrioriTask requires Gradle and JavaFX plugins. +"},{"lineNumber":62,"author":{"gitID":"-"},"content":"IntelliJ has both plugins installed by default. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"After you\u0027ve ensured that you\u0027ve met all requirements, follow the steps below to setup this project in your computer."},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"The following steps are written for IntelliJ IDEA `2017.3.5` (Ultimate Edition). +"},{"lineNumber":70,"author":{"gitID":"-"},"content":"There may be slight variations in the steps if using other versions of IntelliJ."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":73,"author":{"gitID":"-"},"content":". Open IntelliJ. You should see the welcome screen (refer to \u003c\u003cfig-GettingStarted1\u003e\u003e)."},{"lineNumber":74,"author":{"gitID":"-"},"content":".. If you do not see the welcome screen, select `File` \u003e `Close Project` to close the existing project dialog first."},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"[[fig-GettingStarted1]]"},{"lineNumber":77,"author":{"gitID":"-"},"content":".IntelliJ\u0027s Welcome Screen"},{"lineNumber":78,"author":{"gitID":"-"},"content":"image::DeveloperGettingStarted1.png[width\u003d\"600\"]"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"[start\u003d3]"},{"lineNumber":81,"author":{"gitID":"-"},"content":". Click on `Import Project`."},{"lineNumber":82,"author":{"gitID":"-"},"content":". Locate the cloned folder, and select it. Click `OK`. You will be directed to the `Import Project` window (refer to \u003c\u003cfig-GettingStarted2\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[[fig-GettingStarted2]]"},{"lineNumber":85,"author":{"gitID":"-"},"content":".The first page of the `Import Project` window"},{"lineNumber":86,"author":{"gitID":"-"},"content":"image::DeveloperGettingStarted2.png[width\u003d\"600\"]"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"[start\u003d5]"},{"lineNumber":89,"author":{"gitID":"-"},"content":". Check the `Create project from existing sources` box and click `Next`. You will be directed to the next window (refer to \u003c\u003cfig-GettingStarted3\u003e\u003e)."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"[[fig-GettingStarted3]]"},{"lineNumber":92,"author":{"gitID":"-"},"content":".The second page of the `Import Project` window"},{"lineNumber":93,"author":{"gitID":"-"},"content":"image::DeveloperGettingStarted3.png[width\u003d\"600\"]"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"[start\u003d6]"},{"lineNumber":96,"author":{"gitID":"-"},"content":". Fill up the necessary information as follows, and click `Next`. You will be directed to the next window."},{"lineNumber":97,"author":{"gitID":"-"},"content":". Click `Next` until to reach the window to select the project SDK (refer to \u003c\u003cfig-GettingStarted4\u003e\u003e)."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"[[fig-GettingStarted4]]"},{"lineNumber":100,"author":{"gitID":"-"},"content":".Selecting project SDK in the `Import Project` window"},{"lineNumber":101,"author":{"gitID":"-"},"content":"image::DeveloperGettingStarted4.png[width\u003d\"600\"]"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"[start\u003d8]"},{"lineNumber":104,"author":{"gitID":"-"},"content":". Click on the JDK `1.8` folder in the left pane and click `Next`."},{"lineNumber":105,"author":{"gitID":"-"},"content":".. If you do not see a JDK `1.8` folder, click on `+` \u003e `JDK`, and find the directory of the JDK."},{"lineNumber":106,"author":{"gitID":"-"},"content":". Click `Next` until you reach the last window. Click `Finish` to complete the import of the project. The project will be loaded and you will be brought to the main project window (refer to \u003c\u003cfig-GettingStarted5\u003e\u003e)."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"[[fig-GettingStarted5]]"},{"lineNumber":109,"author":{"gitID":"-"},"content":".Main Project Window"},{"lineNumber":110,"author":{"gitID":"-"},"content":"image::DeveloperGettingStarted5.png[width\u003d\"600\"]"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"[start\u003d10]"},{"lineNumber":113,"author":{"gitID":"-"},"content":". Select `File` \u003e `New` \u003e `Module from Existing Sources...`."},{"lineNumber":114,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`. You will be directed to the `Import Module from Gradle` window (refer to \u003c\u003cfig-GettingStarted6\u003e\u003e)."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[[fig-GettingStarted6]]"},{"lineNumber":117,"author":{"gitID":"-"},"content":".`Import Module from Gradle` Window"},{"lineNumber":118,"author":{"gitID":"-"},"content":"image::DeveloperGettingStarted6.png[width\u003d\"600\"]"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":121,"author":{"gitID":"-"},"content":". Open the `Terminal` (select `Tool Windows` \u003e `Terminal`) and run the command `gradlew processResources` (run `./gradlew processResources` for Mac/Linux users). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"After setting up the project, do the following steps to verify that the project has been correctly set up."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":". Run the `seedu.organizer.MainApp` and try a few commands. You may refer to the \u003c\u003cUserGuide#, UserGuide.adoc\u003e\u003e for more information about the commands."},{"lineNumber":129,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuring the project before writing code"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"Before you begin developing, there are a few configurations to be done to ensure that the code you write meets our project standards."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (Mac)."},{"lineNumber":140,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":141,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write the code."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"This project relies heavily on Travis to perform Continuous Integration (CI). You may also set up Travis for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":155,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version, but is not that useful for your personal fork."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":160,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures the application works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Getting started with developing"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"When you are ready to start developing,"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"1. Read \u003c\u003cDesign-Architecture\u003e\u003e to get some sense of the overall design."},{"lineNumber":167,"author":{"gitID":"-"},"content":"2. Look at \u003c\u003cImplementation\u003e\u003e to find out more about the major features, and better understand how you can contribute enhancements to those features."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"PrioriTask consists of multiple components written in Java, with data being written and stored in XML files. This section contains an overview of the architecture systems used to design and implement the application, and an introduction to some of its major components."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given below explains the high-level design of the application."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":182,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"Given below is a quick overview of each component. The two main components of the application includes:"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":". `Main`, with only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":".. Initializing the components in the correct sequence, and connecting them up with each other at application launch."},{"lineNumber":189,"author":{"gitID":"-"},"content":".. Shutting down the components and invoking cleanup method where necessary during shut down."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e, representing a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".. `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":194,"author":{"gitID":"-"},"content":".. `LogsCenter` : This class is used by many classes to write log messages to the application\u0027s log file."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"The rest of the application consists of four components:"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Represents the UI of the application"},{"lineNumber":199,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes commands"},{"lineNumber":200,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the application in-memory"},{"lineNumber":201,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"Each of the four components,"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":206,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"For example, the `Logic` component (refer to \u003c\u003cfig-LogicComponent\u003e\u003e) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"[[fig-LogicComponent]]"},{"lineNumber":211,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":212,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"[.infoblock]"},{"lineNumber":215,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":216,"author":{"gitID":"-"},"content":"[infoblock-title]#*More Information*#"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":224,"author":{"gitID":"dominickenn"},"content":"image::SDforDeleteTask.png[width\u003d\"800\"]"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":227,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `OrganizerChangedEvent` when the Organizer data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":232,"author":{"gitID":"dominickenn"},"content":"image::SDforDeleteTaskEventHandling.png[width\u003d\"800\"]"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of numerous parts (e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `CalendarPanel`, etc.). All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"The class diagram below describes the structure of the `UI` component."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":248,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/organizer/ui/Ui.java[`Ui.java`]"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFX UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":257,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":258,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"The `Logic` component consists of the commands and their respective parsers (if necessary). For commands requiring parsers, they are defined in `.java` files prefixed with _\u0027-Parser\u0027_ that are in the `src/main/java/logic/parser` folder. For example, the parser for `AddCommand` is specified in `AddCommandParser.java`."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"The class diagram below gives an overview of the structure of the `Logic` component."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":268,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":269,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":272,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/organizer/logic/Logic.java[`Logic.java`]"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"There are two types of commands. Commands that modify the state of the organizer inherit from the `UndoableCommand` class, to be used by the undo/redo mechanism (see \u003c\u003cUndo/Redo feature\u003e\u003e for more information). Commands that do not modify the state of the organizer, and cannot be undone, inherit from the `Command` class instead."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"The class diagram below gives a more detailed overview of how the command system in the `Logic` component works. It shows the finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"[[fig-CommandsDiagram]]"},{"lineNumber":279,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component"},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"[[fig-LogicSequenceDiagram]]"},{"lineNumber":285,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":286,"author":{"gitID":"dominickenn"},"content":"image::DeleteTaskSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"The sequence flow is as follows:"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":".  `Logic` uses the `OrganizerParser` class to parse the user command."},{"lineNumber":291,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":292,"author":{"gitID":"dominickenn"},"content":".  The command execution can affect the `Model` (e.g. adding a task) and/or raise events."},{"lineNumber":293,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The `Model` component consists of a `UniqueTaskList` and `UniqueTagList` that contains and manipulates the data within the application using an `ObservableList`. The component also includes `Task`, and its respective parameters (e.g. `Name`, `Priority`, `Date Added`, etc.)."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The class diagram below gives an overview of the structure of the `Model` component."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":303,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/organizer/model/Model.java[`Model.java`]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":310,"author":{"gitID":"-"},"content":"* stores the Organizer data."},{"lineNumber":311,"author":{"gitID":"-"},"content":"* updates Tasks\u0027 priority levels within the Organizer via the `UniqueTaskList` automatically."},{"lineNumber":312,"author":{"gitID":"-"},"content":"* sorts tasks within the Organizer."},{"lineNumber":313,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 (e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes)."},{"lineNumber":314,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"The `Storage` component consists of the `XmlOrganizerStorage`, which reads data from, and writes data to, the hard disk. Data is stored in XML format, and can be retrieved from `data` \u003e `organizer.xml`. The component also contains the `UserPrefsStorage`, which stores user preferences (e.g. the application window\u0027s preferred height and width) in a JSON file. The file is titled `preferences.json`, and can be retrieved from the main folder."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"The class diagram below gives an overview of the structure of the `Storage` component."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":324,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/organizer/storage/Storage.java[`Storage.java`]"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"* saves `UserPref` objects in JSON format and reads it back."},{"lineNumber":331,"author":{"gitID":"-"},"content":"* saves the Organizer data in XML format and reads it back."},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":334,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.organizer.commons` package. Such classes include the `EventsCenter` and `LogsCenter`."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"PrioriTask consists of many different features. This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"The `undo` feature restores the PrioriTask to the state before the previous undoable command was executed. Undoable commands are defined as commands that modify the PrioriTask’s content (e.g. `add`, `delete`, `edit` and `clear`)."},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"The `redo` feature does the opposite - it reverses the most recent `undo` command."},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the organizer (e.g. `add`, `edit`). Such commands inherit from `UndoableCommand`."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component"},{"lineNumber":355,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"`UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the organizer before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while child classes implement the details of how to execute the class-specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":360,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":361,"author":{"gitID":"-"},"content":"----"},{"lineNumber":362,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":363,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":366,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"-"},"content":"}"},{"lineNumber":368,"author":{"gitID":"-"},"content":"----"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":371,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":372,"author":{"gitID":"-"},"content":"----"},{"lineNumber":373,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":376,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":380,"author":{"gitID":"-"},"content":"}"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":386,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"-"},"content":"}"},{"lineNumber":388,"author":{"gitID":"-"},"content":"----"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Scenario"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th task in the organizer. The current state of the organizer is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"The diagram below illustrates how the execution of the `delete 5` command affects the `UndoRedoStack`."},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":".UndoRedoStack `delete 5` command execution"},{"lineNumber":399,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/Study ...` to add a new task."},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"The diagram below illustrates how the execution of the `add n/Study` command affects the `UndoRedoStack`."},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":".UndoRedoStack `add n/Study ...` command execution"},{"lineNumber":406,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":409,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"dominickenn"},"content":"The user now decides that adding the task was a mistake, and decides to undo that action using `undo`."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the organizer to the state before the `add` command executed."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"The diagram below illustrates the process of the execution of the `undo` command on the `UndoRedoStack`."},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":".UndoRedoStack `undo` command execution"},{"lineNumber":418,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":421,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":".UndeRedoStack sequence diagram"},{"lineNumber":426,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the organizer to the state after the command is executed)."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":431,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/Study` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"The diagram below illustrates how the execution of the `clear` command affects the `UndoRedoStack`."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":".UndoRedoStack `clear` command execution"},{"lineNumber":438,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution (refer to \u003c\u003cfig-ListExecution\u003e\u003e)."},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"[[fig-ListExecution]]"},{"lineNumber":443,"author":{"gitID":"-"},"content":".UndoRedoStack `list` command execution"},{"lineNumber":444,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"The following activity diagram summarizes what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":".UndoRedoStack activity diagram"},{"lineNumber":449,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":456,"author":{"gitID":"-"},"content":"** Pros: Any undone/redone functionality is not lost as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":458,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":459,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire organizer"},{"lineNumber":465,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":466,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":467,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself"},{"lineNumber":468,"author":{"gitID":"dominickenn"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."},{"lineNumber":469,"author":{"gitID":"-"},"content":"** Cons: Need to ensure that the implementation of the counter to each command is correct."},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the organizer (`add`, `clear`, `edit`)."},{"lineNumber":475,"author":{"gitID":"-"},"content":"** Pros: Only reverts changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":476,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":477,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":478,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":479,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the organizer and not the view."},{"lineNumber":480,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":486,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates, who are likely to be * the new incoming developers of our project."},{"lineNumber":487,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For each new command executed, both `HistoryManager` and `UndoRedoStack` must be updated."},{"lineNumber":488,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":489,"author":{"gitID":"-"},"content":"** Pros: Do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":490,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: Must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"// tag::taskpriority[]"},{"lineNumber":493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Task\u0027s Priority Auto-updating and Auto-sorting feature"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"_{ TODO: Add preface }_"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"The autoupdating and autosorting mechanism resides inside `UniqueTaskList`. The `UniqueTaskList` is responsible for updating each Task’s priority level and sorting the `ObservableList\u003cTask\u003e` whenever a new `Task` is added. In addition, whenever a `Task` is edited, the `ObservableList\u003cTask\u003e` is sorted again."},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Description of `UniqueTaskList` \u0027s `add` method"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"The `add` method of the `UniqueTaskList` class is implemented as such:"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":506,"author":{"gitID":"-"},"content":"----"},{"lineNumber":507,"author":{"gitID":"dominickenn"},"content":"public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":508,"author":{"gitID":"-"},"content":"    //check non null and no duplicate task"},{"lineNumber":509,"author":{"gitID":"-"},"content":"    toAdd \u003d updatePriority(toAdd);"},{"lineNumber":510,"author":{"gitID":"dominickenn"},"content":"    internalList.add(toAdd);"},{"lineNumber":511,"author":{"gitID":"-"},"content":"    sortTasks();"},{"lineNumber":512,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":513,"author":{"gitID":"-"},"content":"----"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Priority Auto-updating feature"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"The `updatePriority` method returns a new `Task` with a new `Priority` based on the current date, `AddedDate`, and `Deadline`."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"The new `Priority` level will remain within the range of 0 - 9. The new `Priority` is calculated as such :"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"* If the current date is equal to the `AddedDate`"},{"lineNumber":522,"author":{"gitID":"-"},"content":"** `Priority` remains the same."},{"lineNumber":523,"author":{"gitID":"-"},"content":"* If the current date is past the `Deadline`"},{"lineNumber":524,"author":{"gitID":"-"},"content":"** `Priority` is set to the `HIGHEST_SETTABLE_PRIORITY_LEVEL` : 9"},{"lineNumber":525,"author":{"gitID":"-"},"content":"* If the current date is before the `Deadline` and not equal to the `AddedDate`"},{"lineNumber":526,"author":{"gitID":"-"},"content":"** `Priority` is calculated via the following formula :"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":529,"author":{"gitID":"-"},"content":"----"},{"lineNumber":530,"author":{"gitID":"-"},"content":"priorityDifferenceFromMax \u003d HIGHEST_SETTABLE_PRIORITY_LEVEL - currentPriority"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"dayDifferenceCurrentToDeadline \u003d Duration.between(currentDate, deadline)"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"dayDifferenceAddedToDeadline \u003d Duration.between(dateAdded, deadline)"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"priorityToIncrease \u003d priorityDifferenceFromMax * ((dayDifferenceAddedToDeadline - dayDifferenceCurrentToDeadline) / dayDifferenceAddedToDeadline)"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"newPriority \u003d currentPriority + priorityToIncrease"},{"lineNumber":539,"author":{"gitID":"-"},"content":"----"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"The new `Task` with its updated `Priority` will then be added to `UniqueTaskList`’s `internalList`. Following that, the `internalList` is sorted via the `sortTasks` method. The `sortTasks` method is implemented as such:"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":544,"author":{"gitID":"-"},"content":"----"},{"lineNumber":545,"author":{"gitID":"-"},"content":"private void sortTasks() {"},{"lineNumber":546,"author":{"gitID":"-"},"content":"    internalList.sort(Task.priorityComparator());"},{"lineNumber":547,"author":{"gitID":"-"},"content":"}"},{"lineNumber":548,"author":{"gitID":"-"},"content":"----"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Task Auto-sorting feature"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"The `sortTasks` method makes use of the `ObservableList` class’s `sort` method and `Task`’s `priorityComparator` method. The `priorityComparator` method returns a `Comparator` that sorts `Task` s based on descending `Priority` levels. The `internalList` is sorted with respect to the comparator."},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Scenario"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"Consider an `addTask` method call by the `Organizer`. The current date is 2018-03-19."},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"The following is a sequence diagram which represents the `Organizer` adding a Study `Task`."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":".addTask(Study) method execution sequence diagram"},{"lineNumber":561,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"Suppose the `tasks` currently contains the following two `Task` s."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":".`tasks` \u0027s initial `Task` s"},{"lineNumber":566,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram1.png[width\u003d\"600\"]"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"The following figure represents the \"Study\" `Task`."},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":".\"Study\" `Task`"},{"lineNumber":571,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram2.png[width\u003d\"200\"]"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"When `tasks` calls `updatePriority(Study)`, the new priority level is calculated as such :"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":576,"author":{"gitID":"-"},"content":"----"},{"lineNumber":577,"author":{"gitID":"-"},"content":"priorityDifferenceFromMax \u003d 9 - 0 \u003d 9"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"dayDifferenceCurrentToDeadline \u003d 14"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"dayDifferenceAddedToDeadline \u003d 31"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"priorityToIncrease \u003d 9 * ((31 - 14) / 31) \u003d 4"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"newPriority \u003d 0 + 4 \u003d 4"},{"lineNumber":586,"author":{"gitID":"-"},"content":"----"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"A new \"Study\" `Task` is created and added to the `internalList`."},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":".`internalList` after \"Study\" `Task` is added"},{"lineNumber":591,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram3.png[width\u003d\"600\"]"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"The `sortTasks` method is then called, which calls the `priorityCompartor` method, and uses the `Comparator` returned to sort the `Task` s. This results in the following `UniqueTaskList`."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":".`internalList` after `sortTasks` is called"},{"lineNumber":596,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram4.png[width\u003d\"600\"]"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect : Implementation of `updatePriority`"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"* Alternative 1 (current choice): Add a new method `updatePriority` in UniqueTaskList’s `add`"},{"lineNumber":602,"author":{"gitID":"-"},"content":"** Pros : Convenient to update the priority during this method call; since during initialization of `Organizer`, `add` is called for every `Task` to initialize the `UniqueTaskList`."},{"lineNumber":603,"author":{"gitID":"-"},"content":"** Cons : Possible violation of Single Responsibility Principle and Separation of Concerns as `UniqueTaskList` now updates `Task` priorities and stores `Task` s."},{"lineNumber":604,"author":{"gitID":"-"},"content":"* Alternative 2 : Add a new class `UpdatedUniqueTaskList` which extends `UniqueTaskList`"},{"lineNumber":605,"author":{"gitID":"-"},"content":"** Pros : Removes violation of Single Responsibility Principle and Separation of Concerns in Alternative 1."},{"lineNumber":606,"author":{"gitID":"-"},"content":"** Cons : Repeats the logic in `UniqueTaskList` while adding one method."},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect : How `updatePriority` executes"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"* Alternative 1 (current choice) : Return a new `Task` with new `Priority`"},{"lineNumber":611,"author":{"gitID":"-"},"content":"** Pros : Easy to implement."},{"lineNumber":612,"author":{"gitID":"-"},"content":"** Cons : A new object is created twice during every addition, even if `Priority` is not updated; Hence slightly inefficient."},{"lineNumber":613,"author":{"gitID":"-"},"content":"* Alternative 2 : Edit the `Priority` parameter of the `Task`"},{"lineNumber":614,"author":{"gitID":"-"},"content":"** Pros : No new objects are created."},{"lineNumber":615,"author":{"gitID":"-"},"content":"** Cons : Requires major overhaul of `Task` and it’s parameters to be mutable."},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect : Scope of `updatePriority` and `sortTasks`"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"* Alternative 1 (current choice) : Implement within `Model`"},{"lineNumber":620,"author":{"gitID":"-"},"content":"** Pros : No need to deal with commands, and fits with the idea of automation."},{"lineNumber":621,"author":{"gitID":"-"},"content":"** Cons : Concern of updating priorities and sorting tasks may not lie with `Model` but `Logic`."},{"lineNumber":622,"author":{"gitID":"-"},"content":"* Alternative 2 : Implement within `Logic`"},{"lineNumber":623,"author":{"gitID":"-"},"content":"** Pros : Fits with the concern of updating priorities and sorting tasks."},{"lineNumber":624,"author":{"gitID":"-"},"content":"** Cons : Requires development of commands and extra command calls to be automatically called upon start of application; unnecessary trouble for same feature."},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"// end::taskpriority[]"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"// tag::calendar[]"},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Feature"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"The `Calendar` resides mainly in the `UI` component, constantly interacting with the `Logic` and `Model` components to complete its tasks. It allows users to have a chronic overview of the deadlines of all their tasks. Tasks on the calendar changes according to the last task listing. By default, users will view the current month when they first open PrioriTask."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"The calendar feature is currently still in its early stages of implementation. At present, it only supports the switching between months, and is best viewed fully-maximised on a 13” computer screen."},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"The calendar feature is facilitated by the `MonthView` class, which supports the `CalendarPanel`. The `MonthView` is responsible for displaying a monthly calendar view to the users through the `CalendarPanel`. The following diagram illustrates the structure of the calendar feature system:"},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":".Structure of the Calendar Feature"},{"lineNumber":640,"author":{"gitID":"-"},"content":"image::CalendarComponentClassDiagram.png[width\u003d\"700\"]"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"The following sequence diagram illustrates how the different classes work together to display the calendar when users first run the application."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":".Calendar Sequence Diagram"},{"lineNumber":645,"author":{"gitID":"-"},"content":"image::CalendarSequenceDiagram.png[width\u003d\"700\"]"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"Below describes the the implementation of the different classes supporting the calendar feature."},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `EntryCard`"},{"lineNumber":650,"author":{"gitID":"-"},"content":"`EntryCard` is responsible for displaying the name of a `Task` on the calendar. It is called by `MonthView` when mapping each `Task` to an `EntryCard`. The method is implemented as such:"},{"lineNumber":651,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":652,"author":{"gitID":"-"},"content":"----"},{"lineNumber":653,"author":{"gitID":"-"},"content":"private ObservableList\u003cEntryCard\u003e getEntryCardsList(int year, int month) {"},{"lineNumber":654,"author":{"gitID":"-"},"content":"    FilteredList\u003cTask\u003e filteredList \u003d getFilteredTaskList(year, month);"},{"lineNumber":655,"author":{"gitID":"-"},"content":"    SortedList\u003cTask\u003e taskSortedList \u003d getSortedTaskList(filteredList);"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"    return EasyBind.map(taskSortedList, (task) -\u003e new EntryCard(task));"},{"lineNumber":658,"author":{"gitID":"-"},"content":"}"},{"lineNumber":659,"author":{"gitID":"-"},"content":"----"},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"An `EntryCard` will be added to a specific date which reflects the deadline of the `Task`. It is displayed on the calendar with the help of the JavaFX `ListView` object. More details of how this is implemented is further discussed in \u003c\u003cImplementation of `MonthView`\u003e\u003e."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `MonthView`"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"`MonthView` is in charge of executing several tasks. It is responsible for,"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"* Drawing the month view of the calendar, and populating the dates."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"* Adding the tasks’ entries onto the calendar, according to the last task listing. The calendar is also updated every time an undoable command is executed (refer to \u003c\u003cUndo/Redo feature\u003e\u003e for more details about an undoable command)."},{"lineNumber":670,"author":{"gitID":"-"},"content":"* Aiding the `Logic` component by switching the month view accordingly when users execute the respective calendar feature commands (e.g. `pmonth`, `nmonth`, etc.). A calendar feature command is defined as a command that changes the display of the calendar. For the full list of calendar feature commands, head to \u003c\u003cUserGuide#calendar-features, User Guide: Calendar Features\u003e\u003e."},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"`MonthView` interacts very closely with its corresponding FXML file, `MonthView.fxml` to execute its tasks. The FXML file reflects the basic layout of the calendar feature, which is illustrated by the diagram below."},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":".Basic Calendar Layout"},{"lineNumber":675,"author":{"gitID":"-"},"content":"image::MonthViewLayoutDiagram.png[width\u003d\"700\"]"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"MonthView` uses the JavaFX layout objects extensively when executing its tasks. The following are some instances when JavaFX layout objects are called:"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"* Populating the dates in the calendar: Adding a `Text` object, which contains the numerical value of a particular date, to the exact column and row in the `taskCalendar`. The method is implemented as such:"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"----"},{"lineNumber":683,"author":{"gitID":"-"},"content":"private void addMonthDate(Text dateToPrint, int column, int row) {"},{"lineNumber":684,"author":{"gitID":"-"},"content":"    // To update the JavaFX component from a non-JavaFX thread"},{"lineNumber":685,"author":{"gitID":"-"},"content":"    Platform.runLater(new Runnable() {"},{"lineNumber":686,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":687,"author":{"gitID":"-"},"content":"        public void run() {"},{"lineNumber":688,"author":{"gitID":"-"},"content":"            taskCalendar.add(dateToPrint, column, row);"},{"lineNumber":689,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":690,"author":{"gitID":"-"},"content":"    });"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"    taskCalendar.setHalignment(dateToPrint, HPos.LEFT);"},{"lineNumber":693,"author":{"gitID":"-"},"content":"    taskCalendar.setValignment(dateToPrint, VPos.TOP)"},{"lineNumber":694,"author":{"gitID":"-"},"content":"    dateToPrint.setId(\"date\" + String.valueOf(dateCount));"},{"lineNumber":695,"author":{"gitID":"-"},"content":"}"},{"lineNumber":696,"author":{"gitID":"-"},"content":"----"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"* Adding the tasks’ entries onto the calendar: Adding a `ListView` object, which contains a list of `EntryCard`s, to the exact column and row in the `taskCalendar`. An `EntryCard` represents a task entry, which will be added to the date which reflects the deadline of the task. The method is implemented as such:"},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":701,"author":{"gitID":"-"},"content":"----"},{"lineNumber":702,"author":{"gitID":"-"},"content":"private void addEntryListView(ObservableList\u003cEntryCard\u003e toAddObservableList, int row, int column) {"},{"lineNumber":703,"author":{"gitID":"-"},"content":"    ListView\u003cEntryCard\u003e entries \u003d new ListView\u003c\u003e();"},{"lineNumber":704,"author":{"gitID":"-"},"content":"    entries.setId(\"entry\" + String.valueOf(row) + String.valueOf(column));"},{"lineNumber":705,"author":{"gitID":"-"},"content":"    entries.setItems(toAddObservableList);"},{"lineNumber":706,"author":{"gitID":"-"},"content":"    entries.setCellFactory(listView -\u003e new EntryListViewCell());"},{"lineNumber":707,"author":{"gitID":"-"},"content":"    entries.setMaxHeight(60);"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"    // To update the JavaFX component from a non-JavaFX thread"},{"lineNumber":710,"author":{"gitID":"-"},"content":"    Platform.runLater(new Runnable() {"},{"lineNumber":711,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":712,"author":{"gitID":"-"},"content":"        public void run() {"},{"lineNumber":713,"author":{"gitID":"-"},"content":"            taskCalendar.add(entries, column, row);"},{"lineNumber":714,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":715,"author":{"gitID":"-"},"content":"    });"},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"    taskCalendar.setValignment(entries, VPos.BOTTOM);"},{"lineNumber":718,"author":{"gitID":"-"},"content":"}"},{"lineNumber":719,"author":{"gitID":"-"},"content":"----"},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"`MonthView` also works very closely with the `Logic` component to accomplish,"},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"* Adding of the tasks’ entries onto the calendar, by retrieving an unmodifiable `ObservableList` containing the list of `Task`s. A listener to added to the `ObservableList` so that the calendar is updated with the latest tasks’ entries when a change in the list is detected. The method is implemented as such:"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":726,"author":{"gitID":"-"},"content":"----"},{"lineNumber":727,"author":{"gitID":"-"},"content":"private void addListenerToTaskList() {"},{"lineNumber":728,"author":{"gitID":"-"},"content":"    taskList.addListener(new ListChangeListener\u003cTask\u003e() {"},{"lineNumber":729,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":730,"author":{"gitID":"-"},"content":"        public void onChanged(Change change) {"},{"lineNumber":731,"author":{"gitID":"-"},"content":"            while (change.next()) {"},{"lineNumber":732,"author":{"gitID":"-"},"content":"                clearCalendar();"},{"lineNumber":733,"author":{"gitID":"-"},"content":"                setMonthCalendarDatesAndEntries(viewYearMonth.getYear(), viewYearMonth.getMonthValue());"},{"lineNumber":734,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":735,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":736,"author":{"gitID":"-"},"content":"    });"},{"lineNumber":737,"author":{"gitID":"-"},"content":"}"},{"lineNumber":738,"author":{"gitID":"-"},"content":"----"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"* Switching the month view when users execute the respective calendar feature commands, by retrieving an `ObservableList` containing a list of executed commands by the user. A listener is added to the `ObservableList` so that the month view is changed accordingly when a calendar feature command in the list is detected. The method is implemented as such:"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":743,"author":{"gitID":"-"},"content":"----"},{"lineNumber":744,"author":{"gitID":"-"},"content":"private void addListenerToExecutedCommandsList() {"},{"lineNumber":745,"author":{"gitID":"-"},"content":"    executedCommandsList.addListener(new ListChangeListener\u003cString\u003e() {"},{"lineNumber":746,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":747,"author":{"gitID":"-"},"content":"        public void onChanged(Change change) {"},{"lineNumber":748,"author":{"gitID":"-"},"content":"            while (change.next()) {"},{"lineNumber":749,"author":{"gitID":"-"},"content":"                int size \u003d executedCommandsList.size();"},{"lineNumber":750,"author":{"gitID":"-"},"content":"                String executedCommand \u003d executedCommandsList.get(size - 1);"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"                if ((executedCommand.equals(CurrentMonthCommand.COMMAND_WORD)) || (executedCommand.equals(CurrentMonthCommand.COMMAND_ALIAS))) {"},{"lineNumber":753,"author":{"gitID":"-"},"content":"                    goToCurrentMonth();"},{"lineNumber":754,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"                // … other similiar if statements for the remaining calendar feature commands ..."},{"lineNumber":757,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":758,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":759,"author":{"gitID":"-"},"content":"    });"},{"lineNumber":760,"author":{"gitID":"-"},"content":"}"},{"lineNumber":761,"author":{"gitID":"-"},"content":"----"},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `CalendarPanel`"},{"lineNumber":764,"author":{"gitID":"-"},"content":"`CalendarPanel` simply displays the calendar, by using the JavaFX `StackPane` object as a placeholder for `MonthView`, which contains the basic layout of the calendar. After loading its own FXML file, it will fetch the display for `MonthView` as such:"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":768,"author":{"gitID":"-"},"content":"----"},{"lineNumber":769,"author":{"gitID":"-"},"content":"private void createMainView() {"},{"lineNumber":770,"author":{"gitID":"-"},"content":"    monthView.getMonthView(currentYearMonth);"},{"lineNumber":771,"author":{"gitID":"-"},"content":"    calendarPane.getChildren().add(monthView.getRoot());"},{"lineNumber":772,"author":{"gitID":"-"},"content":"}"},{"lineNumber":773,"author":{"gitID":"-"},"content":"----"},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Scenario"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"Suppose the user executes a calendar feature command. Given below is the sequence diagram for interactions within the `Logic` and `UI` components for the execute(“nmonth”) API call."},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":".Calendar Sequence Diagram"},{"lineNumber":780,"author":{"gitID":"-"},"content":"image::CalendarCommandExecutionSequenceDiagram.png[width\u003d\"700\"]"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"The sequence flow is slightly similar to that of the execution of a normal command (refer to \u003c\u003cfig-LogicSequenceDiagram\u003e\u003e), and is as follows:"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":". `Logic` uses the `OrganizerParser` class to parse the calendar feature command."},{"lineNumber":785,"author":{"gitID":"-"},"content":". This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":786,"author":{"gitID":"-"},"content":". The command execution triggers the `MonthView` class in the `UI`, which will display the new month view."},{"lineNumber":787,"author":{"gitID":"-"},"content":". The result of the command execution is encapsulated as a `CommandResult` object which is passed to the `UI`. It will be shown in the `Result Display Box`."},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of calendar feature"},{"lineNumber":792,"author":{"gitID":"-"},"content":"* *Alternative 1 (current choice):* Draw the calendar manually using the JavaFX library"},{"lineNumber":793,"author":{"gitID":"-"},"content":"** Pros: Feature is customised for the PrioriTask application."},{"lineNumber":794,"author":{"gitID":"-"},"content":"** Cons: Too much time invested in creating a feature that has been already been developed and freely available."},{"lineNumber":795,"author":{"gitID":"-"},"content":"* *Alternative 2:* Use a third-party framework / library"},{"lineNumber":796,"author":{"gitID":"-"},"content":"** Pros: Speed up development, especially if it has already been thoroughly tested and does not have many bugs."},{"lineNumber":797,"author":{"gitID":"-"},"content":"** Cons: Not customised for the application, and may require much time to tweak or work around the framework / library to suit the application."},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Updating of tasks’ entries on the calendar"},{"lineNumber":800,"author":{"gitID":"-"},"content":"* *Alternative 1 (current choice):* Clears the calendar, and draws everything (i.e. the dates and entries) again"},{"lineNumber":801,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":802,"author":{"gitID":"-"},"content":"** Cons: May have performance issues. There may be a lag after an undoable is executed."},{"lineNumber":803,"author":{"gitID":"-"},"content":"* *Alternative 2:* Track the `Task` that is being added / modified, and update the calendar accordingly"},{"lineNumber":804,"author":{"gitID":"-"},"content":"** Pros: Update of the calendar will be almost instantaneous. Chances of a lag is rare."},{"lineNumber":805,"author":{"gitID":"-"},"content":"** Cons: Difficult to implement. Need to ensure that the tracking of `Task`s added / modified is accurate."},{"lineNumber":806,"author":{"gitID":"-"},"content":"// end::calendar[]"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"// tag::subtask[]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Subtask"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"_{ TODO: Add preface }_"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"Subtask feature allows user to split their tasks into multiple subtasks. This feature allows user to better"},{"lineNumber":816,"author":{"gitID":"-"},"content":"manage their task. It is implemented using `Subtask` class and `UniqueSubtaskList` class as shown by the diagram below:"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":".Subtask UML Class Diagram"},{"lineNumber":819,"author":{"gitID":"-"},"content":"image::SubtaskComponentDiagram.png[width\u003d\"500\"]"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"`UniqueSubtaskList` is created to ensure that no task has a duplicated subtask."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"*Subtask management*"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"To manage the subtasks (Add, edit, etc), a copy of the `Task` object is created, since `Task` is immutable."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":828,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `Subtask`"},{"lineNumber":829,"author":{"gitID":"-"},"content":"* **Alternative 1 (current implementation):** Add a new class `Subtask`"},{"lineNumber":830,"author":{"gitID":"-"},"content":"** Pros: Better isolation and easier modification to `Subtask` if needed."},{"lineNumber":831,"author":{"gitID":"-"},"content":"** Cons: Restricts the possibility of having a subtask that has subtasks."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use current `Task` class"},{"lineNumber":834,"author":{"gitID":"-"},"content":"** Pros: Easier to implement and subtask will share the same properties with `Task`."},{"lineNumber":835,"author":{"gitID":"-"},"content":"** Cons: Possibility of having a cyclic subtask (a task that is also a subtask of it self) if not handled carefully."},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UniqueSubtaskList`"},{"lineNumber":838,"author":{"gitID":"-"},"content":"* **Alternative 1 (current implementation):** Use `List` to store subtasks."},{"lineNumber":839,"author":{"gitID":"-"},"content":"** Pros: Easier to implement."},{"lineNumber":840,"author":{"gitID":"-"},"content":"** Cons: Performance issues when data is large, since most operations in `UniqueSubtaskList`"},{"lineNumber":841,"author":{"gitID":"-"},"content":"is `O(n)`."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"* **Alternative 2 (Planned for implementation):** Use a combination of BBST and LinkedList to store subtasks."},{"lineNumber":844,"author":{"gitID":"-"},"content":"** Pros: Faster than the first alternative since each operation is `O(log n)`."},{"lineNumber":845,"author":{"gitID":"-"},"content":"** Cons: Harder to implement and more robust testing is required since it is more bug prone."},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"// end::subtask[]"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)."},{"lineNumber":854,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."},{"lineNumber":855,"author":{"gitID":"-"},"content":"* Currently log messages are output through the `Console` and to a `.log` file."},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"* `SEVERE` : A message level indicating a _serious_ failure (e.g. failure resulting in application termination)."},{"lineNumber":860,"author":{"gitID":"-"},"content":"* `WARNING` : A message level indicating a _potential_ problem (e.g. application can still continue, but do so with caution)."},{"lineNumber":861,"author":{"gitID":"-"},"content":"* `INFO` : A message level for _informational_ messages (e.g. noteworthy actions by the application)."},{"lineNumber":862,"author":{"gitID":"-"},"content":"* `FINE` : A message level providing _tracing_ information (e.g. print the actual list of an array instead of its size)."},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"Certain properties of the application (e.g App name, logging level) can be controlled through the configuration file (default: `config.json`)."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"Asciidoc is used for writing documentation."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":874,"author":{"gitID":"-"},"content":"Asciidoc was chosen over Markdown as asciidoc provides more flexibility in formatting."},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of edits."},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"Alternatively, the AsciiDoc plugin for IntelliJ provides a real-time view of `.adoc` file edits ."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"https://www.google.com/chrome/browser/desktop/[Google Chrome] can be used for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"The following are the steps to convert the project documentation files to PDF format:"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":893,"author":{"gitID":"-"},"content":".  Access the generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":894,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":895,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For the best results, use the settings indicated in the screenshot below."},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":898,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":908,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the third method. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."},{"lineNumber":913,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":920,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library, GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. This means that the developer is free to do something else while the tests are running."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"To run the tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)."},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"There are two types of tests:"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":".  *GUI Tests* - Tests involving the GUI. They include:"},{"lineNumber":933,"author":{"gitID":"-"},"content":".. _System Tests_ that tests the entire App by simulating user actions on the GUI. These are found in the `systemtests` package."},{"lineNumber":934,"author":{"gitID":"-"},"content":".. _Unit tests_ that test individual components. These are found in `seedu.organizer.ui` package."},{"lineNumber":935,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - Tests not involving the GUI. They include:"},{"lineNumber":936,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":937,"author":{"gitID":"-"},"content":"e.g. `seedu.organizer.commons.StringUtilTest`"},{"lineNumber":938,"author":{"gitID":"-"},"content":"..  _Integration tests_ that check the integration of multiple code units (these code units are assumed to be working). +"},{"lineNumber":939,"author":{"gitID":"-"},"content":"e.g. `seedu.organizer.storage.StorageManagerTest`"},{"lineNumber":940,"author":{"gitID":"-"},"content":"..  Hybrids of _unit_ and _integration_ tests. These tests check multiple code units as well as how they are connected together. +"},{"lineNumber":941,"author":{"gitID":"-"},"content":"e.g. `seedu.organizer.logic.LogicManagerTest`"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":945,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"* Reason: `UserGuide.html`, a dependency which should be found in `src/main/resources/docs`, is missing."},{"lineNumber":948,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] are used to perform _Continuous Integration_ on the project. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"https://coveralls.io/[Coveralls] is used to track the code coverage of the project. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":965,"author":{"gitID":"-"},"content":"When a pull request contains changes to asciidoc files, https://www.netlify.com/[Netlify] can be used to preview a HTML version of the edited asciidoc files. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"The following are steps to create a new release:"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":972,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":973,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`."},{"lineNumber":974,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, PrioriTask depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than the following alternatives: +"},{"lineNumber":979,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":980,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":983,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"* Busy university students who have many tasks to keep track of."},{"lineNumber":988,"author":{"gitID":"-"},"content":"* Takes many modules, is part of various student organizations, and has many activities."},{"lineNumber":989,"author":{"gitID":"-"},"content":"* Prefers a digital organizer over a physical organizer."},{"lineNumber":990,"author":{"gitID":"-"},"content":"* Requires help in monitoring numerous tasks and their levels of importance."},{"lineNumber":991,"author":{"gitID":"-"},"content":"* Would like assistance in task planning."},{"lineNumber":992,"author":{"gitID":"-"},"content":"* Is forgetful, and requires constant reminders."},{"lineNumber":993,"author":{"gitID":"-"},"content":"* Prefers desktop apps over other types."},{"lineNumber":994,"author":{"gitID":"-"},"content":"* Is reasonably comfortable with CLI apps."},{"lineNumber":995,"author":{"gitID":"-"},"content":"* Can type fast."},{"lineNumber":996,"author":{"gitID":"-"},"content":"* Prefers typing over mouse input."},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"*Value proposition*:"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"Help busy university students keep track of their tasks and priorities."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"*Feature contribution*:"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"* Agus Sentosa Hermawan"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"** Major : Subtasks parameter"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"*** Allows tasks to be split into subtasks for better management."},{"lineNumber":1007,"author":{"gitID":"-"},"content":"** Minor : Toggle command"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"*** Allows tasks to be marked as completed."},{"lineNumber":1009,"author":{"gitID":"-"},"content":"* Dominic Kenn Lim"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"** Major : User login"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"*** Allows multiple users to access their private tasks within the same machine."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"** Minor : Priority autosorting and autoupdate"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"*** Allows application to automatically manage task priority levels so that the user does not have to."},{"lineNumber":1014,"author":{"gitID":"-"},"content":"* Natania Djohaari"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"** Major : Recurring Tasks"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"*** Helps users automatically create tasks that are recurring."},{"lineNumber":1017,"author":{"gitID":"-"},"content":"** Minor : Date completed parameter"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"*** Allows users to view what date the task has been completed on."},{"lineNumber":1019,"author":{"gitID":"-"},"content":"* Yeo Guek Ling"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"** Major : Calendar"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"*** Allows users to be able to have a more concise view of task deadlines."},{"lineNumber":1022,"author":{"gitID":"-"},"content":"** Minor : Find deadline / description command"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"*** Allows users to be able to search the organizer for tasks even when they have forgotten the task\u0027s name."},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"dominickenn"},"content":"The following is a list of user stories for PrioriTask."},{"lineNumber":1029,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1035,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the application"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |add a new task |"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"|`* * *` |user |add a priority level to a task |keep track of the priority levels of my tasks and allow the application to order tasks by priority levels"},{"lineNumber":1040,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"|`* * *` |user |add a deadline to a task |keep track of the deadlines of my tasks and allow the application to help me manage my priorities according to my deadlines"},{"lineNumber":1042,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1043,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |add a subtask to a task |split tasks into smaller subtasks for easier management"},{"lineNumber":1044,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1045,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |add tags to a task |organize the tasks based on groups such as modules or projects"},{"lineNumber":1046,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1047,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |add a description to a task |give a task a description that cannot be sufficiently represented by name or subtasks"},{"lineNumber":1048,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1049,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |delete a task |remove a task"},{"lineNumber":1050,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1051,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |delete a deadline from a task |remove a task\u0027s deadline when necessary"},{"lineNumber":1052,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1053,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |delete a subtask from a task |remove a subtask I no longer need"},{"lineNumber":1054,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"|`* *` |user |delete a tag from a task |remove a tag from a task that no longer belongs to the group"},{"lineNumber":1056,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1057,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |delete a description from a task|remove a description that is no longer relevant"},{"lineNumber":1058,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1059,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |delete all tasks |remove all tasks quickly"},{"lineNumber":1060,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"|`* * *` |user |edit a task\u0027s name |update the task’s name when required"},{"lineNumber":1062,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"|`* * *` |user |edit a task\u0027s priority level |change a task\u0027s priority level when I need to re-organize my priorities"},{"lineNumber":1064,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1065,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |edit a task\u0027s deadline |change a task\u0027s deadline"},{"lineNumber":1066,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1067,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |edit a subtask of a task |change a subtask\u0027s name"},{"lineNumber":1068,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"|`* * *`|user with many uncompleted tasks |have all tasks constantly ordered according to their priority levels |know the order I should complete my tasks"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |edit a task\u0027s description|change a task\u0027s description"},{"lineNumber":1072,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"|`* * *` |user |mark a task as complete |complete the task"},{"lineNumber":1074,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1075,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |mark a subtask as complete |keep track of subtasks already done"},{"lineNumber":1076,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"|`* * *` |user with many uncompleted tasks |view all uncompleted tasks |see all tasks that need to be done, along with the deadlines and priorities"},{"lineNumber":1078,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"|`* * *` |user |view all details of a task |view all details of a specified task, after seeing a list of all tasks"},{"lineNumber":1080,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"|`* * *` |user with many tasks |view all completed tasks |see all tasks that have been completed, for past reference"},{"lineNumber":1082,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |view all tasks with a specific tag |locate all tasks with a specific tag, without the need for a manual search"},{"lineNumber":1084,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |view all tasks within a certain deadline |locate all tasks within a certain deadline, without the need of a manual search"},{"lineNumber":1086,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1087,"author":{"gitID":"dominickenn"},"content":"|`* *`|user |view a calender showing task\u0027s deadlines|see a chronic overview of all tasks and their deadlines"},{"lineNumber":1088,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |find a task by name |locate a task without the need to search through an entire list"},{"lineNumber":1090,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |find a task by description|locate a task when I have forgotten it\u0027s name"},{"lineNumber":1092,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"|`* *` |user who is forgetful |have tasks\u0027 priority levels be automatically updated as deadline approaches |be reminded to complete tasks"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"|`* *` |user who is forgetful |have tasks\u0027 priority levels be automatically increased to maximum level any are still uncompleted after the deadline has passed |be reminded to complete tasks which are past the deadline"},{"lineNumber":1096,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"|`* *` |user |have a reminder of tasks with high priority levels |be reminded to complete tasks with high priority levels"},{"lineNumber":1098,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"|`* *` |user |undo an operation |revert an operation"},{"lineNumber":1100,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"|`* *` |user |redo an undo operation |redo an undo operation"},{"lineNumber":1102,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"|`* *` |user |have a task with no priority level to have it’s priority level be automatically set to the lowest priority level |have priority levels for all tasks even if I had forgotten to set the priority levels"},{"lineNumber":1104,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"|`*` |user |change the view of the calendar |choose to view the calendar by year, month, week, or day"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"dominickenn"},"content":"|`*` |user |reorder a task\u0027s subtasks |rearrange the order of a task\u0027s subtasks when necessary"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"dominickenn"},"content":"|`*` |user |recover my past data |rewrite existing data by recovering past data when necessary"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"|`* *`|user using the same machine as others |have my tasks privatized | avoid privacy issues"},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"|`* *`|user using the same machine as others |create a user account |"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"|`* *`|user using the same machine as others |login to PrioriTask with my own account |manage my own tasks"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"|`* *`|user using the same machine as others |logout of PrioriTask |ensure privacy of my tasks"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"|`* *`|user who has a user account |retrieve my password |login to my account if I forget my password"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1123,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Organizer` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add task"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"1.  User creates an account."},{"lineNumber":1133,"author":{"gitID":"-"},"content":"2.  User logs into PrioriTask."},{"lineNumber":1134,"author":{"gitID":"-"},"content":"3.  User requests to add a task."},{"lineNumber":1135,"author":{"gitID":"-"},"content":"4.  Organizer shows the newly added task as part of a list of all tasks."},{"lineNumber":1136,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"* 1a. User already exists."},{"lineNumber":1143,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"** 1a1. Organizer shows an error message."},{"lineNumber":1145,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"* 2a. User does not exist."},{"lineNumber":1149,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"** 2a1. Organizer shows an error message."},{"lineNumber":1151,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"* 3a. Invalid parameters given."},{"lineNumber":1155,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"** 3a1. Organizer shows an error message."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1161,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Use case: Delete task"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"1.  User logs into PrioriTask."},{"lineNumber":1166,"author":{"gitID":"-"},"content":"2.  User requests to delete a task."},{"lineNumber":1167,"author":{"gitID":"-"},"content":"3.  Organizer shows a list of tasks without the deleted task."},{"lineNumber":1168,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"* 1a. User does not exist."},{"lineNumber":1175,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"** 1a1. Organizer shows an error message."},{"lineNumber":1177,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"* 2a. Invalid index is given."},{"lineNumber":1181,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"** 2a1. Organizer shows an error message."},{"lineNumber":1183,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1191,"author":{"gitID":"dominickenn"},"content":".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1192,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1193,"author":{"gitID":"-"},"content":".  Should come with a help feature and various helper messages so that it is usable by a novice who had only have minimal CLI experience."},{"lineNumber":1194,"author":{"gitID":"-"},"content":".  Users are expected to know how to set up the project without an installer."},{"lineNumber":1195,"author":{"gitID":"-"},"content":".  The end product is geared towards power users, and may not be suitable for everyone."},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder."},{"lineNumber":1219,"author":{"gitID":"-"},"content":".. Double-click the jar file. +"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with an empty task list. The window size may not be optimum."},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1225,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Deleting a task"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"dominickenn"},"content":". Deleting a task while all tasks are listed"},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"dominickenn"},"content":".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."},{"lineNumber":1235,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1237,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1238,"author":{"gitID":"dominickenn"},"content":"   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1239,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"dominickenn":64,"-":1186}},{"path":"src/test/java/seedu/organizer/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.EntryCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"//import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.TaskCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPriority(), actualCard.getPriority());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e assertEquals(expectedCard.getTagStyleClasses(tag),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            actualCard.getTagStyleClasses(tag)));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedTask.getName().fullName, actualCard.getName());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(\"[\" + expectedTask.getStatus().toString() + \"]\", actualCard.getStatus());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(\"Priority : \" + expectedTask.getPriority().value, actualCard.getPriority());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(\"Deadline : \" + expectedTask.getDeadline().toString(), actualCard.getDeadline());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(\"Date Added : \" + expectedTask.getDateAdded().toString(), actualCard.getDateAdded());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(\"Description : \" + expectedTask.getDescription().value, actualCard.getDescription());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedTask, actualCard);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"    public static void assertEntryCardDisplaysName(Task expectedTask, EntryCardHandle actualCard) {"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getName().fullName, actualCard.getEntryCardText());"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        for (int i \u003d 0; i \u003c tasks.length; i++) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d taskListPanelHandle.getListSize();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * in {@code TaskCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @see TaskCard#getTagColorStyleFor(String)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        switch (tagName) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case \"classmates\":"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case \"owesMoney\":"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return \"blue\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case \"colleagues\":"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case \"neighbours\":"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return \"gray\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case \"family\":"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case \"friend\":"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return \"maroon\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case \"friends\":"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return \"orange\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case \"husband\":"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return \"yellow\";"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return \"\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedTask} with the correct"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Task expectedTask, TaskCardHandle actualCard) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedTask.getTags().stream().map(tag -\u003e tag.tagName)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            actualCard.getTagStyleClasses(tag)));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":8,"guekling":8,"-":120}},{"path":"src/test/java/seedu/organizer/ui/EntryCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertEntryCardDisplaysName;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.EntryCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.EntryCard;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"public class EntryCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    public void display() {"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        EntryCard entryCard \u003d new EntryCard(task);"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        uiPartRule.setUiPart(entryCard);"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        assertCardDisplay(entryCard, task);"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    public void getTask() {"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        EntryCard entryCard \u003d new EntryCard(task);"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        assertTaskEquals(task, entryCard.getTask());"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        EntryCard entryCard \u003d new EntryCard(task);"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // same task, same index -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        EntryCard copy \u003d new EntryCard(task);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        assertTrue(entryCard.equals(copy));"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        assertTrue(entryCard.equals(entryCard));"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        assertFalse(entryCard.equals(null));"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":""},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertFalse(entryCard.equals(0));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"     * Asserts that {@code entryCard} displays the name of {@code expectedTask} correctly."},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"    private void assertCardDisplay(EntryCard entryCard, Task expectedTask) {"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":""},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        EntryCardHandle entryCardHandle \u003d new EntryCardHandle(entryCard.getRoot());"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":""},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        // verify task name is displayed correctly"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        assertEntryCardDisplaysName(expectedTask, entryCardHandle);"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":""},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"     * Asserts that {@code actualTask} equals to that of {@code expectedTask}."},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"    private void assertTaskEquals(Task expectedTask, Task actualTask) {"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getName(), actualTask.getName());"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getPriority(), actualTask.getPriority());"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getDeadline(), actualTask.getDeadline());"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getDateAdded(), actualTask.getDateAdded());"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getDateCompleted(), actualTask.getDateCompleted());"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getDescription(), actualTask.getDescription());"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getStatus(), actualTask.getStatus());"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getTags(), actualTask.getTags());"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTask.getSubtasks(), actualTask.getSubtasks());"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":64,"-":14}},{"path":"src/test/java/seedu/organizer/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Config;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.XmlUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.UserPrefsStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlSerializableOrganizer;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TestUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected static final String ORGANIZER_NAME \u003d \"Test\";"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    protected Supplier\u003cReadOnlyOrganizer\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public TestApp(Supplier\u003cReadOnlyOrganizer\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"            createDataFileWithData(new XmlSerializableOrganizer(this.initialDataSupplier.get()),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        userPrefs.setOrganizerName(ORGANIZER_NAME);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the organizer data stored inside the storage file."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public Organizer readStorageOrganizer() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new Organizer(storage.readOrganizer().get());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"Data is not in the Organizer format.\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return storage.getOrganizerFilePath();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        Model copy \u003d new ModelManager((model.getOrganizer()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            copy.loginUser(ADMIN_USER);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredTaskList());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Login to admin"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void loginAdmin() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":142}},{"path":"src/test/java/seedu/organizer/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlAdaptedSubtask;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlAdaptedTag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlAdaptedTask;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlAdaptedUser;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlSerializableOrganizer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.OrganizerBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TestUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validOrganizer.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File MISSING_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingTaskField.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File INVALID_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskField.xml\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final File VALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"validTask.xml\");"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempOrganizer.xml\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_PRIORITY \u003d \"9!@#\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final XmlAdaptedUser VALID_XML_ADAPTED_USER \u003d new XmlAdaptedUser(\"admin\", \"admin\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Work on PrioriTask\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_PRIORITY \u003d \"9\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_DEADLINE \u003d \"2018-07-16\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_DATEADDED \u003d LocalDate.now().toString();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_DATECOMPLETED \u003d \"not completed\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String VALID_DESCRIPTION \u003d \"Refactor Address to Description\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Boolean VALID_STATUS \u003d null;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedSubtask\u003e VALID_SUBTASKS \u003d Collections.singletonList(new XmlAdaptedSubtask("},{"lineNumber":52,"author":{"gitID":"-"},"content":"            \"Find some friends to play dota or csgo\", false));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //temporary fix for xml file bug due to PrioriTask\u0027s dependence on the current date"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String current_date \u003d \"current_date\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.getDataFromFile(null, Organizer.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, Organizer.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, Organizer.class);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"        Organizer dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableOrganizer.class).toModelType();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getTaskList().size());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void xmlAdaptedTaskFromFile_fileWithMissingTaskField_validResult() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                MISSING_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                null, VALID_PRIORITY, VALID_DEADLINE, current_date, VALID_DATECOMPLETED,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void xmlAdaptedTaskFromFile_fileWithInvalidTaskField_validResult() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":103,"author":{"gitID":"-"},"content":"                INVALID_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PRIORITY, VALID_DEADLINE, current_date, VALID_DATECOMPLETED,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void xmlAdaptedTaskFromFile_fileWithValidTask_validResult() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                VALID_TASK_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PRIORITY, VALID_DEADLINE, current_date, VALID_DATECOMPLETED,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.saveDataToFile(null, new Organizer());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new Organizer());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer dataToWrite \u003d new XmlSerializableOrganizer(new Organizer());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableOrganizer.class);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"        OrganizerBuilder builder \u003d new OrganizerBuilder(new Organizer());"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        dataToWrite \u003d new XmlSerializableOrganizer("},{"lineNumber":148,"author":{"gitID":"-"},"content":"                builder.withTask(new TaskBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableOrganizer.class);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedTask}"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"    @XmlRootElement(name \u003d \"task\")"},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"    private static class XmlAdaptedTaskWithRootElement extends XmlAdaptedTask {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":16,"-":146}},{"path":"src/test/java/seedu/organizer/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HistoryCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            model.addUser(ADMIN_USER);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        } catch (DuplicateUserException e) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Admin user should not exist\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Admin user should exist\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"No user should be logged in\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        logic.getFilteredTaskList().remove(0);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Admin user should exist\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"No user should be logged in\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * - {@code expectedModel}\u0027s organizer book was saved to the storage file."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                                       String expectedMessage, Model expectedModel) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":150,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":155}},{"path":"src/test/java/seedu/organizer/ui/MonthViewTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.CURRENT_MONTH_COMMAND_ALIAS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.CURRENT_MONTH_COMMAND_WORD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.NEXT_MONTH_COMMAND_ALIAS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.NEXT_MONTH_COMMAND_WORD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.PREVIOUS_MONTH_COMMAND_ALIAS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.PREVIOUS_MONTH_COMMAND_WORD;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.getTypicalExecutedCommands;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.time.YearMonth;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MonthViewHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.EntryCard;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.MonthView;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"public class MonthViewTest extends GuiUnitTest {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        (getTypicalExecutedCommands());"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":""},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    private static final int SUNDAY \u003d 7;"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"    private static final int FIRST_ROW \u003d 0;"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    private static final int MAX_NUM_OF_DAYS \u003d 35;"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    private static final double DAYS_IN_WEEK \u003d 7.0;"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":""},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    private static final YearMonth MAY_2018 \u003d YearMonth.of(2018, 5);"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    private static final YearMonth DEC_2018 \u003d YearMonth.of(2018, 12);"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":""},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"    private MonthView monthView;"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"    private MonthViewHandle monthViewHandle;"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":""},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        monthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        uiPartRule.setUiPart(monthView);"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":""},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        monthViewHandle \u003d new MonthViewHandle(monthView.getRoot());"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":""},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"    public void display_fiveWeeksCalendar() {"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(MAY_2018);"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":""},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        // verify that calendar title is displayed correctly"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"        monthViewHandle.getCalendarTitleText();"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        String expectedTitle \u003d \"MAY 2018\";"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTitle, monthViewHandle.getCalendarTitleText());"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":""},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        // verify that the first date of the month is displayed in the correct row and column"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"        Node startDateNode \u003d monthViewHandle.getPrintedDateNode(1);"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        int startDateRow \u003d monthViewHandle.getRowIndex(startDateNode);"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        int startDateColumn \u003d monthViewHandle.getColumnIndex(startDateNode);"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":""},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        assertEquals(0, startDateRow);"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"        assertEquals(2, startDateColumn);"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":""},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        // verify that the last date of the month is displayed in the correct row and column"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        Node lastDateNode \u003d monthViewHandle.getPrintedDateNode(31);"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        int lastDateRow \u003d monthViewHandle.getRowIndex(lastDateNode);"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"        int lastDateColumn \u003d monthViewHandle.getColumnIndex(lastDateNode);"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":""},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"        assertEquals(4, lastDateColumn);"},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"        assertEquals(4, lastDateRow);"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"guekling"},"content":""},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":"    public void display_sixWeeksCalendar() {"},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(DEC_2018);"},{"lineNumber":88,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":89,"author":{"gitID":"guekling"},"content":""},{"lineNumber":90,"author":{"gitID":"guekling"},"content":"        // verify that calendar title is displayed correctly"},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"        monthViewHandle.getCalendarTitleText();"},{"lineNumber":92,"author":{"gitID":"guekling"},"content":"        String expectedTitle \u003d \"DECEMBER 2018\";"},{"lineNumber":93,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTitle, monthViewHandle.getCalendarTitleText());"},{"lineNumber":94,"author":{"gitID":"guekling"},"content":""},{"lineNumber":95,"author":{"gitID":"guekling"},"content":"        // verify that the last date of the month is displayed in the correct row and column"},{"lineNumber":96,"author":{"gitID":"guekling"},"content":"        Node lastDateNode \u003d monthViewHandle.getPrintedDateNode(31);"},{"lineNumber":97,"author":{"gitID":"guekling"},"content":"        int lastDateRow \u003d monthViewHandle.getRowIndex(lastDateNode);"},{"lineNumber":98,"author":{"gitID":"guekling"},"content":"        int lastDateColumn \u003d monthViewHandle.getColumnIndex(lastDateNode);"},{"lineNumber":99,"author":{"gitID":"guekling"},"content":""},{"lineNumber":100,"author":{"gitID":"guekling"},"content":"        assertEquals(1, lastDateColumn);"},{"lineNumber":101,"author":{"gitID":"guekling"},"content":"        assertEquals(0, lastDateRow);"},{"lineNumber":102,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"guekling"},"content":""},{"lineNumber":104,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"guekling"},"content":"    public void showEntries_fiveWeeksCalendar() {"},{"lineNumber":106,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(MAY_2018);"},{"lineNumber":107,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":108,"author":{"gitID":"guekling"},"content":""},{"lineNumber":109,"author":{"gitID":"guekling"},"content":"        // one entry"},{"lineNumber":110,"author":{"gitID":"guekling"},"content":"        Task toAddTask \u003d new TaskBuilder().withName(\"ES2660\").withDeadline(\"2018-05-01\").build();"},{"lineNumber":111,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTask);"},{"lineNumber":112,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":113,"author":{"gitID":"guekling"},"content":""},{"lineNumber":114,"author":{"gitID":"guekling"},"content":"        ListView\u003cEntryCard\u003e entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(0, 2);"},{"lineNumber":115,"author":{"gitID":"guekling"},"content":"        EntryCard actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":116,"author":{"gitID":"guekling"},"content":"        EntryCard expectedEntryCard \u003d new EntryCard(toAddTask);"},{"lineNumber":117,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":118,"author":{"gitID":"guekling"},"content":""},{"lineNumber":119,"author":{"gitID":"guekling"},"content":"        // multiple entries on different dates"},{"lineNumber":120,"author":{"gitID":"guekling"},"content":"        toAddTask \u003d new TaskBuilder().withName(\"CS2101\").withDeadline(\"2018-05-18\").build();"},{"lineNumber":121,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTask);"},{"lineNumber":122,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":123,"author":{"gitID":"guekling"},"content":""},{"lineNumber":124,"author":{"gitID":"guekling"},"content":"        entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(2, 5);"},{"lineNumber":125,"author":{"gitID":"guekling"},"content":"        actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":126,"author":{"gitID":"guekling"},"content":"        expectedEntryCard \u003d new EntryCard(toAddTask);"},{"lineNumber":127,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":128,"author":{"gitID":"guekling"},"content":""},{"lineNumber":129,"author":{"gitID":"guekling"},"content":"        // entry on a Sunday"},{"lineNumber":130,"author":{"gitID":"guekling"},"content":"        toAddTask \u003d new TaskBuilder().withName(\"GEQ1000\").withDeadline(\"2018-05-20\").build();"},{"lineNumber":131,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTask);"},{"lineNumber":132,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":133,"author":{"gitID":"guekling"},"content":""},{"lineNumber":134,"author":{"gitID":"guekling"},"content":"        entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(3, 0);"},{"lineNumber":135,"author":{"gitID":"guekling"},"content":"        actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":136,"author":{"gitID":"guekling"},"content":"        expectedEntryCard \u003d new EntryCard(toAddTask);"},{"lineNumber":137,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":138,"author":{"gitID":"guekling"},"content":""},{"lineNumber":139,"author":{"gitID":"guekling"},"content":"        // entries on the same date"},{"lineNumber":140,"author":{"gitID":"guekling"},"content":"        toAddTask \u003d new TaskBuilder().withName(\"MA1101R\").withDeadline(\"2018-05-18\").build();"},{"lineNumber":141,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTask);"},{"lineNumber":142,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":143,"author":{"gitID":"guekling"},"content":""},{"lineNumber":144,"author":{"gitID":"guekling"},"content":"        entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(2, 5);"},{"lineNumber":145,"author":{"gitID":"guekling"},"content":"        actualEntryCard \u003d entriesListView.getItems().get(1);"},{"lineNumber":146,"author":{"gitID":"guekling"},"content":"        expectedEntryCard \u003d new EntryCard(toAddTask);"},{"lineNumber":147,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":148,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"guekling"},"content":""},{"lineNumber":150,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"guekling"},"content":"    public void showEntries_sixWeeksCalendar() {"},{"lineNumber":152,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(DEC_2018);"},{"lineNumber":153,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":154,"author":{"gitID":"guekling"},"content":""},{"lineNumber":155,"author":{"gitID":"guekling"},"content":"        Task toAddTask \u003d new TaskBuilder().withName(\"CS2103T\").withDeadline(\"2018-12-31\").build();"},{"lineNumber":156,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTask);"},{"lineNumber":157,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":158,"author":{"gitID":"guekling"},"content":""},{"lineNumber":159,"author":{"gitID":"guekling"},"content":"        ListView\u003cEntryCard\u003e entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(0, 1);"},{"lineNumber":160,"author":{"gitID":"guekling"},"content":"        EntryCard actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":161,"author":{"gitID":"guekling"},"content":"        EntryCard expectedEntryCard \u003d new EntryCard(toAddTask);"},{"lineNumber":162,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":163,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"guekling"},"content":""},{"lineNumber":165,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"guekling"},"content":"    public void goToPreviousMonth_commandsSuccessful() {"},{"lineNumber":167,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(MAY_2018);"},{"lineNumber":168,"author":{"gitID":"guekling"},"content":""},{"lineNumber":169,"author":{"gitID":"guekling"},"content":"        // using command word to go to previous month"},{"lineNumber":170,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(PREVIOUS_MONTH_COMMAND_WORD);"},{"lineNumber":171,"author":{"gitID":"guekling"},"content":""},{"lineNumber":172,"author":{"gitID":"guekling"},"content":"        MonthView expectedMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":173,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(YearMonth.of(2018, 4));"},{"lineNumber":174,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":175,"author":{"gitID":"guekling"},"content":"        monthView.equals(expectedMonthView);"},{"lineNumber":176,"author":{"gitID":"guekling"},"content":""},{"lineNumber":177,"author":{"gitID":"guekling"},"content":"        // using command alias to go to previous month"},{"lineNumber":178,"author":{"gitID":"guekling"},"content":""},{"lineNumber":179,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(PREVIOUS_MONTH_COMMAND_ALIAS);"},{"lineNumber":180,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(YearMonth.of(2018, 3));"},{"lineNumber":181,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":182,"author":{"gitID":"guekling"},"content":"        monthView.equals(expectedMonthView);"},{"lineNumber":183,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"guekling"},"content":""},{"lineNumber":185,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"guekling"},"content":"    public void goToPreviousMonth_titleDatesAndEntriesPrintedSuccessfully() {"},{"lineNumber":187,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(MAY_2018);"},{"lineNumber":188,"author":{"gitID":"guekling"},"content":""},{"lineNumber":189,"author":{"gitID":"guekling"},"content":"        Task toAddTaskOne \u003d new TaskBuilder().withName(\"GER1000\").withDeadline(\"2018-04-12\").build();"},{"lineNumber":190,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTaskOne);"},{"lineNumber":191,"author":{"gitID":"guekling"},"content":""},{"lineNumber":192,"author":{"gitID":"guekling"},"content":"        Task toAddTaskTwo \u003d new TaskBuilder().withName(\"CS2010\").withDeadline(\"2018-04-25\").build();"},{"lineNumber":193,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTaskTwo);"},{"lineNumber":194,"author":{"gitID":"guekling"},"content":""},{"lineNumber":195,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(PREVIOUS_MONTH_COMMAND_WORD);"},{"lineNumber":196,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":197,"author":{"gitID":"guekling"},"content":""},{"lineNumber":198,"author":{"gitID":"guekling"},"content":"        // verify that calendar title is displayed correctly"},{"lineNumber":199,"author":{"gitID":"guekling"},"content":"        monthViewHandle.getCalendarTitleText();"},{"lineNumber":200,"author":{"gitID":"guekling"},"content":"        String expectedTitle \u003d \"APRIL 2018\";"},{"lineNumber":201,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTitle, monthViewHandle.getCalendarTitleText());"},{"lineNumber":202,"author":{"gitID":"guekling"},"content":""},{"lineNumber":203,"author":{"gitID":"guekling"},"content":"        // verify that grid lines are visible after clearCalendar() is called"},{"lineNumber":204,"author":{"gitID":"guekling"},"content":"        assertEquals(true, monthViewHandle.isGridLinesVisible());"},{"lineNumber":205,"author":{"gitID":"guekling"},"content":""},{"lineNumber":206,"author":{"gitID":"guekling"},"content":"        // verify that the first date of the month is displayed in the correct row and column"},{"lineNumber":207,"author":{"gitID":"guekling"},"content":"        Node startDateNode \u003d monthViewHandle.getPrintedDateNode(1);"},{"lineNumber":208,"author":{"gitID":"guekling"},"content":"        int startDateRow \u003d monthViewHandle.getRowIndex(startDateNode);"},{"lineNumber":209,"author":{"gitID":"guekling"},"content":"        int startDateColumn \u003d monthViewHandle.getColumnIndex(startDateNode);"},{"lineNumber":210,"author":{"gitID":"guekling"},"content":""},{"lineNumber":211,"author":{"gitID":"guekling"},"content":"        assertEquals(0, startDateRow);"},{"lineNumber":212,"author":{"gitID":"guekling"},"content":"        assertEquals(0, startDateColumn);"},{"lineNumber":213,"author":{"gitID":"guekling"},"content":""},{"lineNumber":214,"author":{"gitID":"guekling"},"content":"        // verify that the last date of the month is displayed in the correct row and column"},{"lineNumber":215,"author":{"gitID":"guekling"},"content":"        Node lastDateNode \u003d monthViewHandle.getPrintedDateNode(30);"},{"lineNumber":216,"author":{"gitID":"guekling"},"content":"        int lastDateRow \u003d monthViewHandle.getRowIndex(lastDateNode);"},{"lineNumber":217,"author":{"gitID":"guekling"},"content":"        int lastDateColumn \u003d monthViewHandle.getColumnIndex(lastDateNode);"},{"lineNumber":218,"author":{"gitID":"guekling"},"content":""},{"lineNumber":219,"author":{"gitID":"guekling"},"content":"        assertEquals(1, lastDateColumn);"},{"lineNumber":220,"author":{"gitID":"guekling"},"content":"        assertEquals(4, lastDateRow);"},{"lineNumber":221,"author":{"gitID":"guekling"},"content":""},{"lineNumber":222,"author":{"gitID":"guekling"},"content":"        // verify that entries are displayed"},{"lineNumber":223,"author":{"gitID":"guekling"},"content":"        ListView\u003cEntryCard\u003e entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(1, 4);"},{"lineNumber":224,"author":{"gitID":"guekling"},"content":"        EntryCard actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":225,"author":{"gitID":"guekling"},"content":"        EntryCard expectedEntryCard \u003d new EntryCard(toAddTaskOne);"},{"lineNumber":226,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":227,"author":{"gitID":"guekling"},"content":""},{"lineNumber":228,"author":{"gitID":"guekling"},"content":"        entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(3, 3);"},{"lineNumber":229,"author":{"gitID":"guekling"},"content":"        actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":230,"author":{"gitID":"guekling"},"content":"        expectedEntryCard \u003d new EntryCard(toAddTaskTwo);"},{"lineNumber":231,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":232,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"guekling"},"content":""},{"lineNumber":234,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"guekling"},"content":"    public void goToNextMonth_commandsSuccessful() {"},{"lineNumber":236,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(MAY_2018);"},{"lineNumber":237,"author":{"gitID":"guekling"},"content":""},{"lineNumber":238,"author":{"gitID":"guekling"},"content":"        // using command word to go to next month"},{"lineNumber":239,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(NEXT_MONTH_COMMAND_WORD);"},{"lineNumber":240,"author":{"gitID":"guekling"},"content":""},{"lineNumber":241,"author":{"gitID":"guekling"},"content":"        MonthView expectedMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":242,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(YearMonth.of(2018, 6));"},{"lineNumber":243,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":244,"author":{"gitID":"guekling"},"content":"        monthView.equals(expectedMonthView);"},{"lineNumber":245,"author":{"gitID":"guekling"},"content":""},{"lineNumber":246,"author":{"gitID":"guekling"},"content":"        // using command alias to go to previous month"},{"lineNumber":247,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(NEXT_MONTH_COMMAND_ALIAS);"},{"lineNumber":248,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(YearMonth.of(2018, 7));"},{"lineNumber":249,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":250,"author":{"gitID":"guekling"},"content":"        monthView.equals(expectedMonthView);"},{"lineNumber":251,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"guekling"},"content":""},{"lineNumber":253,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"guekling"},"content":"    public void goToNextMonth_titleDatesAndEntriesPrintedSuccessfully() {"},{"lineNumber":255,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(MAY_2018);"},{"lineNumber":256,"author":{"gitID":"guekling"},"content":""},{"lineNumber":257,"author":{"gitID":"guekling"},"content":"        Task toAddTaskOne \u003d new TaskBuilder().withName(\"GER1000\").withDeadline(\"2018-06-12\").build();"},{"lineNumber":258,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTaskOne);"},{"lineNumber":259,"author":{"gitID":"guekling"},"content":""},{"lineNumber":260,"author":{"gitID":"guekling"},"content":"        Task toAddTaskTwo \u003d new TaskBuilder().withName(\"CS2010\").withDeadline(\"2018-06-25\").build();"},{"lineNumber":261,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTaskTwo);"},{"lineNumber":262,"author":{"gitID":"guekling"},"content":""},{"lineNumber":263,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(NEXT_MONTH_COMMAND_WORD);"},{"lineNumber":264,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":265,"author":{"gitID":"guekling"},"content":""},{"lineNumber":266,"author":{"gitID":"guekling"},"content":"        // verify that calendar title is displayed correctly"},{"lineNumber":267,"author":{"gitID":"guekling"},"content":"        monthViewHandle.getCalendarTitleText();"},{"lineNumber":268,"author":{"gitID":"guekling"},"content":"        String expectedTitle \u003d \"JUNE 2018\";"},{"lineNumber":269,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTitle, monthViewHandle.getCalendarTitleText());"},{"lineNumber":270,"author":{"gitID":"guekling"},"content":""},{"lineNumber":271,"author":{"gitID":"guekling"},"content":"        // verify that grid lines are visible after clearCalendar() is called"},{"lineNumber":272,"author":{"gitID":"guekling"},"content":"        assertEquals(true, monthViewHandle.isGridLinesVisible());"},{"lineNumber":273,"author":{"gitID":"guekling"},"content":""},{"lineNumber":274,"author":{"gitID":"guekling"},"content":"        // verify that the first date of the month is displayed in the correct row and column"},{"lineNumber":275,"author":{"gitID":"guekling"},"content":"        Node startDateNode \u003d monthViewHandle.getPrintedDateNode(1);"},{"lineNumber":276,"author":{"gitID":"guekling"},"content":"        int startDateRow \u003d monthViewHandle.getRowIndex(startDateNode);"},{"lineNumber":277,"author":{"gitID":"guekling"},"content":"        int startDateColumn \u003d monthViewHandle.getColumnIndex(startDateNode);"},{"lineNumber":278,"author":{"gitID":"guekling"},"content":""},{"lineNumber":279,"author":{"gitID":"guekling"},"content":"        assertEquals(0, startDateRow);"},{"lineNumber":280,"author":{"gitID":"guekling"},"content":"        assertEquals(5, startDateColumn);"},{"lineNumber":281,"author":{"gitID":"guekling"},"content":""},{"lineNumber":282,"author":{"gitID":"guekling"},"content":"        // verify that the last date of the month is displayed in the correct row and column"},{"lineNumber":283,"author":{"gitID":"guekling"},"content":"        Node lastDateNode \u003d monthViewHandle.getPrintedDateNode(30);"},{"lineNumber":284,"author":{"gitID":"guekling"},"content":"        int lastDateRow \u003d monthViewHandle.getRowIndex(lastDateNode);"},{"lineNumber":285,"author":{"gitID":"guekling"},"content":"        int lastDateColumn \u003d monthViewHandle.getColumnIndex(lastDateNode);"},{"lineNumber":286,"author":{"gitID":"guekling"},"content":""},{"lineNumber":287,"author":{"gitID":"guekling"},"content":"        assertEquals(6, lastDateColumn);"},{"lineNumber":288,"author":{"gitID":"guekling"},"content":"        assertEquals(4, lastDateRow);"},{"lineNumber":289,"author":{"gitID":"guekling"},"content":""},{"lineNumber":290,"author":{"gitID":"guekling"},"content":"        // verify that entries are displayed"},{"lineNumber":291,"author":{"gitID":"guekling"},"content":"        ListView\u003cEntryCard\u003e entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(2, 2);"},{"lineNumber":292,"author":{"gitID":"guekling"},"content":"        EntryCard actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":293,"author":{"gitID":"guekling"},"content":"        EntryCard expectedEntryCard \u003d new EntryCard(toAddTaskOne);"},{"lineNumber":294,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":295,"author":{"gitID":"guekling"},"content":""},{"lineNumber":296,"author":{"gitID":"guekling"},"content":"        entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(4, 1);"},{"lineNumber":297,"author":{"gitID":"guekling"},"content":"        actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":298,"author":{"gitID":"guekling"},"content":"        expectedEntryCard \u003d new EntryCard(toAddTaskTwo);"},{"lineNumber":299,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":300,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"guekling"},"content":""},{"lineNumber":302,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":303,"author":{"gitID":"guekling"},"content":"    public void goToCurrentMonth_commandsSuccessful() {"},{"lineNumber":304,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(DEC_2018);"},{"lineNumber":305,"author":{"gitID":"guekling"},"content":""},{"lineNumber":306,"author":{"gitID":"guekling"},"content":"        // using command word to go to next month"},{"lineNumber":307,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(CURRENT_MONTH_COMMAND_WORD);"},{"lineNumber":308,"author":{"gitID":"guekling"},"content":""},{"lineNumber":309,"author":{"gitID":"guekling"},"content":"        MonthView expectedMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":310,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(YearMonth.now());"},{"lineNumber":311,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":312,"author":{"gitID":"guekling"},"content":"        monthView.equals(expectedMonthView);"},{"lineNumber":313,"author":{"gitID":"guekling"},"content":""},{"lineNumber":314,"author":{"gitID":"guekling"},"content":"        // using command alias to go to previous month"},{"lineNumber":315,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(DEC_2018);"},{"lineNumber":316,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":317,"author":{"gitID":"guekling"},"content":""},{"lineNumber":318,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(CURRENT_MONTH_COMMAND_ALIAS);"},{"lineNumber":319,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(YearMonth.now());"},{"lineNumber":320,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":321,"author":{"gitID":"guekling"},"content":"        monthView.equals(expectedMonthView);"},{"lineNumber":322,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"guekling"},"content":""},{"lineNumber":324,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":325,"author":{"gitID":"guekling"},"content":"    public void goToCurrentMonth_titleDatesAndEntriesPrintedSuccessfully() {"},{"lineNumber":326,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(DEC_2018);"},{"lineNumber":327,"author":{"gitID":"guekling"},"content":"        YearMonth currentYearMonth \u003d YearMonth.now();"},{"lineNumber":328,"author":{"gitID":"guekling"},"content":""},{"lineNumber":329,"author":{"gitID":"guekling"},"content":"        Task toAddTaskOne \u003d new TaskBuilder().withName(\"GER1000\").withDeadline(currentYearMonth.toString()"},{"lineNumber":330,"author":{"gitID":"guekling"},"content":"            + \"-12\").build();"},{"lineNumber":331,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTaskOne);"},{"lineNumber":332,"author":{"gitID":"guekling"},"content":""},{"lineNumber":333,"author":{"gitID":"guekling"},"content":"        Task toAddTaskTwo \u003d new TaskBuilder().withName(\"CS2010\").withDeadline(currentYearMonth.toString()"},{"lineNumber":334,"author":{"gitID":"guekling"},"content":"            + \"-25\").build();"},{"lineNumber":335,"author":{"gitID":"guekling"},"content":"        addTaskToTaskList(toAddTaskTwo);"},{"lineNumber":336,"author":{"gitID":"guekling"},"content":""},{"lineNumber":337,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(CURRENT_MONTH_COMMAND_WORD);"},{"lineNumber":338,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":339,"author":{"gitID":"guekling"},"content":""},{"lineNumber":340,"author":{"gitID":"guekling"},"content":"        // verify that calendar title is displayed correctly"},{"lineNumber":341,"author":{"gitID":"guekling"},"content":"        monthViewHandle.getCalendarTitleText();"},{"lineNumber":342,"author":{"gitID":"guekling"},"content":"        String expectedTitle \u003d currentYearMonth.getMonth().toString() + \" \" + currentYearMonth.getYear();"},{"lineNumber":343,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedTitle, monthViewHandle.getCalendarTitleText());"},{"lineNumber":344,"author":{"gitID":"guekling"},"content":""},{"lineNumber":345,"author":{"gitID":"guekling"},"content":"        // verify that grid lines are visible after clearCalendar() is called"},{"lineNumber":346,"author":{"gitID":"guekling"},"content":"        assertEquals(true, monthViewHandle.isGridLinesVisible());"},{"lineNumber":347,"author":{"gitID":"guekling"},"content":""},{"lineNumber":348,"author":{"gitID":"guekling"},"content":"        // verify that the first date of the month is displayed in the correct row and column"},{"lineNumber":349,"author":{"gitID":"guekling"},"content":"        Node startDateNode \u003d monthViewHandle.getPrintedDateNode(1);"},{"lineNumber":350,"author":{"gitID":"guekling"},"content":"        int startDateRow \u003d monthViewHandle.getRowIndex(startDateNode);"},{"lineNumber":351,"author":{"gitID":"guekling"},"content":"        int startDateColumn \u003d monthViewHandle.getColumnIndex(startDateNode);"},{"lineNumber":352,"author":{"gitID":"guekling"},"content":"        int expectedStartDateColumn \u003d getExpectedDateColumn(currentYearMonth, 1);"},{"lineNumber":353,"author":{"gitID":"guekling"},"content":""},{"lineNumber":354,"author":{"gitID":"guekling"},"content":"        assertEquals(FIRST_ROW, startDateRow);"},{"lineNumber":355,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedStartDateColumn, startDateColumn);"},{"lineNumber":356,"author":{"gitID":"guekling"},"content":""},{"lineNumber":357,"author":{"gitID":"guekling"},"content":"        // verify that the last date of the month is displayed in the correct row and column"},{"lineNumber":358,"author":{"gitID":"guekling"},"content":"        int lastDate \u003d currentYearMonth.lengthOfMonth();"},{"lineNumber":359,"author":{"gitID":"guekling"},"content":"        Node lastDateNode \u003d monthViewHandle.getPrintedDateNode(lastDate);"},{"lineNumber":360,"author":{"gitID":"guekling"},"content":"        int lastDateRow \u003d monthViewHandle.getRowIndex(lastDateNode);"},{"lineNumber":361,"author":{"gitID":"guekling"},"content":"        int lastDateColumn \u003d monthViewHandle.getColumnIndex(lastDateNode);"},{"lineNumber":362,"author":{"gitID":"guekling"},"content":"        int expectedLastDateColumn \u003d getExpectedDateColumn(currentYearMonth, lastDate);"},{"lineNumber":363,"author":{"gitID":"guekling"},"content":"        int expectedLastDateRow \u003d getExpectedDateRow(currentYearMonth, lastDate);"},{"lineNumber":364,"author":{"gitID":"guekling"},"content":""},{"lineNumber":365,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedLastDateColumn, lastDateColumn);"},{"lineNumber":366,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedLastDateRow, lastDateRow);"},{"lineNumber":367,"author":{"gitID":"guekling"},"content":""},{"lineNumber":368,"author":{"gitID":"guekling"},"content":"        // verify that entries are displayed"},{"lineNumber":369,"author":{"gitID":"guekling"},"content":"        int expectedDateColumn \u003d getExpectedDateColumn(currentYearMonth, 12);"},{"lineNumber":370,"author":{"gitID":"guekling"},"content":"        int expectedDateRow \u003d getExpectedDateRow(currentYearMonth, 12);"},{"lineNumber":371,"author":{"gitID":"guekling"},"content":"        ListView\u003cEntryCard\u003e entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(expectedDateRow,"},{"lineNumber":372,"author":{"gitID":"guekling"},"content":"            expectedDateColumn);"},{"lineNumber":373,"author":{"gitID":"guekling"},"content":"        EntryCard actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":374,"author":{"gitID":"guekling"},"content":"        EntryCard expectedEntryCard \u003d new EntryCard(toAddTaskOne);"},{"lineNumber":375,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":376,"author":{"gitID":"guekling"},"content":""},{"lineNumber":377,"author":{"gitID":"guekling"},"content":"        expectedDateColumn \u003d getExpectedDateColumn(currentYearMonth, 25);"},{"lineNumber":378,"author":{"gitID":"guekling"},"content":"        expectedDateRow \u003d getExpectedDateRow(currentYearMonth, 25);"},{"lineNumber":379,"author":{"gitID":"guekling"},"content":"        entriesListView \u003d (ListView) monthViewHandle.getListViewEntriesNode(expectedDateRow, expectedDateColumn);"},{"lineNumber":380,"author":{"gitID":"guekling"},"content":"        actualEntryCard \u003d entriesListView.getItems().get(0);"},{"lineNumber":381,"author":{"gitID":"guekling"},"content":"        expectedEntryCard \u003d new EntryCard(toAddTaskTwo);"},{"lineNumber":382,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedEntryCard, actualEntryCard);"},{"lineNumber":383,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"guekling"},"content":""},{"lineNumber":385,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":386,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":387,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(MAY_2018);"},{"lineNumber":388,"author":{"gitID":"guekling"},"content":""},{"lineNumber":389,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":390,"author":{"gitID":"guekling"},"content":"        assertTrue(monthView.equals(monthView));"},{"lineNumber":391,"author":{"gitID":"guekling"},"content":""},{"lineNumber":392,"author":{"gitID":"guekling"},"content":"        // same month view -\u003e returns true"},{"lineNumber":393,"author":{"gitID":"guekling"},"content":"        MonthView newMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":394,"author":{"gitID":"guekling"},"content":"        newMonthView.getMonthView(YearMonth.of(2018, 5));"},{"lineNumber":395,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":396,"author":{"gitID":"guekling"},"content":"        assertTrue(monthView.equals(newMonthView));"},{"lineNumber":397,"author":{"gitID":"guekling"},"content":""},{"lineNumber":398,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":399,"author":{"gitID":"guekling"},"content":"        assertFalse(monthView.equals(null));"},{"lineNumber":400,"author":{"gitID":"guekling"},"content":""},{"lineNumber":401,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":402,"author":{"gitID":"guekling"},"content":"        assertFalse(monthView.equals(0));"},{"lineNumber":403,"author":{"gitID":"guekling"},"content":""},{"lineNumber":404,"author":{"gitID":"guekling"},"content":"        // different month view -\u003e returns false"},{"lineNumber":405,"author":{"gitID":"guekling"},"content":"        newMonthView.getMonthView(YearMonth.of(2018, 3));"},{"lineNumber":406,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":407,"author":{"gitID":"guekling"},"content":"        assertFalse(monthView.equals(newMonthView));"},{"lineNumber":408,"author":{"gitID":"guekling"},"content":""},{"lineNumber":409,"author":{"gitID":"guekling"},"content":"        // different entries -\u003e returns false"},{"lineNumber":410,"author":{"gitID":"guekling"},"content":"        ObservableList\u003cTask\u003e newTaskList \u003d FXCollections.observableList(new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":411,"author":{"gitID":"guekling"},"content":"            PREPAREBREAKFAST)));"},{"lineNumber":412,"author":{"gitID":"guekling"},"content":"        MonthView differentMonthView \u003d new MonthView(newTaskList, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":413,"author":{"gitID":"guekling"},"content":"        differentMonthView.getMonthView(MAY_2018);"},{"lineNumber":414,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":415,"author":{"gitID":"guekling"},"content":"        assertFalse(monthView.equals(differentMonthView));"},{"lineNumber":416,"author":{"gitID":"guekling"},"content":""},{"lineNumber":417,"author":{"gitID":"guekling"},"content":"        // same title but different dates -\u003e returns false"},{"lineNumber":418,"author":{"gitID":"guekling"},"content":"        MonthView otherMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":419,"author":{"gitID":"guekling"},"content":"        otherMonthView.getMonthView(DEC_2018);"},{"lineNumber":420,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":421,"author":{"gitID":"guekling"},"content":"        newMonthView.setMonthCalendarTitle(2018, \"MAY\");"},{"lineNumber":422,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":423,"author":{"gitID":"guekling"},"content":"        assertFalse(monthView.dateIsEqual(otherMonthView));"},{"lineNumber":424,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":425,"author":{"gitID":"guekling"},"content":""},{"lineNumber":426,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":427,"author":{"gitID":"guekling"},"content":"     * Adds a new {@code command} to the {@code TYPICAL_EXECUTED_COMMANDS} observable list."},{"lineNumber":428,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":429,"author":{"gitID":"guekling"},"content":"    private void addCommandToExecutedCommandsList(String command) {"},{"lineNumber":430,"author":{"gitID":"guekling"},"content":"        TYPICAL_EXECUTED_COMMANDS.add(command);"},{"lineNumber":431,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":432,"author":{"gitID":"guekling"},"content":""},{"lineNumber":433,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":434,"author":{"gitID":"guekling"},"content":"     * Adds a new {@code task} to the {@code TYPICAL_TASKS} observable list."},{"lineNumber":435,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":436,"author":{"gitID":"guekling"},"content":"    private void addTaskToTaskList(Task task) {"},{"lineNumber":437,"author":{"gitID":"guekling"},"content":"        TYPICAL_TASKS.add(task);"},{"lineNumber":438,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":439,"author":{"gitID":"guekling"},"content":""},{"lineNumber":440,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":441,"author":{"gitID":"guekling"},"content":"     * Retrieves the expected column index of a {@code date}."},{"lineNumber":442,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":443,"author":{"gitID":"guekling"},"content":"    private int getExpectedDateColumn(YearMonth yearMonth, int date) {"},{"lineNumber":444,"author":{"gitID":"guekling"},"content":"        int expectedDateColumn \u003d yearMonth.atDay(date).getDayOfWeek().getValue();"},{"lineNumber":445,"author":{"gitID":"guekling"},"content":""},{"lineNumber":446,"author":{"gitID":"guekling"},"content":"        if (expectedDateColumn \u003d\u003d SUNDAY) {"},{"lineNumber":447,"author":{"gitID":"guekling"},"content":"            expectedDateColumn \u003d 0;"},{"lineNumber":448,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":449,"author":{"gitID":"guekling"},"content":""},{"lineNumber":450,"author":{"gitID":"guekling"},"content":"        return expectedDateColumn;"},{"lineNumber":451,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":452,"author":{"gitID":"guekling"},"content":""},{"lineNumber":453,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":454,"author":{"gitID":"guekling"},"content":"     * Retrieves the expected row index of a {@code date}."},{"lineNumber":455,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":456,"author":{"gitID":"guekling"},"content":"    private int getExpectedDateRow(YearMonth yearMonth, int date) {"},{"lineNumber":457,"author":{"gitID":"guekling"},"content":"        int startDay \u003d yearMonth.atDay(1).getDayOfWeek().getValue();"},{"lineNumber":458,"author":{"gitID":"guekling"},"content":""},{"lineNumber":459,"author":{"gitID":"guekling"},"content":"        if (startDay \u003d\u003d SUNDAY) {"},{"lineNumber":460,"author":{"gitID":"guekling"},"content":"            startDay \u003d 0;"},{"lineNumber":461,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":462,"author":{"gitID":"guekling"},"content":""},{"lineNumber":463,"author":{"gitID":"guekling"},"content":"        int totalDays \u003d startDay + date;"},{"lineNumber":464,"author":{"gitID":"guekling"},"content":""},{"lineNumber":465,"author":{"gitID":"guekling"},"content":"        if (totalDays \u003c\u003d MAX_NUM_OF_DAYS) {"},{"lineNumber":466,"author":{"gitID":"guekling"},"content":"            return (int) (date / DAYS_IN_WEEK);"},{"lineNumber":467,"author":{"gitID":"guekling"},"content":"        } else {"},{"lineNumber":468,"author":{"gitID":"guekling"},"content":"            return FIRST_ROW;"},{"lineNumber":469,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":470,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":471,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":439,"-":32}},{"path":"src/test/java/seedu/organizer/logic/parser/FindMultipleFieldsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private FindMultipleFieldsCommandParser parser \u003d new FindMultipleFieldsCommandParser();"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"                FindMultipleFieldsCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void parse_validArgs_returnsFindMultipleFieldsCommand() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand expectedFindMultipleFieldsCommand \u003d"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"            new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2102\","},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"            \"script\", \"2018-03-17\")));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \"CS2102 script 2018-03-17\", expectedFindMultipleFieldsCommand);"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \" \\n CS2102 \\n \\t script \\n \\t 2018-03-17 \\t\", expectedFindMultipleFieldsCommand);"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":13}},{"path":"src/test/java/seedu/organizer/logic/parser/LoginCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LoginCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public class LoginCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"    private LoginCommandParser parser \u003d new LoginCommandParser();"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        User expectedUser \u003d new User(\"bob\", \"bob\");"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"        assertParseSuccess(parser, \" u/bob p/bob\", new LoginCommand(expectedUser));"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE);"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        // missing username prefix"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" bob p/b0b\", expectedMessage);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        // missing password prefix"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" u/bob b0b\", expectedMessage);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        // all prefixes missing"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" bob b0b\", expectedMessage);"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        // invalid username"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" u/b@b p/bob\", User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        // invalid password"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" u/bob p/b@b\", User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":34,"-":11}},{"path":"src/test/java/seedu/organizer/logic/parser/FindDeadlineCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private FindDeadlineCommandParser parser \u003d new FindDeadlineCommandParser();"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"                FindDeadlineCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void parse_validArgs_returnsFindDeadlineCommand() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand expectedFindDeadlineCommand \u003d"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"            new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\","},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"            \"2018-01-01\")));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \"2018-09-09 2018-01-01\", expectedFindDeadlineCommand);"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \" \\n 2018-09-09 \\n \\t 2018-01-01 \\t\", expectedFindDeadlineCommand);"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":13}},{"path":"src/test/java/seedu/organizer/logic/parser/ForgotPasswordCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ForgotPasswordCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"public class ForgotPasswordCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"    private ForgotPasswordCommandParser parser \u003d new ForgotPasswordCommandParser();"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"        String expectedUsername \u003d \"admin\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        assertParseSuccess(parser, \" u/admin\", new ForgotPasswordCommand(expectedUsername));"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ForgotPasswordCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        // missing username prefix"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" admin\", expectedMessage);"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":19,"-":10}},{"path":"src/test/java/seedu/organizer/logic/parser/OrganizerParserLoggedInTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddQuestionAnswerCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddSubtaskCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CurrentMonthCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteSubtaskCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ExitCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDescriptionCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HelpCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HistoryCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LogoutCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.NextMonthCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.PreviousMonthCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ToggleCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ToggleSubtaskCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DescriptionContainsKeywordsPredicate;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskUtil;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":65,"author":{"gitID":"-"},"content":" * Performs OrganizerParser tests when a user is logged in"},{"lineNumber":66,"author":{"gitID":"-"},"content":" */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"public class OrganizerParserLoggedInTest {"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"    private final OrganizerParser parser \u003d new OrganizerParser();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"    public void parseCommand_logout() throws Exception {"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(LogoutCommand.COMMAND_WORD) instanceof LogoutCommand);"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(LogoutCommand.COMMAND_WORD + \" 3\") instanceof LogoutCommand);"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(LogoutCommand.COMMAND_ALIAS) instanceof LogoutCommand);"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(LogoutCommand.COMMAND_ALIAS + \" 3\") instanceof LogoutCommand);"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"    public void parseCommand_addQuestionAnswer() throws Exception {"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"        String question \u003d \"question\";"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"        String answer \u003d \"answer\";"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        AddQuestionAnswerCommand command \u003d (AddQuestionAnswerCommand)"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"                parser.parseCommand("},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"                        AddQuestionAnswerCommand.COMMAND_WORD + \" \""},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"                                + PREFIX_QUESTION + question + \" \""},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"                                + PREFIX_ANSWER + answer);"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new AddQuestionAnswerCommand(question, answer), command);"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new AddCommand(task), command);"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"        AddCommand commandAlias \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommandAlias(task));"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new AddCommand(task), commandAlias);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":131,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"        DeleteCommand commandAlias \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":133,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteSubtask() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand command \u003d (DeleteSubtaskCommand) parser.parseCommand("},{"lineNumber":141,"author":{"gitID":"-"},"content":"                DeleteSubtaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \""},{"lineNumber":142,"author":{"gitID":"-"},"content":"                        + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand commandAlias \u003d (DeleteSubtaskCommand) parser.parseCommand("},{"lineNumber":144,"author":{"gitID":"-"},"content":"                DeleteSubtaskCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \""},{"lineNumber":145,"author":{"gitID":"-"},"content":"                        + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteSubtaskCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK), command);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteSubtaskCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":155,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getTaskDetails(task));"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"        EditCommand commandAlias \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":157,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getTaskDetails(task));"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), commandAlias);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_addSubtask() throws Exception {"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(task.getName());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        AddSubtaskCommand command \u003d (AddSubtaskCommand) parser.parseCommand("},{"lineNumber":167,"author":{"gitID":"-"},"content":"                AddSubtaskCommand.COMMAND_WORD + \" \""},{"lineNumber":168,"author":{"gitID":"-"},"content":"                        + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getSubtaskDetails(task));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        AddSubtaskCommand commandAlias \u003d (AddSubtaskCommand) parser.parseCommand("},{"lineNumber":170,"author":{"gitID":"-"},"content":"                AddSubtaskCommand.COMMAND_ALIAS + \" \""},{"lineNumber":171,"author":{"gitID":"-"},"content":"                        + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getSubtaskDetails(task));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(new AddSubtaskCommand(INDEX_FIRST_TASK, subtask), command);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(new AddSubtaskCommand(INDEX_FIRST_TASK, subtask), commandAlias);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":183,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"guekling"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":185,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"Study\", \"es2660\", \"update\");"},{"lineNumber":186,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d (FindMultipleFieldsCommand) parser.parseCommand("},{"lineNumber":187,"author":{"gitID":"guekling"},"content":"                FindMultipleFieldsCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":188,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand commandAlias \u003d (FindMultipleFieldsCommand) parser.parseCommand("},{"lineNumber":189,"author":{"gitID":"guekling"},"content":"                FindMultipleFieldsCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":190,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":191,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(keywords)),"},{"lineNumber":192,"author":{"gitID":"guekling"},"content":"                commandAlias);"},{"lineNumber":193,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseCommand_findName() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d (FindNameCommand) parser.parseCommand("},{"lineNumber":200,"author":{"gitID":"-"},"content":"                FindNameCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        FindNameCommand commandAlias \u003d (FindNameCommand) parser.parseCommand("},{"lineNumber":202,"author":{"gitID":"-"},"content":"                FindNameCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(new FindNameCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertEquals(new FindNameCommand(new NameContainsKeywordsPredicate(keywords)), commandAlias);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":208,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"guekling"},"content":"    public void parseCommand_findDescription() throws Exception {"},{"lineNumber":210,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"cs2103\", \"cs2101\", \"CS2010\");"},{"lineNumber":211,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d (FindDescriptionCommand) parser.parseCommand("},{"lineNumber":212,"author":{"gitID":"guekling"},"content":"                FindDescriptionCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":213,"author":{"gitID":"guekling"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":214,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand commandAlias \u003d (FindDescriptionCommand) parser.parseCommand("},{"lineNumber":215,"author":{"gitID":"guekling"},"content":"                FindDescriptionCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":216,"author":{"gitID":"guekling"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":217,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":218,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(keywords)), commandAlias);"},{"lineNumber":219,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"guekling"},"content":""},{"lineNumber":221,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"guekling"},"content":"    public void parseCommand_findDeadline() throws Exception {"},{"lineNumber":223,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"2018-04-03\", \"2019-01-01\", \"2018-03-17\");"},{"lineNumber":224,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d (FindDeadlineCommand) parser.parseCommand("},{"lineNumber":225,"author":{"gitID":"guekling"},"content":"                FindDeadlineCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":226,"author":{"gitID":"guekling"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":227,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand commandAlias \u003d (FindDeadlineCommand) parser.parseCommand("},{"lineNumber":228,"author":{"gitID":"guekling"},"content":"                FindDeadlineCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":229,"author":{"gitID":"guekling"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":230,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":231,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(keywords)), commandAlias);"},{"lineNumber":232,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":258,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":259,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":265,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":266,"author":{"gitID":"dominickenn"},"content":"        SelectCommand commandAlias \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":267,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public void parseCommand_toggle() throws Exception {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        ToggleCommand command \u003d (ToggleCommand) parser.parseCommand("},{"lineNumber":275,"author":{"gitID":"-"},"content":"                ToggleCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        ToggleCommand commandAlias \u003d (ToggleCommand) parser.parseCommand("},{"lineNumber":277,"author":{"gitID":"-"},"content":"                ToggleCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertEquals(new ToggleCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertEquals(new ToggleCommand(INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public void parseCommand_toggleSubtask() throws Exception {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand command \u003d (ToggleSubtaskCommand) parser.parseCommand("},{"lineNumber":285,"author":{"gitID":"-"},"content":"                ToggleSubtaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \""},{"lineNumber":286,"author":{"gitID":"-"},"content":"                        + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand commandAlias \u003d (ToggleSubtaskCommand) parser.parseCommand("},{"lineNumber":288,"author":{"gitID":"-"},"content":"                ToggleSubtaskCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \""},{"lineNumber":289,"author":{"gitID":"-"},"content":"                        + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertEquals(new ToggleSubtaskCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK), command);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertEquals(new ToggleSubtaskCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":307,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":308,"author":{"gitID":"guekling"},"content":"    public void parseCommand_previousMonthCommand() throws Exception {"},{"lineNumber":309,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(PreviousMonthCommand.COMMAND_WORD) instanceof PreviousMonthCommand);"},{"lineNumber":310,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(PreviousMonthCommand.COMMAND_WORD + \" 3\")"},{"lineNumber":311,"author":{"gitID":"guekling"},"content":"                instanceof PreviousMonthCommand);"},{"lineNumber":312,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(PreviousMonthCommand.COMMAND_ALIAS) instanceof PreviousMonthCommand);"},{"lineNumber":313,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(PreviousMonthCommand.COMMAND_ALIAS + \" 3\")"},{"lineNumber":314,"author":{"gitID":"guekling"},"content":"                instanceof PreviousMonthCommand);"},{"lineNumber":315,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"guekling"},"content":""},{"lineNumber":317,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":318,"author":{"gitID":"guekling"},"content":"    public void parseCommand_nextMonthCommand() throws Exception {"},{"lineNumber":319,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(NextMonthCommand.COMMAND_WORD) instanceof NextMonthCommand);"},{"lineNumber":320,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(NextMonthCommand.COMMAND_WORD + \" 3\")"},{"lineNumber":321,"author":{"gitID":"guekling"},"content":"                instanceof NextMonthCommand);"},{"lineNumber":322,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(NextMonthCommand.COMMAND_ALIAS) instanceof NextMonthCommand);"},{"lineNumber":323,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(NextMonthCommand.COMMAND_ALIAS + \" 3\")"},{"lineNumber":324,"author":{"gitID":"guekling"},"content":"                instanceof NextMonthCommand);"},{"lineNumber":325,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"guekling"},"content":""},{"lineNumber":327,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":328,"author":{"gitID":"guekling"},"content":"    public void parseCommand_currentMonthCommand() throws Exception {"},{"lineNumber":329,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(CurrentMonthCommand.COMMAND_WORD) instanceof CurrentMonthCommand);"},{"lineNumber":330,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(CurrentMonthCommand.COMMAND_WORD + \" 3\")"},{"lineNumber":331,"author":{"gitID":"guekling"},"content":"                instanceof CurrentMonthCommand);"},{"lineNumber":332,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(CurrentMonthCommand.COMMAND_ALIAS) instanceof CurrentMonthCommand);"},{"lineNumber":333,"author":{"gitID":"guekling"},"content":"        assertTrue(parser.parseCommand(CurrentMonthCommand.COMMAND_ALIAS + \" 3\")"},{"lineNumber":334,"author":{"gitID":"guekling"},"content":"                instanceof CurrentMonthCommand);"},{"lineNumber":335,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":346,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":38,"guekling":71,"-":242}},{"path":"src/test/java/seedu/organizer/logic/parser/OrganizerParserNotLoggedInTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AnswerCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ForgotPasswordCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LoginCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SignUpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":" * Performs OrganizerParser tests when no user is logged in"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"public class OrganizerParserNotLoggedInTest {"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    private final OrganizerParser parser \u003d new OrganizerParser();"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    private User user \u003d ADMIN_USER;"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    private String username \u003d \"admin\";"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    public void parseCommand_signUp() throws Exception {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        SignUpCommand command \u003d (SignUpCommand) parser.parseCommand("},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"                SignUpCommand.COMMAND_WORD + \" \""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + \"admin \""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_PASSWORD + \"admin\");"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new SignUpCommand(user), command);"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        SignUpCommand commandAlias \u003d (SignUpCommand) parser.parseCommand("},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"                SignUpCommand.COMMAND_ALIAS + \" \""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + \"admin \""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_PASSWORD + \"admin\");"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new SignUpCommand(user), commandAlias);"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    public void parseCommand_login() throws Exception {"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        LoginCommand command \u003d (LoginCommand) parser.parseCommand("},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"                LoginCommand.COMMAND_WORD + \" \""},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + \"admin \""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_PASSWORD + \"admin\");"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new LoginCommand(user), command);"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        LoginCommand commandAlias \u003d (LoginCommand) parser.parseCommand("},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"                LoginCommand.COMMAND_ALIAS + \" \""},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + \"admin \""},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_PASSWORD + \"admin\");"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new LoginCommand(user), commandAlias);"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"    public void parseCommand_forgotPassword() throws Exception {"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        ForgotPasswordCommand command \u003d (ForgotPasswordCommand) parser.parseCommand("},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"                ForgotPasswordCommand.COMMAND_WORD + \" \""},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + username);"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new ForgotPasswordCommand(username), command);"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        ForgotPasswordCommand commandAlias \u003d (ForgotPasswordCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"                ForgotPasswordCommand.COMMAND_ALIAS + \" \""},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + username);"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new ForgotPasswordCommand(username), commandAlias);"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"    public void parseCommand_answer() throws Exception {"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        String answer \u003d \"answer\";"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        AnswerCommand command \u003d (AnswerCommand) parser.parseCommand("},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"                AnswerCommand.COMMAND_WORD + \" \""},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + username + \" \""},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_ANSWER + answer);"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new AnswerCommand(username, answer), command);"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        AnswerCommand commandAlias \u003d (AnswerCommand) parser.parseCommand("},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"                AnswerCommand.COMMAND_ALIAS + \" \""},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_USERNAME + username + \" \""},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"                        + PREFIX_ANSWER + answer);"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new AnswerCommand(username, answer), commandAlias);"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":80,"-":22}},{"path":"src/test/java/seedu/organizer/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_EXAM;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_EXAM;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_EXAM, MESSAGE_INVALID_FORMAT);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_EXAM, MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_EXAM, MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                \"1\" + INVALID_PRIORITY_DESC, Priority.MESSAGE_PRIORITY_CONSTRAINTS); // invalid priority"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            Deadline.MESSAGE_DEADLINE_CONSTRAINTS); // invalid deadline"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // invalid priority followed by valid deadline"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                \"1\" + INVALID_PRIORITY_DESC + DEADLINE_DESC_EXAM, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // valid priority followed by invalid priority. The test case for invalid priority followed by valid priority"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \"1\" + PRIORITY_DESC_STUDY + INVALID_PRIORITY_DESC, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \"1\" + INVALID_NAME_DESC + INVALID_DEADLINE_DESC + VALID_DESCRIPTION_EXAM + VALID_PRIORITY_EXAM,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_STUDY + TAG_DESC_HUSBAND"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM + NAME_DESC_EXAM + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_STUDY + DEADLINE_DESC_EXAM;"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_EXAM).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_TASK;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_EXAM;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_EXAM).build();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // priority"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_EXAM;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_EXAM).build();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // deadline"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_EXAM;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_EXAM).build();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // organizer"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_EXAM;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_EXAM).build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_EXAM + DESCRIPTION_DESC_EXAM + DEADLINE_DESC_EXAM"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PRIORITY_DESC_EXAM + DESCRIPTION_DESC_EXAM + DEADLINE_DESC_EXAM + TAG_DESC_FRIEND"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY + DESCRIPTION_DESC_STUDY + DEADLINE_DESC_STUDY + TAG_DESC_HUSBAND;"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_STUDY).withDescription(VALID_DESCRIPTION_STUDY)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PRIORITY_DESC + PRIORITY_DESC_STUDY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).build();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_STUDY + INVALID_PRIORITY_DESC + DESCRIPTION_DESC_STUDY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_STUDY).withDeadline"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                (VALID_DEADLINE_STUDY)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_STUDY).build();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_TASK;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":217}},{"path":"src/test/java/seedu/organizer/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertArrayEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.ParserUtil.MESSAGE_WRONG_PART_COUNT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_USERNAME \u003d \"B@B\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_PASSWORD \u003d \"BR@g\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PRIORITY \u003d \"+651234\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_DEADLINE \u003d \"20180203\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_USERNAME \u003d \"B0B\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_PASSWORD \u003d \"BR4G\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_PRIORITY \u003d \"1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_DESCRIPTION \u003d \"Study for CS2103T\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_DEADLINE \u003d \"2018-03-11\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parseMultipleIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndexAsArray(\"10 a\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parseMultipleIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndexAsArray(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parseMultipleIndex_outOfRangeInputWithSomeValidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndexAsArray(Long.toString(Integer.MAX_VALUE + 1) + \" 1 2\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parseMultipleIndex_validInput_success() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Index[] testCase \u003d {INDEX_FIRST_TASK, INDEX_SECOND_TASK};"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertArrayEquals(testCase, ParserUtil.parseIndexAsArray(\"1 2\"));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertArrayEquals(testCase, ParserUtil.parseIndexAsArray(\"  1   2  \"));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parseSubtaskIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        ParserUtil.parseSubtaskIndex(\"10 a\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parseSubtaskIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        ParserUtil.parseSubtaskIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parseSubtaskIndex_outOfRangeInputWithSomeValidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        ParserUtil.parseSubtaskIndex(Long.toString(Integer.MAX_VALUE + 1) + \" 2\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseSubtaskIndex_oneIndex_throwsIllegalValueException() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_WRONG_PART_COUNT);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        ParserUtil.parseSubtaskIndex(\"2\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parseSubtaskIndex_threeIndex_throwsIllegalValueException() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_WRONG_PART_COUNT);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        ParserUtil.parseSubtaskIndex(\"2 3 4\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parseSubtaskIndex_validInput_success() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Index[] testCase \u003d {INDEX_FIRST_TASK, INDEX_SECOND_TASK};"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertArrayEquals(testCase, ParserUtil.parseSubtaskIndex(\"1 2\"));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertArrayEquals(testCase, ParserUtil.parseSubtaskIndex(\"  1   2  \"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parsePriority_null_throwsNullPointerException() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((Optional\u003cString\u003e) null));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parsePriority_invalidValue_throwsIllegalValueException() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePriority(Optional.of(INVALID_PRIORITY)));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parsePriority_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePriority(Optional.empty()).isPresent());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPriority), ParserUtil.parsePriority(Optional.of(VALID_PRIORITY)));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPriority), ParserUtil.parsePriority(Optional.of(priorityWithWhitespace)));"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void parseDescription_null_throwsNullPointerException() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((Optional\u003cString\u003e) null));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseDescription_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseDescription(Optional.empty()).isPresent());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedDescription), ParserUtil.parseDescription(Optional.of(VALID_DESCRIPTION)));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedDescription), ParserUtil.parseDescription(Optional.of"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                (descriptionWithWhitespace)));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public void parseDeadline_null_throwsNullPointerException() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((Optional\u003cString\u003e) null));"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public void parseDeadline_invalidValue_throwsIllegalValueException() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDeadline(Optional.of(INVALID_DEADLINE)));"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public void parseDeadline_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseDeadline(Optional.empty()).isPresent());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE));"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedDeadline), ParserUtil.parseDeadline(Optional.of(VALID_DEADLINE)));"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        String deadlineWithWhitespace \u003d WHITESPACE + VALID_DEADLINE + WHITESPACE;"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertEquals(expectedDeadline, ParserUtil.parseDeadline(deadlineWithWhitespace));"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedDeadline), ParserUtil.parseDeadline(Optional.of(deadlineWithWhitespace)));"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":326,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":327,"author":{"gitID":"dominickenn"},"content":"    public void parseUsermame_null_throwsNullPointerException() {"},{"lineNumber":328,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername((String) null));"},{"lineNumber":329,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername((Optional\u003cString\u003e) null));"},{"lineNumber":330,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":332,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":333,"author":{"gitID":"dominickenn"},"content":"    public void parseUsername_invalidValue_throwsIllegalValueException() {"},{"lineNumber":334,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUsername(INVALID_USERNAME));"},{"lineNumber":335,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUsername(Optional.of(INVALID_USERNAME)));"},{"lineNumber":336,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":338,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":339,"author":{"gitID":"dominickenn"},"content":"    public void parseUsername_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":340,"author":{"gitID":"dominickenn"},"content":"        assertFalse(ParserUtil.parseUsername(Optional.empty()).isPresent());"},{"lineNumber":341,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":343,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":344,"author":{"gitID":"dominickenn"},"content":"    public void parseUsername_validValueWithoutWhitespace_returnsUsername() throws Exception {"},{"lineNumber":345,"author":{"gitID":"dominickenn"},"content":"        String expectedUsername \u003d VALID_USERNAME;"},{"lineNumber":346,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedUsername, ParserUtil.parseUsername(VALID_USERNAME));"},{"lineNumber":347,"author":{"gitID":"dominickenn"},"content":"        assertEquals(Optional.of(expectedUsername), ParserUtil.parseUsername(Optional.of(VALID_USERNAME)));"},{"lineNumber":348,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":350,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":351,"author":{"gitID":"dominickenn"},"content":"    public void parsePassword_null_throwsNullPointerException() {"},{"lineNumber":352,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePassword((String) null));"},{"lineNumber":353,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePassword((Optional\u003cString\u003e) null));"},{"lineNumber":354,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":356,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":357,"author":{"gitID":"dominickenn"},"content":"    public void parsePassword_invalidValue_throwsIllegalValueException() {"},{"lineNumber":358,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePassword(INVALID_PASSWORD));"},{"lineNumber":359,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePassword(Optional.of(INVALID_PASSWORD)));"},{"lineNumber":360,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":362,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":363,"author":{"gitID":"dominickenn"},"content":"    public void parsePassword_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":364,"author":{"gitID":"dominickenn"},"content":"        assertFalse(ParserUtil.parsePassword(Optional.empty()).isPresent());"},{"lineNumber":365,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":367,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":368,"author":{"gitID":"dominickenn"},"content":"    public void parsePassword_validValueWithoutWhitespace_returnsPassword() throws Exception {"},{"lineNumber":369,"author":{"gitID":"dominickenn"},"content":"        String expectedPassword \u003d VALID_PASSWORD;"},{"lineNumber":370,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedPassword, ParserUtil.parsePassword(VALID_PASSWORD));"},{"lineNumber":371,"author":{"gitID":"dominickenn"},"content":"        assertEquals(Optional.of(expectedPassword), ParserUtil.parsePassword(Optional.of(VALID_PASSWORD)));"},{"lineNumber":372,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":374,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":49,"-":325}},{"path":"src/test/java/seedu/organizer/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_EXAM;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_STUDY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_EXAM;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Task expectedTask \u003d new TaskBuilder().withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_STUDY).withDescription(VALID_DESCRIPTION_STUDY)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // multiple prioritys - last priority accepted"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_EXAM + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple deadlines - last deadline accepted"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_EXAM + DEADLINE_DESC_STUDY"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple descriptions - last organizer accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_EXAM"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Task expectedTaskMultipleTags \u003d new TaskBuilder().withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_STUDY).withDescription(VALID_DESCRIPTION_STUDY)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_STUDY"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedTaskMultipleTags));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Task expectedNoTagTask \u003d new TaskBuilder().withName(VALID_NAME_EXAM).withPriority(VALID_PRIORITY_EXAM)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_EXAM).withDescription(VALID_DESCRIPTION_EXAM).withTags().build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                new AddCommand(expectedNoTagTask));"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"        //@@author dominickenn"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        // no priority"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        Task expectedNoPriorityTask \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"                .withPriority(Priority.LOWEST_PRIORITY_LEVEL).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM + TAG_DESC_HUSBAND,"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"                new AddCommand(expectedNoPriorityTask));"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        //@@author"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // no description"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Task expectedNoDescriptionTask \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withDescription(\"\").withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND, new AddCommand(expectedNoDescriptionTask));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // missing deadline prefix"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + VALID_DEADLINE_STUDY"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY, expectedMessage);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_STUDY + VALID_PRIORITY_STUDY + VALID_DEADLINE_STUDY"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            + VALID_DESCRIPTION_STUDY, expectedMessage);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // invalid priority"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + INVALID_PRIORITY_DESC + DEADLINE_DESC_STUDY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // invalid deadline"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + INVALID_DEADLINE_DESC"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PRIORITY_DESC + DEADLINE_DESC_STUDY"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_STUDY + PRIORITY_DESC_STUDY"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":138}},{"path":"src/test/java/seedu/organizer/logic/parser/FindDescriptionCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDescriptionCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DescriptionContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindDescriptionCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private FindDescriptionCommandParser parser \u003d new FindDescriptionCommandParser();"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"            FindDescriptionCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void parse_validArgs_returnsFindDescriptionCommand() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand expectedFindDescriptionCommand \u003d"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"                new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"cs2103\", \"CS2102\")));"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \"cs2103 CS2102\", expectedFindDescriptionCommand);"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \" \\n cs2103 \\n \\t CS2102  \\t\", expectedFindDescriptionCommand);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":22,"-":13}},{"path":"src/test/java/seedu/organizer/logic/parser/SignUpCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SignUpCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public class SignUpCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"    private SignUpCommandParser parser \u003d new SignUpCommandParser();"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        User expectedUser \u003d new User(\"bob\", \"bob\");"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"        assertParseSuccess(parser, \" u/bob p/bob\", new SignUpCommand(expectedUser));"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE);"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        // missing username prefix"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" bob p/b0b\", expectedMessage);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        // missing password prefix"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" u/bob b0b\", expectedMessage);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        // all prefixes missing"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" bob b0b\", expectedMessage);"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        // invalid username"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" u/b@b p/bob\", User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        // invalid password"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" u/bob p/b@b\", User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":34,"-":11}},{"path":"src/test/java/seedu/organizer/logic/commands/EditTaskDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_STUDY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class EditTaskDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_EXAM);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_EXAM.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_EXAM.equals(DESC_EXAM));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(DESC_STUDY));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EditTaskDescriptor editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_STUDY).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different priority -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withPriority(VALID_PRIORITY_STUDY).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different deadline -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withDeadline(VALID_DEADLINE_STUDY).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different organizer -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withDescription(VALID_DESCRIPTION_STUDY).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":58}},{"path":"src/test/java/seedu/organizer/logic/parser/AnswerCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AnswerCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"public class AnswerCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"    private AnswerCommandParser parser \u003d new AnswerCommandParser();"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"        String expectedUsername \u003d \"admin\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        String expectedAnswer \u003d \"answer\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        assertParseSuccess(parser, \" u/admin a/answer\", new AnswerCommand(expectedUsername, expectedAnswer));"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        // missing username prefix"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" admin a/answer\", expectedMessage);"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        // missing answer prefix"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" u/admin answer\", expectedMessage);"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        // missing all prefixes"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        assertParseFailure(parser, \" admin answer\", expectedMessage);"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":25,"-":10}},{"path":"src/test/java/seedu/organizer/logic/UndoRedoStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.EmptyStackException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LogoutCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoableCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoRedoStackTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommandOne \u003d new DummyCommand();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandOne \u003d new DummyUndoableCommand();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandTwo \u003d new DummyUndoableCommand();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void push_nonUndoableCommand_redoStackClearedAndCommandNotAdded() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // non-empty undoRedoStack"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // empty undoRedoStack"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public void push_nonUndoableLogoutCommand_redoStackClearedAndCommandNotAdded() {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        LogoutCommand logoutCommand \u003d new LogoutCommand();"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        // non-empty redoStack"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        undoRedoStack.push(logoutCommand);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        assertStackStatus(Collections.emptyList(), Collections.emptyList());"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        // empty redoStack"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        undoRedoStack.push(logoutCommand);"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        assertStackStatus(Collections.emptyList(), Collections.emptyList());"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void push_undoableCommand_redoStackClearedAndCommandAdded() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void push_undoCommand_stackRemainsUnchanged() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void push_redoCommand_stackRemainsUnchanged() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void canUndo() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // empty undo stack"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canUndo());"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // non-empty undo stack"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canUndo());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void canRedo() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // empty redo stack"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canRedo());"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // non-empty redo stack"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(), Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canRedo());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void popUndo() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo),"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandOne, Collections.emptyList(),"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertPopUndoFailure(Collections.emptyList(),"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void popRedo() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(),"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandOne,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertPopRedoFailure(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoRedoStack copy \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(copy));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(undoRedoStack));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(null));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(1));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // different undoStack -\u003e returns false"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        UndoRedoStack differentUndoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentUndoStack));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // different redoStack -\u003e returns false"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        UndoRedoStack differentRedoStack \u003d"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                        Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentRedoStack));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popUndo()} equals {@code expectedCommand}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertPopUndoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popUndo());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popRedo()} equals {@code expectedCommand}."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertPopRedoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popRedo());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popUndo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void assertPopUndoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            undoRedoStack.popUndo();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popRedo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void assertPopRedoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            undoRedoStack.popRedo();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Asserts that {@code undoRedoStack#undoStack} equals {@code undoElements}, and {@code undoRedoStack#redoStack}"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * equals {@code redoElements}."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    private void assertStackStatus(List\u003cUndoableCommand\u003e undoElements, List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertEquals(prepareStack(undoElements, redoElements), undoRedoStack);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    class DummyCommand extends Command {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        public CommandResult execute() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    class DummyUndoableCommand extends UndoableCommand {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":16,"-":250}},{"path":"src/test/java/seedu/organizer/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of organizer book list"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrganizer().getTaskList().size());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"        // delete -\u003e first task deleted"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task deleted again"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"     * 1. Deletes a {@code Task} from a filtered list."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted task in the"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_TASK);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertNotEquals(taskToDelete, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e deletes same second task in unfiltered task list"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_TASK);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(p -\u003e false);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":16,"-":194}},{"path":"src/test/java/seedu/organizer/logic/commands/SignUpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"public class SignUpCommandTest {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        new SignUpCommand(null);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    public void execute_userAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        ModelStubAcceptingUserAdded modelStub \u003d new ModelStubAcceptingUserAdded();"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        User validUser \u003d new User(\"david\", \"david123\");"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        CommandResult commandResult \u003d getSignUpCommandForUser(validUser, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        assertEquals(String.format(SignUpCommand.MESSAGE_SUCCESS, validUser), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        assertEquals(Arrays.asList(validUser), modelStub.usersAdded);"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    public void execute_duplicateUser_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateUserException();"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        User validUser \u003d new User(\"admin\", \"admin\");"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        thrown.expectMessage(SignUpCommand.MESSAGE_DUPLICATE_USER);"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        getSignUpCommandForUser(validUser, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        User alice \u003d new User(\"alice\", \"alice123\");"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        User bob \u003d new User(\"bob\", \"bob123\");"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        SignUpCommand signUpAliceCommand \u003d new SignUpCommand(alice);"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        SignUpCommand signUpBobCommand \u003d new SignUpCommand(bob);"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        assertTrue(signUpAliceCommand.equals(signUpAliceCommand));"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        SignUpCommand addAliceCommandCopy \u003d new SignUpCommand(alice);"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        assertTrue(signUpAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        assertFalse(signUpAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        assertFalse(signUpAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        assertFalse(signUpAliceCommand.equals(signUpBobCommand));"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"     * Generates a new SignUpCommand with the given user."},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"    private SignUpCommand getSignUpCommandForUser(User user, Model model) {"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"        SignUpCommand command \u003d new SignUpCommand(user);"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"        public void addUser(User user) throws DuplicateUserException {"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"        public void loginUser(User user) throws UserNotFoundException, CurrentlyLoggedInException {"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"        public void logout() {"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        public void deleteCurrentUserTasks() {"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"        public void addQuestionAnswerToUser(User toRemove, UserWithQuestionAnswer toAdd) {"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        public User getUserByUsername(String username) throws UserNotFoundException {"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"            return null;"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"dominickenn"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":"        public void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"        public void updateTask(Task target, Task editedTask)"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"                throws DuplicateTaskException {"},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"            return null;"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":176,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":180,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always throw a DuplicateUserException when trying to add a user."},{"lineNumber":182,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"dominickenn"},"content":"    private class ModelStubThrowingDuplicateUserException extends ModelStub {"},{"lineNumber":184,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"dominickenn"},"content":"        public void addUser(User user) throws DuplicateUserException {"},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateUserException();"},{"lineNumber":187,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":189,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":191,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":192,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":195,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always accept the user being added."},{"lineNumber":197,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"dominickenn"},"content":"    private class ModelStubAcceptingUserAdded extends ModelStub {"},{"lineNumber":199,"author":{"gitID":"dominickenn"},"content":"        final ArrayList\u003cUser\u003e usersAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":200,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":201,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"dominickenn"},"content":"        public void addUser(User user) throws DuplicateUserException {"},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":"            requireNonNull(user);"},{"lineNumber":204,"author":{"gitID":"dominickenn"},"content":"            usersAdded.add(user);"},{"lineNumber":205,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":207,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":210,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":213,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":180,"-":33}},{"path":"src/test/java/seedu/organizer/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":55}},{"path":"src/test/java/seedu/organizer/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Task lastTask \u003d model.getFilteredTaskList().get(indexLastPerson.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        TaskBuilder personInList \u003d new TaskBuilder(lastTask);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Task editedTask \u003d personInList.withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(lastTask, editedTask);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_STUDY).build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void execute_duplicateTaskUnfilteredList_failure() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_TASK, descriptor);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_duplicateTaskFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // edit task in filtered list into a duplicate in organizer book"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Task taskInList \u003d model.getOrganizer().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"                new EditTaskDescriptorBuilder(taskInList).build());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void execute_invalidTaskIndexUnfilteredList_failure() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * but smaller than size of organizer book"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void execute_invalidTaskIndexFilteredList_failure() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of organizer book list"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrganizer().getTaskList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build());"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":183,"author":{"gitID":"dominickenn"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":187,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"dominickenn"},"content":"        // edit -\u003e first task edited"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(taskToEdit, editedTask);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"dominickenn"},"content":"     * 1. Edits a {@code Task} from a filtered list."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":222,"author":{"gitID":"dominickenn"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited task in the"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":224,"author":{"gitID":"dominickenn"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the task object regardless of indexing."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameTaskEdited() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":231,"author":{"gitID":"dominickenn"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":234,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_TASK);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":239,"author":{"gitID":"dominickenn"},"content":"        // edit -\u003e edits second task in unfiltered task list / first task in filtered task list"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(taskToEdit, editedTask);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), taskToEdit);"},{"lineNumber":248,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e edits same second task in unfiltered task list"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_TASK, DESC_EXAM);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_EXAM);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_TASK, copyDescriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_EXAM)));"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_STUDY)));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditTaskDescriptor descriptor) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":20,"-":269}},{"path":"src/test/java/seedu/organizer/logic/commands/NextMonthCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.NEXT_MONTH_COMMAND_ALIAS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.NEXT_MONTH_COMMAND_WORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.getTypicalExecutedCommands;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.YearMonth;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.GuiUnitTest;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.MonthView;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the UI) and unit tests for NextMonthCommand."},{"lineNumber":23,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"public class NextMonthCommandTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        (getTypicalExecutedCommands());"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        (getTypicalExecutedCommands());"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    private static final YearMonth currentYearMonth \u003d YearMonth.now();"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    private MonthView monthView;"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    private MonthView expectedMonthView;"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    private NextMonthCommand nextMonthCommand;"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":""},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        monthView \u003d new MonthView(TYPICAL_TASKS, TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        expectedMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        nextMonthCommand \u003d new NextMonthCommand();"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public void execute_commandWord() {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        // execute command with command word"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(NEXT_MONTH_COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        com.sun.javafx.application.PlatformImpl.startup(()-\u003e{}); // initialising JavaFX toolkit explicitly"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(currentYearMonth.plusMonths(1));"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(nextMonthCommand, monthView, nextMonthCommand.MESSAGE_SUCCESS, expectedMonthView);"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":""},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"    public void execute_commandAlias() {"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(NEXT_MONTH_COMMAND_ALIAS);"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        com.sun.javafx.application.PlatformImpl.startup(()-\u003e{}); // initialising JavaFX toolkit explicitly"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(currentYearMonth.plusMonths(1));"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(nextMonthCommand, monthView, nextMonthCommand.MESSAGE_SUCCESS, expectedMonthView);"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":""},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"     * Adds a new {@code command} to the {@code TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS} observable list."},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"    private void addCommandToExecutedCommandsList(String command) {"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS.add(command);"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":51,"-":19}},{"path":"src/test/java/seedu/organizer/logic/commands/FindNameCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindNameCommand}."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class FindNameCommandTest extends FindCommandTest\u003cFindNameCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindNameCommand findFirstCommand \u003d new FindNameCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindNameCommand findSecondCommand \u003d new FindNameCommand(secondPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        FindNameCommand findFirstCommandCopy \u003d new FindNameCommand(firstPredicate);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d prepareCommand(\" \");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d prepareCommand(\"Prepare breakfast Project Revision\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindNameCommand}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private FindNameCommand prepareCommand(String userInput) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                new FindNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":89}},{"path":"src/test/java/seedu/organizer/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.MonthView;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_EXAM \u003d \"CS2103T Exam\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_STUDY \u003d \"Study MA1101R\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_REVISION \u003d \"Revision\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PRIORITY_EXAM \u003d \"9\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PRIORITY_STUDY \u003d \"0\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_PRIORITY_REVISION \u003d \"5\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_DEADLINE_EXAM \u003d \"2019-04-05\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_DEADLINE_STUDY \u003d \"2019-09-11\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_DEADLINE_REVISION \u003d \"2019-04-05\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_EXAM \u003d \"CS2103T Exam\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_STUDY \u003d \"Study for CS2103T Exam\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_REVISION \u003d \" Revise for CS2106 midterms\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIENDS \u003d \"friends\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_EXAM \u003d \" \" + PREFIX_NAME + VALID_NAME_EXAM;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_STUDY \u003d \" \" + PREFIX_NAME + VALID_NAME_STUDY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_REVISION \u003d \" \" + PREFIX_NAME + VALID_NAME_REVISION;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PRIORITY_DESC_EXAM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_EXAM;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PRIORITY_DESC_STUDY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_STUDY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String PRIORITY_DESC_REVISION \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_REVISION;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String DEADLINE_DESC_EXAM \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_EXAM;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String DEADLINE_DESC_STUDY \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_STUDY;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String DEADLINE_DESC_REVISION \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_REVISION;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_EXAM \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_EXAM;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_STUDY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_STUDY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_REVISION \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_REVISION;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIENDS \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIENDS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"911a\"; // \u0027a\u0027 not allowed in prioritys"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final EditTaskDescriptor DESC_EXAM;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final EditTaskDescriptor DESC_STUDY;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DESC_EXAM \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM).withDescription"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                        (VALID_DESCRIPTION_EXAM)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        DESC_STUDY \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_STUDY).withDescription"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                        (VALID_DESCRIPTION_STUDY)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * - the {@code actualMonthView} matches {@code expectedMonthView}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, MonthView actualMonthView, String expectedMessage,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                                            MonthView expectedMonthView) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedMonthView, actualMonthView);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * - the organizer book and the filtered task list in the {@code actualModel} remain unchanged"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"        Organizer expectedOrganizer \u003d new Organizer(actualModel.getOrganizer());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"            assertEquals(expectedOrganizer, actualModel.getOrganizer());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s organizer book."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredTaskList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s organizer book."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            model.deleteTask(firstTask);"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"Task in filtered list must exist in model.\", pnfe);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":180}},{"path":"src/test/java/seedu/organizer/logic/commands/LoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"public class LoginCommandTest {"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        new LoginCommand(null);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public void execute_userAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        ModelStubLoginAccepted modelStub \u003d new ModelStubLoginAccepted();"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        User validUser \u003d new User(\"david\", \"david123\");"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        CommandResult commandResult \u003d getLoginCommandForUser(validUser, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        assertEquals(String.format(LoginCommand.MESSAGE_SUCCESS, validUser), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"    public void execute_userNotFound_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingUserNotFoundException();"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        User validUser \u003d new User(\"admin\", \"admin\");"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        thrown.expectMessage(LoginCommand.MESSAGE_USER_NOT_FOUND);"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        getLoginCommandForUser(validUser, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        User alice \u003d new User(\"alice\", \"alice123\");"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        User bob \u003d new User(\"bob\", \"bob123\");"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        LoginCommand loginAliceCommand \u003d new LoginCommand(alice);"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        LoginCommand loginBobCommand \u003d new LoginCommand(bob);"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        assertTrue(loginAliceCommand.equals(loginAliceCommand));"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        LoginCommand loginAliceCommandCopy \u003d new LoginCommand(alice);"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        assertTrue(loginAliceCommand.equals(loginAliceCommandCopy));"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        assertFalse(loginAliceCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        assertFalse(loginAliceCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"        assertFalse(loginAliceCommand.equals(loginBobCommand));"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"     * Generates a new LoginCommand with the given user."},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"    private LoginCommand getLoginCommandForUser(User user, Model model) {"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        LoginCommand command \u003d new LoginCommand(user);"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"        public void addUser(User user) throws DuplicateUserException {"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"        public void loginUser(User user) throws UserNotFoundException, CurrentlyLoggedInException {"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"        public void logout() {"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"        public void deleteCurrentUserTasks() {"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        public void addQuestionAnswerToUser(User toRemove, UserWithQuestionAnswer toAdd) {"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"        public User getUserByUsername(String username) throws UserNotFoundException {"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"            return null;"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"        public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"            return null;"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"        public void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"        public void updateTask(Task target, Task editedTask)"},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"                throws DuplicateTaskException {"},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"            return null;"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":178,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always throw a UserNotFoundException when trying to login."},{"lineNumber":180,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"dominickenn"},"content":"    private class ModelStubThrowingUserNotFoundException extends ModelStub {"},{"lineNumber":182,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"dominickenn"},"content":"        public void loginUser(User user) throws UserNotFoundException {"},{"lineNumber":184,"author":{"gitID":"dominickenn"},"content":"            throw new UserNotFoundException();"},{"lineNumber":185,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":187,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":189,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":190,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":193,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always accept login request."},{"lineNumber":195,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"dominickenn"},"content":"    private class ModelStubLoginAccepted extends ModelStub {"},{"lineNumber":197,"author":{"gitID":"dominickenn"},"content":"        final ArrayList\u003cUser\u003e users \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":199,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"dominickenn"},"content":"        public void loginUser(User user) throws UserNotFoundException {"},{"lineNumber":201,"author":{"gitID":"dominickenn"},"content":"            requireNonNull(user);"},{"lineNumber":202,"author":{"gitID":"dominickenn"},"content":"            users.add(user);"},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":205,"author":{"gitID":"dominickenn"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":207,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":208,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":178,"-":32}},{"path":"src/test/java/seedu/organizer/logic/commands/FindDescriptionCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DescriptionContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the Model) for {@code FindDescriptionCommand}."},{"lineNumber":27,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"public class FindDescriptionCommandTest extends FindCommandTest\u003cFindDescriptionCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"cs2101\"));"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"CS2010\"));"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":""},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand findFirstCommand \u003d new FindDescriptionCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand findSecondCommand \u003d new FindDescriptionCommand(secondPredicate);"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":""},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":""},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand findFirstCommandCopy \u003d new FindDescriptionCommand(firstPredicate);"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":""},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":""},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":""},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":""},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"    public void equals_notCaseSensitive() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d prepareCommand(\"op1\");"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(PROJECT));"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":""},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d prepareCommand(\" \");"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":""},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d prepareCommand(\"coffee OP1 midterms\");"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"guekling"},"content":""},{"lineNumber":89,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"guekling"},"content":"     * Parses {@code userInput} into a {@code FindDescriptionCommand}."},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"guekling"},"content":"    private FindDescriptionCommand prepareCommand(String userInput) {"},{"lineNumber":93,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d"},{"lineNumber":94,"author":{"gitID":"guekling"},"content":"            new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split"},{"lineNumber":95,"author":{"gitID":"guekling"},"content":"            (\"\\\\s+\"))));"},{"lineNumber":96,"author":{"gitID":"guekling"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"guekling"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":76,"-":23}},{"path":"src/test/java/seedu/organizer/logic/commands/CurrentMonthCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.CURRENT_MONTH_COMMAND_ALIAS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.CURRENT_MONTH_COMMAND_WORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.getTypicalExecutedCommands;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.YearMonth;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.GuiUnitTest;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.MonthView;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the UI) and unit tests for CurrentMonthCommand."},{"lineNumber":23,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"public class CurrentMonthCommandTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"            (getTypicalExecutedCommands());"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"            (getTypicalExecutedCommands());"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    private static final YearMonth currentYearMonth \u003d YearMonth.now();"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    private MonthView monthView;"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    private MonthView expectedMonthView;"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    private CurrentMonthCommand currentMonthCommand;"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":""},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        monthView \u003d new MonthView(TYPICAL_TASKS, TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        expectedMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        currentMonthCommand \u003d new CurrentMonthCommand();"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public void execute_commandWord() {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(CURRENT_MONTH_COMMAND_WORD);"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        com.sun.javafx.application.PlatformImpl.startup(()-\u003e{}); // initialising JavaFX toolkit explicitly"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(currentYearMonth);"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(currentMonthCommand, monthView, currentMonthCommand.MESSAGE_SUCCESS, expectedMonthView);"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":""},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"    public void execute_commandAlias() {"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(CURRENT_MONTH_COMMAND_ALIAS);"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        com.sun.javafx.application.PlatformImpl.startup(()-\u003e{}); // initialising JavaFX toolkit explicitly"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(currentYearMonth);"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(currentMonthCommand, monthView, currentMonthCommand.MESSAGE_SUCCESS, expectedMonthView);"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":""},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"     * Adds a new {@code command} to the {@code TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS} observable list."},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    private void addCommandToExecutedCommandsList(String command) {"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS.add(command);"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":50,"-":19}},{"path":"src/test/java/seedu/organizer/logic/commands/ForgotPasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":" * Contains unit tests for ForgotPasswordCommand."},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"public class ForgotPasswordCommandTest {"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public final ExpectedException exception \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    private ForgotPasswordCommand forgotPasswordCommand;"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        model \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"            model.addUser(ADMIN_USER);"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateUserException e) {"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        forgotPasswordCommand \u003d new ForgotPasswordCommand(\"admin\");"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    public void execute_existingUser_noQuestion() throws Exception {"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(forgotPasswordCommand,"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"                String.format(ForgotPasswordCommand.MESSAGE_NO_QUESTION, \"admin\"));"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    public void execute_existingUser_question() throws Exception {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        UserWithQuestionAnswer editedUser \u003d new UserWithQuestionAnswer("},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"                \"admin\","},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"                \"admin\","},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"                \"question?\","},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"                \"answer\");"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        model.addQuestionAnswerToUser(ADMIN_USER, editedUser);"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(forgotPasswordCommand,"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"                String.format(ForgotPasswordCommand.MESSAGE_SUCCESS, \"question?\"));"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"    public void execute_nonexistingUser_noSuchUserFound() {"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        forgotPasswordCommand \u003d new ForgotPasswordCommand(\"noSuchUser\");"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        assertCommandFailure(forgotPasswordCommand);"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"    protected void assertCommandSuccess(ForgotPasswordCommand command, String expectedMessage)"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"            throws CommandException {"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        forgotPasswordCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"     * - Exception is thrown"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"    protected void assertCommandFailure(ForgotPasswordCommand command) {"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"        forgotPasswordCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        exception.expect(AssertionError.class);"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"        command.execute();"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":88,"-":2}},{"path":"src/test/java/seedu/organizer/logic/commands/AnswerCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" * Contains unit tests for AnswerCommand."},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"public class AnswerCommandTest {"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    public final ExpectedException exception \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    private AnswerCommand answerCommand;"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        model \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"            model.addUser(ADMIN_USER);"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateUserException e) {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        answerCommand \u003d new AnswerCommand(\"admin\", \"answer\");"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    public void execute_existingUser_noQuestion() throws Exception {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(answerCommand,"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"                String.format(AnswerCommand.MESSAGE_NO_QUESTION, \"admin\"));"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    public void execute_existingUser_answer() throws Exception {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        UserWithQuestionAnswer editedUser \u003d new UserWithQuestionAnswer("},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"                \"admin\","},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"                \"admin\","},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"                \"question?\","},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"                \"answer\");"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        model.addQuestionAnswerToUser(ADMIN_USER, editedUser);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(answerCommand,"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"                String.format(AnswerCommand.MESSAGE_SUCCESS, \"admin\"));"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    public void execute_nonExistingUser_noSuchUserFound() {"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        answerCommand \u003d new AnswerCommand(\"noSuchUser\", \"answer\");"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        assertCommandFailure(answerCommand);"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"    protected void assertCommandSuccess(AnswerCommand command, String expectedMessage)"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"            throws CommandException {"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        answerCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"     * - Exception is thrown"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"    protected void assertCommandFailure(AnswerCommand command) {"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        answerCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"        exception.expect(AssertionError.class);"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        command.execute();"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":71,"-":18}},{"path":"src/test/java/seedu/organizer/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addTask(validTask);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(prepareCommand(validTask, model), model,"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Task taskInList \u003d model.getOrganizer().getTaskList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(taskInList, model), model, AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code task} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    private AddCommand prepareCommand(Task task, Model model) {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        AddCommand command \u003d new AddCommand(task);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":48}},{"path":"src/test/java/seedu/organizer/logic/commands/FindMultipleFieldsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the Model) for {@code FindMultipleFieldsCommand}."},{"lineNumber":27,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommandTest extends FindCommandTest\u003cFindMultipleFieldsCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"                new MultipleFieldsContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"                new MultipleFieldsContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":""},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand findFirstCommand \u003d new FindMultipleFieldsCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand findSecondCommand \u003d new FindMultipleFieldsCommand(secondPredicate);"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":""},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":""},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand findFirstCommandCopy \u003d new FindMultipleFieldsCommand(firstPredicate);"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":""},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":""},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":""},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":""},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d prepareCommand(\" \");"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":""},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d prepareCommand(\"Toast Project 2019-04-05\");"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":""},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":"     * Parses {@code userInput} into a {@code FindMultipleFieldsCommand}."},{"lineNumber":84,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"    private FindMultipleFieldsCommand prepareCommand(String userInput) {"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d"},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"            new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(userInput.split"},{"lineNumber":88,"author":{"gitID":"guekling"},"content":"            (\"\\\\s+\"))));"},{"lineNumber":89,"author":{"gitID":"guekling"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":90,"author":{"gitID":"guekling"},"content":"        return command;"},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":69,"-":23}},{"path":"src/test/java/seedu/organizer/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"     * Deletes the first task in the model\u0027s filtered list."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            Task taskToDelete \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                model.deleteTask(taskToDelete);"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"            } catch (TaskNotFoundException pnfe) {"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"                fail(\"Impossible: taskToDelete was retrieved from model.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":82}},{"path":"src/test/java/seedu/organizer/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":" * Represents a find command with hidden internal logic and the ability to be executed for a {@code Command} of"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":" * type {@code T}."},{"lineNumber":19,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"public abstract class FindCommandTest\u003cT extends Command\u003e {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    protected Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"     * - the {@code FilteredList\u003cTask\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"     * - the {@code Organizer} in model remains the same after executing the {@code command}"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    protected void assertCommandSuccess(T command, String expectedMessage, List\u003cTask\u003e expectedList)"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"            throws CommandException {"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        Organizer expectedOrganizer \u003d new Organizer(model.getOrganizer());"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":""},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedList, model.getFilteredTaskList());"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedOrganizer, model.getOrganizer());"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":26,"-":14}},{"path":"src/test/java/seedu/organizer/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.testutil.EventsCollectorRule;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_TASK);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_TASK);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_TASK);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of organizer book list"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getOrganizer().getTaskList().size());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_TASK);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_TASK);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_TASK);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            // Does not make apply due to login"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            //assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":151}},{"path":"src/test/java/seedu/organizer/logic/commands/PreviousMonthCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.PREVIOUS_MONTH_COMMAND_ALIAS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.PREVIOUS_MONTH_COMMAND_WORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalExecutedCommands.getTypicalExecutedCommands;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.YearMonth;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.GuiUnitTest;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.MonthView;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the UI) and unit tests for PreviousMonthCommand."},{"lineNumber":23,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"public class PreviousMonthCommandTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d FXCollections.observableList(getTypicalTasks());"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        (getTypicalExecutedCommands());"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    private static final ObservableList\u003cString\u003e TYPICAL_EXECUTED_COMMANDS \u003d FXCollections.observableList"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        (getTypicalExecutedCommands());"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    private static final YearMonth currentYearMonth \u003d YearMonth.now();"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    private MonthView monthView;"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    private MonthView expectedMonthView;"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    private PreviousMonthCommand previousMonthCommand;"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":""},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        monthView \u003d new MonthView(TYPICAL_TASKS, TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        expectedMonthView \u003d new MonthView(TYPICAL_TASKS, TYPICAL_EXECUTED_COMMANDS);"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        previousMonthCommand \u003d new PreviousMonthCommand();"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public void execute_commandWord() {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(PREVIOUS_MONTH_COMMAND_WORD);"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        com.sun.javafx.application.PlatformImpl.startup(()-\u003e{}); // initialising JavaFX toolkit explicitly"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(currentYearMonth.minusMonths(1));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(previousMonthCommand, monthView, previousMonthCommand.MESSAGE_SUCCESS, expectedMonthView);"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":""},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"    public void execute_commandAlias() {"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        addCommandToExecutedCommandsList(PREVIOUS_MONTH_COMMAND_ALIAS);"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        com.sun.javafx.application.PlatformImpl.startup(()-\u003e{}); // initialising JavaFX toolkit explicitly"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        expectedMonthView.getMonthView(currentYearMonth.minusMonths(1));"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        guiRobot.pause();"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(previousMonthCommand, monthView, previousMonthCommand.MESSAGE_SUCCESS, expectedMonthView);"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":""},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"     * Adds a new {@code command} to the {@code TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS} observable list."},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    private void addCommandToExecutedCommandsList(String command) {"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        TO_BE_UPDATED_TYPICAL_EXECUTED_COMMANDS.add(command);"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":50,"-":19}},{"path":"src/test/java/seedu/organizer/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForTask(validTask, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_duplicateTask_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateTaskException();"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        getAddCommandForTask(validTask, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"     * Generates a new AddCommand with the details of the given task."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForTask(Task task, Model model) {"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"        AddCommand command \u003d new AddCommand(task);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void addUser(User user) throws DuplicateUserException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public void loginUser(User user) throws UserNotFoundException, CurrentlyLoggedInException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public void logout() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public void deleteCurrentUserTasks() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void addQuestionAnswerToUser(User toRemove, UserWithQuestionAnswer toAdd) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public User getUserByUsername(String username) throws UserNotFoundException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public void updateTask(Task target, Task editedTask)"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"                throws DuplicateTaskException {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always throw a DuplicateTaskException when trying to add a task."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicateTaskException extends ModelStub {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":191,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always accept the task being added."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":"            requireNonNull(task);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            tasksAdded.add(task);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":19,"-":194}},{"path":"src/test/java/seedu/organizer/logic/commands/LogoutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.ModelManager.getCurrentlyLoggedInUser;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"public class LogoutCommandTest {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    private User user \u003d new User(\"admin\", \"admin\");"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    @Before"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public void setUp() throws Exception {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"        model.addUser(user);"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public void execute() throws Exception {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        //Current user should be null"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        assertEquals(getCurrentlyLoggedInUser(), null);"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        //Current user should be admin"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        model.loginUser(user);"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        assertEquals(getCurrentlyLoggedInUser(), user);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        //Current user should be null;"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        model.logout();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        assertEquals(getCurrentlyLoggedInUser(), null);"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":25,"-":12}},{"path":"src/test/java/seedu/organizer/logic/commands/ToggleCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * ToggleCommand."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ToggleCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() throws UserNotFoundException, CurrentlyLoggedInException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        model.loginUser(ADMIN_USER);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(ToggleCommand.MESSAGE_EDIT_TASK_SUCCESS, toggledTask);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(toggleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_secondunfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(1);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(INDEX_SECOND_TASK);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(ToggleCommand.MESSAGE_EDIT_TASK_SUCCESS, toggledTask);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(toggleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(outOfBoundsIndex);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(toggleCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // edit -\u003e first task edited"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        toggleCommand.execute();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        undoRedoStack.push(toggleCommand);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Return an (@code Task) with status inversed"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private Task toggleTask(Task task) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return new Task("},{"lineNumber":107,"author":{"gitID":"-"},"content":"                task.getName(),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                task.getPriority(),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                task.getDeadline(),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                task.getDateAdded(),"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                task.getDateCompleted(), task.getDescription(),"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                task.getStatus().getInverse(),"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                task.getTags(),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                task.getSubtasks(),"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                task.getUser()"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Returns an {@code ToggleCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private ToggleCommand prepareCommand(Index index) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d new ToggleCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        toggleCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return toggleCommand;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":122}},{"path":"src/test/java/seedu/organizer/logic/commands/FindDeadlineCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the Model) for {@code FindDeadlineCommand}."},{"lineNumber":27,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommandTest extends FindCommandTest\u003cFindDeadlineCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"                new DeadlineContainsKeywordsPredicate(Collections.singletonList(\"2018-08-09\"));"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"                new DeadlineContainsKeywordsPredicate(Collections.singletonList(\"2018-03-02\"));"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":""},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand findFirstCommand \u003d new FindDeadlineCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand findSecondCommand \u003d new FindDeadlineCommand(secondPredicate);"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":""},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":""},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand findFirstCommandCopy \u003d new FindDeadlineCommand(firstPredicate);"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":""},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":""},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":""},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":""},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d prepareCommand(\" \");"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":""},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d prepareCommand(\"2019-04-05 2019-09-14 2019-11-12\");"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":""},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":"     * Parses {@code userInput} into a {@code FindDeadlineCommand}."},{"lineNumber":84,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"    private FindDeadlineCommand prepareCommand(String userInput) {"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d"},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"                new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":88,"author":{"gitID":"guekling"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"guekling"},"content":"        return command;"},{"lineNumber":90,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":68,"-":23}},{"path":"src/test/java/seedu/organizer/logic/commands/SignUpCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":" * Contains integration tests (interaction with the Model) for {@code SignUpCommand}."},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"public class SignUpCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    public void execute_newUser_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        User validUser \u003d new User(\"david\", \"david123\");"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        expectedModel.addUser(validUser);"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(prepareCommand(validUser, model), model,"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"                String.format(SignUpCommand.MESSAGE_SUCCESS, validUser), expectedModel);"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"    public void execute_duplicateUser_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        User userInList \u003d model.getOrganizer().getUserList().get(0);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        assertCommandFailure(prepareCommand(userInList, model), model, SignUpCommand.MESSAGE_DUPLICATE_USER);"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     * Generates a new {@code SignUpCommand} which upon execution, adds {@code user} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    private SignUpCommand prepareCommand(User user, Model model) {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        SignUpCommand command \u003d new SignUpCommand(user);"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":40,"-":16}},{"path":"src/test/java/seedu/organizer/logic/commands/AddQuestionAnswerCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":" * and unit tests for AddQuestionAnswerCommand."},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"public class AddQuestionAnswerCommandTest {"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    private String username \u003d \"admin\";"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    private String password \u003d \"admin\";"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    private String question \u003d \"are cats cool?\";"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    private String answer \u003d \"of course!\";"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"            e.printStackTrace();"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    public void execute_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        UserWithQuestionAnswer editedUser \u003d new UserWithQuestionAnswer(username, password, question, answer);"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        AddQuestionAnswerCommand command \u003d prepareCommand(question, answer);"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"                AddQuestionAnswerCommand.MESSAGE_ADD_QUESTION_ANSWER_SUCCESS, editedUser);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        expectedModel.addQuestionAnswerToUser(ADMIN_USER, editedUser);"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"    public void equals() {"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        final AddQuestionAnswerCommand standardCommand \u003d prepareCommand(question, answer);"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        AddQuestionAnswerCommand commandWithSameValues \u003d prepareCommand(question, answer);"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        // same object -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        // different types -\u003e returns false"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        // different question -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        assertFalse(standardCommand.equals(new AddQuestionAnswerCommand(\"different\", answer)));"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        // different answer -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        assertFalse(standardCommand.equals(new AddQuestionAnswerCommand(question, \"different\")));"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"     * Returns an {@code AddQuestionAnswerCommand} with parameters {@code question} and {@code answer}"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"    private AddQuestionAnswerCommand prepareCommand(String question, String answer) {"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        AddQuestionAnswerCommand command \u003d new AddQuestionAnswerCommand(question, answer);"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        return command;"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":72,"-":21}},{"path":"src/test/java/seedu/organizer/storage/XmlOrganizerStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.INTERVIEWPREP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.MAKEPRESENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"public class XmlOrganizerStorageTest {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlOrganizerStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    private java.util.Optional\u003cReadOnlyOrganizer\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlOrganizerStorage(filePath).readOrganizer(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        readAddressBook(\"NotXmlFormatOrganizer.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        readAddressBook(\"invalidTaskOrganizer.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        readAddressBook(\"invalidAndValidTaskOrganizer.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Organizer original \u003d getTypicalOrganizer();"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        XmlOrganizerStorage xmlAddressBookStorage \u003d new XmlOrganizerStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveOrganizer(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyOrganizer readBack \u003d xmlAddressBookStorage.readOrganizer(filePath).get();"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addTask(MAKEPRESENT);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removeTask(GROCERY);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveOrganizer(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readOrganizer(filePath).get();"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addTask(INTERVIEWPREP);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveOrganizer(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readOrganizer().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"    private void saveAddressBook(ReadOnlyOrganizer addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlOrganizerStorage(filePath).saveOrganizer(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        saveAddressBook(new Organizer(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":12,"-":113}},{"path":"src/test/java/seedu/organizer/storage/XmlSerializableOrganizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TypicalTasks;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class XmlSerializableOrganizerTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableOrganizerTest/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_TASKS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalTasksOrganizer.xml\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File INVALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskOrganizer.xml\");"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagOrganizer.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void toModelType_typicalTasksFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASKS_FILE,"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"                XmlSerializableOrganizer.class);"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        Organizer organizerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Organizer typicalTasksOrganizer \u003d TypicalTasks.getTypicalOrganizer();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(organizerFromFile, typicalTasksOrganizer);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"                XmlSerializableOrganizer.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"                XmlSerializableOrganizer.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":8,"-":43}},{"path":"src/test/java/seedu/organizer/storage/XmlAdaptedTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"public class XmlAdaptedTaskTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final XmlAdaptedUser VALID_XML_ADAPTED_USER \u003d new XmlAdaptedUser(\"admin\", \"admin\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_PRIORITY \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_DEADLINE \u003d \"2018/09/09\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d SPRINGCLEAN.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_PRIORITY \u003d SPRINGCLEAN.getPriority().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_DEADLINE \u003d SPRINGCLEAN.getDeadline().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_DATEADDED \u003d SPRINGCLEAN.getDateAdded().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_DATECOMPLETED \u003d SPRINGCLEAN.getDateCompleted().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_DESCRIPTION \u003d SPRINGCLEAN.getDescription().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Boolean VALID_STATUS \u003d SPRINGCLEAN.getStatus().value;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d SPRINGCLEAN.getTags().stream()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedSubtask\u003e VALID_SUBTASKS \u003d SPRINGCLEAN.getSubtasks().stream()"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedSubtask::new)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_validTaskDetails_returnsTask() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(SPRINGCLEAN);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(SPRINGCLEAN, task.toModelType());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(INVALID_NAME, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED, VALID_DATECOMPLETED,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                        VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS,"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                        VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(null, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                VALID_DATECOMPLETED, VALID_DESCRIPTION, VALID_STATUS,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPriority_throwsIllegalValueException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(VALID_NAME, INVALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED, VALID_DATECOMPLETED,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                        VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                        VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Priority.MESSAGE_PRIORITY_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void toModelType_nullPriority_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, null, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                VALID_DATECOMPLETED, VALID_DESCRIPTION, VALID_STATUS,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_invalidDeadline_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, INVALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                        VALID_DATECOMPLETED, VALID_DESCRIPTION, VALID_STATUS,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                        VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Deadline.MESSAGE_DEADLINE_CONSTRAINTS;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void toModelType_nullDeadline_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, null, VALID_DATEADDED,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                VALID_DATECOMPLETED, VALID_DESCRIPTION, VALID_STATUS,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                VALID_DATECOMPLETED, null, VALID_STATUS,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                VALID_TAGS, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                        VALID_DATECOMPLETED, VALID_DESCRIPTION, VALID_STATUS,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                        invalidTags, VALID_SUBTASKS, VALID_XML_ADAPTED_USER);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, task::toModelType);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":127,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"guekling"},"content":"    public void equalsTrue_sameTask() {"},{"lineNumber":129,"author":{"gitID":"guekling"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(SPRINGCLEAN);"},{"lineNumber":130,"author":{"gitID":"guekling"},"content":"        assertTrue(task.equals(task));"},{"lineNumber":131,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"guekling"},"content":""},{"lineNumber":133,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"guekling"},"content":"    public void equalsFalse() {"},{"lineNumber":135,"author":{"gitID":"guekling"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(SPRINGCLEAN);"},{"lineNumber":136,"author":{"gitID":"guekling"},"content":"        assertFalse(task.equals(new Integer(1)));"},{"lineNumber":137,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"guekling":13,"-":125}},{"path":"src/test/java/seedu/organizer/logic/commands/DeleteSubtaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * DeleteSubtaskCommand."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class DeleteSubtaskCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask, INDEX_FIRST_TASK);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Subtask toggledSubtask \u003d originalTask.getSubtasks().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand deleteSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteSubtaskCommand.MESSAGE_EDIT_SUBTASK_SUCCESS, toggledSubtask);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteSubtaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_invalidTaskIndexUnfilteredList_failure() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand deleteSubtaskCommand \u003d prepareCommand(outOfBoundsIndex, INDEX_FIRST_TASK);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteSubtaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void execute_invalidSubtaskIndexUnfilteredList_failure() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand deleteSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, outOfBoundsIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteSubtaskCommand, model, Messages.MESSAGE_INVALID_SUBTASK_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void execute_invalidSubtaskAndTaskIndexUnfilteredList_failure() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand deleteSubtaskCommand \u003d prepareCommand(outOfBoundsIndex, outOfBoundsIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteSubtaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask, INDEX_FIRST_TASK);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand deleteSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // edit -\u003e first task edited"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        deleteSubtaskCommand.execute();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteSubtaskCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void equalityTest() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand testSubject1 \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand testSubject2 \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand testSubject3 \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_SECOND_TASK);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand testSubject4 \u003d prepareCommand(INDEX_SECOND_TASK, INDEX_SECOND_TASK);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(testSubject1, testSubject1);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(testSubject1, testSubject2);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertNotEquals(testSubject1, testSubject3);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertNotEquals(testSubject1, testSubject4);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertNotEquals(testSubject4, testSubject3);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Retrun an (@code Task) with status inversed"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private Task toggleTask(Task task, Index index) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e(task.getSubtasks());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        subtasks.remove(index.getZeroBased());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Task("},{"lineNumber":136,"author":{"gitID":"-"},"content":"                task.getName(),"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                task.getPriority(),"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                task.getDeadline(),"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                task.getDateAdded(),"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                task.getDateCompleted(),"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                task.getDescription(),"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                task.getStatus(),"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                task.getTags(),"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                subtasks,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                task.getUser()"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Returns an {@code DeleteSubtaskCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private DeleteSubtaskCommand prepareCommand(Index taskIndex, Index subtaskIndex) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteSubtaskCommand deleteSubtaskCommand \u003d new DeleteSubtaskCommand(taskIndex, subtaskIndex);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        deleteSubtaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return deleteSubtaskCommand;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":153}},{"path":"src/test/java/seedu/organizer/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlOrganizerStorage organizerStorage \u003d new XmlOrganizerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(organizerStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void organizerReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"         * {@link XmlOrganizerStorage} class."},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlOrganizerStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Organizer original \u003d getTypicalOrganizer();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveOrganizer(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyOrganizer retrieved \u003d storageManager.readOrganizer().get();"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getOrganizerFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getOrganizerFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleOrganizerChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        Storage storage \u003d new StorageManager(new XmlOrganizerStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleOrganizerChangedEvent(new OrganizerChangedEvent(new Organizer()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"    class XmlOrganizerStorageExceptionThrowingStub extends XmlOrganizerStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        public XmlOrganizerStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveOrganizer(ReadOnlyOrganizer organizer, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":95}},{"path":"src/test/java/seedu/organizer/storage/XmlAdaptedUserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"public class XmlAdaptedUserTest {"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"    public static final String USERNAME \u003d \"Jennifer\";"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public static final String PASSWORD \u003d \"Jennifer123\";"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    public static final String QUESTION \u003d \"Question\";"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public static final String ANSWER \u003d \"Answer\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public static final String OTHER_USERNAME \u003d \"bobby\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public void equal_defaultConstructor() {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        XmlAdaptedUser user \u003d new XmlAdaptedUser(USERNAME, PASSWORD);"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        XmlAdaptedUser otherUser \u003d new XmlAdaptedUser(USERNAME, PASSWORD);"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        assertEquals(user, otherUser);"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        assertEquals(user, user);"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        XmlAdaptedUser diffUser \u003d new XmlAdaptedUser(OTHER_USERNAME, PASSWORD);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        assertNotEquals(user, diffUser);"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    public void equal_userConstructor() {"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        XmlAdaptedUser user \u003d new XmlAdaptedUser(USERNAME, PASSWORD);"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        XmlAdaptedUser otherUser \u003d new XmlAdaptedUser(USERNAME, PASSWORD);"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        assertEquals(user, otherUser);"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        assertEquals(user, user);"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public void equal_userWithQuestionAnswerConstructor() {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        XmlAdaptedUser user \u003d new XmlAdaptedUser(USERNAME, PASSWORD, QUESTION, ANSWER);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        XmlAdaptedUser otherUser \u003d new XmlAdaptedUser(USERNAME, PASSWORD, QUESTION, ANSWER);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        assertEquals(user, otherUser);"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        assertEquals(user, user);"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    public void toModel_invalidUsername() {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows("},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"                IllegalValueException.class, () -\u003e new XmlAdaptedUser(\"\", \"validpassword\").toUserModelType()"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        );"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"    public void toModel_invalidPassword() {"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows("},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"                IllegalValueException.class, () -\u003e new XmlAdaptedUser(\"validusername\", \"\").toUserModelType()"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        );"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"    public void toModel_invalidQuestion() {"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows("},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"                IllegalValueException.class, () -\u003e new XmlAdaptedUser("},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"                        \"validusername\","},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"                        \"validpassword\","},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"                        \"\","},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"                        \"valid answer\").toUserQuestionAnswerModelType()"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        );"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"    public void toModel_invalidAnswer() {"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows("},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"                IllegalValueException.class, () -\u003e new XmlAdaptedUser("},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"                        \"validusername\","},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"                        \"validpassword\","},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"                        \"validquestion\","},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"                        \"\").toUserQuestionAnswerModelType()"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        );"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":73,"-":10}},{"path":"src/test/java/seedu/organizer/model/UniqueTaskListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.task.Priority.HIGHEST_SETTABLE_PRIORITY_LEVEL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.UniqueTaskList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class UniqueTaskListTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.asObservableList().remove(0);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public void priorityAutoUpdateTest() throws DuplicateTaskException {"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        //CurrentDate equals to AddedDate"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        Task taskCurrentDateEqualsToAddedDate \u003d new TaskBuilder().withDeadline(\"2999-01-01\")"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"                                            .withDateAdded(currentDate.toString()).build();"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        Task expectedTaskCurrentDateEqualsToAddedDate \u003d new TaskBuilder().withDeadline(\"2999-01-01\")"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"                                                    .withDateAdded(currentDate.toString())"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"                                                    .withPriority(TaskBuilder.DEFAULT_PRIORITY).build();"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.add(taskCurrentDateEqualsToAddedDate);"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList.add(expectedTaskCurrentDateEqualsToAddedDate);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        assertEquals(uniqueTaskList, expectedUniqueTaskList);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        //CurrentDate before Deadline"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        Task taskCurrentDateBeforeDeadline \u003d new TaskBuilder().withDeadline(\"2035-01-01\")"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1900-01-01\").build();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        Task expectedTaskCurrentDateBeforeDeadline \u003d new TaskBuilder().withDeadline(\"2035-01-01\")"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1900-01-01\")"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"                .withPriority(\"8\").build();"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.add(taskCurrentDateBeforeDeadline);"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList.add(expectedTaskCurrentDateBeforeDeadline);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        assertEquals(uniqueTaskList, expectedUniqueTaskList);"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        //CurrentDate after Deadline"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        Task taskCurrentDateAfterDeadline \u003d new TaskBuilder().withDeadline(\"1999-01-01\")"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1950-01-01\").build();"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        Task expectedTaskCurrentDateAfterDeadline \u003d new TaskBuilder().withDeadline(\"1999-01-01\")"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1950-01-01\")"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"                .withPriority(HIGHEST_SETTABLE_PRIORITY_LEVEL).build();"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.add(taskCurrentDateAfterDeadline);"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList.add(expectedTaskCurrentDateAfterDeadline);"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        assertEquals(uniqueTaskList, expectedUniqueTaskList);"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":47,"-":25}},{"path":"src/test/java/seedu/organizer/model/user/UserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"public class UserTest {"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new User(null, null));"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidUsername_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"        String invalidUsername \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        String validPassword \u003d \"validPass\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new User(invalidUsername, validPassword));"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidPassword_throwsIllegalArgumentException() {"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        String validUsername \u003d \"validUsername\";"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        String invalidPassword \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new User(validUsername, invalidPassword));"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public void isValidUsername() {"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e User.isValidUsername(null));"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    public void isValidPassword() {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e User.isValidPassword(null));"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":33,"-":6}},{"path":"src/test/java/seedu/organizer/model/OrganizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.EXAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.STUDY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.OrganizerBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"public class OrganizerTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    private final Organizer organizer \u003d new Organizer();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Organizer organizerWithStudyAndExam \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withTask(EXAM).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), organizer.getTaskList());"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        assertEquals(Collections.emptyList(), organizer.getTagList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(null);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyOrganizer_replacesData() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Organizer newData \u003d getTypicalOrganizer();"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        assertEquals(newData, organizer);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicateTasks_throwsAssertionError() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // Repeat GROCERY twice"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList(GROCERY, GROCERY);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(GROCERY.getTags());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        List\u003cUser\u003e users \u003d Arrays.asList(new User(\"admin\", \"admin\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        OrganizerStub newData \u003d new OrganizerStub(newTasks, newTags, users);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(newData);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        organizer.getTaskList().remove(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        organizer.getTagList().remove(0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void updateTask_detailsChanged_tasksAndTagsListUpdated() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Organizer organizerUpdatedToAmy \u003d new OrganizerBuilder().withTask(STUDY).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        organizerUpdatedToAmy.updateTask(STUDY, EXAM);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(EXAM).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrganizer, organizerUpdatedToAmy);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void removeTag_nonExistentTag_organizerUnchanged() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        organizerWithStudyAndExam.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(STUDY).withTask(EXAM).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrganizer, organizerWithStudyAndExam);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void removeTag_tagUsedByMultipleTasks_tagRemoved() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        organizerWithStudyAndExam.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Task amyWithoutFriendTag \u003d new TaskBuilder(EXAM).withTags().build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Task bobWithoutFriendTag \u003d new TaskBuilder(STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(bobWithoutFriendTag)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withTask(amyWithoutFriendTag).build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrganizer, organizerWithStudyAndExam);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"    public void addTask_alwaysSorted() throws DuplicateTaskException {"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        Organizer addRevision \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"                .withTask(EXAM).build();"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"        addRevision.addTask(REVISION);"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"                .withTask(REVISION).withTask(EXAM).build();"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedOrganizer, addRevision);"},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"    public void editTask_alwaysSorted() throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"        Organizer editExam \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"                .withTask(REVISION).withTask(EXAM).build();"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"        editExam.updateTask(EXAM, SPRINGCLEAN);"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"                .withTask(REVISION).withTask(SPRINGCLEAN).build();"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedOrganizer, editExam);"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"     * A stub ReadOnlyOrganizer whose tasks and tags lists can violate interface constraints."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"    private static class OrganizerStub implements ReadOnlyOrganizer {"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cUser\u003e users \u003d FXCollections.observableArrayList();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        OrganizerStub(Collection\u003cTask\u003e tasks, Collection\u003c? extends Tag\u003e tags, Collection\u003c? extends User\u003e users) {"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            this.users.setAll(users);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"            return tasks;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTask\u003e getCurrentUserTaskList() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return tasks;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public ObservableList\u003cUser\u003e getUserList() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            return users;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":34,"-":140}},{"path":"src/test/java/seedu/organizer/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.EXAM;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.STUDY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.OrganizerBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        modelManager.getFilteredTaskList().remove(0);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Organizer organizer \u003d new OrganizerBuilder().withTask(EXAM).withTask(STUDY).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManager \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(organizer, userPrefs), modelManager);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void deleteTag_tagUsedByMultipleTasks_tagRemoved() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Organizer organizer \u003d new OrganizerBuilder().withTask(EXAM).withTask(STUDY).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManager \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Task examWithoutFriendTag \u003d new TaskBuilder(EXAM).withTags().build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Task studyWithoutFriendTag \u003d new TaskBuilder(STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(examWithoutFriendTag)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withTask(studyWithoutFriendTag).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(expectedOrganizer, userPrefs), modelManager);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Organizer organizer \u003d new OrganizerBuilder().withTask(GROCERY).withTask(SPRINGCLEAN).build();"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        Organizer differentOrganizer \u003d new Organizer();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManager \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        // different organizer -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentOrganizer, userPrefs)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String[] keywords \u003d GROCERY.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            expectedModel.addUser(ADMIN_USER);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (DuplicateUserException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(expectedModel));"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        differentUserPrefs.setOrganizerName(\"differentName\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        ModelManager differentModel \u003d new ModelManager(organizer, differentUserPrefs);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            differentModel.addUser(ADMIN_USER);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            differentModel.loginUser(ADMIN_USER);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (DuplicateUserException e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(differentModel));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":120}},{"path":"src/test/java/seedu/organizer/model/UniqueUserListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UniqueUserList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"public class UniqueUserListTest {"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"        UniqueUserList uniqueUserList \u003d new UniqueUserList();"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        uniqueUserList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":12,"-":8}},{"path":"src/test/java/seedu/organizer/logic/commands/AddSubtaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddSubtaskCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Task editedTask \u003d addSubtask(originalTask, subtask);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(AddSubtaskCommand.MESSAGE_SUCCESS, editedTask);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, editedTask);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(addSubtaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_secondunfilteredList_success() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(1);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Task editedTask \u003d addSubtask(originalTask, subtask);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_SECOND_TASK, subtask);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(AddSubtaskCommand.MESSAGE_SUCCESS, editedTask);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, editedTask);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(addSubtaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(outOfBoundsIndex, subtask);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(addSubtaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void execute_duplicateSubtask_failure() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d originalTask.getSubtasks().get(0);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(addSubtaskCommand, model, AddSubtaskCommand.MESSAGE_DUPLICATED);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Task editedTask \u003d addSubtask(originalTask, subtask);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // edit -\u003e first task edited"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        addSubtaskCommand.execute();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        undoRedoStack.push(addSubtaskCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, editedTask);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void equal_unequalObject_false() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Subtask otherSubtask \u003d model.getFilteredTaskList().get(0).getSubtasks().get(0);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexSubtask \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexOtherSubtask \u003d prepareCommand(INDEX_FIRST_TASK, otherSubtask);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        AddSubtaskCommand secondIndexSubtask \u003d prepareCommand(INDEX_SECOND_TASK, subtask);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        AddSubtaskCommand secondIndexOtherSubtask \u003d prepareCommand(INDEX_SECOND_TASK, otherSubtask);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertNotEquals(firstIndexSubtask, firstIndexOtherSubtask);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertNotEquals(firstIndexSubtask, secondIndexOtherSubtask);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertNotEquals(firstIndexSubtask, secondIndexSubtask);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void equal_equalObject_true() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexSubtask \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexOtherSubtask \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(firstIndexSubtask, firstIndexOtherSubtask);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(firstIndexSubtask, firstIndexSubtask);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Retrun an (@code Task) with added subtask"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private Task addSubtask(Task task, Subtask subtask) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003cSubtask\u003e(task.getSubtasks());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        subtasks.add(subtask);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return new Task("},{"lineNumber":166,"author":{"gitID":"-"},"content":"                task.getName(),"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                task.getPriority(),"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                task.getDeadline(),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                task.getDateAdded(),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                task.getDateCompleted(),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                task.getDescription(),"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                task.getStatus(),"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                task.getTags(),"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                subtasks,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                task.getUser()"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Returns an {@code AddSubtaskCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private AddSubtaskCommand prepareCommand(Index index, Subtask subtask) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d new AddSubtaskCommand(index, subtask);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        addSubtaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return addSubtaskCommand;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":182}},{"path":"src/test/java/seedu/organizer/model/user/UserWithQuestionAnswerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"public class UserWithQuestionAnswerTest {"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new UserWithQuestionAnswer(null, null));"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new UserWithQuestionAnswer(null, null, null, null));"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidUsername_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        String invalidUsername \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        String validPassword \u003d \"validPass\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"                new UserWithQuestionAnswer(invalidUsername, validPassword));"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidPassword_throwsIllegalArgumentException() {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        String validUsername \u003d \"validUsername\";"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        String invalidPassword \u003d \"\";"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"                new UserWithQuestionAnswer(validUsername, invalidPassword));"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        String validUsername \u003d \"validUsername\";"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        String validPassword \u003d \"validPassword\";"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        String invalidQuestion \u003d \"\";"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        String validAnswer \u003d \"valid answer\";"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"                new UserWithQuestionAnswer(validUsername, validPassword, invalidQuestion, validAnswer));"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        String validUsername \u003d \"validUsername\";"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        String validPassword \u003d \"validPassword\";"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        String validQuestion \u003d \"valid question\";"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        String invalidAnswer \u003d \"\";"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"                new UserWithQuestionAnswer(validUsername, validPassword, validQuestion, invalidAnswer));"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    public void isValidUsername() {"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"                UserWithQuestionAnswer.isValidUsername(null));"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    public void isValidPassword() {"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e UserWithQuestionAnswer.isValidPassword(null));"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"    public void isValidQuestion() {"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e UserWithQuestionAnswer.isValidQuestion(null));"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"    public void isValidAnswer() {"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e UserWithQuestionAnswer.isValidAnswer(null));"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":68,"-":6}},{"path":"src/test/java/seedu/organizer/model/task/TaskCreatedContainsDateAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"/**\\"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":" * Tests whether a DateAdded is automatically created upon Task creation"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"public class TaskCreatedContainsDateAdded {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    public void createTaskContainsDateAdded() {"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new Task(new Name(VALID_NAME_EXAM), new Priority(VALID_PRIORITY_EXAM),"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"                new Deadline(VALID_DEADLINE_EXAM), new Description(VALID_DESCRIPTION_EXAM),"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"                new HashSet\u003cTag\u003e());"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        assertNotNull(task.getDateAdded());"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":15,"-":15}},{"path":"src/test/java/seedu/organizer/logic/commands/ToggleSubtaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.ADMIN_USER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * ToggleSubtaskCommand."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class ToggleSubtaskCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            model.loginUser(ADMIN_USER);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (CurrentlyLoggedInException e) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask, INDEX_FIRST_TASK);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Subtask toggledSubtask \u003d toggledTask.getSubtasks().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand toggleSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(ToggleSubtaskCommand.MESSAGE_EDIT_SUBTASK_SUCCESS, toggledSubtask);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(toggleSubtaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_secondunfilteredList_success() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask, INDEX_SECOND_TASK);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Subtask toggledSubtask \u003d toggledTask.getSubtasks().get(INDEX_SECOND_TASK.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand toggleSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_SECOND_TASK);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(ToggleSubtaskCommand.MESSAGE_EDIT_SUBTASK_SUCCESS, toggledSubtask);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(toggleSubtaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void execute_invalidTaskIndexUnfilteredList_failure() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand toggleSubtaskCommand \u003d prepareCommand(outOfBoundsIndex, INDEX_FIRST_TASK);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(toggleSubtaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void execute_invalidSubtaskIndexUnfilteredList_failure() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand toggleSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, outOfBoundsIndex);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(toggleSubtaskCommand, model, Messages.MESSAGE_INVALID_SUBTASK_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void execute_invalidSubtaskAndTaskIndexUnfilteredList_failure() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand toggleSubtaskCommand \u003d prepareCommand(outOfBoundsIndex, outOfBoundsIndex);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(toggleSubtaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask, INDEX_FIRST_TASK);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand toggleSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        expectedModel.loginUser(ADMIN_USER);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // edit -\u003e first task edited"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        toggleSubtaskCommand.execute();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        undoRedoStack.push(toggleSubtaskCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void equalityTest() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand testSubject1 \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand testSubject2 \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_FIRST_TASK);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand testSubject3 \u003d prepareCommand(INDEX_FIRST_TASK, INDEX_SECOND_TASK);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand testSubject4 \u003d prepareCommand(INDEX_SECOND_TASK, INDEX_SECOND_TASK);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(testSubject1, testSubject1);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(testSubject1, testSubject2);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertNotEquals(testSubject1, testSubject3);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertNotEquals(testSubject1, testSubject4);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertNotEquals(testSubject4, testSubject3);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Retrun an (@code Task) with status inversed"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private Task toggleTask(Task task, Index index) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e(task.getSubtasks());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Subtask oldSubtask \u003d subtasks.get(index.getZeroBased());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Subtask newSubtask \u003d new Subtask(oldSubtask.getName(), oldSubtask.getStatus().getInverse());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        subtasks.set(index.getZeroBased(), newSubtask);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return new Task("},{"lineNumber":155,"author":{"gitID":"-"},"content":"                task.getName(),"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                task.getPriority(),"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                task.getDeadline(),"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                task.getDateAdded(),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                task.getDateCompleted(),"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                task.getDescription(),"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                task.getStatus(),"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                task.getTags(),"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                subtasks,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                task.getUser()"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Returns an {@code ToggleSubtaskCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private ToggleSubtaskCommand prepareCommand(Index taskIndex, Index subtaskIndex) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        ToggleSubtaskCommand toggleSubtaskCommand \u003d new ToggleSubtaskCommand(taskIndex, subtaskIndex);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        toggleSubtaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return toggleSubtaskCommand;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":171}},{"path":"src/test/java/seedu/organizer/model/task/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Study\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Study\", \"Exam\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Exam\", \"Grocery\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Grocery\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"sTuDy\", \"eXAM\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Grocery\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match priority, deadline and description, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"2\", \"2018-11-11\", \"Chapter\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":74}},{"path":"src/test/java/seedu/organizer/model/task/DeadlineTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"public class DeadlineTest {"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        String invalidDeadline \u003d \"2018\";"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    public void isValidDeadline() {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        // null deadline"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        // blank deadline"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":""},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        // missing parts"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2018-02\")); // missing date"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-02\")); // missing year"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019\")); // missing month and date"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"12\")); // missing year and date"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        // invalid parts"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"17-12-12\")); // invalid year"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019-20-09\")); // invalid month"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2016-02-40\")); // invalid date"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-2-09\")); // single numbered months should be declared \u00270x\u0027"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-02-9\")); // single numbered dates should be declared \u00270x\u0027"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-30-2017\")); // wrong format of MM-DD-YYYY"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"30-12-2017\")); // wrong format of DD-MM-YYYY"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\" 2017-08-09\")); // leading space"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-08-09 \")); // trailing space"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017/09/09\")); // wrong symbol"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":""},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        // valid deadline"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"2018-03-11\"));"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"2017-02-31\"));  // dates that have already passed"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"3000-03-23\"));   // dates in the far future"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":""},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"    public void hashCode_equals() {"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        Deadline testDeadline \u003d new Deadline(\"2018-09-09\");"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        LocalDate testDeadlineValue \u003d LocalDate.parse(\"2018-09-09\");"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"        assertEquals(testDeadline.hashCode(), testDeadlineValue.hashCode());"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":54,"-":12}},{"path":"src/test/java/seedu/organizer/model/task/DateAddedTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"public class DateAddedTest {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new DateAdded(null));"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidDateAdded_throwsIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        String invalidDateAdded \u003d \"2018\";"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDateAdded));"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    public void isValidDateAdded() {"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        // null deadline"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        // blank dateadded"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        // missing parts"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2018-02\")); // missing date"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-02\")); // missing year"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019\")); // missing month and date"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"12\")); // missing year and date"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        // invalid parts"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"17-12-12\")); // invalid year"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019-20-09\")); // invalid month"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2016-02-40\")); // invalid date"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-2-09\")); // single numbered months should be declared \u00270x\u0027"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-02-9\")); // single numbered dates should be declared \u00270x\u0027"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-30-2017\")); // wrong format of MM-DD-YYYY"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"30-12-2017\")); // wrong format of DD-MM-YYYY"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\" 2017-08-09\")); // leading space"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-08-09 \")); // trailing space"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017/09/09\")); // wrong symbol"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        // valid dateadded"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"2018-03-11\"));"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"2017-02-31\"));  // dates that have already passed"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"3000-03-23\"));   // dates in the far future"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    public void hashCode_equals() {"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        DateAdded testDateAdded \u003d new DateAdded(\"2018-09-09\");"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        LocalDate testDateAddedValue \u003d LocalDate.parse(\"2018-09-09\");"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        assertEquals(testDateAdded.hashCode(), testDateAddedValue.hashCode());"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":54,"-":12}},{"path":"src/test/java/seedu/organizer/model/task/DescriptionContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class DescriptionContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"CS2101\");"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"CS2101\", \"CS2103\");"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":""},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate firstPredicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate secondPredicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public void test_descriptionContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"            Collections.singletonList(\"CS2103T\"));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Study for CS2103T Exam\").build()));"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103\"));"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103\").build()));"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":""},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"ES2660\"));"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":""},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        // Mixed-case keywords"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"cs2101\", \"eS2660\"));"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":""},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"            Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101\").build()));"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":""},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"CS2103\"));"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103T\").build()));"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":""},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        // Keywords match name, priority, deadline, but does not match description"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Study\", \"2\", \"2018-11-11\"));"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"            .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":68,"-":13}},{"path":"src/test/java/seedu/organizer/model/task/DescriptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"public class DescriptionTest {"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    public void isValidDescription() {"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"        // null organizer"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        // blank descriptions"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // valid descriptions"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"Practice MA1101R past year questions\"));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"!\")); // one character"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"Add new sort feature / Update README.md / Refactor Address to \""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"            + \"Email\")); // long description"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    public void hashCode_equals() {"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        Description testDescription \u003d new Description(\"CS2103T Testing\");"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        String testDescriptionValue \u003d \"CS2103T Testing\";"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertEquals(testDescription.hashCode(), testDescriptionValue.hashCode());"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":31,"-":9}},{"path":"src/test/java/seedu/organizer/model/task/DeadlineContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class DeadlineContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":""},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate firstPredicate \u003d new DeadlineContainsKeywordsPredicate("},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate secondPredicate \u003d new DeadlineContainsKeywordsPredicate("},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate firstPredicateCopy \u003d new DeadlineContainsKeywordsPredicate("},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public void test_deadlineContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate predicate \u003d new DeadlineContainsKeywordsPredicate(Collections.singletonList"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"                (\"2018-03-17\"));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":""},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":""},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    public void test_deadlineDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate predicate \u003d new DeadlineContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":""},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-03-17\"));"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":""},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"        // Keywords match name, priority and description, but does not match deadline"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2\", \"Study\", \"Chapter\"));"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"            .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":66,"-":13}},{"path":"src/test/java/seedu/organizer/model/task/TaskByUserPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"public class TaskByUserPredicateTest {"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public void equals() {"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"        User firstPredicate \u003d new User(\"bob\", \"bob\");"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"        User secondPredicate \u003d new User(\"mary\", \"mary\");"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        TaskByUserPredicate firstUserPredicate \u003d new TaskByUserPredicate(firstPredicate);"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"        TaskByUserPredicate secondUserPredicate \u003d new TaskByUserPredicate(secondPredicate);"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        assertTrue(firstUserPredicate.equals(firstUserPredicate));"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        TaskByUserPredicate firstUserPredicateCopy \u003d new TaskByUserPredicate(firstPredicate);"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        assertTrue(firstUserPredicate.equals(firstUserPredicateCopy));"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        assertFalse(firstUserPredicate.equals(1));"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        assertFalse(firstUserPredicate.equals(null));"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        assertFalse(firstUserPredicate.equals(secondUserPredicate));"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    public void test_taskContainsUser_returnsTrue() {"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        TaskByUserPredicate predicate \u003d new TaskByUserPredicate(new User(\"admin\", \"admin\"));"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        assertTrue(predicate.test(new TaskBuilder().build()));"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public void test_taskDoesNotContainUser_returnsFalse() {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        TaskByUserPredicate predicate \u003d new TaskByUserPredicate(new User(\"doesntexist\", \"doesntexist\"));"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        assertFalse(predicate.test(new TaskBuilder().build()));"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":41,"-":10}},{"path":"src/test/java/seedu/organizer/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateCompleted;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.util.SampleDataUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":" * A utility class to help with building Task objects."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"public class TaskBuilder {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final User DEFAULT_USER \u003d new User(\"admin\", \"admin\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Study\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"2\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DEADLINE \u003d \"2018-05-18\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DATEADDED \u003d LocalDate.now().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DATECOMPLETED \u003d \"not completed\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Study for CS2103T Exam\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Boolean DEFAULT_STATUS \u003d false;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_SUBTASKS \u003d \"Buy some answer\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Priority priority;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Deadline deadline;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private DateAdded dateAdded;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private DateCompleted dateCompleted;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Description description;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Status status;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private List\u003cSubtask\u003e subtasks;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private User user;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deadline \u003d new Deadline(DEFAULT_DEADLINE);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        dateAdded \u003d new DateAdded(DEFAULT_DATEADDED);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        dateCompleted \u003d new DateCompleted(DEFAULT_DATECOMPLETED);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        subtasks \u003d SampleDataUtil.getSubtaskList(DEFAULT_SUBTASKS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        user \u003d DEFAULT_USER;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        name \u003d taskToCopy.getName();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        priority \u003d taskToCopy.getPriority();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        deadline \u003d taskToCopy.getDeadline();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        dateAdded \u003d taskToCopy.getDateAdded();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        dateCompleted \u003d taskToCopy.getDateCompleted();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        description \u003d taskToCopy.getDescription();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        status \u003d taskToCopy.getStatus();"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        subtasks \u003d new ArrayList\u003c\u003e(taskToCopy.getSubtasks());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        user \u003d taskToCopy.getUser();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"     * Sets the {@code Name} of the {@code Task} that we are building."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder withName(String name) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder withTags(String... tags) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses the {@code subtask} into a {@code List\u003cSubtask\u003e} and set it to the {@code Task} that we are building."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public TaskBuilder withSubtask(String... subtask) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        this.subtasks \u003d SampleDataUtil.getSubtaskList(subtask);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Sets the {@code Description} of the {@code Task} that we are building."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public TaskBuilder withDescription(String description) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Sets the {@code Status} of the {@code Task} that we are building."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public TaskBuilder withStatus(Boolean status) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Sets the {@code Priority} of the {@c"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * ode Task} that we are building."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public TaskBuilder withPriority(String priority) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        this.priority \u003d new Priority(priority);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Sets the {@code Deadline} of the {@code Task} that we are building."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public TaskBuilder withDeadline(String deadline) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        this.deadline \u003d new Deadline(deadline);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Sets the {@code DateAdded} of the {@code Task} that we are building."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public TaskBuilder withDateAdded(String dateAdded) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d new DateAdded(dateAdded);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Sets the {@code DateCompleted} of the {@code Task} that we are building."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public TaskBuilder withDateCompleted(String dateCompleted) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        this.dateCompleted \u003d new DateCompleted(dateCompleted);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Add {@code Subtask} to the {@code Task} that we are building."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public TaskBuilder addSubtask(String name) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        this.subtasks.add(new Subtask(new Name(name)));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Returns a task"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"    public Task build() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return new Task(name, priority, deadline, dateAdded, dateCompleted,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                description, status, tags, subtasks, user);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":12,"-":156}},{"path":"src/test/java/seedu/organizer/testutil/EditTaskDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditTaskDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class EditTaskDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditTaskDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditTaskDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder(Task task) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        descriptor.setName(task.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setPriority(task.getPriority());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setDeadline(task.getDeadline());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setDescription(task.getDescription());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setStatus(task.getStatus());"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        descriptor.setTags(task.getTags());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder withName(String name) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder withPriority(String priority) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        descriptor.setPriority(new Priority(priority));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Sets the {@code Deadline} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder withDeadline(String deadline) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        descriptor.setDeadline(new Deadline(deadline));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder withDescription(String description) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        descriptor.setDescription(new Description(description));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder withTags(String... tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public EditTaskDescriptor build() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":81}},{"path":"src/test/java/seedu/organizer/testutil/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" * A utility class for Task."},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"public class TaskUtil {"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"     * Returns an add command string for adding the {@code task}."},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static String getAddCommand(Task task) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     * Returns an add command string for adding the {@code task} using alias."},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public static String getAddCommandAlias(Task task) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getTaskDetails(task);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static String getTaskDetails(Task task) {"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PRIORITY + task.getPriority().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_DEADLINE + task.getDeadline().toString() + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        task.getTags().stream().forEach("},{"lineNumber":41,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static String getSubtaskDetails(Task task) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return PREFIX_NAME + task.getName().fullName;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":27,"-":22}},{"path":"src/test/java/seedu/organizer/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * Returns the middle index of the task in the {@code model}\u0027s task list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getOrganizer().getTaskList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * Returns the last index of the task in the {@code model}\u0027s task list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getOrganizer().getTaskList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"     * Returns the task in the {@code model}\u0027s task list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    public static Task getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getOrganizer().getTaskList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":50}},{"path":"src/test/java/seedu/organizer/testutil/OrganizerBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * {@code Organizer ab \u003d new OrganizerBuilder().withTask(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"public class OrganizerBuilder {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    private Organizer organizer;"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public OrganizerBuilder() {"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        organizer \u003d new Organizer();"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public OrganizerBuilder(Organizer organizer) {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        this.organizer \u003d organizer;"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"     * Adds a new {@code Task} to the {@code Organizer} that we are building."},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public OrganizerBuilder withTask(Task task) {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            organizer.addTask(task);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalArgumentException(\"task is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code Organizer} that we are building."},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public OrganizerBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"            organizer.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    public Organizer build() {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        return organizer;"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":34,"-":19}},{"path":"src/test/java/seedu/organizer/testutil/TypicalTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"public class TypicalTasks {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final User ADMIN_USER \u003d new User(\"admin\", \"admin\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_DO \u003d \"Do\"; // A keyword that matches DO"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_REVISION \u003d \"Revision\"; // A keyword that matches REVISION"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_SPRING \u003d \"Spring\"; // A keyword that matches SPRING"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static String currentDate \u003d LocalDate.now().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Task GROCERY \u003d new TaskBuilder().withName(\"Grocery\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withDescription(\"Go to NTUC\").withDeadline(\"2019-03-11\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withDateAdded(currentDate).withPriority(\"0\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Task SPRINGCLEAN \u003d new TaskBuilder().withName(\"Spring cleaning\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withDescription(\"Clean the entire house except the study room\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-09-08\").withDateAdded(currentDate).withPriority(\"1\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withStatus(true).build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Task PREPAREBREAKFAST \u003d new TaskBuilder().withName(\"Prepare breakfast\").withPriority(\"2\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-11-12\").withDateAdded(currentDate)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withDescription(\"French Toast with coffee\").build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Task HOMEWORK \u003d new TaskBuilder().withName(\"Do homework\").withPriority(\"3\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-03-21\").withDateAdded(currentDate)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withDescription(\"CS2103T, CS2101 and MA1101R\").withStatus(true).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Task PROJECT \u003d new TaskBuilder().withName(\"Do project\").withPriority(\"4\")"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-09-14\").withDateAdded(currentDate)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withDescription(\"Finish writing script for OP1\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Task REVISION \u003d new TaskBuilder().withName(\"Revision\").withPriority(\"5\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-04-05\").withDateAdded(currentDate)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .withDescription(\"Revise for CS2106 midterms\").withStatus(true).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final Task MOCKEXAM \u003d new TaskBuilder().withName(\"Mock exam\").withPriority(\"6\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-05-23\").withDateAdded(currentDate)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withDescription(\"Mock exam for CS1101S - Revise!\").addSubtask(\"Study\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final Task MAKEPRESENT \u003d new TaskBuilder().withName(\"Make present\").withPriority(\"7\")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-08-06\").withDateAdded(currentDate)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withDescription(\"Make photo frame for Denise\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final Task INTERVIEWPREP \u003d new TaskBuilder().withName(\"Interview prep\").withPriority(\"8\")"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-04-05\").withDateAdded(currentDate)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withDescription(\"Prepare technical questions\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final Task EXAM \u003d new TaskBuilder().withName(VALID_NAME_EXAM).withPriority(VALID_PRIORITY_EXAM)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withDeadline(VALID_DEADLINE_EXAM).withDateAdded(currentDate)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            .withDescription(VALID_DESCRIPTION_EXAM)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final Task STUDY \u003d new TaskBuilder().withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            .withDeadline(VALID_DEADLINE_STUDY).withDateAdded(currentDate)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            .withDescription(VALID_DESCRIPTION_STUDY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"    private TypicalTasks() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    } // prevents instantiation"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns an {@code Organizer} with all the typical tasks."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static Organizer getTypicalOrganizer() {"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        Organizer ab \u003d new Organizer();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                ab.addTask(task);"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"            } catch (DuplicateTaskException e) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            ab.addUser(ADMIN_USER);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (DuplicateUserException e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GROCERY, SPRINGCLEAN,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                PREPAREBREAKFAST, HOMEWORK, PROJECT, REVISION, MOCKEXAM));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":102}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * A handler for the {@code CalendarPanel} of the UI."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":""},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"    public static final String CALENDAR_ID \u003d \"#calendarPane\";"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    private final StackPane calendarPane;"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    public CalendarPanelHandle(Node calendarPanelNode) {"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"        super(calendarPanelNode);"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        this.calendarPane \u003d getChildNode(CALENDAR_ID);"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":16,"-":5}},{"path":"src/test/java/guitests/guihandles/EntryCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * Provides a handle to a {@code EntryCard} in the calendar."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"public class EntryCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"    private static final String ENTRY_CARD_ID \u003d \"#entryCard\";"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    private final Label entryCardLabel;"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public EntryCardHandle(Node cardNode) {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        super(cardNode);"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"        this.entryCardLabel \u003d getChildNode(ENTRY_CARD_ID);"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    public String getEntryCardText() {"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        return entryCardLabel.getText();"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":19,"-":5}},{"path":"src/test/java/guitests/guihandles/MonthViewHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.text.Text;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" * Provides a handle for {@code MonthView}."},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"public class MonthViewHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"    private static final String CALENDAR_TITLE_ID \u003d \"#calendarTitle\";"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    private static final String TASK_CALENDAR_ID \u003d \"#taskCalendar\";"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    private final Text calendarTitleText;"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    private final GridPane taskCalendarGrid;"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    public MonthViewHandle(Node monthViewNode) {"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        super(monthViewNode);"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        this.calendarTitleText \u003d getChildNode(CALENDAR_TITLE_ID);"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        this.taskCalendarGrid \u003d getChildNode(TASK_CALENDAR_ID);"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    public String getCalendarTitleText() {"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"        return calendarTitleText.getText();"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"     * Returns the node of a {@code date}."},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    public Node getPrintedDateNode(int date) {"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        return taskCalendarGrid.lookup(\"#date\" + String.valueOf(date));"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":""},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"     * Returns the node of a {@code ListView} containing {@code EntryCard}."},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    public Node getListViewEntriesNode(int row, int column) {"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        return taskCalendarGrid.lookup(\"#entry\" + String.valueOf(row) + String.valueOf(column));"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":""},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"     * Returns the row index of the {@code node}."},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public int getRowIndex(Node node) {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        return taskCalendarGrid.getRowIndex(node);"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":""},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"     * Returns the column index of the {@code node}."},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    public int getColumnIndex(Node node) {"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        return taskCalendarGrid.getColumnIndex(node);"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":""},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"     * Checks if the grid lines are visible on the {@code taskCalendar}."},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"    public boolean isGridLinesVisible() {"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        return taskCalendarGrid.isGridLinesVisible();"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":57,"-":6}},{"path":"src/main/java/seedu/organizer/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Organizer level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d { \"blue\", \"brown\", \"gray\", \"green\", \"maroon\", \"orange\","},{"lineNumber":27,"author":{"gitID":"-"},"content":"        \"pink\", \"purple\", \"red\", \"yellow\" };"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final int CELL_HEIGHT \u003d 24;"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public final Task task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label status;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label priority;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label description;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label deadline;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Label dateadded;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Label datecompleted;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private ListView\u003cLabel\u003e subtasks;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        this.task \u003d task;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        name.setText(task.getName().fullName);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        status.setText(\"[\" + task.getStatus() + \"]\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        priority.setText(\"Priority : \" + task.getPriority().value);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        description.setText(\"Description : \" + task.getDescription().value);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        deadline.setText(\"Deadline : \" + task.getDeadline().toString());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        dateadded.setText(\"Date Added : \" + task.getDateAdded().toString());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        datecompleted.setText(\"Date Completed: \" + task.getDateCompleted().toString());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        initSubtask(task);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        initTags(task);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code task}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void initTags(Task task) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        task.getTags().forEach(tag -\u003e {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Creates the subtask for {@code task}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void initSubtask(Task task) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        task.getSubtasks().forEach(subtask-\u003e {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            Label subtaskLabel \u003d new Label(subtask.toString());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            subtasks.getItems().add(subtaskLabel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        subtasks.setPrefHeight(10 + CELL_HEIGHT * task.getSubtasks().size());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":110}},{"path":"src/main/java/seedu/organizer/ui/calendar/EntryCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.UiPart;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":" * An UI component that displays the name of a {@code Task}."},{"lineNumber":12,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"public class EntryCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    private static final String FXML \u003d \"EntryCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private Task task;"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    private Label entryCard;"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":""},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public EntryCard(Task task) {"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        super(FXML);"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"        this.task \u003d task;"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"        entryCard.setText(task.getName().fullName);"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"    public Task getTask() {"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        return task;"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"            return true;"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":""},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        if (!(other instanceof EntryCard)) {"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        // state check"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        EntryCard card \u003d (EntryCard) other;"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        return task.equals(card.task);"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":41,"-":8}},{"path":"src/main/java/seedu/organizer/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.YearMonth;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.calendar.MonthView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":" * The Calendar Panel of the App."},{"lineNumber":15,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    private MonthView monthView;"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    private YearMonth currentYearMonth;"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    private StackPane calendarPane;"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public CalendarPanel(ObservableList\u003cTask\u003e taskList, ObservableList\u003cString\u003e executedCommandsList) {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        monthView \u003d new MonthView(taskList, executedCommandsList);"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        currentYearMonth \u003d currentYearMonth.now();"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        createMainView();"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"     * Creates the main view of the calendar, which by default, is the current month view.*"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"    private void createMainView() {"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        monthView.getMonthView(currentYearMonth);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        calendarPane.getChildren().add(monthView.getRoot());"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":""},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    public MonthView getMonthView() {"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"        return monthView;"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":35,"-":11}},{"path":"src/test/java/guitests/guihandles/TaskListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.TaskCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTaskCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#taskListView\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Optional\u003cTaskCard\u003e lastRememberedSelectedTaskCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public TaskListPanelHandle(ListView\u003cTaskCard\u003e taskListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(taskListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns a handle to the selected {@code TaskCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public TaskCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e taskList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (taskList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Task list size expected 1.\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return new TaskCardHandle(taskList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"     * Navigates the listview to display and select the task."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    public void navigateToCard(Task task) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        Optional\u003cTaskCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.task.equals(task)).findFirst();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Task does not exist.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"     * Returns the task card handle of a task associated with the {@code index} in the list."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public TaskCardHandle getTaskCardHandle(int index) {"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        return getTaskCardHandle(getRootNode().getItems().get(index).task);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"     * Returns the {@code TaskCardHandle} of the specified {@code task} in the list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"    public TaskCardHandle getTaskCardHandle(Task task) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Optional\u003cTaskCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"                .filter(card -\u003e card.task.equals(task))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .map(card -\u003e new TaskCardHandle(card.getRoot()))"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Task does not exist.\"));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Selects the {@code TaskCard} at {@code index} in the list."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Remembers the selected {@code TaskCard} in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void rememberSelectedTaskCard() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.empty();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedTaskCard()} call."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean isSelectedTaskCardChanged() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedTaskCard.isPresent();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedTaskCard.isPresent()"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":126}},{"path":"src/test/java/seedu/organizer/model/task/MultipleFieldsContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class MultipleFieldsContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate firstPredicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate secondPredicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"            secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate firstPredicateCopy \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":""},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":""},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":""},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Collections"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"                .singletonList(\"Study\"));"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":""},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"Study\", \"Exam\"));"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":""},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"Exam\", \"Grocery\"));"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Grocery\").build()));"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":""},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"sTuDy\", \"eXAM\"));"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":""},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"    public void test_descriptionContainsKeywords_returnsTrue() {"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"                Collections.singletonList(\"CS2103T\"));"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Study for CS2103T Exam\").build()));"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":""},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103\"));"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103\").build()));"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":""},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"ES2660\"));"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":""},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"        // Mixed-case keywords"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"cs2101\", \"eS2660\"));"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":""},{"lineNumber":84,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"    public void test_deadlineContainsKeywords_returnsTrue() {"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":88,"author":{"gitID":"guekling"},"content":"            Collections.singletonList(\"2018-03-17\"));"},{"lineNumber":89,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":90,"author":{"gitID":"guekling"},"content":""},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":92,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":93,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":94,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":95,"author":{"gitID":"guekling"},"content":""},{"lineNumber":96,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":97,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":98,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":99,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":100,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"guekling"},"content":""},{"lineNumber":102,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"guekling"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":104,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":105,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Collections"},{"lineNumber":106,"author":{"gitID":"guekling"},"content":"                .emptyList());"},{"lineNumber":107,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").build()));"},{"lineNumber":108,"author":{"gitID":"guekling"},"content":""},{"lineNumber":109,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":110,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"Grocery\"));"},{"lineNumber":111,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":112,"author":{"gitID":"guekling"},"content":""},{"lineNumber":113,"author":{"gitID":"guekling"},"content":"        // Keywords match priority, but does not match name, description and deadline"},{"lineNumber":114,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2\"));"},{"lineNumber":115,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":116,"author":{"gitID":"guekling"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":117,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"guekling"},"content":""},{"lineNumber":119,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"guekling"},"content":"    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":121,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":122,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":123,"author":{"gitID":"guekling"},"content":"            Collections.emptyList());"},{"lineNumber":124,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101\").build()));"},{"lineNumber":125,"author":{"gitID":"guekling"},"content":""},{"lineNumber":126,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":127,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2103\"));"},{"lineNumber":128,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103T\").build()));"},{"lineNumber":129,"author":{"gitID":"guekling"},"content":""},{"lineNumber":130,"author":{"gitID":"guekling"},"content":"        // Keywords match priority, but does not match name, description and deadline"},{"lineNumber":131,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2\"));"},{"lineNumber":132,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":133,"author":{"gitID":"guekling"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":134,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"guekling"},"content":""},{"lineNumber":136,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"guekling"},"content":"    public void test_deadlineDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":138,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":139,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":140,"author":{"gitID":"guekling"},"content":"            Collections.emptyList());"},{"lineNumber":141,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":142,"author":{"gitID":"guekling"},"content":""},{"lineNumber":143,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":144,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2018-03-17\"));"},{"lineNumber":145,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":146,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":147,"author":{"gitID":"guekling"},"content":""},{"lineNumber":148,"author":{"gitID":"guekling"},"content":"        // Keywords match priority, but does not match name, description and deadline"},{"lineNumber":149,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2\"));"},{"lineNumber":150,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":151,"author":{"gitID":"guekling"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":152,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"guekling"},"content":""},{"lineNumber":154,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":141,"-":13}},{"path":"src/main/java/seedu/organizer/ui/TaskListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        setConnections(taskList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    private void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"                taskList, (person) -\u003e new TaskCard(person, taskList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        taskListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        raise(new TaskPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            taskListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(task, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":83}},{"path":"src/main/java/seedu/organizer/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":93}},{"path":"src/main/java/seedu/organizer/commons/events/model/OrganizerChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"/** Indicates the Organizer in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"public class OrganizerChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"    public final ReadOnlyOrganizer data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public OrganizerChangedEvent(ReadOnlyOrganizer data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return \"number of tasks \" + data.getCurrentUserTaskList().size()"},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \", number of tags \""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + data.getTagList().size();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":17}},{"path":"src/main/java/seedu/organizer/ui/calendar/MonthView.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui.calendar;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.YearMonth;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ListChangeListener;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.geometry.HPos;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.geometry.VPos;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.scene.text.Text;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CurrentMonthCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.NextMonthCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.PreviousMonthCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.UiPart;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":" * Supports the display of the month view of the calendar."},{"lineNumber":35,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"public class MonthView extends UiPart\u003cRegion\u003e {"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"    private static final String FXML \u003d \"MonthView.fxml\";"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":""},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"    private static final int MAX_NUM_OF_DAYS \u003d 35;"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    private static final int NO_REMAINDER \u003d 0;"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    private static final int SUNDAY \u003d 7;"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    private static final int MAX_COLUMN \u003d 6;"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    private static final int MAX_ROW \u003d 4;"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":""},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    private int dateCount;"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"    private YearMonth currentYearMonth;"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"    private YearMonth viewYearMonth;"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"    private String[] datesToBePrinted;"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    private ObservableList\u003cTask\u003e taskList;"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"    private ObservableList\u003cString\u003e executedCommandsList;"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":""},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"    private Text calendarTitle;"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":""},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    private GridPane taskCalendar;"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":""},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"    public MonthView(ObservableList\u003cTask\u003e taskList, ObservableList\u003cString\u003e executedCommandsList) {"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        super(FXML);"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":""},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        currentYearMonth \u003d YearMonth.now();"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        viewYearMonth \u003d currentYearMonth;"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":""},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"        this.executedCommandsList \u003d executedCommandsList;"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        addListenerToExecutedCommandsList();"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        addListenerToTaskList();"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":""},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":""},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"     * Displays the month view."},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"     * @param yearMonth Year and month in the YearMonth format."},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"    public void getMonthView(YearMonth yearMonth) {"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        viewYearMonth \u003d yearMonth;"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"        int year \u003d yearMonth.getYear();"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":""},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"        setMonthCalendarTitle(year, yearMonth.getMonth().toString());"},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"        setMonthCalendarDatesAndEntries(year, yearMonth.getMonthValue());"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"guekling"},"content":""},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":"     * Sets the title of the calendar according to a specific month and year."},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"guekling"},"content":"     * @param month Full month name."},{"lineNumber":89,"author":{"gitID":"guekling"},"content":"     * @param year Year represented as a 4-digit integer."},{"lineNumber":90,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"    public void setMonthCalendarTitle(int year, String month) {"},{"lineNumber":92,"author":{"gitID":"guekling"},"content":"        calendarTitle.setText(month + \" \" + year);"},{"lineNumber":93,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"guekling"},"content":""},{"lineNumber":95,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"guekling"},"content":"     * Sets the dates and entries of a month-view calendar according to the specific month and year."},{"lineNumber":97,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"guekling"},"content":"     * @param year Year represented as a 4-digit integer."},{"lineNumber":99,"author":{"gitID":"guekling"},"content":"     * @param month Month represented by numbers from 1 to 12."},{"lineNumber":100,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"guekling"},"content":"    private void setMonthCalendarDatesAndEntries(int year, int month) {"},{"lineNumber":102,"author":{"gitID":"guekling"},"content":"        LocalDate startDate \u003d LocalDate.of(year, month, 1);"},{"lineNumber":103,"author":{"gitID":"guekling"},"content":"        int lengthOfMonth \u003d startDate.lengthOfMonth();"},{"lineNumber":104,"author":{"gitID":"guekling"},"content":"        int startDay \u003d getMonthStartDay(startDate);"},{"lineNumber":105,"author":{"gitID":"guekling"},"content":""},{"lineNumber":106,"author":{"gitID":"guekling"},"content":"        setMonthCalendarEntries(year, month, startDay);"},{"lineNumber":107,"author":{"gitID":"guekling"},"content":""},{"lineNumber":108,"author":{"gitID":"guekling"},"content":"        datesToBePrinted \u003d new String[36];"},{"lineNumber":109,"author":{"gitID":"guekling"},"content":"        storeMonthDatesToBePrinted(lengthOfMonth);"},{"lineNumber":110,"author":{"gitID":"guekling"},"content":""},{"lineNumber":111,"author":{"gitID":"guekling"},"content":"        setFiveWeeksMonthCalendar(startDay);"},{"lineNumber":112,"author":{"gitID":"guekling"},"content":""},{"lineNumber":113,"author":{"gitID":"guekling"},"content":"        // If month has more than 5 weeks"},{"lineNumber":114,"author":{"gitID":"guekling"},"content":"        if (dateCount !\u003d lengthOfMonth) {"},{"lineNumber":115,"author":{"gitID":"guekling"},"content":"            setSixWeeksMonthCalendar(lengthOfMonth);"},{"lineNumber":116,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"guekling"},"content":""},{"lineNumber":119,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"guekling"},"content":"     * Sets the entries of a month-view calendar according to the specific month and year."},{"lineNumber":121,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"guekling"},"content":"     * @param year Year represented as a 4-digit integer."},{"lineNumber":123,"author":{"gitID":"guekling"},"content":"     * @param month Month represented by numbers from 1 to 12."},{"lineNumber":124,"author":{"gitID":"guekling"},"content":"     * @param startDay Integer value of the day of week of the start day  of the month. Values ranges from 1 - 7,"},{"lineNumber":125,"author":{"gitID":"guekling"},"content":"     *                 representing the different days of the week."},{"lineNumber":126,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"guekling"},"content":"    private void setMonthCalendarEntries(int year, int month, int startDay) {"},{"lineNumber":128,"author":{"gitID":"guekling"},"content":"        ObservableList\u003cEntryCard\u003e entryCardsList \u003d getEntryCardsList(year, month);"},{"lineNumber":129,"author":{"gitID":"guekling"},"content":"        setMonthEntries(startDay, entryCardsList);"},{"lineNumber":130,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"guekling"},"content":""},{"lineNumber":132,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"guekling"},"content":"     * Clears the calendar of all dates and entries, while retaining the {@code gridLines}."},{"lineNumber":134,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"guekling"},"content":"    private void clearCalendar() {"},{"lineNumber":136,"author":{"gitID":"guekling"},"content":"        Node gridLines \u003d taskCalendar.getChildren().get(0);"},{"lineNumber":137,"author":{"gitID":"guekling"},"content":""},{"lineNumber":138,"author":{"gitID":"guekling"},"content":"        // To update the JavaFX component from a non-JavaFX thread"},{"lineNumber":139,"author":{"gitID":"guekling"},"content":"        Platform.runLater(new Runnable() {"},{"lineNumber":140,"author":{"gitID":"guekling"},"content":"            @Override"},{"lineNumber":141,"author":{"gitID":"guekling"},"content":"            public void run() {"},{"lineNumber":142,"author":{"gitID":"guekling"},"content":"                taskCalendar.getChildren().retainAll(gridLines);"},{"lineNumber":143,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":144,"author":{"gitID":"guekling"},"content":"        });"},{"lineNumber":145,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"guekling"},"content":""},{"lineNumber":147,"author":{"gitID":"guekling"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Interacting with Command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":148,"author":{"gitID":"guekling"},"content":""},{"lineNumber":149,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"guekling"},"content":"     * Shows the view of the current month."},{"lineNumber":151,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"guekling"},"content":"    private void goToCurrentMonth() {"},{"lineNumber":153,"author":{"gitID":"guekling"},"content":"        clearCalendar();"},{"lineNumber":154,"author":{"gitID":"guekling"},"content":"        getMonthView(currentYearMonth);"},{"lineNumber":155,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"guekling"},"content":""},{"lineNumber":157,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"guekling"},"content":"     * Shows the view of the month before the currently viewed month."},{"lineNumber":159,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"guekling"},"content":"    private void goToPreviousMonth() {"},{"lineNumber":161,"author":{"gitID":"guekling"},"content":"        viewYearMonth \u003d viewYearMonth.minusMonths(1);"},{"lineNumber":162,"author":{"gitID":"guekling"},"content":""},{"lineNumber":163,"author":{"gitID":"guekling"},"content":"        clearCalendar();"},{"lineNumber":164,"author":{"gitID":"guekling"},"content":"        getMonthView(viewYearMonth);"},{"lineNumber":165,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"guekling"},"content":""},{"lineNumber":167,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"guekling"},"content":"     * Shows the view of the month after the currently viewed month."},{"lineNumber":169,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"guekling"},"content":"    private void goToNextMonth() {"},{"lineNumber":171,"author":{"gitID":"guekling"},"content":"        viewYearMonth \u003d viewYearMonth.plusMonths(1);"},{"lineNumber":172,"author":{"gitID":"guekling"},"content":""},{"lineNumber":173,"author":{"gitID":"guekling"},"content":"        clearCalendar();"},{"lineNumber":174,"author":{"gitID":"guekling"},"content":"        getMonthView(viewYearMonth);"},{"lineNumber":175,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"guekling"},"content":""},{"lineNumber":177,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"guekling"},"content":"     * Tracks the commands executed by the user in the {@code executedCommandsList}. Calendar view may change depending"},{"lineNumber":179,"author":{"gitID":"guekling"},"content":"     * on the commands executed by the user."},{"lineNumber":180,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"guekling"},"content":"    private void addListenerToExecutedCommandsList() {"},{"lineNumber":182,"author":{"gitID":"guekling"},"content":"        executedCommandsList.addListener(new ListChangeListener\u003cString\u003e() {"},{"lineNumber":183,"author":{"gitID":"guekling"},"content":"            @Override"},{"lineNumber":184,"author":{"gitID":"guekling"},"content":"            public void onChanged(Change change) {"},{"lineNumber":185,"author":{"gitID":"guekling"},"content":""},{"lineNumber":186,"author":{"gitID":"guekling"},"content":"                while (change.next()) {"},{"lineNumber":187,"author":{"gitID":"guekling"},"content":"                    int size \u003d executedCommandsList.size();"},{"lineNumber":188,"author":{"gitID":"guekling"},"content":"                    String executedCommand \u003d executedCommandsList.get(size - 1);"},{"lineNumber":189,"author":{"gitID":"guekling"},"content":""},{"lineNumber":190,"author":{"gitID":"guekling"},"content":"                    if ((executedCommand.equals(CurrentMonthCommand.COMMAND_WORD)) || ("},{"lineNumber":191,"author":{"gitID":"guekling"},"content":"                            executedCommand.equals(CurrentMonthCommand.COMMAND_ALIAS))) {"},{"lineNumber":192,"author":{"gitID":"guekling"},"content":"                        goToCurrentMonth();"},{"lineNumber":193,"author":{"gitID":"guekling"},"content":"                    }"},{"lineNumber":194,"author":{"gitID":"guekling"},"content":""},{"lineNumber":195,"author":{"gitID":"guekling"},"content":"                    if ((executedCommand.equals(PreviousMonthCommand.COMMAND_WORD)) || ("},{"lineNumber":196,"author":{"gitID":"guekling"},"content":"                        executedCommand.equals(PreviousMonthCommand.COMMAND_ALIAS))) {"},{"lineNumber":197,"author":{"gitID":"guekling"},"content":"                        goToPreviousMonth();"},{"lineNumber":198,"author":{"gitID":"guekling"},"content":"                    }"},{"lineNumber":199,"author":{"gitID":"guekling"},"content":""},{"lineNumber":200,"author":{"gitID":"guekling"},"content":"                    if ((executedCommand.equals(NextMonthCommand.COMMAND_WORD)) || ("},{"lineNumber":201,"author":{"gitID":"guekling"},"content":"                        executedCommand.equals(NextMonthCommand.COMMAND_ALIAS))) {"},{"lineNumber":202,"author":{"gitID":"guekling"},"content":"                        goToNextMonth();"},{"lineNumber":203,"author":{"gitID":"guekling"},"content":"                    }"},{"lineNumber":204,"author":{"gitID":"guekling"},"content":"                }"},{"lineNumber":205,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"guekling"},"content":"        });"},{"lineNumber":207,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"guekling"},"content":""},{"lineNumber":209,"author":{"gitID":"guekling"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Populating the Month Calendar Dates \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":210,"author":{"gitID":"guekling"},"content":""},{"lineNumber":211,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"guekling"},"content":"     * Sets the dates of a five-weeks month-view calendar into the {@code taskCalendar}."},{"lineNumber":213,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"guekling"},"content":"     * @param startDay Integer value of the day of week of the start day  of the month. Values ranges from 1 - 7,"},{"lineNumber":215,"author":{"gitID":"guekling"},"content":"     *                 representing the different days of the week."},{"lineNumber":216,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"guekling"},"content":"    private void setFiveWeeksMonthCalendar(int startDay) {"},{"lineNumber":218,"author":{"gitID":"guekling"},"content":"        dateCount \u003d 1;"},{"lineNumber":219,"author":{"gitID":"guekling"},"content":"        for (int row \u003d 0; row \u003c\u003d MAX_ROW; row++) {"},{"lineNumber":220,"author":{"gitID":"guekling"},"content":"            if (row \u003d\u003d 0) {"},{"lineNumber":221,"author":{"gitID":"guekling"},"content":"                for (int column \u003d startDay; column \u003c\u003d MAX_COLUMN; column++) {"},{"lineNumber":222,"author":{"gitID":"guekling"},"content":"                    Text dateToPrint \u003d new Text(datesToBePrinted[dateCount]);"},{"lineNumber":223,"author":{"gitID":"guekling"},"content":"                    addMonthDate(dateToPrint, column, row);"},{"lineNumber":224,"author":{"gitID":"guekling"},"content":"                    dateCount++;"},{"lineNumber":225,"author":{"gitID":"guekling"},"content":"                }"},{"lineNumber":226,"author":{"gitID":"guekling"},"content":"            } else {"},{"lineNumber":227,"author":{"gitID":"guekling"},"content":"                for (int column \u003d 0; column \u003c\u003d MAX_COLUMN; column++) {"},{"lineNumber":228,"author":{"gitID":"guekling"},"content":"                    Text dateToPrint \u003d new Text(datesToBePrinted[dateCount]);"},{"lineNumber":229,"author":{"gitID":"guekling"},"content":"                    addMonthDate(dateToPrint, column, row);"},{"lineNumber":230,"author":{"gitID":"guekling"},"content":"                    dateCount++;"},{"lineNumber":231,"author":{"gitID":"guekling"},"content":"                }"},{"lineNumber":232,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"guekling"},"content":""},{"lineNumber":236,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"guekling"},"content":"     * Sets the dates of the sixth week in a six-weeks month-view calendar into the {@code taskCalendar}."},{"lineNumber":238,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":239,"author":{"gitID":"guekling"},"content":"     * @param lengthOfMonth Integer value of the number of days in a month."},{"lineNumber":240,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"guekling"},"content":"    private void setSixWeeksMonthCalendar(int lengthOfMonth) {"},{"lineNumber":242,"author":{"gitID":"guekling"},"content":"        int remainingDays \u003d lengthOfMonth - dateCount;"},{"lineNumber":243,"author":{"gitID":"guekling"},"content":""},{"lineNumber":244,"author":{"gitID":"guekling"},"content":"        for (int column \u003d 0; column \u003c\u003d remainingDays; column++) {"},{"lineNumber":245,"author":{"gitID":"guekling"},"content":"            Text dateToPrint \u003d new Text(datesToBePrinted[dateCount]);"},{"lineNumber":246,"author":{"gitID":"guekling"},"content":"            addMonthDate(dateToPrint, column, 0);"},{"lineNumber":247,"author":{"gitID":"guekling"},"content":"            dateCount++;"},{"lineNumber":248,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"guekling"},"content":""},{"lineNumber":251,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"guekling"},"content":"     * Gets the day of week of the start date of a particular month and year."},{"lineNumber":253,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":254,"author":{"gitID":"guekling"},"content":"     * @param startDate A LocalDate variable that represents the date, viewed as year-month-day. The day will always"},{"lineNumber":255,"author":{"gitID":"guekling"},"content":"     *                  be set as 1."},{"lineNumber":256,"author":{"gitID":"guekling"},"content":"     * @return Integer value of the day of week of the start day  of the month. Values ranges from 1 - 7,"},{"lineNumber":257,"author":{"gitID":"guekling"},"content":"     *         representing the different days of the week."},{"lineNumber":258,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"guekling"},"content":"    private int getMonthStartDay(LocalDate startDate) {"},{"lineNumber":260,"author":{"gitID":"guekling"},"content":"        int startDay \u003d startDate.getDayOfWeek().getValue();"},{"lineNumber":261,"author":{"gitID":"guekling"},"content":""},{"lineNumber":262,"author":{"gitID":"guekling"},"content":"        // Sunday is the first column in the calendar"},{"lineNumber":263,"author":{"gitID":"guekling"},"content":"        if (startDay \u003d\u003d SUNDAY) {"},{"lineNumber":264,"author":{"gitID":"guekling"},"content":"            startDay \u003d 0;"},{"lineNumber":265,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"guekling"},"content":""},{"lineNumber":267,"author":{"gitID":"guekling"},"content":"        return startDay;"},{"lineNumber":268,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"guekling"},"content":""},{"lineNumber":270,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"guekling"},"content":"     * Adds a particular date to the correct {@code column} and {@code row} in the {@code taskCalendar}."},{"lineNumber":272,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":273,"author":{"gitID":"guekling"},"content":"     * @param dateToPrint The formatted date text to be printed on the {@code taskCalendar}."},{"lineNumber":274,"author":{"gitID":"guekling"},"content":"     * @param column The column number in {@code taskCalendar}. Column number should range from 0 to 6."},{"lineNumber":275,"author":{"gitID":"guekling"},"content":"     * @param row The row number in {@code taskCalendar}. Row number should range from 0 to 4."},{"lineNumber":276,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"guekling"},"content":"    private void addMonthDate(Text dateToPrint, int column, int row) {"},{"lineNumber":278,"author":{"gitID":"guekling"},"content":"        // To update the JavaFX component from a non-JavaFX thread"},{"lineNumber":279,"author":{"gitID":"guekling"},"content":"        Platform.runLater(new Runnable() {"},{"lineNumber":280,"author":{"gitID":"guekling"},"content":"            @Override"},{"lineNumber":281,"author":{"gitID":"guekling"},"content":"            public void run() {"},{"lineNumber":282,"author":{"gitID":"guekling"},"content":"                taskCalendar.add(dateToPrint, column, row);"},{"lineNumber":283,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"guekling"},"content":"        });"},{"lineNumber":285,"author":{"gitID":"guekling"},"content":""},{"lineNumber":286,"author":{"gitID":"guekling"},"content":"        taskCalendar.setHalignment(dateToPrint, HPos.LEFT);"},{"lineNumber":287,"author":{"gitID":"guekling"},"content":"        taskCalendar.setValignment(dateToPrint, VPos.TOP);"},{"lineNumber":288,"author":{"gitID":"guekling"},"content":"        dateToPrint.setId(\"date\" + String.valueOf(dateCount));"},{"lineNumber":289,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"guekling"},"content":""},{"lineNumber":291,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"guekling"},"content":"     * Stores the formatted date String to be printed on the {@code taskCalendar}."},{"lineNumber":293,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":294,"author":{"gitID":"guekling"},"content":"     * @param lengthOfMonth Integer value of the number of days in a month."},{"lineNumber":295,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"guekling"},"content":"    private void storeMonthDatesToBePrinted(int lengthOfMonth) {"},{"lineNumber":297,"author":{"gitID":"guekling"},"content":"        for (int date \u003d 1; date \u003c\u003d 35; date++) {"},{"lineNumber":298,"author":{"gitID":"guekling"},"content":"            if (date \u003c\u003d lengthOfMonth) {"},{"lineNumber":299,"author":{"gitID":"guekling"},"content":"                datesToBePrinted[date] \u003d \"  \" + String.valueOf(date);"},{"lineNumber":300,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":301,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"guekling"},"content":""},{"lineNumber":304,"author":{"gitID":"guekling"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Populating the Month Calendar Entries \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":305,"author":{"gitID":"guekling"},"content":""},{"lineNumber":306,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"guekling"},"content":"     * Sets the entries, in the form of {@code EntryCard}, into the {@code taskCalendar}."},{"lineNumber":308,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":309,"author":{"gitID":"guekling"},"content":"     * @param startDay Integer value of the day of week of the start day of the month. Values ranges from 1 - 7,"},{"lineNumber":310,"author":{"gitID":"guekling"},"content":"     *                 representing the different days of the week."},{"lineNumber":311,"author":{"gitID":"guekling"},"content":"     * @param entryCardsList An {@code ObservableList} of {@code EntryCard}."},{"lineNumber":312,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":313,"author":{"gitID":"guekling"},"content":"    private void setMonthEntries(int startDay, ObservableList\u003cEntryCard\u003e entryCardsList) {"},{"lineNumber":314,"author":{"gitID":"guekling"},"content":"        int numOfEntries \u003d entryCardsList.size();"},{"lineNumber":315,"author":{"gitID":"guekling"},"content":"        for (int size \u003d 0; size \u003c numOfEntries; size++) {"},{"lineNumber":316,"author":{"gitID":"guekling"},"content":"            List\u003cEntryCard\u003e toAddList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":317,"author":{"gitID":"guekling"},"content":"            EntryCard currentEntry \u003d entryCardsList.get(size);"},{"lineNumber":318,"author":{"gitID":"guekling"},"content":"            toAddList.add(currentEntry);"},{"lineNumber":319,"author":{"gitID":"guekling"},"content":"            ObservableList\u003cEntryCard\u003e toAddObservableList \u003d FXCollections.observableList(toAddList);"},{"lineNumber":320,"author":{"gitID":"guekling"},"content":""},{"lineNumber":321,"author":{"gitID":"guekling"},"content":"            int deadline \u003d currentEntry.getTask().getDeadline().date.getDayOfMonth();"},{"lineNumber":322,"author":{"gitID":"guekling"},"content":"            int countDate \u003d deadline + startDay;"},{"lineNumber":323,"author":{"gitID":"guekling"},"content":""},{"lineNumber":324,"author":{"gitID":"guekling"},"content":"            size \u003d checkSameDayEntries(entryCardsList, size, toAddList, deadline);"},{"lineNumber":325,"author":{"gitID":"guekling"},"content":""},{"lineNumber":326,"author":{"gitID":"guekling"},"content":"            int remainder \u003d countDate % 7;"},{"lineNumber":327,"author":{"gitID":"guekling"},"content":"            int divisor \u003d countDate / 7;"},{"lineNumber":328,"author":{"gitID":"guekling"},"content":""},{"lineNumber":329,"author":{"gitID":"guekling"},"content":"            addEntries(toAddObservableList, countDate, remainder, divisor);"},{"lineNumber":330,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":331,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"guekling"},"content":""},{"lineNumber":333,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"guekling"},"content":"     * Calculating the position of the entries to be added into the {@code taskCalendar}."},{"lineNumber":335,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":336,"author":{"gitID":"guekling"},"content":"     * @param toAddObservableList An {@code ObservableList} to be added to a particular {@code column} and {@code"},{"lineNumber":337,"author":{"gitID":"guekling"},"content":"     * row} in the {@code taskCalendar}."},{"lineNumber":338,"author":{"gitID":"guekling"},"content":"     * @param countDate The addition of {@code deadline} and {@code startDay}."},{"lineNumber":339,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"guekling"},"content":"    private void addEntries(ObservableList\u003cEntryCard\u003e toAddObservableList, int countDate, int remainder, int divisor) {"},{"lineNumber":341,"author":{"gitID":"guekling"},"content":"        if (countDate \u003c\u003d MAX_NUM_OF_DAYS) {"},{"lineNumber":342,"author":{"gitID":"guekling"},"content":"            if (remainder \u003d\u003d NO_REMAINDER) { // entry on a Sunday"},{"lineNumber":343,"author":{"gitID":"guekling"},"content":"                int row \u003d divisor - 1;"},{"lineNumber":344,"author":{"gitID":"guekling"},"content":"                int column \u003d MAX_COLUMN;"},{"lineNumber":345,"author":{"gitID":"guekling"},"content":""},{"lineNumber":346,"author":{"gitID":"guekling"},"content":"                addEntryListView(toAddObservableList, row, column);"},{"lineNumber":347,"author":{"gitID":"guekling"},"content":"            } else {"},{"lineNumber":348,"author":{"gitID":"guekling"},"content":"                int row \u003d divisor;"},{"lineNumber":349,"author":{"gitID":"guekling"},"content":"                int column \u003d remainder - 1;"},{"lineNumber":350,"author":{"gitID":"guekling"},"content":""},{"lineNumber":351,"author":{"gitID":"guekling"},"content":"                addEntryListView(toAddObservableList, row, column);"},{"lineNumber":352,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":353,"author":{"gitID":"guekling"},"content":"        } else {"},{"lineNumber":354,"author":{"gitID":"guekling"},"content":"            int row \u003d 0;"},{"lineNumber":355,"author":{"gitID":"guekling"},"content":"            int column \u003d remainder - 1;"},{"lineNumber":356,"author":{"gitID":"guekling"},"content":""},{"lineNumber":357,"author":{"gitID":"guekling"},"content":"            addEntryListView(toAddObservableList, row, column);"},{"lineNumber":358,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"guekling"},"content":""},{"lineNumber":361,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":362,"author":{"gitID":"guekling"},"content":"     * Adds a {@code ListView} that contains a list of {@code EntryCard} to a particular {@code column} and {@code"},{"lineNumber":363,"author":{"gitID":"guekling"},"content":"     * row} in the {@code taskCalendar}."},{"lineNumber":364,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":365,"author":{"gitID":"guekling"},"content":"     * @param toAddObservableList An {@code ObservableList} to be added to a particular {@code column} and {@code"},{"lineNumber":366,"author":{"gitID":"guekling"},"content":"     * row} in the {@code taskCalendar}."},{"lineNumber":367,"author":{"gitID":"guekling"},"content":"     * @param column The column number in {@code taskCalendar}. Column number should range from 0 to 6."},{"lineNumber":368,"author":{"gitID":"guekling"},"content":"     * @param row The row number in {@code taskCalendar}. Row number should range from 0 to 4."},{"lineNumber":369,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":370,"author":{"gitID":"guekling"},"content":"    private void addEntryListView(ObservableList\u003cEntryCard\u003e toAddObservableList, int row, int column) {"},{"lineNumber":371,"author":{"gitID":"guekling"},"content":"        ListView\u003cEntryCard\u003e entries \u003d new ListView\u003c\u003e();"},{"lineNumber":372,"author":{"gitID":"guekling"},"content":"        entries.setId(\"entry\" + String.valueOf(row) + String.valueOf(column));"},{"lineNumber":373,"author":{"gitID":"guekling"},"content":"        entries.setItems(toAddObservableList);"},{"lineNumber":374,"author":{"gitID":"guekling"},"content":"        entries.setCellFactory(listView -\u003e new EntryListViewCell());"},{"lineNumber":375,"author":{"gitID":"guekling"},"content":"        entries.setMaxHeight(60);"},{"lineNumber":376,"author":{"gitID":"guekling"},"content":""},{"lineNumber":377,"author":{"gitID":"guekling"},"content":"        // To update the JavaFX component from a non-JavaFX thread"},{"lineNumber":378,"author":{"gitID":"guekling"},"content":"        Platform.runLater(new Runnable() {"},{"lineNumber":379,"author":{"gitID":"guekling"},"content":"            @Override"},{"lineNumber":380,"author":{"gitID":"guekling"},"content":"            public void run() {"},{"lineNumber":381,"author":{"gitID":"guekling"},"content":"                taskCalendar.add(entries, column, row);"},{"lineNumber":382,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":383,"author":{"gitID":"guekling"},"content":"        });"},{"lineNumber":384,"author":{"gitID":"guekling"},"content":""},{"lineNumber":385,"author":{"gitID":"guekling"},"content":"        taskCalendar.setValignment(entries, VPos.BOTTOM);"},{"lineNumber":386,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"guekling"},"content":""},{"lineNumber":388,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":389,"author":{"gitID":"guekling"},"content":"     * Checks if the {@code entryCardsList} contains other {@code EntryCard} with the same {@code deadline} as the"},{"lineNumber":390,"author":{"gitID":"guekling"},"content":"     * previous {@code EntryCard}. If there exists one, the {@code EntryCard} will be added to the {@code toAddList}."},{"lineNumber":391,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":392,"author":{"gitID":"guekling"},"content":"     * @param entryCardsList An {@code ObservableList} of {@code EntryCard}."},{"lineNumber":393,"author":{"gitID":"guekling"},"content":"     * @param size The variable used as the condition for the for loop in {@code setMonthEntries}."},{"lineNumber":394,"author":{"gitID":"guekling"},"content":"     * @param toAddList A list of {@EntryCard} to be added to a particular {@code column} and {@code row} in the"},{"lineNumber":395,"author":{"gitID":"guekling"},"content":"     * {@code taskCalendar}."},{"lineNumber":396,"author":{"gitID":"guekling"},"content":"     * @param deadline The deadline of the {@code Task} in the previous {@code EntryCard}."},{"lineNumber":397,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":398,"author":{"gitID":"guekling"},"content":"     * @return An increment in {@code size} if there exists an {@code EntryCard} with the same {@code deadline} as"},{"lineNumber":399,"author":{"gitID":"guekling"},"content":"     * the previous {@code EntryCard}"},{"lineNumber":400,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":401,"author":{"gitID":"guekling"},"content":"    private int checkSameDayEntries(ObservableList\u003cEntryCard\u003e entryCardsList, int size, List\u003cEntryCard\u003e toAddList,"},{"lineNumber":402,"author":{"gitID":"guekling"},"content":"                                    int deadline) {"},{"lineNumber":403,"author":{"gitID":"guekling"},"content":"        int numOfEntries \u003d entryCardsList.size();"},{"lineNumber":404,"author":{"gitID":"guekling"},"content":"        if (size !\u003d numOfEntries) {"},{"lineNumber":405,"author":{"gitID":"guekling"},"content":"            for (int nextSize \u003d size + 1; nextSize \u003c numOfEntries; nextSize++) {"},{"lineNumber":406,"author":{"gitID":"guekling"},"content":"                EntryCard nextEntry \u003d entryCardsList.get(nextSize);"},{"lineNumber":407,"author":{"gitID":"guekling"},"content":"                int nextDeadline \u003d nextEntry.getTask().getDeadline().date.getDayOfMonth();"},{"lineNumber":408,"author":{"gitID":"guekling"},"content":""},{"lineNumber":409,"author":{"gitID":"guekling"},"content":"                if (deadline \u003d\u003d nextDeadline) {"},{"lineNumber":410,"author":{"gitID":"guekling"},"content":"                    toAddList.add(nextEntry);"},{"lineNumber":411,"author":{"gitID":"guekling"},"content":"                    size++;"},{"lineNumber":412,"author":{"gitID":"guekling"},"content":"                } else {"},{"lineNumber":413,"author":{"gitID":"guekling"},"content":"                    break;"},{"lineNumber":414,"author":{"gitID":"guekling"},"content":"                }"},{"lineNumber":415,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":416,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":417,"author":{"gitID":"guekling"},"content":""},{"lineNumber":418,"author":{"gitID":"guekling"},"content":"        return size;"},{"lineNumber":419,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":420,"author":{"gitID":"guekling"},"content":""},{"lineNumber":421,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":422,"author":{"gitID":"guekling"},"content":"     * Maps each {@code Task} in the {@code SortedList} to an {@code EntryCard}."},{"lineNumber":423,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":424,"author":{"gitID":"guekling"},"content":"     * @param year Year represented as a 4-digit integer."},{"lineNumber":425,"author":{"gitID":"guekling"},"content":"     * @param month Month represented by numbers from 1 to 12."},{"lineNumber":426,"author":{"gitID":"guekling"},"content":"     * @return An {@code ObservableList} of {@code EntryCard}."},{"lineNumber":427,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":428,"author":{"gitID":"guekling"},"content":"    private ObservableList\u003cEntryCard\u003e getEntryCardsList(int year, int month) {"},{"lineNumber":429,"author":{"gitID":"guekling"},"content":"        FilteredList\u003cTask\u003e filteredList \u003d getFilteredTaskList(year, month);"},{"lineNumber":430,"author":{"gitID":"guekling"},"content":"        SortedList\u003cTask\u003e taskSortedList \u003d getSortedTaskList(filteredList);"},{"lineNumber":431,"author":{"gitID":"guekling"},"content":""},{"lineNumber":432,"author":{"gitID":"guekling"},"content":"        return EasyBind.map(taskSortedList, (task) -\u003e new EntryCard(task));"},{"lineNumber":433,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":434,"author":{"gitID":"guekling"},"content":""},{"lineNumber":435,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":436,"author":{"gitID":"guekling"},"content":"     * Sorts the {@code filteredList} according to the {@code deadlineComparator}."},{"lineNumber":437,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":438,"author":{"gitID":"guekling"},"content":"     * @param filteredList Filtered {@code taskList} that contains tasks whose deadlines are of a particular month"},{"lineNumber":439,"author":{"gitID":"guekling"},"content":"     *                     and year."},{"lineNumber":440,"author":{"gitID":"guekling"},"content":"     * @return A sorted {@code filteredList} that contains tasks arranged according to their deadlines."},{"lineNumber":441,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":442,"author":{"gitID":"guekling"},"content":"    private SortedList\u003cTask\u003e getSortedTaskList(FilteredList\u003cTask\u003e filteredList) {"},{"lineNumber":443,"author":{"gitID":"guekling"},"content":"        return filteredList.sorted(deadlineComparator());"},{"lineNumber":444,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":445,"author":{"gitID":"guekling"},"content":""},{"lineNumber":446,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":447,"author":{"gitID":"guekling"},"content":"     * Filters the {@code taskList} so that it contains tasks whose deadlines are of a particular month and year."},{"lineNumber":448,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":449,"author":{"gitID":"guekling"},"content":"     * @param year Year represented as a 4-digit integer."},{"lineNumber":450,"author":{"gitID":"guekling"},"content":"     * @param month Month represented by numbers from 1 to 12."},{"lineNumber":451,"author":{"gitID":"guekling"},"content":"     * @return A filtered {@code taskList} that contains tasks whose deadlines are of a particular month and year."},{"lineNumber":452,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":453,"author":{"gitID":"guekling"},"content":"    private FilteredList\u003cTask\u003e getFilteredTaskList(int year, int month) {"},{"lineNumber":454,"author":{"gitID":"guekling"},"content":"        FilteredList\u003cTask\u003e filteredList \u003d new FilteredList\u003c\u003e(taskList, task -\u003e true);"},{"lineNumber":455,"author":{"gitID":"guekling"},"content":""},{"lineNumber":456,"author":{"gitID":"guekling"},"content":"        filteredList.setPredicate(task -\u003e {"},{"lineNumber":457,"author":{"gitID":"guekling"},"content":"            LocalDate date \u003d task.getDeadline().date;"},{"lineNumber":458,"author":{"gitID":"guekling"},"content":""},{"lineNumber":459,"author":{"gitID":"guekling"},"content":"            if ((date.getMonthValue() \u003d\u003d month) \u0026\u0026 (date.getYear() \u003d\u003d year)) {"},{"lineNumber":460,"author":{"gitID":"guekling"},"content":"                return true;"},{"lineNumber":461,"author":{"gitID":"guekling"},"content":"            } else {"},{"lineNumber":462,"author":{"gitID":"guekling"},"content":"                return false;"},{"lineNumber":463,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":464,"author":{"gitID":"guekling"},"content":"        });"},{"lineNumber":465,"author":{"gitID":"guekling"},"content":"        return filteredList;"},{"lineNumber":466,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":467,"author":{"gitID":"guekling"},"content":""},{"lineNumber":468,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":469,"author":{"gitID":"guekling"},"content":"     * Updates the calendar entries when a change in {@code taskList} is detected."},{"lineNumber":470,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":471,"author":{"gitID":"guekling"},"content":"    private void addListenerToTaskList() {"},{"lineNumber":472,"author":{"gitID":"guekling"},"content":"        taskList.addListener(new ListChangeListener\u003cTask\u003e() {"},{"lineNumber":473,"author":{"gitID":"guekling"},"content":"            @Override"},{"lineNumber":474,"author":{"gitID":"guekling"},"content":"            public void onChanged(Change change) {"},{"lineNumber":475,"author":{"gitID":"guekling"},"content":""},{"lineNumber":476,"author":{"gitID":"guekling"},"content":"                while (change.next()) {"},{"lineNumber":477,"author":{"gitID":"guekling"},"content":"                    clearCalendar();"},{"lineNumber":478,"author":{"gitID":"guekling"},"content":"                    setMonthCalendarDatesAndEntries(viewYearMonth.getYear(), viewYearMonth.getMonthValue());"},{"lineNumber":479,"author":{"gitID":"guekling"},"content":"                }"},{"lineNumber":480,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":481,"author":{"gitID":"guekling"},"content":"        });"},{"lineNumber":482,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":483,"author":{"gitID":"guekling"},"content":""},{"lineNumber":484,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":485,"author":{"gitID":"guekling"},"content":"     * @return A {@code Task} comparator based on deadline."},{"lineNumber":486,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":487,"author":{"gitID":"guekling"},"content":"    private static Comparator\u003cTask\u003e deadlineComparator() {"},{"lineNumber":488,"author":{"gitID":"guekling"},"content":"        return new Comparator\u003cTask\u003e() {"},{"lineNumber":489,"author":{"gitID":"guekling"},"content":"            @Override"},{"lineNumber":490,"author":{"gitID":"guekling"},"content":"            public int compare(Task task1, Task task2) {"},{"lineNumber":491,"author":{"gitID":"guekling"},"content":"                return (task1.getDeadline().date).compareTo(task2.getDeadline().date);"},{"lineNumber":492,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":493,"author":{"gitID":"guekling"},"content":"        };"},{"lineNumber":494,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":495,"author":{"gitID":"guekling"},"content":""},{"lineNumber":496,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":497,"author":{"gitID":"guekling"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code EntryCard}."},{"lineNumber":498,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":499,"author":{"gitID":"guekling"},"content":"    class EntryListViewCell extends ListCell\u003cEntryCard\u003e {"},{"lineNumber":500,"author":{"gitID":"guekling"},"content":""},{"lineNumber":501,"author":{"gitID":"guekling"},"content":"        @Override"},{"lineNumber":502,"author":{"gitID":"guekling"},"content":"        protected void updateItem(EntryCard entry, boolean empty) {"},{"lineNumber":503,"author":{"gitID":"guekling"},"content":"            super.updateItem(entry, empty);"},{"lineNumber":504,"author":{"gitID":"guekling"},"content":""},{"lineNumber":505,"author":{"gitID":"guekling"},"content":"            if (empty || entry \u003d\u003d null) {"},{"lineNumber":506,"author":{"gitID":"guekling"},"content":"                setGraphic(null);"},{"lineNumber":507,"author":{"gitID":"guekling"},"content":"                setText(null);"},{"lineNumber":508,"author":{"gitID":"guekling"},"content":"            } else {"},{"lineNumber":509,"author":{"gitID":"guekling"},"content":"                setGraphic(entry.getRoot());"},{"lineNumber":510,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":511,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":512,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":513,"author":{"gitID":"guekling"},"content":""},{"lineNumber":514,"author":{"gitID":"guekling"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d isEqual \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":515,"author":{"gitID":"guekling"},"content":""},{"lineNumber":516,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":517,"author":{"gitID":"guekling"},"content":"     * Checks if the entries are the same."},{"lineNumber":518,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":519,"author":{"gitID":"guekling"},"content":"    public boolean entriesIsEqual(Object other) {"},{"lineNumber":520,"author":{"gitID":"guekling"},"content":"        MonthView monthView \u003d (MonthView) other;"},{"lineNumber":521,"author":{"gitID":"guekling"},"content":""},{"lineNumber":522,"author":{"gitID":"guekling"},"content":"        for (int size \u003d 0; size \u003c taskList.size(); size++) {"},{"lineNumber":523,"author":{"gitID":"guekling"},"content":"            return taskList.get(size).equals(monthView.taskList.get(size));"},{"lineNumber":524,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":525,"author":{"gitID":"guekling"},"content":""},{"lineNumber":526,"author":{"gitID":"guekling"},"content":"        return false;"},{"lineNumber":527,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":528,"author":{"gitID":"guekling"},"content":""},{"lineNumber":529,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":530,"author":{"gitID":"guekling"},"content":"     * Checks if the dates are printed in the same row and column."},{"lineNumber":531,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":532,"author":{"gitID":"guekling"},"content":"    public boolean dateIsEqual(Object other) {"},{"lineNumber":533,"author":{"gitID":"guekling"},"content":"        MonthView monthView \u003d (MonthView) other;"},{"lineNumber":534,"author":{"gitID":"guekling"},"content":""},{"lineNumber":535,"author":{"gitID":"guekling"},"content":"        for (int date \u003d 1; date \u003c\u003d viewYearMonth.lengthOfMonth(); date++) {"},{"lineNumber":536,"author":{"gitID":"guekling"},"content":"            Node expectedText \u003d taskCalendar.lookup(\"#date\" + String.valueOf(date));"},{"lineNumber":537,"author":{"gitID":"guekling"},"content":"            int expectedRow \u003d taskCalendar.getRowIndex(expectedText);"},{"lineNumber":538,"author":{"gitID":"guekling"},"content":"            int expectedColumn \u003d taskCalendar.getColumnIndex(expectedText);"},{"lineNumber":539,"author":{"gitID":"guekling"},"content":""},{"lineNumber":540,"author":{"gitID":"guekling"},"content":"            Node actualText \u003d monthView.taskCalendar.lookup(\"#date\" + String.valueOf(date));"},{"lineNumber":541,"author":{"gitID":"guekling"},"content":"            int actualRow \u003d monthView.taskCalendar.getRowIndex(actualText);"},{"lineNumber":542,"author":{"gitID":"guekling"},"content":"            int actualColumn \u003d monthView.taskCalendar.getColumnIndex(actualText);"},{"lineNumber":543,"author":{"gitID":"guekling"},"content":""},{"lineNumber":544,"author":{"gitID":"guekling"},"content":"            return (expectedRow \u003d\u003d actualRow) \u0026\u0026 (expectedColumn \u003d\u003d actualColumn);"},{"lineNumber":545,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":546,"author":{"gitID":"guekling"},"content":""},{"lineNumber":547,"author":{"gitID":"guekling"},"content":"        return false;"},{"lineNumber":548,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":549,"author":{"gitID":"guekling"},"content":""},{"lineNumber":550,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":551,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":552,"author":{"gitID":"guekling"},"content":"        // short circuit if same object"},{"lineNumber":553,"author":{"gitID":"guekling"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":554,"author":{"gitID":"guekling"},"content":"            return true;"},{"lineNumber":555,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":556,"author":{"gitID":"guekling"},"content":""},{"lineNumber":557,"author":{"gitID":"guekling"},"content":"        // instanceof handles nulls"},{"lineNumber":558,"author":{"gitID":"guekling"},"content":"        if (!(other instanceof MonthView)) {"},{"lineNumber":559,"author":{"gitID":"guekling"},"content":"            return false;"},{"lineNumber":560,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":561,"author":{"gitID":"guekling"},"content":""},{"lineNumber":562,"author":{"gitID":"guekling"},"content":"        // state check"},{"lineNumber":563,"author":{"gitID":"guekling"},"content":"        MonthView monthView \u003d (MonthView) other;"},{"lineNumber":564,"author":{"gitID":"guekling"},"content":"        return calendarTitle.getText().equals(monthView.calendarTitle.getText())"},{"lineNumber":565,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 dateIsEqual(monthView)"},{"lineNumber":566,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 entriesIsEqual(monthView);"},{"lineNumber":567,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":568,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":537,"-":31}},{"path":"src/main/java/seedu/organizer/logic/UndoRedoStack.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LogoutCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoableCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Maintains the undo-stack (the stack of commands that can be undone) and the redo-stack (the stack of"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * commands that can be undone)."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class UndoRedoStack {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e undoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e redoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public UndoRedoStack() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        redoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Pushes {@code command} onto the undo-stack if it is of type {@code UndoableCommand}. Clears the redo-stack"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * if {@code command} is not of type {@code UndoCommand} or {@code RedoCommand}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void push(Command command) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoCommand) \u0026\u0026 !(command instanceof RedoCommand)) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            redoStack.clear();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoableCommand)) {"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"            //@@author dominickenn"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"            if (command instanceof LogoutCommand) {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"                this.reset();"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            //@@author"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoStack.add((UndoableCommand) command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be undone in the stack."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public UndoableCommand popUndo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        UndoableCommand toUndo \u003d undoStack.pop();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        redoStack.push(toUndo);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return toUndo;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be redone in the stack."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public UndoableCommand popRedo() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UndoableCommand toRedo \u003d redoStack.pop();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        undoStack.push(toRedo);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return toRedo;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be undone."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean canUndo() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return !undoStack.empty();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be redone."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean canRedo() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return !redoStack.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"     * Resets undoRedoStack"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"    public void reset() {"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        redoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (!(other instanceof UndoRedoStack)) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        UndoRedoStack stack \u003d (UndoRedoStack) other;"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return undoStack.equals(stack.undoStack)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \u0026\u0026 redoStack.equals(stack.redoStack);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":14,"-":91}},{"path":"src/main/java/seedu/organizer/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRIORITY,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                                            PREFIX_DEADLINE, PREFIX_DESCRIPTION,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                                            PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DEADLINE)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"            //@@author dominickenn"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"            Priority priority;"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).get();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"                priority \u003d ParserUtil.parsePriority(Priority.LOWEST_PRIORITY_LEVEL);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"            Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).get();"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"            //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Description description;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)).get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                description \u003d ParserUtil.parseDescription(\"\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            Task task \u003d new Task(name, priority, deadline, description, tagList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"            return new AddCommand(task);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":11,"-":69}},{"path":"src/main/java/seedu/organizer/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":23,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_WRONG_PART_COUNT \u003d \"Number of parts is incorrect\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an array of {@code Index} and returns it. Leading and trailing whitespaces"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * will be trimmed."},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static Index[] parseIndexAsArray(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String[] rawIndex \u003d trimmedIndex.split(\" +\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index[] result \u003d new Index[rawIndex.length];"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c rawIndex.length; i++) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(rawIndex[i])) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            result[i] \u003d Index.fromOneBased(Integer.parseInt(rawIndex[i]));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return result;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an array of {@code Index} with length 2 and returns it. Leading and trailing"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Index[] parseSubtaskIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Index[] result \u003d parseIndexAsArray(oneBasedIndex);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (result.length !\u003d 2) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_WRONG_PART_COUNT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return result;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code String username} into a {@code String}."},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if the given {@code username} is invalid."},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"    public static String parseUsername(String name) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(name);"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        String trimmedUsername \u003d name.trim();"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"        if (!User.isValidUsername(trimmedUsername)) {"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalValueException(User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        return name;"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cString\u003e} if {@code username} is present."},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"    public static Optional\u003cString\u003e parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(username);"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"        return username.isPresent() ? Optional.of(parseUsername(username.get())) : Optional.empty();"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code String password} into a {@code String}."},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if the given {@code password} is invalid."},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"    public static String parsePassword(String password) throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(password);"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        String trimmedPassword \u003d password.trim();"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"        if (!User.isValidPassword(trimmedPassword)) {"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalValueException(User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"        return password;"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code Optional\u003cString\u003e password} into an {@code Optional\u003cString\u003e} if {@code password} is present."},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"    public static Optional\u003cString\u003e parsePassword(Optional\u003cString\u003e password) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(password);"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        return password.isPresent() ? Optional.of(parsePassword(password.get())) : Optional.empty();"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code String question} into a {@code String}."},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if the given {@code question} is invalid."},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"    public static String parseQuestion(String question) throws IllegalValueException {"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(question);"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        String trimmedQuestion \u003d question.trim();"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"        if (!UserWithQuestionAnswer.isValidQuestion(trimmedQuestion)) {"},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalValueException(UserWithQuestionAnswer.MESSAGE_QUESTION_ANSWER_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"        return question;"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":149,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code Optional\u003cString\u003e question} into an {@code Optional\u003cString\u003e} if {@code question} is present."},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":"    public static Optional\u003cString\u003e parseQuestion(Optional\u003cString\u003e question) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(question);"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"        return question.isPresent() ? Optional.of(parseQuestion(question.get())) : Optional.empty();"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code String answer} into a {@code String}."},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if the given {@code answer} is invalid."},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"    public static String parseAnswer(String answer) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(answer);"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"        String trimmedAnswer \u003d answer.trim();"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"        if (!UserWithQuestionAnswer.isValidAnswer(trimmedAnswer)) {"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalValueException(UserWithQuestionAnswer.MESSAGE_QUESTION_ANSWER_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"        return answer;"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"     * Parses a {@code Optional\u003cString\u003e answer} into an {@code Optional\u003cString\u003e} if {@code answer} is present."},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":176,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"dominickenn"},"content":"    public static Optional\u003cString\u003e parseAnswer(Optional\u003cString\u003e answer) throws IllegalValueException {"},{"lineNumber":178,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(answer);"},{"lineNumber":179,"author":{"gitID":"dominickenn"},"content":"        return answer.isPresent() ? Optional.of(parseAnswer(answer.get())) : Optional.empty();"},{"lineNumber":180,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Parses a {@code String priority} into a {@code Priority}."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code priority} is invalid."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public static Priority parsePriority(String priority) throws IllegalValueException {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        requireNonNull(priority);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        String trimmedPriority \u003d priority.trim();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        if (!Priority.isValidPriority(trimmedPriority)) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return new Priority(trimmedPriority);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e priority} into an {@code Optional\u003cPriority\u003e} if {@code priority} is present."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public static Optional\u003cPriority\u003e parsePriority(Optional\u003cString\u003e priority) throws IllegalValueException {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        requireNonNull(priority);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        return priority.isPresent() ? Optional.of(parsePriority(priority.get())) : Optional.empty();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Parses a {@code String organizer} into an {@code Description}."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public static Description parseDescription(String description) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e organizer} into an {@code Optional\u003cDescription\u003e} if"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * {@code organizer} is present."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        return description.isPresent() ? Optional.of(parseDescription(description.get())) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Parses a {@code String deadline} into an {@code Deadline}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code deadline} is invalid."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public static Deadline parseDeadline(String deadline) throws IllegalValueException {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        requireNonNull(deadline);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        String trimmedDeadline \u003d deadline.trim();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (!Deadline.isValidDeadline(trimmedDeadline)) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return new Deadline(trimmedDeadline);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e deadline} into an {@code Optional\u003cDeadline\u003e} if {@code deadline} is present."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public static Optional\u003cDeadline\u003e parseDeadline(Optional\u003cString\u003e deadline) throws IllegalValueException {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        requireNonNull(deadline);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        return deadline.isPresent() ? Optional.of(parseDeadline(deadline.get())) : Optional.empty();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":292,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":99,"-":202}},{"path":"src/main/java/seedu/organizer/logic/parser/OrganizerParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND_OR_NO_USER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.ModelManager.getCurrentlyLoggedInUser;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddQuestionAnswerCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddSubtaskCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AnswerCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CurrentMonthCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteSubtaskCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDescriptionCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ForgotPasswordCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LoginCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LogoutCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.NextMonthCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.PreviousMonthCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SignUpCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ToggleCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ToggleSubtaskCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"public class OrganizerParser {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (getCurrentlyLoggedInUser() \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            switch (commandWord) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"            case SignUpCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                return new SignUpCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"            case SignUpCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                return new SignUpCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"            case LoginCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                return new LoginCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"            case LoginCommand.COMMAND_ALIAS:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                return new LoginCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"            case ForgotPasswordCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                return new ForgotPasswordCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"            case ForgotPasswordCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                return new ForgotPasswordCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"            case AnswerCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                return new AnswerCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"            case AnswerCommand.COMMAND_ALIAS:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                return new AnswerCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"            case ExitCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                return new ExitCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"            default :"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                throw new ParseException(MESSAGE_UNKNOWN_COMMAND_OR_NO_USER);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case LogoutCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new LogoutCommand();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case LogoutCommand.COMMAND_ALIAS:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new LogoutCommand();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        case ToggleCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new ToggleCommandParser().parse(arguments);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case ToggleCommand.COMMAND_ALIAS:"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return new ToggleCommandParser().parse(arguments);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        case ToggleSubtaskCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return new ToggleSubtaskCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        case ToggleSubtaskCommand.COMMAND_ALIAS:"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return new ToggleSubtaskCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        case DeleteSubtaskCommand.COMMAND_WORD:"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return new DeleteSubtaskCommandParser().parse(arguments);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        case DeleteSubtaskCommand.COMMAND_ALIAS:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return new DeleteSubtaskCommandParser().parse(arguments);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        case AddSubtaskCommand.COMMAND_WORD:"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return new AddSubtaskCommandParser().parse(arguments);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        case AddSubtaskCommand.COMMAND_ALIAS:"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return new AddSubtaskCommandParser().parse(arguments);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        case FindMultipleFieldsCommand.COMMAND_WORD:"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return new FindMultipleFieldsCommandParser().parse(arguments);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        case FindMultipleFieldsCommand.COMMAND_ALIAS:"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return new FindMultipleFieldsCommandParser().parse(arguments);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        case FindNameCommand.COMMAND_WORD:"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return new FindNameCommandParser().parse(arguments);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        case FindNameCommand.COMMAND_ALIAS:"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return new FindNameCommandParser().parse(arguments);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        case FindDescriptionCommand.COMMAND_WORD:"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return new FindDescriptionCommandParser().parse(arguments);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        case FindDescriptionCommand.COMMAND_ALIAS:"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return new FindDescriptionCommandParser().parse(arguments);"},{"lineNumber":182,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        case FindDeadlineCommand.COMMAND_WORD:"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return new FindDeadlineCommandParser().parse(arguments);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        case FindDeadlineCommand.COMMAND_ALIAS:"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return new FindDeadlineCommandParser().parse(arguments);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"dominickenn"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        case PreviousMonthCommand.COMMAND_WORD:"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            return new PreviousMonthCommand();"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        case PreviousMonthCommand.COMMAND_ALIAS:"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return new PreviousMonthCommand();"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        case NextMonthCommand.COMMAND_WORD:"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return new NextMonthCommand();"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        case NextMonthCommand.COMMAND_ALIAS:"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            return new NextMonthCommand();"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        case AddQuestionAnswerCommand.COMMAND_WORD:"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            return new AddQuestionAnswerCommandParser().parse(arguments);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        case CurrentMonthCommand.COMMAND_WORD:"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            return new CurrentMonthCommand();"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        case CurrentMonthCommand.COMMAND_ALIAS:"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return new CurrentMonthCommand();"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":8,"-":228}},{"path":"src/main/java/seedu/organizer/logic/parser/FindDeadlineCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":" * Parses input arguments and creates a new FindDeadlineCommand object"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommandParser implements Parser\u003cFindDeadlineCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"     * Parses the given {@code String} of arguments in the context of the FindDeadlineCommand"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"     * and returns an FindDeadlineCommand object for execution."},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public FindDeadlineCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDeadlineCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        String[] deadlineKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        return new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(deadlineKeywords)));"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":10}},{"path":"src/main/java/seedu/organizer/logic/parser/AddQuestionAnswerCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddQuestionAnswerCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":" * Parses input arguments and creates a new AddQuestionAnswerCommand object"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class AddQuestionAnswerCommandParser implements Parser\u003cAddQuestionAnswerCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"     * Parses the given {@code String} of arguments in the context of the AddQuestionAnswerCommand"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     * and returns an AddQuestionAnswerCommand object for execution."},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public AddQuestionAnswerCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER);"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)) {"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"                    AddQuestionAnswerCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"            String question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION)).get();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"            String answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER)).get();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"            return new AddQuestionAnswerCommand(question, answer);"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":38,"-":12}},{"path":"src/main/java/seedu/organizer/logic/parser/AnswerCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AnswerCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":" * Parses input arguments and creates a new AnswerCommand object"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class AnswerCommandParser implements Parser\u003cAnswerCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"     * Parses the given {@code String} of arguments in the context of the AnswerCommand"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     * and returns a AnswerCommand object for execution."},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public AnswerCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_ANSWER);"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_ANSWER)) {"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"            String username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"            String answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER)).get();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"            return new AnswerCommand(username, answer);"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":37,"-":12}},{"path":"src/main/java/seedu/organizer/logic/parser/SignUpCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SignUpCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" * Parses input arguments and creates a new SignUpCommand object"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class SignUpCommandParser implements Parser\u003cSignUpCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     * Parses the given {@code String} of arguments in the context of the SignUpCommand"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"     * and returns an SignUpCommand object for execution."},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    public SignUpCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"            String username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"            String password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            User user \u003d new User(username, password);"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"            return new SignUpCommand(user);"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":41,"-":13}},{"path":"src/main/java/seedu/organizer/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.LoginCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" * Parses input arguments and creates a new LoginCommand object"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     * Parses the given {@code String} of arguments in the context of the LoginCommand"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"     * and returns an LoginCommand object for execution."},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    public LoginCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"            String username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"            String password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            User user \u003d new User(username, password);"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"            return new LoginCommand(user);"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":41,"-":13}},{"path":"src/main/java/seedu/organizer/logic/parser/FindMultipleFieldsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":" * Parses input arguments and creates a new FindMultipleFieldsCommand object"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommandParser implements Parser\u003cFindMultipleFieldsCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"     * Parses the given {@code String} of arguments in the context of the FindMultipleFieldsCommand"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"     * and returns an FindMultipleFieldsCommand object for execution."},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public FindMultipleFieldsCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMultipleFieldsCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        return new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":10}},{"path":"src/main/java/seedu/organizer/logic/parser/ForgotPasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.logic.commands.ForgotPasswordCommand;"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" * Parses input arguments and creates a new ForgotPasswordCommand object"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class ForgotPasswordCommandParser implements Parser\u003cForgotPasswordCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     * Parses the given {@code String} of arguments in the context of the ForgotPasswordCommand"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"     * and returns a ForgotPasswordCommand object for execution."},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    public ForgotPasswordCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME);"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME)) {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ForgotPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"            String username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"            return new ForgotPasswordCommand(username);"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":46,"-":2}},{"path":"src/main/java/seedu/organizer/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a task identified using it\u0027s last displayed index from the organizer book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"            + \": Deletes the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    private Task taskToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(taskToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deleteTask(taskToDelete);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 Objects.equals(this.taskToDelete, ((DeleteCommand) other).taskToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":10,"-":58}},{"path":"src/main/java/seedu/organizer/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the organizer book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":20}},{"path":"src/main/java/seedu/organizer/logic/commands/CurrentMonthCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":4,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"guekling"},"content":" * Shows the view of the current month."},{"lineNumber":6,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"public class CurrentMonthCommand extends Command {"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":""},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_WORD \u003d \"cmonth\";"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_ALIAS \u003d \"cm\";"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":""},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Shows current month\";"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public CommandResult execute() {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":17,"-":2}},{"path":"src/main/java/seedu/organizer/logic/commands/util/EditTaskDescriptor.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.CollectionUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":" * Stores the details to edit the task with. Each non-empty field value will replace the"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" * corresponding field value of the task."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class EditTaskDescriptor {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Priority priority;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Deadline deadline;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Description description;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Status status;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private List\u003cSubtask\u003e subtasks;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public EditTaskDescriptor() {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Copy constructor."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public EditTaskDescriptor(EditTaskDescriptor toCopy) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        setName(toCopy.name);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setPriority(toCopy.priority);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setDeadline(toCopy.deadline);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        setDescription(toCopy.description);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        setStatus(toCopy.status);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        setTags(toCopy.tags);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        setSubtasks(toCopy.subtasks);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Returns true if at least one field is edited."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean isAnyFieldEdited() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return CollectionUtil.isAnyNonNull(this.name, this.priority, this.deadline, this.description, this.status,"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                this.tags);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Optional\u003cName\u003e getName() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(name);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setPriority(Priority priority) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Optional\u003cPriority\u003e getPriority() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(priority);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void setDeadline(Deadline deadline) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Optional\u003cDeadline\u003e getDeadline() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(deadline);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setDescription(Description description) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Optional\u003cDescription\u003e getDescription() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(description);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setStatus(Status status) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public Optional\u003cStatus\u003e getStatus() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(status);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets {@code subtasks} to this object\u0027s {@code subtasks}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code subtasks} is used internally."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void setSubtasks(List\u003cSubtask\u003e subtasks) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.subtasks \u003d (subtasks !\u003d null) ? new ArrayList\u003c\u003e(subtasks) : null;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable subtask set, which throws {@code UnsupportedOperationException}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns {@code Optional#empty()} if {@code subtasks} is null."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Optional\u003cList\u003cSubtask\u003e\u003e getSubtasks() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return (subtasks !\u003d null) ? Optional.of(Collections.unmodifiableList(subtasks)) : Optional.empty();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditTaskDescriptor)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return getName().equals(e.getName())"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 getPriority().equals(e.getPriority())"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 getDeadline().equals(e.getDeadline())"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                \u0026\u0026 getDescription().equals(e.getDescription())"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":149}},{"path":"src/main/java/seedu/organizer/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":" * Adds a user to the organizer."},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"public class LoginCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"in\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Login to PrioriTask. \""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_PASSWORD + \"PASSWORD \\n\""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_USERNAME + \"david \""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_PASSWORD + \"david1234 \";"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"User log in successful : %1$s\";"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USER_NOT_FOUND \u003d \"This user does not exist\";"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_CURRENTLY_LOGGED_IN \u003d \"A user is currently loggd in\";"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    private final User toLogin;"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"     * Creates an LoginCommand to add the specified {@code User}"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    public LoginCommand(User user) {"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(user);"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        toLogin \u003d user;"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(model);"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"            model.loginUser(toLogin);"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toLogin));"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        } catch (UserNotFoundException unf) {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"            throw new CommandException(MESSAGE_USER_NOT_FOUND);"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        } catch (CurrentlyLoggedInException cli) {"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"            throw new CommandException(MESSAGE_CURRENTLY_LOGGED_IN);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof LoginCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 toLogin.equals(((LoginCommand) other).toLogin));"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":53,"-":11}},{"path":"src/main/java/seedu/organizer/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Clears the organizer book."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Organizer has been cleared!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.deleteCurrentUserTasks();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":20}},{"path":"src/main/java/seedu/organizer/logic/commands/PreviousMonthCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":4,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"guekling"},"content":" * Shows the view of the month before the currently viewed month."},{"lineNumber":6,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"public class PreviousMonthCommand extends Command {"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":""},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_WORD \u003d \"pmonth\";"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_ALIAS \u003d \"pm\";"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":""},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Shows previous month\";"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public CommandResult execute() {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":17,"-":2}},{"path":"src/main/java/seedu/organizer/logic/commands/ForgotPasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" * Finds a user in PrioriTask with the given username."},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"public class ForgotPasswordCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_WORD \u003d \"forgotpassword\";"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"fp\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Retrieves question from user\""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"            + \" with the username, if the user exists. \\n\""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"            + \"Parameters: \" + PREFIX_USERNAME + \" USERNAME\\n\""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"            + \"Example: \" + COMMAND_WORD + PREFIX_USERNAME + \"david\";"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Question: %1$s\";"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_NO_QUESTION \u003d \"User %1$s does not have a question\";"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    private String username;"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public ForgotPasswordCommand(String username) {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(username);"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        this.username \u003d username;"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        User user;"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            user \u003d model.getUserByUsername(username);"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"User does not exist\");"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        if (user instanceof UserWithQuestionAnswer) {"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"            String question \u003d ((UserWithQuestionAnswer) user).question;"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, question));"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"            return new CommandResult(String.format(MESSAGE_NO_QUESTION, username));"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof ForgotPasswordCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.username.equals(((ForgotPasswordCommand) other).username)); // state check"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":48,"-":9}},{"path":"src/main/java/seedu/organizer/logic/commands/ToggleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.ModelManager.getCurrentlyLoggedInUser;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateCompleted;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Inverse the value of task status (Done or Not done)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ToggleCommand extends UndoableCommand {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"toggle\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggle task status\\n\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the organizer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Toggled Task: %1$s\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public final Index index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     * @param index                of the task in the filtered task list to edit"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ToggleCommand(Index index) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        editedTask \u003d createEditedTask(taskToEdit);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit} with status inversed"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Name updatedName \u003d taskToEdit.getName();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d taskToEdit.getPriority();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d taskToEdit.getDeadline();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        DateCompleted updatedDateCompleted \u003d taskToEdit.getDateCompleted().toggle();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d taskToEdit.getDescription();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e updatedSubtasks \u003d taskToEdit.getSubtasks();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Status updatedStatus \u003d taskToEdit.getStatus().getInverse();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                updatedDateCompleted, updatedDescription, updatedStatus,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                updatedTags, updatedSubtasks, getCurrentlyLoggedInUser());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                || (other instanceof ToggleCommand // instanceof handles nulls"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.index.equals(((ToggleCommand) other).index)); // state check"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":95}},{"path":"src/main/java/seedu/organizer/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a task to the organizer book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the organizer book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_DEADLINE + \"DEADLINE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"CS2103T \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PRIORITY + \"9 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_DEADLINE + \"2018-03-11 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"Refactor AddressBook to PrioriTask \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the organizer book\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    private final Task toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     * Creates an AddCommand to add the specified {@code Task}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    public AddCommand(Task task) {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(task);"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        toAdd \u003d task;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addTask(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":8,"-":60}},{"path":"src/main/java/seedu/organizer/logic/commands/FindDeadlineCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":" * Finds and lists all persons in PrioriTask whose deadline contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * Keyword should be in the format of YYYY-MM-DD."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":""},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_WORD \u003d \"findd\";"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_ALIAS \u003d \"fd\";"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose deadline contain any of \""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"            + \"the specified keywords (not case-sensitive) and displays them as a list with index numbers. Keywords \""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"            + \"should be in the format of YYYY-MM-DD. \\n\""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2018-03-17 2018-05-03\";"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    private final DeadlineContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    public FindDeadlineCommand(DeadlineContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        return new CommandResult(getMessageForTaskListShownSummary(model.getFilteredTaskList().size()));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"                || (other instanceof FindDeadlineCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.predicate.equals(((FindDeadlineCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":35,"-":4}},{"path":"src/main/java/seedu/organizer/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private ReadOnlyOrganizer previousOrganizer;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private void saveOrganizerSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.previousOrganizer \u003d new Organizer(model.getOrganizer());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Reverts the Organizer to the state before this command"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * was executed and updates the filtered task list to"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousOrganizer);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        model.resetData(previousOrganizer);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"     * Executes the command and updates the filtered task"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        saveOrganizerSnapshot();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":62}},{"path":"src/main/java/seedu/organizer/logic/commands/NextMonthCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":4,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"guekling"},"content":" * Shows the view of the month after the currently viewed month."},{"lineNumber":6,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"public class NextMonthCommand extends Command {"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":""},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_WORD \u003d \"nmonth\";"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_ALIAS \u003d \"nm\";"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":""},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Shows next month\";"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public CommandResult execute() {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":16,"-":2}},{"path":"src/main/java/seedu/organizer/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.ModelManager.getCurrentlyLoggedInUser;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateCompleted;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Edits the details of an existing task in the organizer book."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"            + \"by the index number used in the last task listing. \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + PREFIX_PRIORITY + \"9 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_DEADLINE + \"2018-03-11\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the organizer.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final EditTaskDescriptor editTaskDescriptor;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"     * @param index                of the task in the filtered task list to edit"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param editTaskDescriptor details to edit the task with"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(editTaskDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * edited with {@code editTaskDescriptor}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        DateCompleted oldDateCompleted \u003d taskToEdit.getDateCompleted();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Status updatedstatus \u003d editTaskDescriptor.getStatus().orElse(taskToEdit.getStatus());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e updatedSubtasks \u003d editTaskDescriptor.getSubtasks().orElse(taskToEdit.getSubtasks());"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                oldDateCompleted, updatedDescription, updatedstatus,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                updatedTags, updatedSubtasks, getCurrentlyLoggedInUser());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor)"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 Objects.equals(taskToEdit, e.taskToEdit);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":13,"-":129}},{"path":"src/main/java/seedu/organizer/logic/commands/AnswerCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" * Answer a question correctly to retrieve a user\u0027s password."},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"public class AnswerCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_WORD \u003d \"answer\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"ans\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": If the user exists, \""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"            + \"answer a user\u0027s question\\n\""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"            + \"Parameters: \" + PREFIX_USERNAME + \"USERNAME\""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_ANSWER + \"ANSWER\\n\""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_USERNAME + \"david\""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_ANSWER + \"yes\";"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Answer correct!\\nPassword: %1$s\";"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_NO_QUESTION \u003d \"User %1$s does not have a question\";"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_WRONG_ANSWER \u003d \"Answer is incorrect\";"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    private String username;"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    private String answer;"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    public AnswerCommand(String username, String answer) {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(username, answer);"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        this.username \u003d username;"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        this.answer \u003d answer;"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"    public CommandResult execute() {"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        User user;"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"            user \u003d model.getUserByUsername(username);"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"User does not exist\");"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        if (user instanceof UserWithQuestionAnswer) {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"            String answer \u003d ((UserWithQuestionAnswer) user).answer;"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"            String password \u003d user.password;"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"            return answerQuestionAndGetResult(answer, password);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"            return new CommandResult(String.format(MESSAGE_NO_QUESTION, username));"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"     * Returns the password if the answer is correct"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    private CommandResult answerQuestionAndGetResult(String answer, String password) {"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(answer, password);"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        if (answer.equals(this.answer)) {"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, password));"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"            return new CommandResult(MESSAGE_WRONG_ANSWER);"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof AnswerCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.username.equals(((AnswerCommand) other).username)"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.answer.equals(((AnswerCommand) other).answer)); // state check"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":67,"-":10}},{"path":"src/main/java/seedu/organizer/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a task identified using it\u0027s last displayed index from the organizer book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"            + \": Selects the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Task: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":50}},{"path":"src/main/java/seedu/organizer/logic/commands/LogoutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":" * Logout from organizer."},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"public class LogoutCommand extends Command {"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"out\";"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_LOGOUT_ACKNOWLEDGEMENT \u003d \"Logged out\";"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"        model.logout();"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        return new CommandResult(MESSAGE_LOGOUT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":20,"-":2}},{"path":"src/main/java/seedu/organizer/logic/commands/FindMultipleFieldsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":" * Finds and lists all persons in organizer book whose name, descriptions or deadline contains any of the argument"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * keywords."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" * Keyword matching is not case sensitive."},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names, descriptions or \""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"            + \"deadlines contain any of the specified keywords (not case-sensitive) and displays them as a list with \""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"            + \"index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"            + \"Example: \" + COMMAND_WORD + \" cs2103 2018-03-17 assignment\";"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":""},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    private final MultipleFieldsContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":""},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    public FindMultipleFieldsCommand(MultipleFieldsContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":""},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        return new CommandResult(getMessageForTaskListShownSummary(model.getFilteredTaskList().size()));"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"                || (other instanceof FindMultipleFieldsCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.predicate.equals(((FindMultipleFieldsCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":36,"-":4}},{"path":"src/main/java/seedu/organizer/logic/commands/AddQuestionAnswerCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.ModelManager.getCurrentlyLoggedInUser;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":" * Adds a question-answer to the currently logged in user."},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class AddQuestionAnswerCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_WORD \u003d \"addqa\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a question and answer to the current user.\""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_QUESTION + \"QUESTION \""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_ANSWER + \"ANSWER\\n\""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_QUESTION + \"What cats do you like? \""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_ANSWER + \"All cats \";"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_ADD_QUESTION_ANSWER_SUCCESS \u003d \"Added question and answer to user: %1$s\";"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    private User userToEdit;"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    private UserWithQuestionAnswer editedUser;"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    private String question;"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    private String answer;"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"     * Updates current user with a user with the given question and answer"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    public AddQuestionAnswerCommand(String question, String answer) {"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(question, answer, getCurrentlyLoggedInUser());"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        this.userToEdit \u003d getCurrentlyLoggedInUser();"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        this.question \u003d question;"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        this.answer \u003d answer;"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        editedUser \u003d createEditedUser();"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        model.addQuestionAnswerToUser(userToEdit, editedUser);"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_QUESTION_ANSWER_SUCCESS, editedUser));"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"     * Creates and returns a UserWithQuestionAnswer with the current user, and the question and answer"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"    private UserWithQuestionAnswer createEditedUser() {"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(userToEdit);"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        UserWithQuestionAnswer user \u003d new UserWithQuestionAnswer("},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"                userToEdit.username,"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"                userToEdit.password,"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"                question,"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"                answer);"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        return user;"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof AddQuestionAnswerCommand)) {"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        // state check"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        AddQuestionAnswerCommand a \u003d (AddQuestionAnswerCommand) other;"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        return userToEdit.equals(a.userToEdit)"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 question.equals(a.question)"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 answer.equals(a.answer);"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":""}],"authorContributionMap":{"dominickenn":75,"-":12}},{"path":"src/main/java/seedu/organizer/logic/commands/SignUpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" * Adds a user to the organizer."},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"public class SignUpCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_WORD \u003d \"signup\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"su\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create a user account for PrioriTask. \""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_PASSWORD + \"PASSWORD \\n\""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_USERNAME + \"david \""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"            + PREFIX_PASSWORD + \"david1234 \";"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New user account created: %1$s\";"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_DUPLICATE_USER \u003d \"This user already exists in the organizer\";"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    private final User toAdd;"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Creates an SignUpCommand to add the specified {@code User}"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    public SignUpCommand(User user) {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(user);"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        toAdd \u003d user;"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(model);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"            model.addUser(toAdd);"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateUserException e) {"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_USER);"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof SignUpCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 toAdd.equals(((SignUpCommand) other).toAdd));"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":49,"-":10}},{"path":"src/main/java/seedu/organizer/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.ComponentManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.OrganizerParser;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    private final OrganizerParser organizerParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e executedCommandsList;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ObservableList\u003cString\u003e executedCommandsObservableList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        organizerParser \u003d new OrganizerParser();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        executedCommandsObservableList \u003d FXCollections.observableArrayList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        executedCommandsObservableList.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"            Command command \u003d organizerParser.parseCommand(commandText);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"    public ObservableList\u003cString\u003e getExecutedCommandsList() {"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        return executedCommandsObservableList;"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"guekling":6,"-":63}},{"path":"src/main/java/seedu/organizer/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"public interface Storage extends OrganizerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    String getOrganizerFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void saveOrganizer(ReadOnlyOrganizer addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void handleOrganizerChangedEvent(OrganizerChangedEvent abce);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":37}},{"path":"src/main/java/seedu/organizer/storage/XmlOrganizerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":" * A class to access Organizer data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"public class XmlOrganizerStorage implements OrganizerStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlOrganizerStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    public XmlOrganizerStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getOrganizerFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readOrganizer(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readOrganizer()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File organizerFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!organizerFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"Organizer file \"  + organizerFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableOrganizer xmlOrganizer \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlOrganizer.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + organizerFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer organizer) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveOrganizer(organizer, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveOrganizer(ReadOnlyOrganizer)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer organizer, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(organizer);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableOrganizer(organizer));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":78}},{"path":"src/main/java/seedu/organizer/logic/commands/DeleteSubtaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.UniqueSubtaskList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateCompleted;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Deletes a subtask of a task"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteSubtaskCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete-subtask\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ds\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete a subtask of a task. \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Parameters: TASK_INDEX (must be a positive integer) SUBTASK_INDEX (must be a positive integer)\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_SUBTASK_SUCCESS \u003d \"Subtask Deleted: %1$s\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public final Index taskIndex;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public final Index subtaskIndex;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Subtask deletedSubtask;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param taskIndex index of the task in the filtered task list to edit"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param subtaskIndex index of the subtask of the task to edit"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public DeleteSubtaskCommand(Index taskIndex, Index subtaskIndex) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.subtaskIndex \u003d subtaskIndex;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new CommandException(\"This exception should not happen (duplicated task while toggling)\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"This exception should not happen (task missing while toggling)\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_SUBTASK_SUCCESS, deletedSubtask));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (taskIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        taskToEdit \u003d lastShownList.get(taskIndex.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (subtaskIndex.getZeroBased() \u003e\u003d taskToEdit.getSubtasks().size()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_SUBTASK_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        deletedSubtask \u003d taskToEdit.getSubtasks().get(subtaskIndex.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        editedTask \u003d createEditedTask(taskToEdit, subtaskIndex);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit, Index subtaskIndex) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Name updatedName \u003d taskToEdit.getName();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d taskToEdit.getPriority();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d taskToEdit.getDeadline();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        DateCompleted oldDateCompleted \u003d taskToEdit.getDateCompleted();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d taskToEdit.getDescription();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        User user \u003d taskToEdit.getUser();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e originalSubtasks \u003d new ArrayList\u003c\u003e(taskToEdit.getSubtasks());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Status updatedStatus \u003d taskToEdit.getStatus();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        originalSubtasks.remove(subtaskIndex.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        UniqueSubtaskList updatedSubtasks \u003d new UniqueSubtaskList(originalSubtasks);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded, oldDateCompleted,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                updatedDescription, updatedStatus, updatedTags, updatedSubtasks.toList(), user);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteSubtaskCommand // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.taskIndex.equals(((DeleteSubtaskCommand) other).taskIndex) // state check"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.subtaskIndex.equals(((DeleteSubtaskCommand) other).subtaskIndex)); // state check"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":112}},{"path":"src/main/java/seedu/organizer/storage/XmlSerializableOrganizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" * An Immutable Organizer that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"organizer\")"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"public class XmlSerializableOrganizer {"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedUser\u003e users;"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"     * Creates an empty XmlSerializableOrganizer."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    public XmlSerializableOrganizer() {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        users \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     * Conversion"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public XmlSerializableOrganizer(ReadOnlyOrganizer src) {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        this();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        //@@author dominickenn"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        users.addAll(src.getUserList().stream().map(user -\u003e {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"            if (user instanceof UserWithQuestionAnswer) {"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"                return new XmlAdaptedUser((UserWithQuestionAnswer) user);"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"            } else {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"                return new XmlAdaptedUser(user);"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        }).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        //@@author"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Converts this organizer into the model\u0027s {@code Organizer} object."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedTask} or {@code XmlAdaptedTag} or {@code XmlAdaptedUser}."},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"    public Organizer toModelType() throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        Organizer organizer \u003d new Organizer();"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"            organizer.addTag(t.toModelType());"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        for (XmlAdaptedTask p : tasks) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            organizer.addTask(p.toModelType());"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (XmlAdaptedUser u : users) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            if (u.isUserWithQuestionAnswer()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                organizer.addUser(u.toUserQuestionAnswerModelType());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                organizer.addUser(u.toUserModelType());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        return organizer;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof XmlSerializableOrganizer)) {"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"            return false;"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer otherAb \u003d (XmlSerializableOrganizer) other;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return tasks.equals(otherAb.tasks) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 users.equals(otherAb.users);"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":51,"-":42}},{"path":"src/main/java/seedu/organizer/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":61}},{"path":"src/main/java/seedu/organizer/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":" * Manages storage of Organizer data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    private OrganizerStorage organizerStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public StorageManager(OrganizerStorage organizerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        this.organizerStorage \u003d organizerStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Organizer methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getOrganizerFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return organizerStorage.getOrganizerFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readOrganizer(organizerStorage.getOrganizerFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return organizerStorage.readOrganizer(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer organizer) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveOrganizer(organizer, organizerStorage.getOrganizerFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer organizer, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        organizerStorage.saveOrganizer(organizer, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handleOrganizerChangedEvent(OrganizerChangedEvent event) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            saveOrganizer(event.data);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":87}},{"path":"src/main/java/seedu/organizer/logic/commands/ToggleSubtaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.UniqueSubtaskList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateCompleted;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Inverse the value of task status"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ToggleSubtaskCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"toggle-subtask\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ts\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a subttask to a task. \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Parameters: TASK_INDEX (must be a positive integer) SUBTASK_INDEX (must be a positive integer)\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_SUBTASK_SUCCESS \u003d \"Toogled Subtask: %1$s\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public final Index taskIndex;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public final Index subtaskIndex;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Subtask editedSubtask;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param taskIndex index of the task in the filtered task list to edit"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param subtaskIndex index of the subtask of the task to edit"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ToggleSubtaskCommand(Index taskIndex, Index subtaskIndex) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.subtaskIndex \u003d subtaskIndex;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new CommandException(\"This exception should not happen (duplicated task while toggling)\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"This exception should not happen (task missing while toggling)\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_SUBTASK_SUCCESS, editedSubtask));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (taskIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        taskToEdit \u003d lastShownList.get(taskIndex.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (subtaskIndex.getZeroBased() \u003e\u003d taskToEdit.getSubtasks().size()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_SUBTASK_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        editedTask \u003d createEditedTask(taskToEdit, subtaskIndex);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        editedSubtask \u003d editedTask.getSubtasks().get(subtaskIndex.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit} with status inversed"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit, Index subtaskIndex) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Name updatedName \u003d taskToEdit.getName();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d taskToEdit.getPriority();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d taskToEdit.getDeadline();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        DateCompleted updatedDateCompleted \u003d taskToEdit.getDateCompleted();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d taskToEdit.getDescription();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e originalSubtasks \u003d new ArrayList\u003c\u003e(taskToEdit.getSubtasks());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Status updatedStatus \u003d taskToEdit.getStatus();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        User user \u003d taskToEdit.getUser();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Subtask originalSubtask \u003d originalSubtasks.get(subtaskIndex.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Name subtaskName \u003d originalSubtask.getName();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Status subtaskStatus \u003d originalSubtask.getStatus().getInverse();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Subtask editedSubtask \u003d new Subtask(subtaskName, subtaskStatus);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        originalSubtasks.set(subtaskIndex.getZeroBased(), editedSubtask);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UniqueSubtaskList updatedSubtasks \u003d new UniqueSubtaskList(originalSubtasks);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded, updatedDateCompleted,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                updatedDescription, updatedStatus, updatedTags, updatedSubtasks.toList(), user);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                || (other instanceof ToggleSubtaskCommand // instanceof handles nulls"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.taskIndex.equals(((ToggleSubtaskCommand) other).taskIndex) // state check"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.subtaskIndex.equals(((ToggleSubtaskCommand) other).subtaskIndex)); // state check"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":119}},{"path":"src/main/java/seedu/organizer/storage/OrganizerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":" * Represents a storage for {@link Organizer}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public interface OrganizerStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    String getOrganizerFilePath();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     * Returns Organizer data as a {@link ReadOnlyOrganizer}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @see #getOrganizerFilePath()"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyOrganizer\u003e readOrganizer(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Saves the given {@link ReadOnlyOrganizer} to the storage."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void saveOrganizer(ReadOnlyOrganizer addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @see #saveOrganizer(ReadOnlyOrganizer)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void saveOrganizer(ReadOnlyOrganizer addressBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":41}},{"path":"src/main/java/seedu/organizer/logic/commands/AddSubtaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.ModelManager.getCurrentlyLoggedInUser;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.subtask.UniqueSubtaskList.DuplicateSubtaskException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.UniqueSubtaskList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateCompleted;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Add a subtask into a task"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddSubtaskCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"adds\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"as\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a subttask to a task. \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"Submit report \";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New subtask added: %1$s\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATED \u003d \"Subtask already exist\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final Subtask toAdd;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public AddSubtaskCommand(Index index, Subtask toAdd) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.toAdd \u003d toAdd;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            editedTask \u003d createEditedTask(taskToEdit, toAdd);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Task duplication should not happen\");"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (DuplicateSubtaskException dse) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATED);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedTask));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit, Subtask toAdd) throws DuplicateSubtaskException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Name updatedName \u003d taskToEdit.getName();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d taskToEdit.getPriority();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d taskToEdit.getDeadline();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        DateCompleted oldDateCompleted \u003d taskToEdit.getDateCompleted();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d taskToEdit.getDescription();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        UniqueSubtaskList updatedSubtasks \u003d new UniqueSubtaskList(taskToEdit.getSubtasks());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Status updatedStatus \u003d taskToEdit.getStatus();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        updatedSubtasks.add(toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded, oldDateCompleted,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                updatedDescription, updatedStatus, updatedTags, updatedSubtasks.toList(), getCurrentlyLoggedInUser());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                || (other instanceof AddSubtaskCommand // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.index.equals(((AddSubtaskCommand) other).index) // state check"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.toAdd.equals(((AddSubtaskCommand) other).toAdd)); // state check"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":108}},{"path":"src/main/java/seedu/organizer/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static void saveDataToFile(File file, XmlSerializableOrganizer addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns organizer book in the file or an empty organizer book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public static XmlSerializableOrganizer loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableOrganizer.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":36}},{"path":"src/main/java/seedu/organizer/storage/XmlAdaptedUser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"public class XmlAdaptedUser {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    private String username;"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    private String password;"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    private String question;"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    private String answer;"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     * Constructs an XmlAdaptedUser."},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedUser() {}"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"     * Constructs a {@code XmlAdaptedUser} with the given {@code usernamename} and {@code password}."},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedUser(String username, String password) {"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        this.username \u003d username;"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        this.password \u003d password;"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"     * Constructs a {@code XmlAdaptedUser} with the given"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"     * {@code usernamename}, {@code password}, {@code question}, {@code answer}."},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedUser(String username, String password, String question, String answer) {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        this.username \u003d username;"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        this.password \u003d password;"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        this.question \u003d question;"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        this.answer \u003d answer;"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"     * Converts a given User into this class for JAXB use."},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedUser(User source) {"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        username \u003d source.username;"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        password \u003d source.password;"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"     * Converts a given UserWithQuestionAnswer into this class for JAXB use."},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedUser(UserWithQuestionAnswer source) {"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        username \u003d source.username;"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        password \u003d source.password;"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        question \u003d source.question;"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        answer \u003d source.answer;"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"    public String getUsername() {"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        return username;"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"    public String getPassword() {"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        return password;"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"     * Converts this jaxb-friendly adapted user object into the model\u0027s User object."},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"    public User toUserModelType() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        if (!User.isValidUsername(username) || !User.isValidPassword(password)) {"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalValueException(User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        return new User(username, password);"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"     * Converts this jaxb-friendly adapted user object into the model\u0027s UserWithQuestionAnswer object."},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"    public UserWithQuestionAnswer toUserQuestionAnswerModelType() throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        if (!User.isValidUsername(username) || !User.isValidPassword(password)) {"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalValueException(User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        if (!UserWithQuestionAnswer.isValidQuestion(question)"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"                || !UserWithQuestionAnswer.isValidAnswer(answer)) {"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalValueException(UserWithQuestionAnswer.MESSAGE_QUESTION_ANSWER_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"        return new UserWithQuestionAnswer(username, password, question, answer);"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"    public boolean isUserWithQuestionAnswer() {"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"        return !(question \u003d\u003d null) \u0026\u0026 !(answer \u003d\u003d null);"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"            return true;"},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof XmlAdaptedUser)) {"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"        return username.equals(((XmlAdaptedUser) other).username)"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 password.equals(((XmlAdaptedUser) other).password);"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":116,"-":9}},{"path":"src/main/java/seedu/organizer/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":" * Contains utility methods for populating {@code Organizer} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static Task[] getSampleTasks() {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        return new Task[]{"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Learn PHP\"), new Priority(\"5\"), new Deadline(\"2018-04-30\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    new Description(\"Find a PHP tutorial and learn from it\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"), new User(\"admin\", \"admin\")),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Learn Java\"), new Priority(\"4\"), new Deadline(\"2018-07-07\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    new Description(\"Learn OOP\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                    getTagSet(\"classmates\"), new User(\"admin\", \"admin\")),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Interview preparation\"), new Priority(\"3\"), new Deadline(\"2018-04-03\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                    new Description(\"Prepare for MOH Interview\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\"), new User(\"admin\", \"admin\")),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Revision\"), new Priority(\"2\"), new Deadline(\"2018-03-27\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                    new Description(\"Revise Topic 3 for CS2103T\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\"), new User(\"admin\", \"admin\")),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Study\"), new Priority(\"1\"), new Deadline(\"2018-03-29\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    new Description(\"Study for CS2103T Exam\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\"), new User(\"admin\", \"admin\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Exam\"), new Priority(\"0\"), new Deadline(\"2018-05-11\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                        new Description(\"CS2103T Exam\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                        getTagSet(\"friends\"), new User(\"admin\", \"admin\"))"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static ReadOnlyOrganizer getSampleOrganizer() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"            Organizer sampleAb \u003d new Organizer();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            for (Task sampleTask : getSampleTasks()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                sampleAb.addTask(sampleTask);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate tasks\", e);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns a subtask set containing the list of strings given."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static List\u003cSubtask\u003e getSubtaskList(String... strings) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            subtasks.add(new Subtask(new Name(s), new Status(false)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return subtasks;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":79}},{"path":"src/main/java/seedu/organizer/model/user/exceptions/UserNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":" * Signals that an operation could not find the user"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"public class UserNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"    public UserNotFoundException() {"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"        super(\"User could not be found\");"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":2}},{"path":"src/main/java/seedu/organizer/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.JsonUserPrefsStorage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.OrganizerStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.Storage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.StorageManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.UserPrefsStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlOrganizerStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.Ui;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.UiManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Organizer ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        OrganizerStorage organizerStorage \u003d new XmlOrganizerStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        storage \u003d new StorageManager(organizerStorage, userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s organizer book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * The data from the sample organizer book will be used instead if {@code storage}\u0027s organizer book is not found,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * or an empty organizer book will be used instead if errors occur when reading {@code storage}\u0027s organizer book."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyOrganizer\u003e organizerOptional;"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        ReadOnlyOrganizer initialData;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            organizerOptional \u003d storage.readOrganizer();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            if (!organizerOptional.isPresent()) {"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Organizer\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            initialData \u003d organizerOptional.orElse(new Organizer());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Organizer\");"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"            initialData \u003d new Organizer();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Organizer\");"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"            initialData \u003d new Organizer();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":134,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":162,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Organizer\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":185,"author":{"gitID":"dominickenn"},"content":"        logger.info(\"Starting Organizer \" + MainApp.VERSION);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":11,"-":200}},{"path":"src/main/java/seedu/organizer/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateCompleted;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":" * JAXB-friendly version of the Task."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"public class XmlAdaptedTask {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String priority;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String deadline;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String dateadded;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private String datecompleted;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String description;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Boolean status;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private XmlAdaptedUser user;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedTask() {"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public XmlAdaptedTask(String name, String priority, String deadline, String dateadded, String datecompleted,"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                          String description, Boolean status, List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                          List\u003cXmlAdaptedSubtask\u003e subtasks, XmlAdaptedUser user) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.dateadded \u003d dateadded;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.datecompleted \u003d datecompleted;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (subtasks !\u003d null) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            this.subtasks \u003d new ArrayList\u003c\u003e(subtasks);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.user \u003d user;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        priority \u003d source.getPriority().value;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        deadline \u003d source.getDeadline().toString();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        dateadded \u003d source.getDateAdded().toString();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        datecompleted \u003d source.getDateCompleted().toString();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        description \u003d source.getDescription().value;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        status \u003d source.getStatus().value;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        subtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        for (Subtask subtask: source.getSubtasks()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            subtasks.add(new XmlAdaptedSubtask(subtask));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        user \u003d new XmlAdaptedUser(source.getUser());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        final List\u003cSubtask\u003e personSubtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        for (XmlAdaptedSubtask subtask : subtasks) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            personSubtasks.add(subtask.toModelType());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (this.user \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, User.class.getSimpleName()));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!User.isValidUsername(this.user.getUsername()) || !User.isValidPassword(this.user.getPassword())) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(User.MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        final User user \u003d new User(this.user.getUsername(), this.user.getPassword());"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (this.priority \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                                                Priority.class.getSimpleName()));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!Priority.isValidPriority(this.priority)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Priority priority \u003d new Priority(this.priority);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (this.deadline \u003d\u003d null) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                    ()));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (!Deadline.isValidDeadline(this.deadline)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final Deadline deadline \u003d new Deadline(this.deadline);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (this.dateadded \u003d\u003d null) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DateAdded.class.getSimpleName"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                    ()));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        if (!DateAdded.isValidDateAdded(this.deadline)) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(DateAdded.MESSAGE_DATEADDED_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        final DateAdded dateadded \u003d new DateAdded(this.dateadded);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (this.datecompleted \u003d\u003d null) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                    DateCompleted.class.getSimpleName()));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (!DateCompleted.isValidDateCompleted(this.deadline)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(DateCompleted.MESSAGE_DATECOMPLETED_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        final DateCompleted datecompleted \u003d new DateCompleted(this.datecompleted);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.status \u003d false;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        final List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e(personSubtasks);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return new Task(name, priority, deadline, dateadded, datecompleted, description, status, tags, subtasks, user);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherTask.name)"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(priority, otherTask.priority)"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(deadline, otherTask.deadline)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(dateadded, otherTask.dateadded)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(datecompleted, otherTask.datecompleted)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(description, otherTask.description)"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(status, otherTask.status)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(user, otherTask.user)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherTask.tagged);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":14,"-":201}},{"path":"src/main/java/seedu/organizer/model/user/exceptions/CurrentlyLoggedInException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":" * Signals that a user is currently logged in"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"public class CurrentlyLoggedInException extends Exception {"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"    public CurrentlyLoggedInException() {"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"        super(\"A user is currently logged in\");"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":2}},{"path":"src/main/java/seedu/organizer/model/user/exceptions/DuplicateUserException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user.exceptions;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":" * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"public class DuplicateUserException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"    public DuplicateUserException() {"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"        super(\"Operation would result in duplicate users\");"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":11,"-":2}},{"path":"src/main/java/seedu/organizer/model/user/User.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":" * Represents a User in the organizer."},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":" * Guarantees: immutable;"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":" * username is valid as declared in {@link #isValidUsername(String)}"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":" * password is valid as declared in {@link #isValidPassword(String)}"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public class User {"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USER_CONSTRAINTS \u003d \"Username and password should be alphanumeric\""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"                                                            + \" and must not contain spaces\";"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public final String username;"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    public final String password;"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     * Constructs a {@code User}."},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     * @param username A valid username."},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"     * @param password A valid password."},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public User(String username, String password) {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(username, password);"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        checkArgument(isValidUsername(username), MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        checkArgument(isValidPassword(password), MESSAGE_USER_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        this.username \u003d username;"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        this.password \u003d password;"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid username."},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    public static boolean isValidUsername(String test) {"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid password."},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof User // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.username.equals(((User) other).username)); // state check"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        return String.join(username, password).hashCode();"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"     * Format state as text for viewing."},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        return username;"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":65,"-":5}},{"path":"src/main/java/seedu/organizer/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.TaskByUserPredicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the organizer book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static User currentlyLoggedInUser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    private final Organizer organizer;"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"     * Initializes a ModelManager with the given organizer and userPrefs."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyOrganizer organizer, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireAllNonNull(organizer, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with organizer book: \" + organizer + \" and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.organizer \u003d new Organizer(organizer);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        currentlyLoggedInUser \u003d this.organizer.getCurrentLoggedInUser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.organizer.getTaskList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_NO_TASKS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        this(new Organizer(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(newData);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        return organizer;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void indicateOrganizerChanged() {"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        raise(new OrganizerChangedEvent(organizer));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public synchronized void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        organizer.removeTask(target);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public synchronized void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        organizer.addTask(task);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"    public static User getCurrentlyLoggedInUser() {"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        return currentlyLoggedInUser;"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"    public synchronized void addUser(User user) throws DuplicateUserException {"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"        organizer.addUser(user);"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"        indicateOrganizerChanged();"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"    public synchronized void loginUser(User user) throws UserNotFoundException, CurrentlyLoggedInException {"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        organizer.loginUser(user);"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"        currentlyLoggedInUser \u003d organizer.getCurrentLoggedInUser();"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"        indicateOrganizerChanged();"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"    public synchronized void logout() {"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"        organizer.logout();"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"        currentlyLoggedInUser \u003d organizer.getCurrentLoggedInUser();"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_NO_TASKS);"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"        indicateOrganizerChanged();"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"    public synchronized void addQuestionAnswerToUser(User toRemove, UserWithQuestionAnswer toAdd) {"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(toRemove, toAdd);"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"        organizer.updateUserToUserWithQuestionAnswer(toRemove, toAdd);"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        indicateOrganizerChanged();"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"    public synchronized void deleteCurrentUserTasks() {"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"        organizer.deleteUserTasks(getCurrentlyLoggedInUser());"},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"        indicateOrganizerChanged();"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"    public User getUserByUsername(String username) throws UserNotFoundException {"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(username);"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"        return organizer.getUserbyUsername(username);"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void updateTask(Task target, Task editedTask)"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        organizer.updateTask(target, editedTask);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        organizer.removeTag(tag);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":"     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"     * {@code organizer}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (getCurrentlyLoggedInUser() \u003d\u003d null) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            filteredTasks.setPredicate(PREDICATE_SHOW_NO_TASKS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            Predicate\u003cTask\u003e newPredicate \u003d predicate.and(new TaskByUserPredicate(getCurrentlyLoggedInUser()));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            filteredTasks.setPredicate(newPredicate);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":"        return organizer.equals(other.organizer)"},{"lineNumber":187,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":65,"-":125}},{"path":"src/main/java/seedu/organizer/model/user/UserWithQuestionAnswer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static com.google.common.base.Preconditions.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":" * A user class with a question-answer for password retrieval"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"public class UserWithQuestionAnswer extends User {"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_QUESTION_ANSWER_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"            \"Questions and answers can take any values, but cannot be blank\";"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"     * The first character must not be a whitespace, otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String QUESTION_VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public static final String ANSWER_VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    public final String question;"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public final String answer;"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     * Constructs a {@code UserWithQuestionAnswer}."},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"     * @param username A valid username."},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"     * @param password A valid password."},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public UserWithQuestionAnswer(String username, String password) {"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        super(username, password);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        question \u003d null;"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        answer \u003d null;"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"     * Constructs a {@code UserWithQuestionAnswer}."},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     * @param username A valid username."},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"     * @param password A valid password."},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"     * @param question A valid question."},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * @param answer A valid answer."},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    public UserWithQuestionAnswer(String username, String password, String question, String answer) {"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        super(username, password);"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(question, answer);"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        checkArgument(isValidQuestion(question), MESSAGE_QUESTION_ANSWER_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        checkArgument(isValidAnswer(answer), MESSAGE_QUESTION_ANSWER_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        this.question \u003d question;"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        this.answer \u003d answer;"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid question."},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"    public static boolean isValidQuestion(String test) {"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        return test.matches(QUESTION_VALIDATION_REGEX);"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid answer."},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"    public static boolean isValidAnswer(String test) {"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        return test.matches(ANSWER_VALIDATION_REGEX);"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":61,"-":5}},{"path":"src/main/java/seedu/organizer/model/task/DescriptionContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" * Tests that a {@code Task}\u0027s {@code Description} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public boolean test(Task task) {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription().value, keyword));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"}"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"//@@author"}],"authorContributionMap":{"guekling":25,"-":7}},{"path":"src/main/java/seedu/organizer/model/task/exceptions/TaskNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":" * Signals that the operation is unable to find the specified task."},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"public class TaskNotFoundException extends Exception {}"}],"authorContributionMap":{"dominickenn":5,"-":1}},{"path":"src/main/java/seedu/organizer/model/task/DeadlineContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" * Tests that a {@code Task}\u0027s {@code Deadline} matches any of the keywords given. Keywords given should in the"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":" * format of YYYY-MM-DD."},{"lineNumber":12,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"public class DeadlineContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    public DeadlineContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    public boolean test(Task task) {"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDeadline().toString(), keyword));"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"                || (other instanceof DeadlineContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.keywords.equals(((DeadlineContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":25,"-":7}},{"path":"src/main/java/seedu/organizer/model/task/exceptions/DuplicateTaskException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":" * Signals that the operation will result in duplicate Task objects."},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"public class DuplicateTaskException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"    public DuplicateTaskException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":5}},{"path":"src/main/java/seedu/organizer/model/task/Description.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * Represents a Task\u0027s description in the organizer book."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"public class Description {"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"            \"Task descriptions can take any values, and can be blank\";"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"     * The first character must not be a whitespace, otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \".*\";"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"     * Constructs an {@code Description}."},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"     * @param description A valid organizer."},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    public Description(String description) {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        requireNonNull(description);"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        this.value \u003d description;"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"     * Returns true if a given string is a valid task description."},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        return test.matches(DESCRIPTION_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":""},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.value.equals(((Description) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":""},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":52,"-":5}},{"path":"src/main/java/seedu/organizer/model/user/UniqueUserList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.user;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":" * A list of users that enforces no nulls and uniqueness between its elements."},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" *"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":" *"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":" * @see User#equals(Object)"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"public class UniqueUserList implements Iterable\u003cUser\u003e {"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    private final ObservableList\u003cUser\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    private User currentLoggedInUser \u003d null;"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"     * Constructs empty UserList."},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    public UniqueUserList() {}"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"     * Creates a UniqueUserList using given users."},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"     * Enforces no nulls."},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    public UniqueUserList(Set\u003cUser\u003e users) {"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(users);"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        internalList.addAll(users);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     * Sets currentLoggedInUser to user"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    public void setCurrentLoggedInUser(User userToLogIn) throws UserNotFoundException, CurrentlyLoggedInException {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(userToLogIn);"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        if (currentLoggedInUser !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"            throw new CurrentlyLoggedInException();"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        if (!internalList.contains(userToLogIn)) {"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"            throw new UserNotFoundException();"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        this.currentLoggedInUser \u003d userToLogIn;"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    public void setCurrentLoggedInUserToNull() {"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        currentLoggedInUser \u003d null;"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    public User getCurrentLoggedInUser() {"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        return currentLoggedInUser;"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"     * Returns all users in this list as a Set."},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"    public Set\u003cUser\u003e toSet() {"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"     * Replaces the Users in this list with those in the argument user list."},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"    public void setUsers(List\u003cUser\u003e users) {"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(users);"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        internalList.setAll(users);"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"     * Ensures every user in the argument list exists in this object."},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"    public void mergeFrom(UniqueUserList from) {"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        final Set\u003cUser\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"        from.internalList.stream()"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"                .filter(user -\u003e !alreadyInside.contains(user))"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"                .forEach(internalList::add);"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        currentLoggedInUser \u003d from.currentLoggedInUser;"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"     * Returns true if the list contains an equivalent User as the given argument."},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"    public boolean contains(User toCheck) {"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(toCheck);"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"     * Adds a User to the list."},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateUserException if the User to add is a duplicate of an existing User in the list."},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"    public void add(User toAdd) throws DuplicateUserException {"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(toAdd);"},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"        if (contains(toAdd)) {"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateUserException();"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"        internalList.add(toAdd);"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"     * Replaces a user with another user in internalList"},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"    public void updateUserToUserWithQuestionAnswer("},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"            User toRemove, UserWithQuestionAnswer toAdd) throws UserNotFoundException {"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(toRemove, toAdd);"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        if (!internalList.contains(toRemove)) {"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"            throw new UserNotFoundException();"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"        internalList.remove(toRemove);"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"        internalList.add(toAdd);"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"    public User getUserByUsername(String username) throws UserNotFoundException {"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(username);"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        User userWithUsername \u003d null;"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"        for (User u : internalList) {"},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"            if (u.username.equals(username)) {"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"                userWithUsername \u003d u;"},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"            }"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"        if (userWithUsername \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitID":"dominickenn"},"content":"            throw new UserNotFoundException();"},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"        return userWithUsername;"},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"    public Iterator\u003cUser\u003e iterator() {"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"        return internalList.iterator();"},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"    public ObservableList\u003cUser\u003e asObservableList() {"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof UniqueUserList // instanceof handles nulls"},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueUserList) other).internalList));"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":176,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"dominickenn"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":178,"author":{"gitID":"dominickenn"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":179,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"dominickenn"},"content":"    public boolean equalsOrderInsensitive(UniqueUserList other) {"},{"lineNumber":181,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":182,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":183,"author":{"gitID":"dominickenn"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":184,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"dominickenn"},"content":"    public int hashCode() {"},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":189,"author":{"gitID":"dominickenn"},"content":"        return internalList.hashCode();"},{"lineNumber":190,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":192,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":176,"-":16}},{"path":"src/main/java/seedu/organizer/model/task/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.ModelManager.getCurrentlyLoggedInUser;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.UniqueSubtaskList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Represents a Task in the organizer book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"public class Task {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Priority priority;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Deadline deadline;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final DateAdded dateAdded;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DateCompleted dateCompleted;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Description description;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Status status;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final User user;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueSubtaskList subtasks;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Every field must be present and not null except status and dateCompleted"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Task(Name name, Priority priority, Deadline deadline, Description description, Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, priority, deadline, description, tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d new DateAdded();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.dateCompleted \u003d new DateCompleted(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.status \u003d null;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.user \u003d getCurrentlyLoggedInUser();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.subtasks \u003d new UniqueSubtaskList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Every field must be present and not null except status and dateCompleted"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Task(Name name, Priority priority, Deadline deadline, Description description, Set\u003cTag\u003e tags, User user) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, priority, deadline, description, tags, user);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d new DateAdded();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.dateCompleted \u003d new DateCompleted(false);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.status \u003d null;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.user \u003d user;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.subtasks \u003d new UniqueSubtaskList();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Every field must be present and not null except status"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public Task(Name name, Priority priority, Deadline deadline, DateAdded dateAdded,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                DateCompleted dateCompleted, Description description, Set\u003cTag\u003e tags, User user) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, priority, deadline, description, tags, user);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d dateAdded;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.dateCompleted \u003d dateCompleted;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.status \u003d null;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.user \u003d user;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.subtasks \u003d new UniqueSubtaskList();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Another constructor with custom status and subtask"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public Task(Name name, Priority priority, Deadline deadline, DateAdded dateAdded, DateCompleted dateCompleted,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                Description description, Status status, Set\u003cTag\u003e tags, List\u003cSubtask\u003e subtasks, User user) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, priority, deadline, description, tags);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d dateAdded;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.dateCompleted \u003d dateCompleted;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        this.user \u003d user;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        this.subtasks \u003d new UniqueSubtaskList(subtasks);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public Priority getPriority() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return priority;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public Deadline getDeadline() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return deadline;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public DateAdded getDateAdded() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return dateAdded;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public DateCompleted getDateCompleted() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (dateCompleted \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new DateCompleted(false);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return dateCompleted;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public Description getDescription() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return description;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public Status getStatus() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (status \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return new Status(false);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return status;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public User getUser() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return user;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public List\u003cSubtask\u003e getSubtasks() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableList(subtasks.toList());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"        return otherTask.getName().equals(this.getName())"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherTask.getPriority().equals(this.getPriority())"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherTask.getDeadline().equals(this.getDeadline())"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherTask.getDescription().equals(this.getDescription())"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherTask.getUser().equals(this.getUser());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return Objects.hash(name, priority, deadline, description, tags, status, user);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                .append(\" Priority: \")"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                .append(getPriority())"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                .append(\" Deadline: \")"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                .append(getDeadline())"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                .append(\" Status: \")"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                .append(getStatus())"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                .append(\" Description: \")"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                .append(getDescription())"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        builder.append(\" User : \")"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                .append(getUser());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":204,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"dominickenn"},"content":"     * @return a Task comparator based on priority"},{"lineNumber":206,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"dominickenn"},"content":"    public static Comparator\u003cTask\u003e priorityComparator() {"},{"lineNumber":208,"author":{"gitID":"dominickenn"},"content":"        return new Comparator\u003cTask\u003e() {"},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"            @Override"},{"lineNumber":210,"author":{"gitID":"dominickenn"},"content":"            public int compare(Task task1, Task task2) {"},{"lineNumber":211,"author":{"gitID":"dominickenn"},"content":"                return (task2.getPriority().value)"},{"lineNumber":212,"author":{"gitID":"dominickenn"},"content":"                        .compareTo(task1.getPriority().value);"},{"lineNumber":213,"author":{"gitID":"dominickenn"},"content":"            }"},{"lineNumber":214,"author":{"gitID":"dominickenn"},"content":"        };"},{"lineNumber":215,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":18,"-":198}},{"path":"src/main/java/seedu/organizer/model/task/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Task\u0027s name in the organizer book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"            \"Task names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the organizer must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid task name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":57}},{"path":"src/main/java/seedu/organizer/model/Organizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.UniqueTagList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.UniqueTaskList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UniqueUserList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Wraps all data at the organizer-book level"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"public class Organizer implements ReadOnlyOrganizer {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    private final UniqueTagList tags;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueUserList users;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        users \u003d new UniqueUserList();"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Organizer() {}"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates an Organizer using the Tasks and Tags in the {@code toBeCopied}"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"    public Organizer(ReadOnlyOrganizer toBeCopied) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"    public void setUsers(List\u003cUser\u003e users) {"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        this.users.setUsers(users);"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"     * Resets the existing data of this {@code Organizer} with {@code newData}."},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"    public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setUsers(newData.getUserList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e syncedTaskList \u003d newData.getTaskList().stream()"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            setTasks(syncedTaskList);"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PrioriTask should not have duplicate tasks\");"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"    //// user\u003dlevel operations"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"     * Adds a user to the organizer"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"    public void addUser(User user) throws DuplicateUserException {"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(user);"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"        users.add(user);"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"     * Sets currentLoggedInUser of the organizer"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"    public void loginUser(User user) throws UserNotFoundException, CurrentlyLoggedInException {"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(user);"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"        users.setCurrentLoggedInUser(user);"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"     * Replaces a user with another user in users"},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"    public void updateUserToUserWithQuestionAnswer("},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"            User toRemove, UserWithQuestionAnswer toAdd) {"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(toRemove, toAdd);"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"            users.updateUserToUserWithQuestionAnswer(toRemove, toAdd);"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"        } catch (UserNotFoundException e) {"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"User does not exist\");"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"    public void logout() {"},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"        users.setCurrentLoggedInUserToNull();"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"    public User getCurrentLoggedInUser() {"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"        return users.getCurrentLoggedInUser();"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"     * Deletes all tasks by {@code user} from tasks"},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"    public void deleteUserTasks(User user) {"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(user);"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"        tasks.deleteUserTasks(user);"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"    public User getUserbyUsername(String username) throws UserNotFoundException {"},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(username);"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"        return users.getUserByUsername(username);"},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"dominickenn"},"content":"    //// task-level operations"},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Adds a task to the organizer book."},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":"     * Also checks the new task\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"     * and updates the Tag objects in the task to point to those in {@link #tags}."},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if an equivalent task already exists."},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void addTask(Task p) throws DuplicateTaskException {"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d syncWithMasterTagList(p);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any task"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"        // in the task list."},{"lineNumber":163,"author":{"gitID":"-"},"content":"        tasks.add(task);"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"     * Replaces the given task {@code target} in the list with {@code editedTask}."},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"     * {@code Organizer}\u0027s tag list will be updated with the tags of {@code editedTask}."},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"     *                                another existing task in the list."},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"     * @see #syncWithMasterTagList(Task)"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void updateTask(Task target, Task editedTask)"},{"lineNumber":176,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":177,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(editedTask);"},{"lineNumber":178,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":179,"author":{"gitID":"dominickenn"},"content":"        Task syncedEditedTask \u003d syncWithMasterTagList(editedTask);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":181,"author":{"gitID":"dominickenn"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any task"},{"lineNumber":182,"author":{"gitID":"dominickenn"},"content":"        // in the task list."},{"lineNumber":183,"author":{"gitID":"-"},"content":"        tasks.setTask(target, syncedEditedTask);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        removeUnusedTags();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Task} in this {@code Organizer}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void removeUnusedTags() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagsInTasks \u003d tasks.asObservableList().stream()"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                .map(Task::getTags)"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                .flatMap(Set::stream)"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        tags.setTags(tagsInTasks);"},{"lineNumber":196,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":198,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"dominickenn"},"content":"     * Updates the master tag list to include tags in {@code task} that are not in the list."},{"lineNumber":200,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":201,"author":{"gitID":"dominickenn"},"content":"     * @return a copy of this {@code task} such that every tag in this task points to a Tag object in the master"},{"lineNumber":202,"author":{"gitID":"dominickenn"},"content":"     * list."},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"dominickenn"},"content":"    private Task syncWithMasterTagList(Task task) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        final UniqueTagList taskTags \u003d new UniqueTagList(task.getTags());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        tags.mergeFrom(taskTags);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"        // used for checking task tag references"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"dominickenn"},"content":"        // Rebuild the list of task tags to point to the relevant tags in the master tag list."},{"lineNumber":214,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        taskTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":216,"author":{"gitID":"dominickenn"},"content":"        return new Task("},{"lineNumber":217,"author":{"gitID":"-"},"content":"                task.getName(), task.getPriority(), task.getDeadline(), task.getDateAdded(),"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                task.getDateCompleted(), task.getDescription(), task.getStatus(), correctTagReferences,"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                task.getSubtasks(), task.getUser());"},{"lineNumber":220,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":222,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"dominickenn"},"content":"     * Removes {@code key} from this {@code Organizer}."},{"lineNumber":224,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":225,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if the {@code key} is not in this {@code Organizer}."},{"lineNumber":226,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public boolean removeTask(Task key) throws TaskNotFoundException {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        if (tasks.remove(key)) {"},{"lineNumber":229,"author":{"gitID":"dominickenn"},"content":"            return true;"},{"lineNumber":230,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":231,"author":{"gitID":"dominickenn"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from {@code task} in this {@code Organizer}."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @throws TaskNotFoundException if the {@code task} is not in this {@code Organizer}."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void removeTagFromTask(Tag tag, Task task) throws TaskNotFoundException {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(task.getTags());"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        Task newTask \u003d"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                new Task(task.getName(), task.getPriority(), task.getDeadline(),"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                        task.getDateAdded(), task.getDateCompleted(), task.getDescription(), newTags, task.getUser());"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            updateTask(task, newTask);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Modifying a task\u0027s tags only should not result in a duplicate. \""},{"lineNumber":260,"author":{"gitID":"-"},"content":"                    + \"See Task#equals(Object).\");"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from all tasks in this {@code Organizer}."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            for (Task task : tasks) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                removeTagFromTask(tag, task);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Impossible: original task is obtained from PrioriTask.\");"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"dominickenn"},"content":"    //// util methods"},{"lineNumber":279,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":280,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"dominickenn"},"content":"    public String toString() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        return tasks.asObservableList().size() + \" tasks, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":283,"author":{"gitID":"dominickenn"},"content":"        // TODO: refine later"},{"lineNumber":284,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":286,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        return tasks.asObservableList();"},{"lineNumber":289,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTask\u003e getCurrentUserTaskList() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        return tasks.userTasksAsObservableList(getCurrentLoggedInUser());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    public ObservableList\u003cUser\u003e getUserList() {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        return users.asObservableList();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":309,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof Organizer // instanceof handles nulls"},{"lineNumber":310,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tasks.equals(((Organizer) other).tasks)"},{"lineNumber":311,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((Organizer) other).tags));"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        return Objects.hash(tasks, tags);"},{"lineNumber":318,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":143,"-":176}},{"path":"src/main/java/seedu/organizer/model/task/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":" * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public boolean test(Task task) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":27}},{"path":"src/main/java/seedu/organizer/model/task/Deadline.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" * Represents a Task\u0027s deadline in the organizer book."},{"lineNumber":11,"author":{"gitID":"guekling"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"public class Deadline {"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_DEADLINE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        \"Task deadlines should be in the format YYYY-MM-DD, and it should not be blank\";"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    /*"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"     * The first character must not be a whitespace, otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"     * Format of string is YYYY-MM-DD."},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public static final String DEADLINE_VALIDATION_REGEX \u003d \"\\\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\\d|3[01])\";"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":""},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    public final LocalDate date;"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"     * Constructs an {@code Deadline}."},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"     * @param deadline A valid deadline."},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    public Deadline(String deadline) {"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        requireNonNull(deadline);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        checkArgument(isValidDeadline(deadline), MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        this.date \u003d LocalDate.parse(deadline);"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":""},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"     * Returns true if a given string is a valid task deadline."},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"    public static boolean isValidDeadline(String test) {"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        return test.matches(\"\") || test.matches(DEADLINE_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":""},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        return date.toString();"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":""},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"                || (other instanceof Deadline // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.date.equals(((Deadline) other).date)); // state check"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":""},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        return date.hashCode();"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":53,"-":7}},{"path":"src/main/java/seedu/organizer/model/task/MultipleFieldsContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":" * Tests that a {@code Task}\u0027s {@code Name}, {@code Description} and {@code Deadline} matches any of the keywords given."},{"lineNumber":13,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"public class MultipleFieldsContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e nameKeywords;"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e descriptionKeywords;"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e deadlineKeywords;"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    public MultipleFieldsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        this.nameKeywords \u003d keywords;"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        this.descriptionKeywords \u003d keywords;"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        this.deadlineKeywords \u003d keywords;"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"        this.keywords \u003d concatKeywords();"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"     * Concatenate the list of keywords from {@code Name}, {@code Description} and {@code Deadline}."},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"     * @return A list of concatenated String containing the keywords from {@code Name}, {@code Description} and"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"     * {@code Deadline}."},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    private List\u003cString\u003e concatKeywords() {"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        Stream\u003cString\u003e nameDescriptionStreams \u003d Stream.concat(nameKeywords.stream(), descriptionKeywords.stream());"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e concatenatedLists \u003d Stream.concat(nameDescriptionStreams, deadlineKeywords.stream()).collect"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"                (Collectors.toList());"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        return concatenatedLists;"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    public boolean test(Task task) {"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"        return nameKeywords.stream().anyMatch(nameKeyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName,"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"                nameKeyword))"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"                || descriptionKeywords.stream().anyMatch(descriptionKeyword -\u003e StringUtil.containsWordIgnoreCase("},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"                    task.getDescription().value, descriptionKeyword))"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"                || deadlineKeywords.stream().anyMatch(deadlineKeyword -\u003e StringUtil.containsWordIgnoreCase("},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"                task.getDeadline().toString(), deadlineKeyword));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"                || (other instanceof MultipleFieldsContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.keywords.equals(((MultipleFieldsContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":49,"-":9}},{"path":"src/main/java/seedu/organizer/model/task/UniqueTaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.Duration;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" *"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":" *"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":" * @see Task#equals(Object)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"     * Adds a task to the list."},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * Updates priority level if task is not completed"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if the task to add is a duplicate of an existing task in the list."},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(toAdd);"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        if (contains(toAdd)) {"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        toAdd \u003d updatePriority(toAdd);"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        internalList.add(toAdd);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        sortTasks();"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to another existing task in the list."},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setTask(Task target, Task editedTask)"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(editedTask);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        if (!target.equals(editedTask) \u0026\u0026 internalList.contains(editedTask)) {"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        sortTasks();"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if no such task could be found in the list."},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"    public boolean remove(Task toRemove) throws TaskNotFoundException {"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(toRemove);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!taskFoundAndDeleted) {"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return taskFoundAndDeleted;"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"     * Deletes all tasks by {@code user} from internalList"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"    public void deleteUserTasks(User user) {"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(user);"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"        FilteredList\u003cTask\u003e tasksToDelete \u003d new FilteredList\u003c\u003e(internalList);"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        tasksToDelete.setPredicate(new TaskByUserPredicate(user));"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"        internalList.removeAll(tasksToDelete);"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"        final UniqueTaskList replacement \u003d new UniqueTaskList();"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"        for (final Task task : tasks) {"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"            replacement.add(task);"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        setTasks(replacement);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"    public ObservableList\u003cTask\u003e asObservableList() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"     * Returns a list of tasks by a user as an unmodifiable {@code ObservableList}"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"    public ObservableList\u003cTask\u003e userTasksAsObservableList(User user) {"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        FilteredList\u003cTask\u003e filteredList \u003d new FilteredList\u003c\u003e(internalList);"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"        filteredList.setPredicate(new TaskByUserPredicate(user));"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"        return FXCollections.unmodifiableObservableList(filteredList);"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"     * Sorts all tasks in uniqueTaskList according to priority"},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"    private void sortTasks() {"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"        internalList.sort(Task.priorityComparator());"},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"     * Updates task with updated priority level with respect to deadline"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"     * Priority level remains the same if task has just been created"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"     * Priority level is at maximum if current date is the deadline"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"    public Task updatePriority(Task task) {"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"        Task newTask;"},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"        Priority newPriority;"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"        LocalDate dateAdded \u003d task.getDateAdded().date;"},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":"        LocalDate deadline \u003d task.getDeadline().date;"},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"        Priority curPriority \u003d task.getPriority();"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":"        int priorityDifferenceFromMax \u003d Integer.parseInt(Priority.HIGHEST_SETTABLE_PRIORITY_LEVEL)"},{"lineNumber":176,"author":{"gitID":"dominickenn"},"content":"                                        - Integer.parseInt(curPriority.value);"},{"lineNumber":177,"author":{"gitID":"dominickenn"},"content":"        long dayDifferenceCurrentToDeadline \u003d Duration.between(currentDate.atStartOfDay(),"},{"lineNumber":178,"author":{"gitID":"dominickenn"},"content":"                                                            deadline.atStartOfDay()).toDays();"},{"lineNumber":179,"author":{"gitID":"dominickenn"},"content":"        long dayDifferenceAddedToDeadline \u003d Duration.between(dateAdded.atStartOfDay(),"},{"lineNumber":180,"author":{"gitID":"dominickenn"},"content":"                                                            deadline.atStartOfDay()).toDays();"},{"lineNumber":181,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":182,"author":{"gitID":"dominickenn"},"content":"        if (dateAdded.isEqual(LocalDate.now())) {"},{"lineNumber":183,"author":{"gitID":"dominickenn"},"content":"            newTask \u003d new Task(task.getName(), task.getPriority(), task.getDeadline(), task.getDateAdded(),"},{"lineNumber":184,"author":{"gitID":"dominickenn"},"content":"                    task.getDateCompleted(), task.getDescription(), task.getStatus(), task.getTags(),"},{"lineNumber":185,"author":{"gitID":"dominickenn"},"content":"                    task.getSubtasks(), task.getUser());"},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":"        } else if (currentDate.isBefore(deadline)) {"},{"lineNumber":187,"author":{"gitID":"dominickenn"},"content":"            newPriority \u003d calculateNewPriority(curPriority,"},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":"                    priorityDifferenceFromMax, dayDifferenceCurrentToDeadline, dayDifferenceAddedToDeadline);"},{"lineNumber":189,"author":{"gitID":"dominickenn"},"content":"            newTask \u003d new Task(task.getName(), newPriority, task.getDeadline(), task.getDateAdded(),"},{"lineNumber":190,"author":{"gitID":"dominickenn"},"content":"                    task.getDateCompleted(), task.getDescription(), task.getStatus(), task.getTags(),"},{"lineNumber":191,"author":{"gitID":"dominickenn"},"content":"                    task.getSubtasks(), task.getUser());"},{"lineNumber":192,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":193,"author":{"gitID":"dominickenn"},"content":"            newPriority \u003d new Priority(Priority.HIGHEST_SETTABLE_PRIORITY_LEVEL);"},{"lineNumber":194,"author":{"gitID":"dominickenn"},"content":"            newTask \u003d new Task(task.getName(), newPriority, task.getDeadline(), task.getDateAdded(),"},{"lineNumber":195,"author":{"gitID":"dominickenn"},"content":"                    task.getDateCompleted(), task.getDescription(), task.getStatus(), task.getTags(),"},{"lineNumber":196,"author":{"gitID":"dominickenn"},"content":"                    task.getSubtasks(), task.getUser());"},{"lineNumber":197,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":199,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(newTask);"},{"lineNumber":200,"author":{"gitID":"dominickenn"},"content":"        return newTask;"},{"lineNumber":201,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"dominickenn"},"content":"     * Calculate a new priority level for updatePriority method"},{"lineNumber":205,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"dominickenn"},"content":"    private Priority calculateNewPriority(Priority curPriority, int priorityDifferenceFromMax,"},{"lineNumber":207,"author":{"gitID":"dominickenn"},"content":"                                          long dayDifferenceCurrentToDeadline, long dayDifferenceAddedToDeadline) {"},{"lineNumber":208,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(curPriority, priorityDifferenceFromMax,"},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"                dayDifferenceCurrentToDeadline, dayDifferenceAddedToDeadline);"},{"lineNumber":210,"author":{"gitID":"dominickenn"},"content":"        Priority newPriority;"},{"lineNumber":211,"author":{"gitID":"dominickenn"},"content":"        int priorityToIncrease \u003d (int) (priorityDifferenceFromMax"},{"lineNumber":212,"author":{"gitID":"dominickenn"},"content":"                * ((double) (dayDifferenceAddedToDeadline - dayDifferenceCurrentToDeadline)"},{"lineNumber":213,"author":{"gitID":"dominickenn"},"content":"                / (double) dayDifferenceAddedToDeadline));"},{"lineNumber":214,"author":{"gitID":"dominickenn"},"content":"        newPriority \u003d new Priority(String.valueOf(Integer.parseInt(curPriority.value) + priorityToIncrease));"},{"lineNumber":215,"author":{"gitID":"dominickenn"},"content":"        return newPriority;"},{"lineNumber":216,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":218,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":219,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":159,"-":60}},{"path":"src/main/java/seedu/organizer/model/ReadOnlyOrganizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an organizer book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"public interface ReadOnlyOrganizer {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the current user\u0027s task list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTask\u003e getCurrentUserTaskList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the users list."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate users."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    ObservableList\u003cUser\u003e getUserList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":36}},{"path":"src/main/java/seedu/organizer/model/task/TaskByUserPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":" * Tests that a {@code Task}\u0027s {@code User} matches the given user."},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"public class TaskByUserPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"    private final User user;"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public TaskByUserPredicate(User user) {"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"        this.user \u003d user;"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public boolean test(Task task) {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"        return task.getUser().equals(user);"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof TaskByUserPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.user.equals(((TaskByUserPredicate) other).user)); // state check"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":24,"-":6}},{"path":"src/main/java/seedu/organizer/model/task/DateAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":" * Represents a Task\u0027s dateAdded in the organizer book."},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public class DateAdded {"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_DATEADDED_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"            \"Dates should be in the format YYYY-MM-DD, and it should not be blank\";"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    /*"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"     * The first character must not be a whitespace, otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"     * Format of string is YYYY-MM-DD."},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public static final String DATEADDED_VALIDATION_REGEX \u003d \"\\\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\\d|3[01])\";"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    public final LocalDate date;"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"     * Constructs an {@code DateAdded}."},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"     * @param dateadded A valid date."},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    public DateAdded(String dateadded) {"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(dateadded);"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        checkArgument(isValidDateAdded(dateadded), MESSAGE_DATEADDED_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        //temporary fix for xml file bug due to PrioriTask\u0027s dependence on the current date"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        if (dateadded.equals(\"current_date\")) {"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"            this.date \u003d LocalDate.now();"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            //actual code that is run when tests are not running"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"            this.date \u003d LocalDate.parse(dateadded);"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     * Constructs a DateAdded based on the current date"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public DateAdded() {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(currentDate);"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        this.date \u003d currentDate;"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid task deadline."},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    public static boolean isValidDateAdded(String test) {"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        return test.matches(\"current_date\") || test.matches(DATEADDED_VALIDATION_REGEX);"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        return date.toString();"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof Deadline // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.date.equals(((Deadline) other).date)); // state check"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        return date.hashCode();"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":68,"-":7}},{"path":"src/main/java/seedu/organizer/model/task/Priority.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":" * Represents a Task\u0027s priority level in the organizer."},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":" * Lowest Settable Priority : 0"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":" * Highest Settable Priority : 9"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public class Priority {"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"            \"Priority numbers can only be 0 to 9, 0 being the lowest priority, and 9 being the highest priority\";"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public static final String PRIORITY_VALIDATION_REGEX \u003d \"\\\\d{1}\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String LOWEST_PRIORITY_LEVEL \u003d \"0\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public static final String HIGHEST_SETTABLE_PRIORITY_LEVEL \u003d \"9\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     * Constructs a {@code Priority}."},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     * @param priority A valid priority level."},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public Priority(String priority) {"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(priority);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        this.value \u003d priority;"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid task priority number."},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    public static boolean isValidPriority(String test) {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        return test.matches(PRIORITY_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        return value;"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof Priority // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.value.equals(((Priority) other).value)); // state check"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":52,"-":5}},{"path":"src/main/java/seedu/organizer/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.User;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.UserWithQuestionAnswer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.CurrentlyLoggedInException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.DuplicateUserException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.user.exceptions.UserNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to false */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_NO_TASKS \u003d unused -\u003e false;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    void resetData(ReadOnlyOrganizer newData);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    /** Returns the Organizer */"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    ReadOnlyOrganizer getOrganizer();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    /** Deletes the given task. */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void deleteTask(Task target) throws TaskNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"    /** Adds the given task */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void addTask(Task task) throws DuplicateTaskException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Adds a user */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void addUser(User user) throws DuplicateUserException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Login a user */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void loginUser(User user) throws UserNotFoundException, CurrentlyLoggedInException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Logout from organizer */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void logout();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Deletes all current user tasks */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void deleteCurrentUserTasks();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /** Updates a User with QuestionAnswer */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    void addQuestionAnswerToUser(User toRemove, UserWithQuestionAnswer toAdd);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns a user with the {@code username} */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    User getUserByUsername(String username) throws UserNotFoundException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"     * Replaces the given task {@code target} with {@code editedTask}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"     *      another existing task in the list."},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    void updateTask(Task target, Task editedTask)"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"    /** Returns an unmodifiable view of the filtered task list */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /** Removes the given {@code tag} from all {@code Task}s. */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":12,"-":65}},{"path":"src/main/java/seedu/organizer/model/subtask/UniqueSubtaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.subtask;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DuplicateDataException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of subtasks that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Subtask#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniqueSubtaskList implements Iterable\u003cSubtask\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cSubtask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Constructs empty SubtaskList."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public UniqueSubtaskList() {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Creates a UniqueSubtaskList using given subtasks."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public UniqueSubtaskList(List\u003cSubtask\u003e subtasks) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireAllNonNull(subtasks);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        internalList.addAll(subtasks);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns all subtasks in this list as a Set."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public List\u003cSubtask\u003e toList() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(internalList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Replaces the Subtasks in this list with those in the argument Subtask list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setSubtasks(List\u003cSubtask\u003e subtasks) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireAllNonNull(subtasks);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        internalList.setAll(subtasks);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Subtask as the given argument."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean contains(Subtask toCheck) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Adds a Subtask to the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws DuplicateSubtaskException if the Subtask to add is a duplicate of an existing Subtask in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void add(Subtask toAdd) throws DuplicateSubtaskException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new DuplicateSubtaskException();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public Iterator\u003cSubtask\u003e iterator() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public ObservableList\u003cSubtask\u003e asObservableList() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueSubtaskList // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueSubtaskList) other).internalList));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueSubtaskList other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static class DuplicateSubtaskException extends DuplicateDataException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        protected DuplicateSubtaskException() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate subtasks\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":131}}]
