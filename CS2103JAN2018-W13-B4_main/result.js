var resultJson = [{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"dominickenn"},"content":"\u003d PrioriTask"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":"https://travis-ci.org/CS2103JAN2018-W13-B4/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/guekling/main[image:https://ci.appveyor.com/api/projects/status/84nh61dlot5vlxpr?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W13-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W13-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"PrioriTask is a desktop Task Management application."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"This application\u0027s main aim is to help busy university students keep track of their many tasks and priorities. This application is most suitable for students who:"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* have an endless number of tasks to keep track of"},{"lineNumber":21,"author":{"gitID":"-"},"content":"* are unable to monitor their tasks and their levels of importance"},{"lineNumber":22,"author":{"gitID":"-"},"content":"* prefer to use a desktop application"},{"lineNumber":23,"author":{"gitID":"-"},"content":"* prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Is PrioriTask the application for you? Get started by reading the"},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003c\u003cUserGuide#, user guide\u003e\u003e and \u003c\u003cDeveloperGuide#, developer guide\u003e\u003e."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"* This application is based on the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by _https://github.com/se-edu/[SE-EDU] initiative_."},{"lineNumber":38,"author":{"gitID":"-"},"content":"* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":39,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":40,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"dominickenn":2,"-":40}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d PrioriTask - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"PrioriTask is for those who *prefer to use a desktop application for keeping track of their tasks and priorities*. More importantly, PrioriTask is *optimized for those who prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). If you can type fast, PrioriTask can get your tasks and priorities organised faster than traditional GUI apps. Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  [.line-through]#Download the latest `addressbook.jar` link:{repoURL}/releases[here].# _{ to be edited accordingly soon ... }_"},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your PrioriTask."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* `list` : lists all tasks"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* `add n/CS2103T Developer Guide p/10 d/2018-03-02` : adds a task named `CS2103T Developer Guide` to the PrioriTask."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* `delete 3` : deletes the 3rd task shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* `exit` : exits the application"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Parameters*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* `NAME`"},{"lineNumber":54,"author":{"gitID":"-"},"content":"* `PRIORITY LEVEL`"},{"lineNumber":55,"author":{"gitID":"-"},"content":"** A task can have a priority level ranging from 0 (lowest) to 9 (highest)."},{"lineNumber":56,"author":{"gitID":"-"},"content":"** Setting a priority level is optional. PrioriTask will automatically set a taskâ€™s priority level to its default level (0) if User does not add one."},{"lineNumber":57,"author":{"gitID":"-"},"content":"** Priority levels are automatically updated as the deadline approaches."},{"lineNumber":58,"author":{"gitID":"-"},"content":"** If a task is still uncompleted after the deadline has passed, priority level will be updated to it\u0027s maximum level : 9."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* `DEADLINE`"},{"lineNumber":60,"author":{"gitID":"-"},"content":"** A task must have a deadline in the format of YYYY-MM-DD."},{"lineNumber":61,"author":{"gitID":"-"},"content":"* `DESCRIPTION`"},{"lineNumber":62,"author":{"gitID":"-"},"content":"** A task can have a description that takes in any value (i.e. alphabet, numbers, special symbols)."},{"lineNumber":63,"author":{"gitID":"-"},"content":"** Having a task description is optional."},{"lineNumber":64,"author":{"gitID":"-"},"content":"* `STATUS`"},{"lineNumber":65,"author":{"gitID":"-"},"content":"** A task can be in one of two states, \"Done\" or \"Not Done\"."},{"lineNumber":66,"author":{"gitID":"-"},"content":"** By default, every new task is marked as \"Not Done\"."},{"lineNumber":67,"author":{"gitID":"-"},"content":"* `TAG`"},{"lineNumber":68,"author":{"gitID":"-"},"content":"** A task can have any number of tags (including 0)."},{"lineNumber":69,"author":{"gitID":"-"},"content":"* `SUBTASK`"},{"lineNumber":70,"author":{"gitID":"-"},"content":"** A task can have any number of subtasks (including 0)."},{"lineNumber":71,"author":{"gitID":"-"},"content":"** A subtask has these parameters:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"*** `NAME`"},{"lineNumber":73,"author":{"gitID":"-"},"content":"*** `STATUS`"},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":77,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/CS2103T Developer Guide`."},{"lineNumber":80,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/CS2103T Developer Guide t/CS2103` or as `n/CS2103T Developer Guide`."},{"lineNumber":81,"author":{"gitID":"-"},"content":"* Items with `â€¦`â€‹ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/CS2103`, `t/CS2103 t/CS2101` etc."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PRIORITY_LEVEL`, `p/PRIORITY_LEVEL n/NAME` is also acceptable."},{"lineNumber":83,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Adding a task: `add` or `a`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"Adds a task to the PrioriTask +"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Format: `add n/NAME [p/PRIORITY_LEVEL] d/DEADLINE [des/DESCRIPTION] [t/TAG]â€¦â€‹`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"* `add n/CS2103T Developer Guide p/9 d/2018-03-02 des/Write Introduction`"},{"lineNumber":97,"author":{"gitID":"-"},"content":"* `add n/CS2101 Script p/8 d/2018-03-05 des/Script should be 500 words long t/CS2101`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Listing all tasks : `list` or `l`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Shows a list of all tasks in the PrioriTask. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"****"},{"lineNumber":106,"author":{"gitID":"-"},"content":"* _[Coming in v2.0]_ Shows a list of all tasks (regardless of status), all completed tasks, or all uncompleted tasks."},{"lineNumber":107,"author":{"gitID":"-"},"content":"****"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Editing a task : `edit` or `e`"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"Edits an existing task in the PrioriTask. +"},{"lineNumber":112,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PRIORITY_LEVEL] [d/DEADLINE] [des/DESCRIPTION] [t/TAG]â€¦â€‹`"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"****"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* Edits the task at the specified `INDEX`. The index refers to the index number shown in the last task listing. The index *must be a positive integer* (i.e. 1, 2, 3, ...)."},{"lineNumber":116,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":117,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":118,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the task will be removed (i.e adding of tags is not cumulative)."},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"* You can remove all the task\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":120,"author":{"gitID":"-"},"content":"****"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* `edit 1 p/9 d/2018-12-30` +"},{"lineNumber":125,"author":{"gitID":"-"},"content":"Edits the priority level and deadline of the 1st task to be `9` and `2018-12-30` respectively."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* `edit 2 n/CS2101 Final Assignment t/` +"},{"lineNumber":127,"author":{"gitID":"-"},"content":"Edits the name of the 2nd task to be `CS2101 Final Assignment` and clears all existing tags."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a subtask to a task : `adds` or `as`"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"Add a subtask to an existing task. +"},{"lineNumber":132,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME]`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"****"},{"lineNumber":135,"author":{"gitID":"-"},"content":"* Index usage is same with `edit`. Please refer to `select` for more details."},{"lineNumber":136,"author":{"gitID":"-"},"content":"****"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"Example: +"},{"lineNumber":139,"author":{"gitID":"-"},"content":"* `adds 1 n/Submit report` +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"Add a subtask with name `Submit report` to the 1st task."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating tasks: `find` or `f`"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"Finds tasks whose names, descriptions or deadlines contain any of the given keywords. +"},{"lineNumber":146,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"****"},{"lineNumber":149,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `Developer` will match `developer`"},{"lineNumber":150,"author":{"gitID":"-"},"content":"* Keywords for deadlines should be in the format of YYYY-MM-DD."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Guide Developer` will match `Developer Guide`"},{"lineNumber":152,"author":{"gitID":"-"},"content":"* Only the name and description are searched."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Guide` will not match `Guides`"},{"lineNumber":154,"author":{"gitID":"-"},"content":"* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `CS2101 Guide` will return `CS2101 Script`, `Developer Guide`."},{"lineNumber":155,"author":{"gitID":"-"},"content":"****"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"* find `Guide` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"Returns `User Guide` and `Developer Guide`"},{"lineNumber":161,"author":{"gitID":"-"},"content":"* f `CS2101 Developer User` +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"Returns any task having names or descriptions `CS2101`, `Developer`, or `User`"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating tasks by name: `findn` or `fn`"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"Finds tasks whose names contain any of the given keywords. +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Format: `findn KEYWORD [MORE_KEYWORDS]` or `fn KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"****"},{"lineNumber":170,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `Developer` will match `developer`"},{"lineNumber":171,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Guide Developer` will match `Developer Guide`"},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Guide` will not match `Guides`"},{"lineNumber":174,"author":{"gitID":"-"},"content":"* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `CS2101 Guide` will return `CS2101 Script`, `Developer Guide`."},{"lineNumber":175,"author":{"gitID":"-"},"content":"****"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"* findn `Guide` +"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Returns `User Guide` and `Developer Guide`"},{"lineNumber":181,"author":{"gitID":"-"},"content":"* fn `CS2101 Developer User` +"},{"lineNumber":182,"author":{"gitID":"-"},"content":"Returns any task having names `CS2101`, `Developer`, or `User`"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating tasks by description: `finddes` or `fdes`"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Find tasks whose descriptions contain any of the given keywords. +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Format: `finddes KEYWORD [MORE_KEYWORDS]` or `fdes KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"****"},{"lineNumber":190,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `Update` will match `update`"},{"lineNumber":191,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `update study` will match `study update`"},{"lineNumber":192,"author":{"gitID":"-"},"content":"* Only the description is searched."},{"lineNumber":193,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `CS2103` will not match `CS2103T`"},{"lineNumber":194,"author":{"gitID":"-"},"content":"* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `Update Study` will return `Update script`, `Study midterms`."},{"lineNumber":195,"author":{"gitID":"-"},"content":"****"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"* finddes `Study` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"Returns tasks with descriptions `Study midterms` and `study chapter 2`."},{"lineNumber":201,"author":{"gitID":"-"},"content":"* fdes `Study Update Chapter` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Returns any task having descriptions containing words `Study`, `Update`, or `Chapter`."},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating tasks by deadline: `findd` or `fd`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"Find tasks whose deadlines contain any of the given keywords. +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"Format: `findd KEYWORD [MORE_KEYWORDS]` or `fd KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"****"},{"lineNumber":210,"author":{"gitID":"-"},"content":"* Keywords should be in the format of YYYY-MM-DD."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `2018-03-17 2018-09-09` will match `2018-09-09 2018-03-17`"},{"lineNumber":212,"author":{"gitID":"-"},"content":"* Only the deadline is searched."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* Only full keywords will be matched e.g. `2018` will not match `2018-03-17`"},{"lineNumber":214,"author":{"gitID":"-"},"content":"****"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"* findd `2018-03-17` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"Returns tasks with deadlines `2018-03-17`."},{"lineNumber":220,"author":{"gitID":"-"},"content":"* fd `2018-03-17 2018-09-04 2018-03-21` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"Returns any task having deadlines `2018-03-17`, `2018-09-04`, or `2018-03-21`."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Deleting a task : `delete` or `d`"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"Deletes the specified task from the PrioriTask. +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"****"},{"lineNumber":229,"author":{"gitID":"dominickenn"},"content":"* Deletes the task at the specified `INDEX`."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":231,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* (i.e. 1, 2, 3, ...)."},{"lineNumber":232,"author":{"gitID":"-"},"content":"****"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"Deletes the 2nd task in the PrioriTask."},{"lineNumber":239,"author":{"gitID":"-"},"content":"* `find Developer` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":241,"author":{"gitID":"dominickenn"},"content":"Deletes the 1st task in the results of the `find` command."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Selecting a task : `select` or `s`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"dominickenn"},"content":"Selects the task identified by the index number used in the last task listing. +"},{"lineNumber":246,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"****"},{"lineNumber":249,"author":{"gitID":"-"},"content":"* Selects the task and shows full details of the task at the specified `INDEX`."},{"lineNumber":250,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":251,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* (i.e. `1, 2, 3, ...`)."},{"lineNumber":252,"author":{"gitID":"-"},"content":"****"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"Selects the 2nd task in the PrioriTask."},{"lineNumber":259,"author":{"gitID":"-"},"content":"* `find Developer` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":261,"author":{"gitID":"dominickenn"},"content":"Selects the 1st task in the results of the `find` command."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Mark task as complete: `toggle` or `t`"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"Toggle the status of the task identified by the index number used in the last task listing"},{"lineNumber":266,"author":{"gitID":"-"},"content":"between `Done` and `Not Done`. +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Format: `toggle INDEX`"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"****"},{"lineNumber":270,"author":{"gitID":"-"},"content":"* Index usage is same with `select`. Please refer to `select` for more details."},{"lineNumber":271,"author":{"gitID":"-"},"content":"****"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"`toggle 1` +"},{"lineNumber":277,"author":{"gitID":"-"},"content":"Toggle the first task in the PrioriTask."},{"lineNumber":278,"author":{"gitID":"-"},"content":"* `find homework` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"`toggle 1` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"Toggle the first task in th result of `find homework` command."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":289,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":290,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":291,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"Restores the PrioriTask to the state before the previous _undoable_ command was executed. +"},{"lineNumber":297,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":300,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":301,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the PrioriTask\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":302,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":307,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":308,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":311,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":312,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":317,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":318,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":323,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":328,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":333,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":336,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":337,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":338,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":339,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":340,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c`"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"Clears all entries from the PrioriTask. +"},{"lineNumber":346,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"PrioriTask data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":356,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting specific parameters from a task `[coming in v2.0]`"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"****"},{"lineNumber":363,"author":{"gitID":"-"},"content":"* Delete either a tag, deadline, or description from a particular task."},{"lineNumber":364,"author":{"gitID":"-"},"content":"****"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating tasks by tag `[coming in v2.0]`"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a subtask from a task `[coming in v2.0]`"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a subtask `[coming in v2.0]`"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Mark subtask as complete `[coming in v2.0]`"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Reorder subtask `[coming in v2.0]`"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar `[coming in v2.0]`"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Reminders `[coming in v2.0]`"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Recover past data `[coming in v2.0]`"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"_{ coming in v2.0 }_"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":401,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME [p/PRIORITY_LEVEL] d/DEADLINE [des/DESCRIPTION] [t/TAG]â€¦` +"},{"lineNumber":406,"author":{"gitID":"-"},"content":"e.g. `add n/CS2101 Script p/8 d/2018-03-05 des/Script should be 500 words long t/CS2101 t/PhaseA`"},{"lineNumber":407,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":408,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":410,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PRIORITY_LEVEL] [d/DEADLINE] [des/DESCRIPTION] [t/TAG]â€¦â€‹` +"},{"lineNumber":411,"author":{"gitID":"-"},"content":"e.g. `edit 1 p/9 d/2018-12-30`"},{"lineNumber":412,"author":{"gitID":"-"},"content":"* *Add Subtask*: `adds INDEX n/NAME` +"},{"lineNumber":413,"author":{"gitID":"-"},"content":"e.g. `adds 1 n/Submit Report`"},{"lineNumber":414,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":415,"author":{"gitID":"-"},"content":"e.g. `find CS2103 update 2018-03-17`"},{"lineNumber":416,"author":{"gitID":"-"},"content":"* *Find Name* : `findn KEYWORD [MORE_KEYWORDS]` or `fn KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":417,"author":{"gitID":"-"},"content":"e.g. `findn Developer User`"},{"lineNumber":418,"author":{"gitID":"-"},"content":"* *Find Description* : `finddes KEYWORD [MORE_KEYWORDS]` or `fdes KEYWORDS [MORE_KEYWORDS]` +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"e.g. `finddes study update`"},{"lineNumber":420,"author":{"gitID":"-"},"content":"* *Find Deadline* : `findd KEYWORD [MORE_KEYWORDS]` or `fd KEYWORDS [MORE_KEYWORDS]` +"},{"lineNumber":421,"author":{"gitID":"-"},"content":"e.g. `findd 2018-03-17 2018-09-07`"},{"lineNumber":422,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":423,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":424,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":425,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":426,"author":{"gitID":"-"},"content":"* *Toggle* : `toggle INDEX` +"},{"lineNumber":427,"author":{"gitID":"-"},"content":"e.g.`select 3`"},{"lineNumber":428,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":429,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":430,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"dominickenn":12,"-":418}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"public class SampleDataTest extends OrganizerSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    protected Organizer getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Task[] expectedList \u003d SampleDataUtil.getSampleTasks();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getTaskListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":49}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"public class ClearCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty organizer book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing organizer book -\u003e original organizer book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing organizer book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in task list and clears organizer book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original organizer book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectTask(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the task list before clearing -\u003e entire organizer book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original organizer book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty organizer book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":99}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_REVISION;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"public class DeleteCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        /* Case: delete the first task in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TASK.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Task deletedTask \u003d removePerson(expectedModel, INDEX_FIRST_TASK);"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedTask);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        /* Case: delete the last task in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        /* Case: undo deleting the last task in the list -\u003e last task restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        /* Case: redo deleting the last task in the list -\u003e last task deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        /* Case: delete the middle task in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered task list, delete index within bounds of organizer and task list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_REVISION);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_TASK;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered task list, delete index within bounds of organizer but out of bounds of task list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_REVISION);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getOrganizer().getTaskList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        /* --------------------- Performing delete operation while a task card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        /* Case: delete the selected task -\u003e task list panel selects the task before the deleted task */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllTasks();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectTask(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"        deletedTask \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedTask);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getOrganizer().getTaskList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Task} at the specified {@code index} in {@code model}\u0027s organizer book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"     * @return the removed task"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"    private Task removePerson(Model model, Index index) {"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        Task targetTask \u003d getPerson(model, index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            model.deleteTask(targetTask);"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"targetTask is retrieved from model.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"        return targetTask;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"     * Deletes the task at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"        Task deletedTask \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedTask);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":142,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":192,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":194,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":25,"-":180}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"public class HelpCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getTaskListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":93}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_EXAM;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_STUDY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_EXAM;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.EXAM;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.INTERVIEWPREP;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.MAKEPRESENT;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.STUDY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskUtil;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"public class AddCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: add a task without tags to a non-empty organizer, command with leading spaces and trailing spaces"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Task toAdd \u003d EXAM;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_EXAM + \"  \" + PRIORITY_DESC_EXAM + \" \""},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + DEADLINE_DESC_EXAM + \"   \" + DESCRIPTION_DESC_EXAM + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model.addTask(toAdd);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: add a task with all fields same as another task in the organizer book except name -\u003e added */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_STUDY"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: add a task with all fields same as another task in the organizer book except priority -\u003e added */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: add a task with all fields same as another task in the organizer book except deadline -\u003e added */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_STUDY)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_EXAM"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: add a task with all fields same as another task in the organizer book except description -\u003e added */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_STUDY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_STUDY"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: add to empty organizer book -\u003e added */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        deleteAllTasks();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(GROCERY);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        /* Case: add a task with tags, command with parameters in random order -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        toAdd \u003d STUDY;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY + DESCRIPTION_DESC_STUDY + NAME_DESC_STUDY"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + DEADLINE_DESC_STUDY;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"        /* Case: add a task, missing tags -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(MAKEPRESENT);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        //@@guekling"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: add a task, missing description -\u003e added */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // deleteAllTasks();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        toAdd \u003d new TaskBuilder().withName(VALID_NAME_EXAM).withPriority"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                (VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM).withDescription(\"\")"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + TAG_DESC_FRIEND;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":138,"content":"        //@@author"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        /* Case: filters the task list before adding -\u003e added */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(INTERVIEWPREP);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"        /* ------------------------ Perform add operation while a task card is selected --------------------------- */"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"        /* Case: selects first card in the task list, add a task -\u003e added, card selection remains unchanged */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        selectTask(Index.fromOneBased(1));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PREPAREBREAKFAST);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"        /* Case: add a duplicate task -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d TaskUtil.getAddCommand(MAKEPRESENT);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"        /* Case: add a duplicate task except with different tags -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalTasks#GROCERY"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // Organizer#addTask(Task)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d TaskUtil.getAddCommand(MAKEPRESENT) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing deadline -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        command \u003d \"addss \" + TaskUtil.getPersonDetails(toAdd);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid priority -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                + INVALID_PRIORITY_DESC + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid deadline -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + INVALID_DEADLINE_DESC + DESCRIPTION_DESC_EXAM;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_EXAM"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":211,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":213,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"dominickenn"},"content":"    private void assertCommandSuccess(Task toAdd) {"},{"lineNumber":216,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(TaskUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"dominickenn"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code command}"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":223,"author":{"gitID":"dominickenn"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Task)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"dominickenn"},"content":"    private void assertCommandSuccess(String command, Task toAdd) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            expectedModel.addTask(toAdd);"},{"lineNumber":229,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"dominickenn"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts that"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":244,"author":{"gitID":"dominickenn"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":262,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":264,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"dominickenn":20,"-":254}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.TestApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyOrganizer\u003e addressBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":72}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static void setFilteredList(Model model, List\u003cTask\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public static void setFilteredList(Model model, Task... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":33}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"public class SelectCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        /* Case: select the first card in the task list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_TASK);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        /* Case: select the last card in the task list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalTasks().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        /* Case: select the middle card in the task list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered task list, select index within bounds of organizer book but out of bounds of task list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getOrganizer().getTaskList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered task list, select index within bounds of organizer book and task list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredTaskList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty organizer book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllTasks();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"     * {@code expectedSelectedCardIndex} of the selected task.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getTaskListPanel().getSelectedCardIndex();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":10,"-":145}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class ErrorDialogGuiTest extends OrganizerSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":33}},{"path":"src/test/java/seedu/organizer/ui/TaskListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalTasks;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class TaskListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalTasks());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_TASK);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private TaskListPanelHandle taskListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        TaskListPanel taskListPanel \u003d new TaskListPanel(TYPICAL_TASKS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(taskListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                TaskListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"            taskListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"            Task expectedTask \u003d TYPICAL_TASKS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            TaskCardHandle actualCard \u003d taskListPanelHandle.getTaskCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysTask(expectedTask, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        TaskCardHandle expectedCard \u003d taskListPanelHandle.getTaskCardHandle(INDEX_SECOND_TASK.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        TaskCardHandle selectedCard \u003d taskListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":53}},{"path":"src/test/java/seedu/organizer/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":" * A GUI unit test class for Organizer."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":37}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_REVISION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_REVISION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_REVISION;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_STUDY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_REVISION;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIENDS;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskUtil;"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"public class EditCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_TASK;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + NAME_DESC_STUDY + \"  \" + PRIORITY_DESC_STUDY + \" \" + DEADLINE_DESC_STUDY"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + \"  \" + DESCRIPTION_DESC_STUDY + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Task editedTask \u003d new TaskBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_STUDY)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        /* Case: undo editing the last task in the list -\u003e last task restored */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        /* Case: redo editing the last task in the list -\u003e last task edited again */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.updateTask("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                getModel().getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), editedTask);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        /* Case: edit a task with new values same as existing values -\u003e edited */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + NAME_DESC_REVISION + PRIORITY_DESC_REVISION + DEADLINE_DESC_REVISION"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_REVISION;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, REVISION);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Task taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"        editedTask \u003d new TaskBuilder(taskToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"        editedTask \u003d new TaskBuilder(taskToEdit).withTags().build();"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: filtered task list, edit index within bounds of organizer book and task list -\u003e edited */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_EXAM;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        editedTask \u003d new TaskBuilder(taskToEdit).withName(VALID_NAME_EXAM).build();"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(command, index, editedTask);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: filtered task list, edit index within bounds of organizer book but out of bounds of task list"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showTasksWithName(KEYWORD_MATCHING_SPRING);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getOrganizer().getTaskList().size();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_EXAM,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"        /* --------------------- Performing edit operation while a task card is selected -------------------------- */"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"        /* Case: selects first card in the task list, edit a task -\u003e edited, card selection remains unchanged but"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showAllTasks();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_TASK;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        selectTask(index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                + NAME_DESC_REVISION + PRIORITY_DESC_REVISION + DEADLINE_DESC_REVISION"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_REVISION + TAG_DESC_FRIENDS;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"        // browser\u0027s url is updated to reflect the new task\u0027s name"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, REVISION, index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_STUDY,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_STUDY,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_STUDY,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_STUDY,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: invalid priority -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_PRIORITY_DESC,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: invalid deadline -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_DEADLINE_DESC,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"dominickenn"},"content":"        /* Case: edit a task with new values same as another task\u0027s values -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(TaskUtil.getAddCommand(REVISION));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getOrganizer().getTaskList().contains(REVISION));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        index \u003d INDEX_SECOND_TASK;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredTaskList()"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                .get(index.getZeroBased()).equals(REVISION));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                + NAME_DESC_REVISION + PRIORITY_DESC_REVISION + DEADLINE_DESC_REVISION"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_REVISION + TAG_DESC_FRIENDS;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"dominickenn"},"content":"        /* Case: edit a task with new values same as another task\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                + NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"dominickenn"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Task, Index)} except that"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":201,"author":{"gitID":"dominickenn"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Task, Index)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"dominickenn"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Task editedTask) {"},{"lineNumber":204,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(command, toEdit, editedTask, null);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"dominickenn"},"content":"     * 2. Asserts that the model related components are updated to reflect the task at index {@code toEdit} being"},{"lineNumber":211,"author":{"gitID":"dominickenn"},"content":"     * updated to values specified {@code editedTask}.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"dominickenn"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Task editedTask,"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            expectedModel.updateTask("},{"lineNumber":221,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredTaskList().get(toEdit.getZeroBased()), editedTask);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":223,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException | TaskNotFoundException e) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":225,"author":{"gitID":"dominickenn"},"content":"                    \"editedTask is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask), expectedSelectedCardIndex);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":252,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":254,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":255,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":279,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":281,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":30,"-":262}},{"path":"src/test/java/systemtests/OrganizerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.StatusBarFooter.TOTAL_TASKS_STATUS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.MainApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.TestApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TypicalTasks;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.BrowserPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.CommandBox;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":" * A system test class for Organizer, which provides access to handles of GUI components and helper methods"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"public abstract class OrganizerSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"    protected Organizer getInitialData() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return TypicalTasks.getTypicalOrganizer();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public TaskListPanelHandle getTaskListPanel() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Displays all persons in the organizer book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void showAllTasks() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getOrganizer().getTaskList().size(), getModel().getFilteredTaskList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void showTasksWithName(String keyword) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(FindNameCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getOrganizer().getTaskList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"     * Selects the task at {@code index} of the displayed list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected void selectTask(Index index) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Deletes all persons in the organizer book."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void deleteAllTasks() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getOrganizer().getTaskList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same task objects as {@code expectedModel}"},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":"     * and the task list panel displays the persons in the model correctly."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getOrganizer(), testApp.readStorageOrganizer());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code TaskListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberTotalTasksStatus();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        getTaskListPanel().rememberSelectedTaskCard();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":201,"author":{"gitID":"dominickenn"},"content":"     * of the previously selected task."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertFalse(getTaskListPanel().isAnyCardSelected());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the task in the task list panel at"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getTaskListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the browser\u0027s url and the selected card in the task list panel remain unchanged."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertFalse(getTaskListPanel().isSelectedTaskCardChanged());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertFalse(handle.isTotalTasksStatusChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location and the total task"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     + list remains the same."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertFalse(handle.isTotalTasksStatusChanged());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            assertEquals(String.format(TOTAL_TASKS_STATUS, getModel().getOrganizer().getTaskList().size()),"},{"lineNumber":291,"author":{"gitID":"-"},"content":"                getStatusBarFooter().getTotalTasksStatus());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Asserts that the sync status in the status bar was changed to the timing of"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, and total tasks was changed to match the total"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * number of persons in the address book, while the save location remains the same."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"        final int totalTasks \u003d testApp.getModel().getOrganizer().getTaskList().size();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertEquals(String.format(TOTAL_TASKS_STATUS, totalTasks), handle.getTotalTasksStatus());"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":317,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":312}},{"path":"src/test/java/systemtests/FindNameCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.HOMEWORK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_DO;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.KEYWORD_MATCHING_SPRING;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class FindNameCommandSystemTest extends OrganizerSystemTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: find multiple tasks in organizer, command with leading spaces and trailing spaces"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         * -\u003e 2 tasks found"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_DO + \"   \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, HOMEWORK, PROJECT); // first names of HOMEWORK and PROJECT are \"Do\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where task list is displaying the tasks we are finding"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         * -\u003e 2 tasks found"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_DO;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        /* Case: find task where task list is not displaying the task we are finding -\u003e 1 task found */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Spring\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, SPRINGCLEAN);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: find multiple tasks in organizer, 2 keywords -\u003e 2 tasks found */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Spring Prepare\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, SPRINGCLEAN, PREPAREBREAKFAST);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: find multiple tasks in organizer, 2 keywords in reversed order -\u003e 2 tasks found */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Prepare Spring\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: find multiple tasks in organizer, 2 keywords with 1 repeat -\u003e 2 tasks found */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Prepare Spring Prepare\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: find multiple tasks in organizer, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e 2 tasks found"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Prepare Spring NonMatchingKeyWord\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: find same tasks in organizer after deleting 1 of them -\u003e 1 task found */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getOrganizer().getTaskList().contains(PREPAREBREAKFAST));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SPRING;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, SPRINGCLEAN);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: find task in organizer, keyword is same as name but of different case -\u003e 1 task found */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Spring\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: find task in organizer, keyword is substring of name -\u003e 0 tasks found */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: find task in organizer, name is substring of keyword -\u003e 0 tasks found */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Springs\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: find task not in organizer -\u003e 0 tasks found */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Swim\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: find priority number of task in organizer -\u003e 0 tasks found */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + HOMEWORK.getPriority().value;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: find organizer of task in organizer -\u003e 0 tasks found */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + HOMEWORK.getDescription().value;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: find email of task in organizer book -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + HOMEWORK.getDeadline().toString();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: find tags of task in organizer -\u003e 0 tasks found */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(HOMEWORK.getTags());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"        /* Case: find while a task is selected -\u003e selected card deselected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        showAllTasks();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectTask(Index.fromOneBased(1));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertFalse(getTaskListPanel().getHandleToSelectedCard().getName().equals(HOMEWORK.getName().fullName));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" Homework\";"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, HOMEWORK);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: find task in empty organizer -\u003e 0 tasks found */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        deleteAllTasks();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d FindNameCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SPRING;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, HOMEWORK);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_TASKS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":172,"author":{"gitID":"-"},"content":"                MESSAGE_TASKS_LISTED_OVERVIEW, expectedModel.getFilteredTaskList().size());"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":184,"author":{"gitID":"dominickenn"},"content":"     * {@code OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":"     * @see OrganizerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":193}},{"path":"src/test/java/seedu/organizer/ui/TaskCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.testutil.GuiTestAssert.assertCardDisplaysTask;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TaskCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        Task taskWithNoTags \u003d new TaskBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"        TaskCard taskCard \u003d new TaskCard(taskWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(taskCard);"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"        assertCardDisplay(taskCard, taskWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        Task taskWithTags \u003d new TaskBuilder().build();"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"        taskCard \u003d new TaskCard(taskWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(taskCard);"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        assertCardDisplay(taskCard, taskWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        TaskCard taskCard \u003d new TaskCard(task, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        // same task, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        TaskCard copy \u003d new TaskCard(task, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(taskCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(taskCard.equals(taskCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(taskCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(taskCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        // different task, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        Task differentTask \u003d new TaskBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        // same task, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        assertFalse(taskCard.equals(new TaskCard(task, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", taskCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify task name is displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCardDisplaysTask(expectedTask, taskCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":17,"-":55}},{"path":"src/test/java/seedu/organizer/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.TaskCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPriority(), actualCard.getPriority());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e assertEquals(expectedCard.getTagStyleClasses(tag),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            actualCard.getTagStyleClasses(tag)));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedTask.getName().fullName, actualCard.getName());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(\"[\" + expectedTask.getStatus().toString() + \"]\", actualCard.getStatus());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(\"Priority : \" + expectedTask.getPriority().value, actualCard.getPriority());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(\"Deadline : \" + expectedTask.getDeadline().toString(), actualCard.getDeadline());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(\"Date Added : \" + expectedTask.getDateAdded().toString(), actualCard.getDateAdded());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(\"Description : \" + expectedTask.getDescription().value, actualCard.getDescription());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedTask, actualCard);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        for (int i \u003d 0; i \u003c tasks.length; i++) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d taskListPanelHandle.getListSize();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"content":"    // @@author guekling-reused"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/798/files with minor modifications"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * in {@code TaskCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @see TaskCard#getTagColorStyleFor(String)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        switch (tagName) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case \"classmates\":"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case \"owesMoney\":"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return \"blue\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case \"colleagues\":"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case \"neighbours\":"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return \"gray\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case \"family\":"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case \"friend\":"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return \"maroon\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case \"friends\":"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return \"orange\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case \"husband\":"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return \"yellow\";"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return \"\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedTask} with the correct"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Task expectedTask, TaskCardHandle actualCard) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedTask.getTags().stream().map(tag -\u003e tag.tagName)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            actualCard.getTagStyleClasses(tag)));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"dominickenn":8,"-":118}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d PrioriTask - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU` Â Â Â Â  Since: `Jun 2016` Â Â Â Â  Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.organizer.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Represents the UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes commands."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"image::SDforDeleteTask.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `OrganizerChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"image::SDforDeleteTaskEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/organizer/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/organizer/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `OrganizerParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"dominickenn"},"content":".  The command execution can affect the `Model` (e.g. adding a task) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"dominickenn"},"content":"image::DeleteTaskSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/organizer/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Organizer data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* automatically updates Tasks\u0027 priority levels within the Organizer via the UniqueTaskList"},{"lineNumber":209,"author":{"gitID":"-"},"content":"* sorts tasks within the Organizer"},{"lineNumber":210,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":217,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/organizer/storage/Storage.java[`Storage.java`]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":224,"author":{"gitID":"-"},"content":"* can save the Organizer data in xml format and read it back."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.organizer.commons` package."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the organizer (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":".Reference from Figure 7."},{"lineNumber":244,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":249,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":250,"author":{"gitID":"-"},"content":"----"},{"lineNumber":251,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"}"},{"lineNumber":257,"author":{"gitID":"-"},"content":"----"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":260,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":261,"author":{"gitID":"-"},"content":"----"},{"lineNumber":262,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"},{"lineNumber":277,"author":{"gitID":"-"},"content":"----"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Scenario"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th task in the organizer. The current state of the organizer is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":".UndoRedoStack `delete 5` command execution"},{"lineNumber":286,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/Study ...` to add a new task."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":".UndoRedoStack `add n/Study ...` command execution"},{"lineNumber":291,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"dominickenn"},"content":"The user now decides that adding the task was a mistake, and decides to undo that action using `undo`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the organizer to the state before the `add` command executed."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":".UndoRedoStack `undo` command execution"},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":304,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":".UndeRedoStack sequence diagram"},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the organizer to the state after the command is executed)."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":314,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/Study` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":".UndoRedoStack `clear` command execution"},{"lineNumber":319,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":".UndoRedoStack `list` command execution"},{"lineNumber":324,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":".UndoRedoStack activity diagram"},{"lineNumber":329,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":338,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":340,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire organizer."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":348,"author":{"gitID":"dominickenn"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the organizer (`add`, `clear`, `edit`)."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the organizer and not the view."},{"lineNumber":360,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":368,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":371,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"// tag::taskpriority[]"},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Task\u0027s Priority Autoupdating and AutoSorting feature"},{"lineNumber":375,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"The autoupdating and autosorting mechanism resides inside `UniqueTaskList`. The `UniqueTaskList` is responsible for updating each Taskâ€™s priority level and sorting the `ObservableList\u003cTask\u003e` whenever a new `Task` is added. In addition, whenever a `Task` is edited, the `ObservableList\u003cTask\u003e` is sorted again."},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Description of `UniqueTaskList` \u0027s `add` method"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"The `add` method of the `UniqueTaskList` class is implemented as such:"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"----"},{"lineNumber":384,"author":{"gitID":"dominickenn"},"content":"public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"\t//check non null and no duplicate task"},{"lineNumber":386,"author":{"gitID":"-"},"content":"\ttoAdd \u003d updatePriority(toAdd);"},{"lineNumber":387,"author":{"gitID":"dominickenn"},"content":"\tinternalList.add(toAdd);"},{"lineNumber":388,"author":{"gitID":"-"},"content":"\tsortTasks();"},{"lineNumber":389,"author":{"gitID":"dominickenn"},"content":"}"},{"lineNumber":390,"author":{"gitID":"-"},"content":"----"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"The `updatePriority` method returns a new `Task` with a new `Priority` based on the current date, `AddedDate`, and `Deadline`."},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"The new `Priority` level will remain within the range of 0 - 9. The new `Priority` is calculated as such :"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"* If the current date is equal to `AddedDate`"},{"lineNumber":397,"author":{"gitID":"-"},"content":"** `Priority` remains the same."},{"lineNumber":398,"author":{"gitID":"-"},"content":"* If the current date is past `Deadline`"},{"lineNumber":399,"author":{"gitID":"-"},"content":"** `Priority` is set to the `HIGHEST_SETTABLE_PRIORITY_LEVEL` : 9"},{"lineNumber":400,"author":{"gitID":"-"},"content":"* If the current date is before `Deadline` and not equal to `AddedDate`"},{"lineNumber":401,"author":{"gitID":"-"},"content":"** `Priority is calculated via the following formula :"},{"lineNumber":402,"author":{"gitID":"-"},"content":"----"},{"lineNumber":403,"author":{"gitID":"-"},"content":"priorityDifferenceFromMax \u003d HIGHEST_SETTABLE_PRIORITY_LEVEL - currentPriority"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"dayDifferenceCurrentToDeadline \u003d Duration.between(currentDate, deadline)"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"dayDifferenceAddedToDeadline \u003d Duration.between(dateAdded, deadline)"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"priorityToIncrease \u003d priorityDifferenceFromMax * ((dayDifferenceAddedToDeadline - dayDifferenceCurrentToDeadline) / dayDifferenceAddedToDeadline)"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"newPriority \u003d currentPriority + priorityToIncrease"},{"lineNumber":412,"author":{"gitID":"-"},"content":"----"},{"lineNumber":413,"author":{"gitID":"-"},"content":"The new `Task` with its updated `Priority` will then be added to `UniqueTaskList`â€™s `internalList`. Following that, the `internalList` is sorted via the `sortTasks` method. The `sortTasks` method is implemented as such:"},{"lineNumber":414,"author":{"gitID":"-"},"content":"----"},{"lineNumber":415,"author":{"gitID":"-"},"content":"private void sortTasks() {"},{"lineNumber":416,"author":{"gitID":"-"},"content":"\tinternalList.sort(Task.priorityComparator());"},{"lineNumber":417,"author":{"gitID":"-"},"content":"}"},{"lineNumber":418,"author":{"gitID":"-"},"content":"----"},{"lineNumber":419,"author":{"gitID":"-"},"content":"The `sortTasks` method makes use of the `ObservableList` classâ€™s `sort` method and `Task`â€™s `priorityComparator` method. The `priorityComparator` method returns a `Comparator` that sorts `Task`â€™s based on descending `Priority` levels. The `internalList` is sorted with respect to the comparator."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Scenario"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"Consider a `addTask` method call by the `Organizer`. The current date is 2018-03-19."},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"The following is a sequence diagram which represents the `Organizer` adding a Study `Task`."},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":".addTask(Study) method execution sequence diagram"},{"lineNumber":428,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"Suppose the `tasks` currently contains the following two `Task` s."},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":".`tasks` \u0027s initial `Task` s"},{"lineNumber":433,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram1.png[width\u003d\"800\"]"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"The following figure represents the \"Study\" `Task`."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":".\"Study\" `Task`"},{"lineNumber":438,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram2.png[width\u003d\"300\"]"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"When `tasks` calls `updatePriority(Study)`, the new priority level is calculated as such :"},{"lineNumber":441,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":442,"author":{"gitID":"-"},"content":"priorityDifferenceFromMax \u003d 9 - 0 \u003d 9"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"dayDifferenceCurrentToDeadline \u003d 14"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"dayDifferenceAddedToDeadline \u003d 31"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"priorityToIncrease \u003d 9 * ((31 - 14) / 31) \u003d 4"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"newPriority \u003d 0 + 4 \u003d 4"},{"lineNumber":451,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"A new \"Study\" `Task` is created and added to the `internalList`."},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":".`internalList` after \"Study\" `Task` is added"},{"lineNumber":456,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram3.png[width\u003d\"800\"]"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"The `sortTasks` method is then called, which calls the `priorityCompartor` method, and uses the `Comparator` returned to sort the `Task` s. This results in the following `UniqueTaskList`."},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":".`internalList` after `sortTasks` is called"},{"lineNumber":461,"author":{"gitID":"-"},"content":"image::OrganizerAddTaskDiagram4.png[width\u003d\"800\"]"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect : Implementation of `updatePriority`"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"* Alternative 1 (current choice): Add a new method `updatePriority` in UniqueTaskListâ€™s `add`"},{"lineNumber":467,"author":{"gitID":"-"},"content":"** Pros : Convenient to update the priority during this method call; since during initialization of `Organizer`, `add` is called for every `Task` to initialize the `UniqueTaskList`."},{"lineNumber":468,"author":{"gitID":"-"},"content":"** Cons : Possible violation of Single Responsibility Principle and Separation of Concerns as `UniqueTaskList` now updates `Task` priorities and stores `Task` s."},{"lineNumber":469,"author":{"gitID":"-"},"content":"* Alternative 2 : Add a new class `UpdatedUniqueTaskList` which extends `UniqueTaskList`"},{"lineNumber":470,"author":{"gitID":"-"},"content":"** Pros : Removes violation of Single Responsibility Principle and Separation of Concerns in Alternative 1."},{"lineNumber":471,"author":{"gitID":"-"},"content":"** Cons : Repeats the logic in `UniqueTaskList` while adding one method."},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect : How `updatePriority` executes"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"* Alternative 1 (current choice) : Return a new `Task` with new `Priority`"},{"lineNumber":476,"author":{"gitID":"-"},"content":"** Pros : Easy to implement."},{"lineNumber":477,"author":{"gitID":"-"},"content":"** Cons : A new object is created twice during every addition, even if `Priority` is not updated; Hence slightly inefficient."},{"lineNumber":478,"author":{"gitID":"-"},"content":"* Alternative 2 : Edit the `Priority` parameter of the `Task`"},{"lineNumber":479,"author":{"gitID":"-"},"content":"** Pros : No new objects need to be created."},{"lineNumber":480,"author":{"gitID":"-"},"content":"** Cons : Requires major overhaul of `Task` and itâ€™s parameters to be mutable."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect : Scope of `updatePriority` and `sortTasks`"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"* Alternative 1 (current choice) : Implement within `Model`"},{"lineNumber":485,"author":{"gitID":"-"},"content":"** Pros : No need to deal with commands, and fits with the idea of automation."},{"lineNumber":486,"author":{"gitID":"-"},"content":"** Cons : Concern of updating priorities and sorting tasks may not lie with `Model` but `Logic`."},{"lineNumber":487,"author":{"gitID":"-"},"content":"* Alternative 2 : Implement within `Logic`"},{"lineNumber":488,"author":{"gitID":"-"},"content":"** Pros : Fits with the concern of updating priorities and sorting tasks."},{"lineNumber":489,"author":{"gitID":"-"},"content":"** Cons : Requires development of commands and extra command calls to be automatically called upon start of application; unnecessary trouble for same feature."},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"// end::taskpriority[]"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"// tag::calendar[]"},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Feature"},{"lineNumber":495,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"The calendar feature is facilitated by the `Calendar` class, which supports the `CalendarPanel`. The `Calendar` is responsible for displaying a monthly calendar view to the users through the `CalendarPanel`. The following diagram describes the structure of the calendar system:"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":".UML Class Diagram for Calendar"},{"lineNumber":500,"author":{"gitID":"-"},"content":"image::CalendarComponentClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"As you can see from the diagram, `MonthView` facilitates the drawing of the calendar, while `Calendar` supports the display of the calendar onto the `CalendarPanel`. The `MonthView` interacts very closely with the corresponding FXML file, and the following diagram shows the basic layout of the calendar:"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":".Basic Calendar Layout"},{"lineNumber":505,"author":{"gitID":"-"},"content":"image::MonthViewLayoutDiagram.png[width\u003d\"800\"]"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"The basic calendar layout (refer to Figure 25) is reflected in the `MonthView.fxml` file, and is loaded by `MonthView`. `MonthView` uses the JavaFX layout objects extensively when drawing the calendar. An example would be the `addMonthDate` method, which adds a particular date to the exact `column` and `row` in the `taskCalendar`. The `addMonthDate` method is implemented as such:"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":510,"author":{"gitID":"-"},"content":"private void addMonthDate(Text dateToPrint, int column, int row) {"},{"lineNumber":511,"author":{"gitID":"-"},"content":"    taskCalendar.add(dateToPrint, column, row);"},{"lineNumber":512,"author":{"gitID":"-"},"content":"    taskCalendar.setHalignment(dateToPrint, HPos.LEFT);"},{"lineNumber":513,"author":{"gitID":"-"},"content":"    taskCalendar.setValignment(dateToPrint, VPos.TOP)"},{"lineNumber":514,"author":{"gitID":"-"},"content":"}"},{"lineNumber":515,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"Both the `Calendar` and `CalendarPanel` use the JavaFX `StackPane` object as a placeholder for the `MonthView`. After loading the respective FXML files, methods in the `Calendar` and `CalendarPanel` fetch the display for the `MonthView` as such:"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":520,"author":{"gitID":"-"},"content":"public void getCurrentMonth(YearMonth currentYearMonth) throws IOException {"},{"lineNumber":521,"author":{"gitID":"-"},"content":"    // draws the calendar for the current month"},{"lineNumber":522,"author":{"gitID":"-"},"content":"    calendarPlaceholder.getChildren().add(monthView.getRoot());"},{"lineNumber":523,"author":{"gitID":"-"},"content":"}"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"private void createMainView() throws IOException {"},{"lineNumber":526,"author":{"gitID":"-"},"content":"    // fetches the calendar view"},{"lineNumber":527,"author":{"gitID":"-"},"content":"    calendarPane.getChildren().add(calendar.getRoot());"},{"lineNumber":528,"author":{"gitID":"-"},"content":"}"},{"lineNumber":529,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"// end::calendar[]"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":534,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":545,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":551,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":552,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":553,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":565,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":570,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":583,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":584,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":585,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":588,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":598,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":603,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":610,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":623,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":624,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.organizer.ui` package."},{"lineNumber":625,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":626,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":627,"author":{"gitID":"-"},"content":"e.g. `seedu.organizer.commons.StringUtilTest`"},{"lineNumber":628,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":629,"author":{"gitID":"-"},"content":"e.g. `seedu.organizer.storage.StorageManagerTest`"},{"lineNumber":630,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":631,"author":{"gitID":"-"},"content":"e.g. `seedu.organizer.logic.LogicManagerTest`"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":635,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":638,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":655,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":662,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":663,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":664,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":669,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":670,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":673,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":674,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":683,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":688,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":693,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"dominickenn"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all tasks in the list."},{"lineNumber":696,"author":{"gitID":"-"},"content":"+"},{"lineNumber":697,"author":{"gitID":"-"},"content":"****"},{"lineNumber":698,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":699,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":700,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":701,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":702,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":703,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":704,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":705,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":706,"author":{"gitID":"-"},"content":"****"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":709,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":714,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":717,"author":{"gitID":"-"},"content":"+"},{"lineNumber":718,"author":{"gitID":"-"},"content":"****"},{"lineNumber":719,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":720,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":722,"author":{"gitID":"dominickenn"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/task/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a task, and link:{repoURL}/src/main/java/seedu/address/model/task/Person.java[`Person`] allows you to update the tags."},{"lineNumber":723,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":724,"author":{"gitID":"dominickenn"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each task, and remove the `tag` from each task."},{"lineNumber":725,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":727,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":728,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":729,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":730,"author":{"gitID":"-"},"content":"****"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"dominickenn"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last task in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":738,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"dominickenn"},"content":". Use different colors for different tags inside task cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":741,"author":{"gitID":"-"},"content":"+"},{"lineNumber":742,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":743,"author":{"gitID":"-"},"content":"+"},{"lineNumber":744,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":745,"author":{"gitID":"-"},"content":"+"},{"lineNumber":746,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":747,"author":{"gitID":"-"},"content":"+"},{"lineNumber":748,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"+"},{"lineNumber":750,"author":{"gitID":"-"},"content":"****"},{"lineNumber":751,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":752,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":753,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":754,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":755,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":756,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":757,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":758,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":759,"author":{"gitID":"-"},"content":"****"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":762,"author":{"gitID":"-"},"content":"+"},{"lineNumber":763,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":764,"author":{"gitID":"-"},"content":"+"},{"lineNumber":765,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"+"},{"lineNumber":767,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":768,"author":{"gitID":"-"},"content":"+"},{"lineNumber":769,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":770,"author":{"gitID":"-"},"content":"+"},{"lineNumber":771,"author":{"gitID":"-"},"content":"****"},{"lineNumber":772,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":773,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":774,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":775,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":776,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":777,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":779,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":780,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":781,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":782,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":783,"author":{"gitID":"-"},"content":"****"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":786,"author":{"gitID":"-"},"content":"+"},{"lineNumber":787,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":789,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":790,"author":{"gitID":"-"},"content":"+"},{"lineNumber":791,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":792,"author":{"gitID":"-"},"content":"+"},{"lineNumber":793,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"+"},{"lineNumber":795,"author":{"gitID":"-"},"content":"****"},{"lineNumber":796,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":797,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":798,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":799,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":800,"author":{"gitID":"dominickenn"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of tasks when the application just started."},{"lineNumber":801,"author":{"gitID":"dominickenn"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of tasks whenever there are new changes to the addressbook."},{"lineNumber":802,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":803,"author":{"gitID":"dominickenn"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of tasks status bar."},{"lineNumber":804,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":805,"author":{"gitID":"-"},"content":"****"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":808,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":813,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":816,"author":{"gitID":"-"},"content":"+"},{"lineNumber":817,"author":{"gitID":"-"},"content":"****"},{"lineNumber":818,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":819,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":820,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":821,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":822,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":823,"author":{"gitID":"-"},"content":"****"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":833,"author":{"gitID":"dominickenn"},"content":"Edits the remark for a task specified in the `INDEX`. +"},{"lineNumber":834,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":839,"author":{"gitID":"dominickenn"},"content":"Edits the remark for the first task to `Likes to drink coffee.`"},{"lineNumber":840,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":841,"author":{"gitID":"dominickenn"},"content":"Removes the remark for the first task."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":846,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":851,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":856,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":859,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":864,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":865,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":870,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":871,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":872,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":875,"author":{"gitID":"dominickenn"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each task later."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":880,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":887,"author":{"gitID":"dominickenn"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/task/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"dominickenn"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/task/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":892,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":899,"author":{"gitID":"dominickenn"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/task/Person.java[`Person`]."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"dominickenn"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/task/Person.java[`Person`]."},{"lineNumber":904,"author":{"gitID":"dominickenn"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the task will be created without a remark)."},{"lineNumber":905,"author":{"gitID":"dominickenn"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `organizer.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":908,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalTasksOrganizer.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":919,"author":{"gitID":"dominickenn"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/task/Person.java[`Person`]."},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"dominickenn"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the task that it is currently building."},{"lineNumber":924,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalTasks.java[`TypicalTasks`]."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":927,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":938,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"dominickenn"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a task."},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":953,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"* busy university students who has many tasks to keep track of"},{"lineNumber":958,"author":{"gitID":"-"},"content":"* is taking many modules, and is part of various student organizations and activities"},{"lineNumber":959,"author":{"gitID":"-"},"content":"* prefers a digital organizer over a physical organizer"},{"lineNumber":960,"author":{"gitID":"-"},"content":"* requires help in monitoring the numerous tasks and their levels of importance"},{"lineNumber":961,"author":{"gitID":"-"},"content":"* would like assistance for the planning of tasks"},{"lineNumber":962,"author":{"gitID":"-"},"content":"* is forgetful, and requires constant reminders"},{"lineNumber":963,"author":{"gitID":"-"},"content":"* prefers desktop apps over other types"},{"lineNumber":964,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":965,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":966,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"*Value proposition*:"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"Helps busy university students keep track of their tasks and priorities"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"*Feature contribution*:"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"* Agus Sentosa Hermawan"},{"lineNumber":975,"author":{"gitID":"-"},"content":"** Major : Subtasks parameter"},{"lineNumber":976,"author":{"gitID":"-"},"content":"*** Allows tasks to be split into subtasks for better management"},{"lineNumber":977,"author":{"gitID":"-"},"content":"** Minor : Toggle command"},{"lineNumber":978,"author":{"gitID":"-"},"content":"*** Allows tasks to be marked as completed"},{"lineNumber":979,"author":{"gitID":"-"},"content":"* Dominic Kenn Lim"},{"lineNumber":980,"author":{"gitID":"-"},"content":"** Major : User login"},{"lineNumber":981,"author":{"gitID":"-"},"content":"*** Allows multiple users to access their private tasks within the same machine"},{"lineNumber":982,"author":{"gitID":"-"},"content":"** Minor : Priority autosorting and autoupdate"},{"lineNumber":983,"author":{"gitID":"-"},"content":"*** Allows application to automatically manage task priority levels so that the user does not have to"},{"lineNumber":984,"author":{"gitID":"-"},"content":"* Natania Djohaari"},{"lineNumber":985,"author":{"gitID":"-"},"content":"** Major : Recurring Tasks"},{"lineNumber":986,"author":{"gitID":"-"},"content":"*** Helps users automatically create tasks that are recurring"},{"lineNumber":987,"author":{"gitID":"-"},"content":"** Minor : RemoveTag method"},{"lineNumber":988,"author":{"gitID":"-"},"content":"*** Allows application to remove a specific tag from all tasks"},{"lineNumber":989,"author":{"gitID":"-"},"content":"* Yeo Guek Ling"},{"lineNumber":990,"author":{"gitID":"-"},"content":"** Major : Calendar"},{"lineNumber":991,"author":{"gitID":"-"},"content":"*** Allows users to be able to have a more concise view of task deadlines"},{"lineNumber":992,"author":{"gitID":"-"},"content":"** Minor : Find name / description command"},{"lineNumber":993,"author":{"gitID":"-"},"content":"*** Allows users to be able to search the organizer for tasks even when they have forgotten the task\u0027s name"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":997,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"dominickenn"},"content":"The following is a list of user stories for PrioriTask."},{"lineNumber":1000,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1006,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the application"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |add a new task |"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"|`* * *` |user |add a priority level to a task |keep track of the priority levels of my tasks and allow the application to order tasks by priority levels"},{"lineNumber":1011,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"|`* * *` |user |add a deadline to a task |keep track of the deadlines of my tasks and allow the application to help me manage my priorities according to my deadlines"},{"lineNumber":1013,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1014,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |add a subtask to a task |split tasks into smaller subtasks for easier management"},{"lineNumber":1015,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1016,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |add tags to a task |organize the tasks based on groups such as modules or projects"},{"lineNumber":1017,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1018,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |add a description to a task |give a task a description that cannot be sufficiently represented by name or subtasks"},{"lineNumber":1019,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1020,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |delete a task |remove a task"},{"lineNumber":1021,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1022,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |delete a deadline from a task |remove a task\u0027s deadline when necessary"},{"lineNumber":1023,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1024,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |delete a subtask from a task |remove a subtask I no longer need"},{"lineNumber":1025,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"|`* *` |user |delete a tag from a task |remove a tag from a task that no longer belongs to the group"},{"lineNumber":1027,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1028,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |delete a description from a task|remove a description that is no longer relevant"},{"lineNumber":1029,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1030,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |delete all tasks |remove all tasks quickly"},{"lineNumber":1031,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"|`* * *` |user |edit a task\u0027s name |update the taskâ€™s name when required"},{"lineNumber":1033,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"|`* * *` |user |edit a task\u0027s priority level |change a task\u0027s priority level when I need to re-organize my priorities"},{"lineNumber":1035,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1036,"author":{"gitID":"dominickenn"},"content":"|`* * *` |user |edit a task\u0027s deadline |change a task\u0027s deadline"},{"lineNumber":1037,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1038,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |edit a subtask of a task |change a subtask\u0027s name"},{"lineNumber":1039,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"|`* * *`|user with many uncompleted tasks |have all tasks constantly ordered according to their priority levels |know the order I should complete my tasks"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |edit a task\u0027s description|change a task\u0027s description"},{"lineNumber":1043,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"|`* * *` |user |mark a task as complete |complete the task"},{"lineNumber":1045,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1046,"author":{"gitID":"dominickenn"},"content":"|`* *` |user |mark a subtask as complete |keep track of subtasks already done"},{"lineNumber":1047,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"|`* * *` |user with many uncompleted tasks |view all uncompleted tasks |see all tasks that need to be done, along with the deadlines and priorities"},{"lineNumber":1049,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"|`* * *` |user |view all details of a task |view all details of a specified task, after seeing a list of all tasks"},{"lineNumber":1051,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"|`* * *` |user with many tasks |view all completed tasks |see all tasks that have been completed, for past reference"},{"lineNumber":1053,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |view all tasks with a specific tag |locate all tasks with a specific tag, without the need for a manual search"},{"lineNumber":1055,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |view all tasks within a certain deadline |locate all tasks within a certain deadline, without the need of a manual search"},{"lineNumber":1057,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1058,"author":{"gitID":"dominickenn"},"content":"|`* *`|user |view a calender showing task\u0027s deadlines|see a chronic overview of all tasks and their deadlines"},{"lineNumber":1059,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |find a task by name |locate a task without the need to search through an entire list"},{"lineNumber":1061,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"|`* *` |user with many tasks |find a task by description|locate a task when I have forgotten it\u0027s name"},{"lineNumber":1063,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"|`* *` |user who is forgetful |have tasks\u0027 priority levels be automatically updated as deadline approaches |be reminded to complete tasks"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"|`* *` |user who is forgetful |have tasks\u0027 priority levels be automatically increased to maximum level any are still uncompleted after the deadline has passed |be reminded to complete tasks which are past the deadline"},{"lineNumber":1067,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"|`* *` |user |have a reminder of tasks with high priority levels |be reminded to complete tasks with high priority levels"},{"lineNumber":1069,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"|`* *` |user |undo an operation |revert an operation"},{"lineNumber":1071,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"|`* *` |user |redo an undo operation |redo an undo operation"},{"lineNumber":1073,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"|`* *` |user |have a task with no priority level to have itâ€™s priority level be automatically set to the lowest priority level |have priority levels for all tasks even if I had forgotten to set the priority levels"},{"lineNumber":1075,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"|`*` |user |change the view of the calendar |choose to view the calendar by year, month, week, or day"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"dominickenn"},"content":"|`*` |user |reorder a task\u0027s subtasks |rearrange the order of a task\u0027s subtasks when necessary"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"dominickenn"},"content":"|`*` |user |recover my past data |rewrite existing data by recovering past data when necessary"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Organizer` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1092,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Use case: Delete task"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"dominickenn"},"content":"1.  User requests to list tasks"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"2.  Organizer shows a list of tasks"},{"lineNumber":1098,"author":{"gitID":"dominickenn"},"content":"3.  User requests to delete a specific task in the list"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"4.  Organizer deletes the task"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1107,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1111,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"** 3a1. Organizer shows an error message."},{"lineNumber":1114,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1115,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1123,"author":{"gitID":"dominickenn"},"content":".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1124,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1125,"author":{"gitID":"-"},"content":".  Should come with a help feature and various helper messages so that it is usable by a novice who had only have minimal CLI experience."},{"lineNumber":1126,"author":{"gitID":"-"},"content":".  Users are expected to know how to set up the project without an installer."},{"lineNumber":1127,"author":{"gitID":"-"},"content":".  The end product is geared towards power users, and may not be suitable for everyone."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1150,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1155,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1170,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1176,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"dominickenn"},"content":"\u003d\u003d\u003d Deleting a task"},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"dominickenn"},"content":". Deleting a task while all tasks are listed"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"dominickenn"},"content":".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."},{"lineNumber":1186,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1188,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1189,"author":{"gitID":"dominickenn"},"content":"   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1190,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"dominickenn":87,"-":1114}},{"path":"src/test/java/seedu/organizer/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlSerializableOrganizer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ORGANIZER_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    protected Supplier\u003cReadOnlyOrganizer\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"    public TestApp(Supplier\u003cReadOnlyOrganizer\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"            createDataFileWithData(new XmlSerializableOrganizer(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setOrganizerName(ORGANIZER_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the organizer data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public Organizer readStorageOrganizer() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new Organizer(storage.readOrganizer().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"Data is not in the Organizer format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getOrganizerFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        Model copy \u003d new ModelManager((model.getOrganizer()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredTaskList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":118}},{"path":"src/test/java/seedu/organizer/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private TaskPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new TaskPanelSelectionChangedEvent(new TaskCard(GROCERY, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        // associated web page of a task"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                + GROCERY.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":48}},{"path":"src/test/java/seedu/organizer/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlAdaptedSubtask;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlAdaptedTag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlAdaptedTask;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlSerializableOrganizer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.OrganizerBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TestUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validOrganizer.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File MISSING_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingTaskField.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File INVALID_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskField.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File VALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"validTask.xml\");"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempOrganizer.xml\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_PRIORITY \u003d \"9!@#\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Work on PrioriTask\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_PRIORITY \u003d \"9\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_DEADLINE \u003d \"2018-07-16\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_DATEADDED \u003d LocalDate.now().toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_DESCRIPTION \u003d \"Refactor Address to Description\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Boolean VALID_STATUS \u003d null;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedSubtask\u003e VALID_SUBTASKS \u003d Collections.singletonList(new XmlAdaptedSubtask("},{"lineNumber":48,"author":{"gitID":"-"},"content":"            \"Find some friends to play dota or csgo\", false));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    //temporary fix for xml file bug due to PrioriTask\u0027s dependence on the current date"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String current_date \u003d \"current_date\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.getDataFromFile(null, Organizer.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, Organizer.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, Organizer.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        Organizer dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableOrganizer.class).toModelType();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getTaskList().size());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void xmlAdaptedTaskFromFile_fileWithMissingTaskField_validResult() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":89,"author":{"gitID":"-"},"content":"                MISSING_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                null, VALID_PRIORITY, VALID_DEADLINE, current_date,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void xmlAdaptedTaskFromFile_fileWithInvalidTaskField_validResult() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                INVALID_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PRIORITY, VALID_DEADLINE, current_date,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void xmlAdaptedTaskFromFile_fileWithValidTask_validResult() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":109,"author":{"gitID":"-"},"content":"                VALID_TASK_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":111,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PRIORITY, VALID_DEADLINE, current_date,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.saveDataToFile(null, new Organizer());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new Organizer());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer dataToWrite \u003d new XmlSerializableOrganizer(new Organizer());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableOrganizer.class);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        OrganizerBuilder builder \u003d new OrganizerBuilder(new Organizer());"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"        dataToWrite \u003d new XmlSerializableOrganizer("},{"lineNumber":144,"author":{"gitID":"-"},"content":"                builder.withTask(new TaskBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableOrganizer.class);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedTask}"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"    @XmlRootElement(name \u003d \"task\")"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"    private static class XmlAdaptedTaskWithRootElement extends XmlAdaptedTask {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":16,"-":142}},{"path":"src/test/java/seedu/organizer/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - {@code expectedModel}\u0027s organizer book was saved to the storage file."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                                       String expectedMessage, Model expectedModel) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":122,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":127}},{"path":"src/test/java/seedu/organizer/logic/parser/FindMultipleFieldsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private FindMultipleFieldsCommandParser parser \u003d new FindMultipleFieldsCommandParser();"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"                FindMultipleFieldsCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void parse_validArgs_returnsFindMultipleFieldsCommand() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand expectedFindMultipleFieldsCommand \u003d"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"            new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2102\","},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"            \"script\", \"2018-03-17\")));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \"CS2102 script 2018-03-17\", expectedFindMultipleFieldsCommand);"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \" \\n CS2102 \\n \\t script \\n \\t 2018-03-17 \\t\", expectedFindMultipleFieldsCommand);"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":13}},{"path":"src/test/java/seedu/organizer/logic/parser/FindDeadlineCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private FindDeadlineCommandParser parser \u003d new FindDeadlineCommandParser();"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"                FindDeadlineCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void parse_validArgs_returnsFindDeadlineCommand() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand expectedFindDeadlineCommand \u003d"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"            new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\","},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"            \"2018-01-01\")));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \"2018-09-09 2018-01-01\", expectedFindDeadlineCommand);"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \" \\n 2018-09-09 \\n \\t 2018-01-01 \\t\", expectedFindDeadlineCommand);"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":13}},{"path":"src/test/java/seedu/organizer/logic/parser/OrganizerParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddSubtaskCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDescriptionCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HelpCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HistoryCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ToggleCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DescriptionContainsKeywordsPredicate;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskUtil;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"public class OrganizerParserTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    private final OrganizerParser parser \u003d new OrganizerParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new AddCommand(task), command);"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        AddCommand commandAlias \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommandAlias(task));"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        assertEquals(new AddCommand(task), commandAlias);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":75,"author":{"gitID":"dominickenn"},"content":"        DeleteCommand commandAlias \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getPersonDetails(task));"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"        EditCommand commandAlias \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getPersonDetails(task));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), commandAlias);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_addSubtask() throws Exception {"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(task.getName());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddSubtaskCommand command \u003d (AddSubtaskCommand) parser.parseCommand("},{"lineNumber":98,"author":{"gitID":"-"},"content":"                AddSubtaskCommand.COMMAND_WORD + \" \""},{"lineNumber":99,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getSubtaskDetails(task));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        AddSubtaskCommand commandAlias \u003d (AddSubtaskCommand) parser.parseCommand("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                AddSubtaskCommand.COMMAND_ALIAS + \" \""},{"lineNumber":102,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getSubtaskDetails(task));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(new AddSubtaskCommand(INDEX_FIRST_TASK, subtask), command);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(new AddSubtaskCommand(INDEX_FIRST_TASK, subtask), commandAlias);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":114,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"guekling"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":116,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"Study\", \"es2660\", \"update\");"},{"lineNumber":117,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d (FindMultipleFieldsCommand) parser.parseCommand("},{"lineNumber":118,"author":{"gitID":"guekling"},"content":"                FindMultipleFieldsCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":119,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand commandAlias \u003d (FindMultipleFieldsCommand) parser.parseCommand("},{"lineNumber":120,"author":{"gitID":"guekling"},"content":"                FindMultipleFieldsCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":121,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":122,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(keywords)),"},{"lineNumber":123,"author":{"gitID":"guekling"},"content":"            commandAlias);"},{"lineNumber":124,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseCommand_findName() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d (FindNameCommand) parser.parseCommand("},{"lineNumber":131,"author":{"gitID":"-"},"content":"                FindNameCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        FindNameCommand commandAlias \u003d (FindNameCommand) parser.parseCommand("},{"lineNumber":133,"author":{"gitID":"-"},"content":"                FindNameCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(new FindNameCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(new FindNameCommand(new NameContainsKeywordsPredicate(keywords)), commandAlias);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":139,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"guekling"},"content":"    public void parseCommand_findDescription() throws Exception {"},{"lineNumber":141,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"cs2103\", \"cs2101\", \"CS2010\");"},{"lineNumber":142,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d (FindDescriptionCommand) parser.parseCommand("},{"lineNumber":143,"author":{"gitID":"guekling"},"content":"            FindDescriptionCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":144,"author":{"gitID":"guekling"},"content":"            .collect(Collectors.joining(\" \")));"},{"lineNumber":145,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand commandAlias \u003d (FindDescriptionCommand) parser.parseCommand("},{"lineNumber":146,"author":{"gitID":"guekling"},"content":"            FindDescriptionCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":147,"author":{"gitID":"guekling"},"content":"            .collect(Collectors.joining(\" \")));"},{"lineNumber":148,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":149,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(keywords)), commandAlias);"},{"lineNumber":150,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"guekling"},"content":""},{"lineNumber":152,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"guekling"},"content":"    public void parseCommand_findDeadline() throws Exception {"},{"lineNumber":154,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"2018-04-03\", \"2019-01-01\", \"2018-03-17\");"},{"lineNumber":155,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d (FindDeadlineCommand) parser.parseCommand("},{"lineNumber":156,"author":{"gitID":"guekling"},"content":"                FindDeadlineCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":157,"author":{"gitID":"guekling"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":158,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand commandAlias \u003d (FindDeadlineCommand) parser.parseCommand("},{"lineNumber":159,"author":{"gitID":"guekling"},"content":"                FindDeadlineCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":160,"author":{"gitID":"guekling"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":161,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":162,"author":{"gitID":"guekling"},"content":"        assertEquals(new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(keywords)), commandAlias);"},{"lineNumber":163,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":189,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":190,"author":{"gitID":"dominickenn"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":196,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":197,"author":{"gitID":"dominickenn"},"content":"        SelectCommand commandAlias \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":198,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseCommand_toggle() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        ToggleCommand command \u003d (ToggleCommand) parser.parseCommand("},{"lineNumber":206,"author":{"gitID":"-"},"content":"                ToggleCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        ToggleCommand commandAlias \u003d (ToggleCommand) parser.parseCommand("},{"lineNumber":208,"author":{"gitID":"-"},"content":"                ToggleCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertEquals(new ToggleCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(new ToggleCommand(INDEX_FIRST_TASK), commandAlias);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":17,"guekling":40,"-":181}},{"path":"src/test/java/seedu/organizer/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_EXAM;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_EXAM;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_EXAM, MESSAGE_INVALID_FORMAT);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_EXAM, MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_EXAM, MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                \"1\" + INVALID_PRIORITY_DESC, Priority.MESSAGE_PRIORITY_CONSTRAINTS); // invalid priority"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            Deadline.MESSAGE_DEADLINE_CONSTRAINTS); // invalid deadline"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // invalid priority followed by valid deadline"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                \"1\" + INVALID_PRIORITY_DESC + DEADLINE_DESC_EXAM, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // valid priority followed by invalid priority. The test case for invalid priority followed by valid priority"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \"1\" + PRIORITY_DESC_STUDY + INVALID_PRIORITY_DESC, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \"1\" + INVALID_NAME_DESC + INVALID_DEADLINE_DESC + VALID_DESCRIPTION_EXAM + VALID_PRIORITY_EXAM,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_STUDY + TAG_DESC_HUSBAND"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM + NAME_DESC_EXAM + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_STUDY + DEADLINE_DESC_EXAM;"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_EXAM).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_TASK;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_EXAM;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_EXAM).build();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // priority"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_EXAM;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_EXAM).build();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // deadline"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_EXAM;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_EXAM).build();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // organizer"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_EXAM;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_EXAM).build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_EXAM + DESCRIPTION_DESC_EXAM + DEADLINE_DESC_EXAM"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PRIORITY_DESC_EXAM + DESCRIPTION_DESC_EXAM + DEADLINE_DESC_EXAM + TAG_DESC_FRIEND"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY + DESCRIPTION_DESC_STUDY + DEADLINE_DESC_STUDY + TAG_DESC_HUSBAND;"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_STUDY).withDescription(VALID_DESCRIPTION_STUDY)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PRIORITY_DESC + PRIORITY_DESC_STUDY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).build();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + DEADLINE_DESC_STUDY + INVALID_PRIORITY_DESC + DESCRIPTION_DESC_STUDY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + PRIORITY_DESC_STUDY;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_STUDY).withDeadline"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                (VALID_DEADLINE_STUDY)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_STUDY).build();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_TASK;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":217}},{"path":"src/test/java/seedu/organizer/logic/parser/FindDescriptionCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDescriptionCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DescriptionContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindDescriptionCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private FindDescriptionCommandParser parser \u003d new FindDescriptionCommandParser();"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"            FindDescriptionCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void parse_validArgs_returnsFindDescriptionCommand() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand expectedFindDescriptionCommand \u003d"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"                new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"cs2103\", \"CS2102\")));"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \"cs2103 CS2102\", expectedFindDescriptionCommand);"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertParseSuccess(parser, \" \\n cs2103 \\n \\t CS2102  \\t\", expectedFindDescriptionCommand);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":22,"-":13}},{"path":"src/test/java/seedu/organizer/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_EXAM;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DEADLINE_DESC_STUDY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESCRIPTION_DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_EXAM;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.NAME_DESC_STUDY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_EXAM;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.PRIORITY_DESC_STUDY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Task expectedTask \u003d new TaskBuilder().withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_STUDY).withDescription(VALID_DESCRIPTION_STUDY)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // multiple prioritys - last priority accepted"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_EXAM + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple deadlines - last deadline accepted"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_EXAM + DEADLINE_DESC_STUDY"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple descriptions - last organizer accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_EXAM"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY + TAG_DESC_FRIEND, new AddCommand(expectedTask));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Task expectedTaskMultipleTags \u003d new TaskBuilder().withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_STUDY).withDescription(VALID_DESCRIPTION_STUDY)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_STUDY"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedTaskMultipleTags));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Task expectedNoTagTask \u003d new TaskBuilder().withName(VALID_NAME_EXAM).withPriority(VALID_PRIORITY_EXAM)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withDeadline(VALID_DEADLINE_EXAM).withDescription(VALID_DESCRIPTION_EXAM).withTags().build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                new AddCommand(expectedNoTagTask));"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"        //@@author dominickenn"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        // no priority"},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"        Task expectedNoPriorityTask \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"                .withPriority(Priority.LOWEST_PRIORITY_LEVEL).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"                .withDescription(VALID_DESCRIPTION_EXAM).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":92,"author":{"gitID":"dominickenn"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + DEADLINE_DESC_EXAM + DESCRIPTION_DESC_EXAM + TAG_DESC_HUSBAND,"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"                new AddCommand(expectedNoPriorityTask));"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        //@@guekling"},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"        // no description"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"        Task expectedNoDescriptionTask \u003d new TaskBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM)"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"                .withDescription(\"\").withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"        assertParseSuccess(parser, NAME_DESC_EXAM + PRIORITY_DESC_EXAM + DEADLINE_DESC_EXAM"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"                + TAG_DESC_HUSBAND, new AddCommand(expectedNoDescriptionTask));"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        //@@author"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY, expectedMessage);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // missing deadline prefix"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + VALID_DEADLINE_STUDY"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + DESCRIPTION_DESC_STUDY, expectedMessage);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_STUDY + VALID_PRIORITY_STUDY + VALID_DEADLINE_STUDY"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            + VALID_DESCRIPTION_STUDY, expectedMessage);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // invalid priority"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + INVALID_PRIORITY_DESC + DEADLINE_DESC_STUDY"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // invalid deadline"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + INVALID_DEADLINE_DESC"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_STUDY + PRIORITY_DESC_STUDY + DEADLINE_DESC_STUDY"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PRIORITY_DESC + DEADLINE_DESC_STUDY"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            + DESCRIPTION_DESC_STUDY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_STUDY + PRIORITY_DESC_STUDY"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            + DEADLINE_DESC_STUDY + DESCRIPTION_DESC_STUDY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":16,"-":132}},{"path":"src/test/java/seedu/organizer/logic/commands/EditTaskDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_STUDY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class EditTaskDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_EXAM);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_EXAM.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_EXAM.equals(DESC_EXAM));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(DESC_STUDY));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EditTaskDescriptor editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_STUDY).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different priority -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withPriority(VALID_PRIORITY_STUDY).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different deadline -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withDeadline(VALID_DEADLINE_STUDY).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different organizer -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withDescription(VALID_DESCRIPTION_STUDY).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_EXAM).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_EXAM.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":58}},{"path":"src/test/java/seedu/organizer/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of organizer book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrganizer().getTaskList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"        // delete -\u003e first task deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"     * 1. Deletes a {@code Task} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted task in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_TASK);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(taskToDelete, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e deletes same second task in unfiltered task list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_TASK);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":16,"-":178}},{"path":"src/test/java/seedu/organizer/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":44}},{"path":"src/test/java/seedu/organizer/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.DESC_STUDY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Task lastTask \u003d model.getFilteredTaskList().get(indexLastPerson.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        TaskBuilder personInList \u003d new TaskBuilder(lastTask);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Task editedTask \u003d personInList.withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(lastTask, editedTask);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_STUDY).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(model.getFilteredTaskList().get(0), editedTask);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void execute_duplicateTaskUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_TASK, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // edit task in filtered list into a duplicate in organizer book"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Task taskInList \u003d model.getOrganizer().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"                new EditTaskDescriptorBuilder(taskInList).build());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * but smaller than size of organizer book"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of organizer book list"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrganizer().getTaskList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"        // edit -\u003e first task edited"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(taskToEdit, editedTask);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"dominickenn"},"content":"     * 1. Edits a {@code Task} from a filtered list."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":196,"author":{"gitID":"dominickenn"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited task in the"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":198,"author":{"gitID":"dominickenn"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the task object regardless of indexing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"dominickenn"},"content":"        Task editedTask \u003d new TaskBuilder().build();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_TASK, descriptor);"},{"lineNumber":208,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_TASK);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":212,"author":{"gitID":"dominickenn"},"content":"        // edit -\u003e edits second task in unfiltered task list / first task in filtered task list"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(taskToEdit, editedTask);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), taskToEdit);"},{"lineNumber":221,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e edits same second task in unfiltered task list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_TASK, DESC_EXAM);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_EXAM);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_TASK, copyDescriptor);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_EXAM)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_STUDY)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditTaskDescriptor descriptor) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":20,"-":242}},{"path":"src/test/java/seedu/organizer/logic/commands/FindNameCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindNameCommand}."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class FindNameCommandTest extends FindCommandTest\u003cFindNameCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        FindNameCommand findFirstCommand \u003d new FindNameCommand(firstPredicate);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        FindNameCommand findSecondCommand \u003d new FindNameCommand(secondPredicate);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        FindNameCommand findFirstCommandCopy \u003d new FindNameCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d prepareCommand(\" \");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d prepareCommand(\"Prepare breakfast Project Revision\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindNameCommand}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private FindNameCommand prepareCommand(String userInput) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        FindNameCommand command \u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                new FindNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":73}},{"path":"src/test/java/seedu/organizer/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.EditTaskDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_EXAM \u003d \"CS2103T Exam\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_STUDY \u003d \"Study MA1101R\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_REVISION \u003d \"Revision\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PRIORITY_EXAM \u003d \"9\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PRIORITY_STUDY \u003d \"0\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PRIORITY_REVISION \u003d \"5\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_DEADLINE_EXAM \u003d \"2019-04-05\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_DEADLINE_STUDY \u003d \"2019-09-11\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_DEADLINE_REVISION \u003d \"2019-04-05\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_EXAM \u003d \"CS2103T Exam\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_STUDY \u003d \"Study for CS2103T Exam\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_REVISION \u003d \" Revise for CS2106 midterms\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIENDS \u003d \"friends\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_EXAM \u003d \" \" + PREFIX_NAME + VALID_NAME_EXAM;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_STUDY \u003d \" \" + PREFIX_NAME + VALID_NAME_STUDY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_REVISION \u003d \" \" + PREFIX_NAME + VALID_NAME_REVISION;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String PRIORITY_DESC_EXAM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_EXAM;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PRIORITY_DESC_STUDY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_STUDY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PRIORITY_DESC_REVISION \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_REVISION;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String DEADLINE_DESC_EXAM \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_EXAM;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String DEADLINE_DESC_STUDY \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_STUDY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String DEADLINE_DESC_REVISION \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_REVISION;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_EXAM \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_EXAM;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_STUDY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_STUDY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_REVISION \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_REVISION;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIENDS \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIENDS;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"911a\"; // \u0027a\u0027 not allowed in prioritys"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final EditTaskDescriptor DESC_EXAM;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final EditTaskDescriptor DESC_STUDY;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        DESC_EXAM \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_EXAM)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_EXAM).withDeadline(VALID_DEADLINE_EXAM).withDescription"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                        (VALID_DESCRIPTION_EXAM)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        DESC_STUDY \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_STUDY)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withPriority(VALID_PRIORITY_STUDY).withDeadline(VALID_DEADLINE_STUDY).withDescription"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                        (VALID_DESCRIPTION_STUDY)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * - the organizer book and the filtered task list in the {@code actualModel} remain unchanged"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"        Organizer expectedOrganizer \u003d new Organizer(actualModel.getOrganizer());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"            assertEquals(expectedOrganizer, actualModel.getOrganizer());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s organizer book."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredTaskList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s organizer book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            model.deleteTask(firstTask);"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"Task in filtered list must exist in model.\", pnfe);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":163}},{"path":"src/test/java/seedu/organizer/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(model.getOrganizer(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addTask(validTask);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        assertCommandSuccess(prepareCommand(validTask, model), model,"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Task taskInList \u003d model.getOrganizer().getTaskList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(taskInList, model), model, AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code task} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    private AddCommand prepareCommand(Task task, Model model) {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        AddCommand command \u003d new AddCommand(task);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":48}},{"path":"src/test/java/seedu/organizer/logic/commands/FindDescriptionCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DescriptionContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the Model) for {@code FindDescriptionCommand}."},{"lineNumber":23,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"public class FindDescriptionCommandTest extends FindCommandTest\u003cFindDescriptionCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"cs2101\"));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"CS2010\"));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand findFirstCommand \u003d new FindDescriptionCommand(firstPredicate);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand findSecondCommand \u003d new FindDescriptionCommand(secondPredicate);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand findFirstCommandCopy \u003d new FindDescriptionCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":""},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    public void equals_notCaseSensitive() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d prepareCommand(\"op1\");"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(PROJECT));"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":""},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d prepareCommand(\" \");"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":""},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d prepareCommand(\"coffee OP1 midterms\");"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":""},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"     * Parses {@code userInput} into a {@code FindDescriptionCommand}."},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"    private FindDescriptionCommand prepareCommand(String userInput) {"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        FindDescriptionCommand command \u003d"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"            new FindDescriptionCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"            (\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":64,"-":19}},{"path":"src/test/java/seedu/organizer/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":" * Represents a find command with hidden internal logic and the ability to be executed for a {@code Command} of"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":" * type {@code T}."},{"lineNumber":19,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"public abstract class FindCommandTest\u003cT extends Command\u003e {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    protected Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"     * - the {@code FilteredList\u003cTask\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"     * - the {@code Organizer} in model remains the same after executing the {@code command}"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    protected void assertCommandSuccess(T command, String expectedMessage, List\u003cTask\u003e expectedList)"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"            throws CommandException {"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        Organizer expectedOrganizer \u003d new Organizer(model.getOrganizer());"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":""},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedList, model.getFilteredTaskList());"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertEquals(expectedOrganizer, model.getOrganizer());"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":26,"-":14}},{"path":"src/test/java/seedu/organizer/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"     * Deletes the first task in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Task taskToDelete \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deleteTask(taskToDelete);"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"            } catch (TaskNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"                fail(\"Impossible: taskToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":65}},{"path":"src/test/java/seedu/organizer/logic/commands/FindMultipleFieldsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the Model) for {@code FindMultipleFieldsCommand}."},{"lineNumber":23,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommandTest extends FindCommandTest\u003cFindMultipleFieldsCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"                new MultipleFieldsContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"                new MultipleFieldsContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand findFirstCommand \u003d new FindMultipleFieldsCommand(firstPredicate);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand findSecondCommand \u003d new FindMultipleFieldsCommand(secondPredicate);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand findFirstCommandCopy \u003d new FindMultipleFieldsCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":""},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d prepareCommand(\" \");"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":""},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d prepareCommand(\"Toast Project 2019-04-05\");"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":""},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"     * Parses {@code userInput} into a {@code FindMultipleFieldsCommand}."},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"    private FindMultipleFieldsCommand prepareCommand(String userInput) {"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        FindMultipleFieldsCommand command \u003d"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"            new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(userInput.split"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"            (\"\\\\s+\"))));"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"        return command;"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":57,"-":19}},{"path":"src/test/java/seedu/organizer/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_THIRD_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_TASK);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_TASK);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_TASK);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of organizer book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getOrganizer().getTaskList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_TASK);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_TASK);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_TASK);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":140}},{"path":"src/test/java/seedu/organizer/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForTask(validTask, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicateTask_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateTaskException();"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForTask(validTask, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"     * Generates a new AddCommand with the details of the given task."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForTask(Task task, Model model) {"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        AddCommand command \u003d new AddCommand(task);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"        public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void updateTask(Task target, Task editedTask)"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"                throws DuplicateTaskException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always throw a DuplicateTaskException when trying to add a task."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicateTaskException extends ModelStub {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"     * A Model stub that always accept the task being added."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"            requireNonNull(task);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            tasksAdded.add(task);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":"        public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"            return new Organizer();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":19,"-":158}},{"path":"src/test/java/seedu/organizer/storage/XmlSerializableOrganizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TypicalTasks;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class XmlSerializableOrganizerTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableOrganizerTest/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_TASKS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalTasksOrganizer.xml\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File INVALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskOrganizer.xml\");"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagOrganizer.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void toModelType_typicalTasksFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASKS_FILE,"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"                XmlSerializableOrganizer.class);"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        Organizer organizerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Organizer typicalTasksOrganizer \u003d TypicalTasks.getTypicalOrganizer();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(organizerFromFile, typicalTasksOrganizer);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"                XmlSerializableOrganizer.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"                XmlSerializableOrganizer.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":8,"-":43}},{"path":"src/test/java/seedu/organizer/storage/XmlOrganizerStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.INTERVIEWPREP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.MAKEPRESENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"public class XmlOrganizerStorageTest {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlOrganizerStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    private java.util.Optional\u003cReadOnlyOrganizer\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlOrganizerStorage(filePath).readOrganizer(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        readAddressBook(\"NotXmlFormatOrganizer.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        readAddressBook(\"invalidTaskOrganizer.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        readAddressBook(\"invalidAndValidTaskOrganizer.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Organizer original \u003d getTypicalOrganizer();"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        XmlOrganizerStorage xmlAddressBookStorage \u003d new XmlOrganizerStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveOrganizer(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyOrganizer readBack \u003d xmlAddressBookStorage.readOrganizer(filePath).get();"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addTask(MAKEPRESENT);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removeTask(GROCERY);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveOrganizer(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readOrganizer(filePath).get();"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addTask(INTERVIEWPREP);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveOrganizer(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readOrganizer().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"    private void saveAddressBook(ReadOnlyOrganizer addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlOrganizerStorage(filePath).saveOrganizer(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        saveAddressBook(new Organizer(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":12,"-":113}},{"path":"src/test/java/seedu/organizer/logic/commands/FindDeadlineCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PREPAREBREAKFAST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.PROJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":" * Contains integration tests (interaction with the Model) for {@code FindDeadlineCommand}."},{"lineNumber":23,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommandTest extends FindCommandTest\u003cFindDeadlineCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"                new DeadlineContainsKeywordsPredicate(Collections.singletonList(\"2018-08-09\"));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"                new DeadlineContainsKeywordsPredicate(Collections.singletonList(\"2018-03-02\"));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand findFirstCommand \u003d new FindDeadlineCommand(firstPredicate);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand findSecondCommand \u003d new FindDeadlineCommand(secondPredicate);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand findFirstCommandCopy \u003d new FindDeadlineCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":""},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    public void execute_zeroKeywords_noTaskFound() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d prepareCommand(\" \");"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":""},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"    public void execute_multipleKeywords_multipleTasksFound() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d prepareCommand(\"2019-04-05 2019-09-14 2019-11-12\");"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(REVISION, PROJECT, PREPAREBREAKFAST));"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":""},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"     * Parses {@code userInput} into a {@code FindDeadlineCommand}."},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"    private FindDeadlineCommand prepareCommand(String userInput) {"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        FindDeadlineCommand command \u003d"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"                new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        return command;"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":56,"-":19}},{"path":"src/test/java/seedu/organizer/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlOrganizerStorage organizerStorage \u003d new XmlOrganizerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(organizerStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void organizerReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"         * {@link XmlOrganizerStorage} class."},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlOrganizerStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Organizer original \u003d getTypicalOrganizer();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveOrganizer(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyOrganizer retrieved \u003d storageManager.readOrganizer().get();"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        assertEquals(original, new Organizer(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getOrganizerFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getOrganizerFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleOrganizerChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        Storage storage \u003d new StorageManager(new XmlOrganizerStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleOrganizerChangedEvent(new OrganizerChangedEvent(new Organizer()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"    class XmlOrganizerStorageExceptionThrowingStub extends XmlOrganizerStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        public XmlOrganizerStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveOrganizer(ReadOnlyOrganizer addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":95}},{"path":"src/test/java/seedu/organizer/logic/commands/ToggleCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * ToggleCommand."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ToggleCommandTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(ToggleCommand.MESSAGE_EDIT_TASK_SUCCESS, toggledTask);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(toggleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_secondunfilteredList_success() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(1);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(INDEX_SECOND_TASK);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(ToggleCommand.MESSAGE_EDIT_TASK_SUCCESS, toggledTask);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(toggleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(outOfBoundsIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandFailure(toggleCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Task toggledTask \u003d toggleTask(originalTask);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        // edit -\u003e first task edited"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        toggleCommand.execute();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        undoRedoStack.push(toggleCommand);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, toggledTask);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Retrun an (@code Task) with status inversed"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private Task toggleTask(Task task) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return new Task("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                task.getName(),"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                task.getPriority(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                task.getDeadline(),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                task.getDateAdded(),"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                task.getDescription(),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                task.getStatus().getInverse(),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                task.getTags(),"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                task.getSubtasks()"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Returns an {@code ToggleCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private ToggleCommand prepareCommand(Index index) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        ToggleCommand toggleCommand \u003d new ToggleCommand(index);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        toggleCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return toggleCommand;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":108}},{"path":"src/test/java/seedu/organizer/storage/XmlAdaptedTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"public class XmlAdaptedTaskTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_PRIORITY \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_DEADLINE \u003d \"2018/09/09\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d SPRINGCLEAN.getName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PRIORITY \u003d SPRINGCLEAN.getPriority().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_DEADLINE \u003d SPRINGCLEAN.getDeadline().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_DATEADDED \u003d SPRINGCLEAN.getDateAdded().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_DESCRIPTION \u003d SPRINGCLEAN.getDescription().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Boolean VALID_STATUS \u003d SPRINGCLEAN.getStatus().value;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d SPRINGCLEAN.getTags().stream()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedSubtask\u003e VALID_SUBTASKS \u003d SPRINGCLEAN.getSubtasks().stream()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedSubtask::new)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void toModelType_validTaskDetails_returnsTask() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(SPRINGCLEAN);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(SPRINGCLEAN, task.toModelType());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(INVALID_NAME, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(null, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPriority_throwsIllegalValueException() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(VALID_NAME, INVALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                        VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Priority.MESSAGE_PRIORITY_CONSTRAINTS;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void toModelType_nullPriority_throwsIllegalValueException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, null, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void toModelType_invalidDeadline_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, INVALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                        VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Deadline.MESSAGE_DEADLINE_CONSTRAINTS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void toModelType_nullDeadline_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, null, VALID_DATEADDED,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                VALID_DESCRIPTION, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                null, VALID_STATUS, VALID_TAGS, VALID_SUBTASKS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                new XmlAdaptedTask(VALID_NAME, VALID_PRIORITY, VALID_DEADLINE, VALID_DATEADDED,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                        VALID_DESCRIPTION, VALID_STATUS, invalidTags, VALID_SUBTASKS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, task::toModelType);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"guekling"},"content":"    //@@author guekling"},{"lineNumber":117,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"guekling"},"content":"    public void equalsTrue_sameTask() {"},{"lineNumber":119,"author":{"gitID":"guekling"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(SPRINGCLEAN);"},{"lineNumber":120,"author":{"gitID":"guekling"},"content":"        assertTrue(task.equals(task));"},{"lineNumber":121,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"guekling"},"content":""},{"lineNumber":123,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"guekling"},"content":"    public void equalsFalse() {"},{"lineNumber":125,"author":{"gitID":"guekling"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(SPRINGCLEAN);"},{"lineNumber":126,"author":{"gitID":"guekling"},"content":"        assertFalse(task.equals(new Integer(1)));"},{"lineNumber":127,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"guekling"},"content":"    //@@author"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"guekling":13,"-":115}},{"path":"src/test/java/seedu/organizer/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.EXAM;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.STUDY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.OrganizerBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredTaskList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Organizer organizer \u003d new OrganizerBuilder().withTask(EXAM).withTask(STUDY).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManager \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(organizer, userPrefs), modelManager);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void deleteTag_tagUsedByMultipleTasks_tagRemoved() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Organizer organizer \u003d new OrganizerBuilder().withTask(EXAM).withTask(STUDY).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManager \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Task examWithoutFriendTag \u003d new TaskBuilder(EXAM).withTags().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Task studyWithoutFriendTag \u003d new TaskBuilder(STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(examWithoutFriendTag)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .withTask(studyWithoutFriendTag).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(expectedOrganizer, userPrefs), modelManager);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Organizer organizer \u003d new OrganizerBuilder().withTask(GROCERY).withTask(SPRINGCLEAN).build();"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        Organizer differentOrganizer \u003d new Organizer();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManager \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(organizer, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"        // different organizer -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentOrganizer, userPrefs)));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String[] keywords \u003d GROCERY.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        assertFalse(modelManager.equals(new ModelManager(organizer, userPrefs)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        differentUserPrefs.setOrganizerName(\"differentName\");"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"        assertTrue(modelManager.equals(new ModelManager(organizer, differentUserPrefs)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":92}},{"path":"src/test/java/seedu/organizer/model/UniqueTaskListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.task.Priority.HIGHEST_SETTABLE_PRIORITY_LEVEL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.UniqueTaskList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"public class UniqueTaskListTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.asObservableList().remove(0);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public void priorityAutoUpdateTest() throws DuplicateTaskException {"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        //CurrentDate equals to AddedDate"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        Task taskCurrentDateEqualsToAddedDate \u003d new TaskBuilder().withDeadline(\"2999-01-01\")"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"                                            .withDateAdded(currentDate.toString()).build();"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        Task expectedTaskCurrentDateEqualsToAddedDate \u003d new TaskBuilder().withDeadline(\"2999-01-01\")"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"                                                    .withDateAdded(currentDate.toString())"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"                                                    .withPriority(TaskBuilder.DEFAULT_PRIORITY).build();"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.add(taskCurrentDateEqualsToAddedDate);"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList.add(expectedTaskCurrentDateEqualsToAddedDate);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        assertEquals(uniqueTaskList, expectedUniqueTaskList);"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        //CurrentDate before Deadline"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        Task taskCurrentDateBeforeDeadline \u003d new TaskBuilder().withDeadline(\"2035-01-01\")"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1900-01-01\").build();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        Task expectedTaskCurrentDateBeforeDeadline \u003d new TaskBuilder().withDeadline(\"2035-01-01\")"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1900-01-01\")"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"                .withPriority(\"8\").build();"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.add(taskCurrentDateBeforeDeadline);"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList.add(expectedTaskCurrentDateBeforeDeadline);"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        assertEquals(uniqueTaskList, expectedUniqueTaskList);"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"        //CurrentDate after Deadline"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        Task taskCurrentDateAfterDeadline \u003d new TaskBuilder().withDeadline(\"1999-01-01\")"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1950-01-01\").build();"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        Task expectedTaskCurrentDateAfterDeadline \u003d new TaskBuilder().withDeadline(\"1999-01-01\")"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"                .withDateAdded(\"1950-01-01\")"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"                .withPriority(HIGHEST_SETTABLE_PRIORITY_LEVEL).build();"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"        uniqueTaskList.add(taskCurrentDateAfterDeadline);"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        expectedUniqueTaskList.add(expectedTaskCurrentDateAfterDeadline);"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        assertEquals(uniqueTaskList, expectedUniqueTaskList);"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":47,"-":24}},{"path":"src/test/java/seedu/organizer/model/task/TaskCreatedContainsDateAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"/**\\"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":" * Tests whether a DateAdded is automatically created upon Task creation"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"public class TaskCreatedContainsDateAdded {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    public void createTaskContainsDateAdded() {"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d new Task(new Name(VALID_NAME_EXAM), new Priority(VALID_PRIORITY_EXAM),"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"                new Deadline(VALID_DEADLINE_EXAM), new Description(VALID_DESCRIPTION_EXAM),"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"                new HashSet\u003cTag\u003e());"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"        assertNotNull(task.getDateAdded());"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":15,"-":15}},{"path":"src/test/java/seedu/organizer/model/task/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        // different task -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Study\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Study\", \"Exam\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Exam\", \"Grocery\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Grocery\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"sTuDy\", \"eXAM\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Grocery\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match priority, deadline and description, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"2\", \"2018-11-11\", \"Chapter\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":74}},{"path":"src/test/java/seedu/organizer/model/OrganizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.EXAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.GROCERY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.REVISION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.SPRINGCLEAN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.STUDY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.OrganizerBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"public class OrganizerTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    private final Organizer organizer \u003d new Organizer();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final Organizer organizerWithStudyAndExam \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withTask(EXAM).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), organizer.getTaskList());"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        assertEquals(Collections.emptyList(), organizer.getTagList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(null);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyOrganizer_replacesData() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Organizer newData \u003d getTypicalOrganizer();"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        assertEquals(newData, organizer);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicateTasks_throwsAssertionError() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Repeat GROCERY twice"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList(GROCERY, GROCERY);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(GROCERY.getTags());"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        OrganizerStub newData \u003d new OrganizerStub(newTasks, newTags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        organizer.getTaskList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        organizer.getTagList().remove(0);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void updateTask_detailsChanged_tasksAndTagsListUpdated() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Organizer organizerUpdatedToAmy \u003d new OrganizerBuilder().withTask(STUDY).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        organizerUpdatedToAmy.updateTask(STUDY, EXAM);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(EXAM).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrganizer, organizerUpdatedToAmy);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void removeTag_nonExistentTag_organizerUnchanged() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        organizerWithStudyAndExam.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(STUDY).withTask(EXAM).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrganizer, organizerWithStudyAndExam);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void removeTag_tagUsedByMultipleTasks_tagRemoved() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        organizerWithStudyAndExam.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Task amyWithoutFriendTag \u003d new TaskBuilder(EXAM).withTags().build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Task bobWithoutFriendTag \u003d new TaskBuilder(STUDY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(bobWithoutFriendTag)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .withTask(amyWithoutFriendTag).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrganizer, organizerWithStudyAndExam);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":116,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"dominickenn"},"content":"    public void addTask_alwaysSorted() throws DuplicateTaskException {"},{"lineNumber":118,"author":{"gitID":"dominickenn"},"content":"        Organizer addRevision \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":119,"author":{"gitID":"dominickenn"},"content":"                .withTask(EXAM).build();"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"        addRevision.addTask(REVISION);"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"                .withTask(REVISION).withTask(EXAM).build();"},{"lineNumber":123,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedOrganizer, addRevision);"},{"lineNumber":124,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":126,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"    public void editTask_alwaysSorted() throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"        Organizer editExam \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"                .withTask(REVISION).withTask(EXAM).build();"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"        editExam.updateTask(EXAM, SPRINGCLEAN);"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        Organizer expectedOrganizer \u003d new OrganizerBuilder().withTask(STUDY)"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"                .withTask(REVISION).withTask(SPRINGCLEAN).build();"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"        assertEquals(expectedOrganizer, editExam);"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"     * A stub ReadOnlyOrganizer whose tasks and tags lists can violate interface constraints."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"    private static class OrganizerStub implements ReadOnlyOrganizer {"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"        OrganizerStub(Collection\u003cTask\u003e tasks, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"            return tasks;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":36,"-":124}},{"path":"src/test/java/seedu/organizer/model/task/DeadlineTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"public class DeadlineTest {"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        String invalidDeadline \u003d \"2018\";"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDeadline));"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    public void isValidDeadline() {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        // null deadline"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":""},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        // blank deadline"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":""},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        // missing parts"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2018-02\")); // missing date"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-02\")); // missing year"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019\")); // missing month and date"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"12\")); // missing year and date"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        // invalid parts"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"17-12-12\")); // invalid year"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019-20-09\")); // invalid month"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2016-02-40\")); // invalid date"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-2-09\")); // single numbered months should be declared \u00270x\u0027"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-02-9\")); // single numbered dates should be declared \u00270x\u0027"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-30-2017\")); // wrong format of MM-DD-YYYY"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"30-12-2017\")); // wrong format of DD-MM-YYYY"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\" 2017-08-09\")); // leading space"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-08-09 \")); // trailing space"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017/09/09\")); // wrong symbol"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":""},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        // valid deadline"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"2018-03-11\"));"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"2017-02-31\"));  // dates that have already passed"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        assertTrue(Deadline.isValidDeadline(\"3000-03-23\"));   // dates in the far future"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":""},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"    public void hashCode_equals() {"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        Deadline testDeadline \u003d new Deadline(\"2018-09-09\");"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"        LocalDate testDeadlineValue \u003d LocalDate.parse(\"2018-09-09\");"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"        assertEquals(testDeadline.hashCode(), testDeadlineValue.hashCode());"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":54,"-":12}},{"path":"src/test/java/seedu/organizer/model/task/DateAddedTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"public class DateAddedTest {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new DateAdded(null));"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public void constructor_invalidDateAdded_throwsIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        String invalidDateAdded \u003d \"2018\";"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(invalidDateAdded));"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    public void isValidDateAdded() {"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        // null deadline"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        // blank dateadded"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        // missing parts"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2018-02\")); // missing date"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-02\")); // missing year"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019\")); // missing month and date"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"12\")); // missing year and date"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        // invalid parts"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"17-12-12\")); // invalid year"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2019-20-09\")); // invalid month"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2016-02-40\")); // invalid date"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-2-09\")); // single numbered months should be declared \u00270x\u0027"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-02-9\")); // single numbered dates should be declared \u00270x\u0027"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"12-30-2017\")); // wrong format of MM-DD-YYYY"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"30-12-2017\")); // wrong format of DD-MM-YYYY"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\" 2017-08-09\")); // leading space"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017-08-09 \")); // trailing space"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        assertFalse(Deadline.isValidDeadline(\"2017/09/09\")); // wrong symbol"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        // valid dateadded"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"2018-03-11\"));"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"2017-02-31\"));  // dates that have already passed"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        assertTrue(Deadline.isValidDeadline(\"3000-03-23\"));   // dates in the far future"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    public void hashCode_equals() {"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        DateAdded testDateAdded \u003d new DateAdded(\"2018-09-09\");"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        LocalDate testDateAddedValue \u003d LocalDate.parse(\"2018-09-09\");"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        assertEquals(testDateAdded.hashCode(), testDateAddedValue.hashCode());"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":54,"-":12}},{"path":"src/test/java/seedu/organizer/model/task/DescriptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"public class DescriptionTest {"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    public void isValidDescription() {"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"        // null organizer"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        // blank descriptions"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // valid descriptions"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"Practice MA1101R past year questions\"));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"!\")); // one character"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        assertTrue(Description.isValidDescription(\"Add new sort feature / Update README.md / Refactor Address to \""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"            + \"Email\")); // long description"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    public void hashCode_equals() {"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        Description testDescription \u003d new Description(\"CS2103T Testing\");"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        String testDescriptionValue \u003d \"CS2103T Testing\";"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertEquals(testDescription.hashCode(), testDescriptionValue.hashCode());"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":31,"-":9}},{"path":"src/test/java/seedu/organizer/model/task/DeadlineContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class DeadlineContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":""},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate firstPredicate \u003d new DeadlineContainsKeywordsPredicate("},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate secondPredicate \u003d new DeadlineContainsKeywordsPredicate("},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate firstPredicateCopy \u003d new DeadlineContainsKeywordsPredicate("},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public void test_deadlineContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate predicate \u003d new DeadlineContainsKeywordsPredicate(Collections.singletonList"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"                (\"2018-03-17\"));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":""},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":""},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    public void test_deadlineDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"        DeadlineContainsKeywordsPredicate predicate \u003d new DeadlineContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":""},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2018-03-17\"));"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":""},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"        // Keywords match name, priority and description, but does not match deadline"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DeadlineContainsKeywordsPredicate(Arrays.asList(\"2\", \"Study\", \"Chapter\"));"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"            .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":66,"-":13}},{"path":"src/test/java/seedu/organizer/model/task/DescriptionContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class DescriptionContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"CS2101\");"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"CS2101\", \"CS2103\");"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":""},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate firstPredicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate secondPredicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":""},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":""},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":""},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":""},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    public void test_descriptionContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"            Collections.singletonList(\"CS2103T\"));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Study for CS2103T Exam\").build()));"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103\"));"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103\").build()));"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":""},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"ES2660\"));"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":""},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        // Mixed-case keywords"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"cs2101\", \"eS2660\"));"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"guekling"},"content":""},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"        DescriptionContainsKeywordsPredicate predicate \u003d new DescriptionContainsKeywordsPredicate("},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"            Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101\").build()));"},{"lineNumber":71,"author":{"gitID":"guekling"},"content":""},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"CS2103\"));"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103T\").build()));"},{"lineNumber":75,"author":{"gitID":"guekling"},"content":""},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        // Keywords match name, priority, deadline, but does not match description"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Study\", \"2\", \"2018-11-11\"));"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"            .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":68,"-":13}},{"path":"src/test/java/seedu/organizer/logic/commands/AddSubtaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.testutil.TypicalTasks.getTypicalOrganizer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddSubtaskCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalOrganizer(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Task editedTask \u003d addSubtask(originalTask, subtask);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(AddSubtaskCommand.MESSAGE_SUCCESS, editedTask);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, editedTask);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(addSubtaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_secondunfilteredList_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(1);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Task editedTask \u003d addSubtask(originalTask, subtask);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_SECOND_TASK, subtask);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(AddSubtaskCommand.MESSAGE_SUCCESS, editedTask);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, editedTask);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(addSubtaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(outOfBoundsIndex, subtask);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(addSubtaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void execute_duplicateSubtask_failure() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d originalTask.getSubtasks().get(0);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(addSubtaskCommand, model, AddSubtaskCommand.MESSAGE_DUPLICATED);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Task originalTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Task editedTask \u003d addSubtask(originalTask, subtask);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        Model expectedModel \u003d new ModelManager(new Organizer(model.getOrganizer()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"        // edit -\u003e first task edited"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        addSubtaskCommand.execute();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        undoRedoStack.push(addSubtaskCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"dominickenn"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":"        // redo -\u003e same first task edited again"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        expectedModel.updateTask(originalTask, editedTask);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void equal_unequalObject_false() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Subtask otherSubtask \u003d model.getFilteredTaskList().get(0).getSubtasks().get(0);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexSubtask \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexOtherSubtask \u003d prepareCommand(INDEX_FIRST_TASK, otherSubtask);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddSubtaskCommand secondIndexSubtask \u003d prepareCommand(INDEX_SECOND_TASK, subtask);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        AddSubtaskCommand secondIndexOtherSubtask \u003d prepareCommand(INDEX_SECOND_TASK, otherSubtask);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertNotEquals(firstIndexSubtask, firstIndexOtherSubtask);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertNotEquals(firstIndexSubtask, secondIndexOtherSubtask);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertNotEquals(firstIndexSubtask, secondIndexSubtask);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void equal_equalObject_true() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Subtask subtask \u003d new Subtask(new Name(VALID_NAME_EXAM));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexSubtask \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        AddSubtaskCommand firstIndexOtherSubtask \u003d prepareCommand(INDEX_FIRST_TASK, subtask);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(firstIndexSubtask, firstIndexOtherSubtask);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(firstIndexSubtask, firstIndexSubtask);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Retrun an (@code Task) with added subtask"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private Task addSubtask(Task task, Subtask subtask) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003cSubtask\u003e(task.getSubtasks());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        subtasks.add(subtask);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return new Task("},{"lineNumber":148,"author":{"gitID":"-"},"content":"                task.getName(),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                task.getPriority(),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                task.getDeadline(),"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                task.getDateAdded(),"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                task.getDescription(),"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                task.getStatus(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                task.getTags(),"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                subtasks"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns an {@code AddSubtaskCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private AddSubtaskCommand prepareCommand(Index index, Subtask subtask) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        AddSubtaskCommand addSubtaskCommand \u003d new AddSubtaskCommand(index, subtask);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        addSubtaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return addSubtaskCommand;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":161}},{"path":"src/test/java/seedu/organizer/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.util.SampleDataUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" * A utility class to help with building Task objects."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"public class TaskBuilder {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Study\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"2\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DEADLINE \u003d \"2018-05-18\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DATEADDED \u003d LocalDate.now().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Study for CS2103T Exam\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Boolean DEFAULT_STATUS \u003d false;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_SUBTASKS \u003d \"Buy some answer\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Priority priority;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Deadline deadline;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private DateAdded dateAdded;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Description description;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Status status;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private List\u003cSubtask\u003e subtasks;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deadline \u003d new Deadline(DEFAULT_DEADLINE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        dateAdded \u003d new DateAdded(DEFAULT_DATEADDED);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        subtasks \u003d SampleDataUtil.getSubtaskList(DEFAULT_SUBTASKS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        name \u003d taskToCopy.getName();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        priority \u003d taskToCopy.getPriority();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        deadline \u003d taskToCopy.getDeadline();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        dateAdded \u003d taskToCopy.getDateAdded();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        description \u003d taskToCopy.getDescription();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        status \u003d taskToCopy.getStatus();"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        subtasks \u003d new ArrayList\u003c\u003e(taskToCopy.getSubtasks());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"     * Sets the {@code Name} of the {@code Task} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder withName(String name) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"    public TaskBuilder withTags(String... tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses the {@code subtask} into a {@code List\u003cSubtask\u003e} and set it to the {@code Task} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public TaskBuilder withSubtask(String... subtask) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.subtasks \u003d SampleDataUtil.getSubtaskList(subtask);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the {@code Description} of the {@code Task} that we are building."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public TaskBuilder withDescription(String description) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Sets the {@code Status} of the {@code Task} that we are building."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public TaskBuilder withStatus(Boolean status) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Sets the {@code Priority} of the {@c"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * ode Task} that we are building."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public TaskBuilder withPriority(String priority) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        this.priority \u003d new Priority(priority);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Sets the {@code Deadline} of the {@code Task} that we are building."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public TaskBuilder withDeadline(String deadline) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        this.deadline \u003d new Deadline(deadline);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Sets the {@code DateAdded} of the {@code Task} that we are building."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public TaskBuilder withDateAdded(String dateAdded) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d new DateAdded(dateAdded);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"    public Task build() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Task(name, priority, deadline, dateAdded, description, status, tags, subtasks);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":12,"-":126}},{"path":"src/test/java/seedu/organizer/testutil/EditTaskDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditTaskDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class EditTaskDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditTaskDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditTaskDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder(Task task) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditTaskDescriptor();"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        descriptor.setName(task.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setPriority(task.getPriority());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setDeadline(task.getDeadline());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setDescription(task.getDescription());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setStatus(task.getStatus());"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        descriptor.setTags(task.getTags());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder withName(String name) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder withPriority(String priority) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        descriptor.setPriority(new Priority(priority));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Sets the {@code Deadline} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder withDeadline(String deadline) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        descriptor.setDeadline(new Deadline(deadline));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public EditTaskDescriptorBuilder withDescription(String description) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        descriptor.setDescription(new Description(description));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"    public EditTaskDescriptorBuilder withTags(String... tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public EditTaskDescriptor build() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":81}},{"path":"src/test/java/seedu/organizer/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * Returns the middle index of the task in the {@code model}\u0027s task list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getOrganizer().getTaskList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * Returns the last index of the task in the {@code model}\u0027s task list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getOrganizer().getTaskList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"     * Returns the task in the {@code model}\u0027s task list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    public static Task getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getOrganizer().getTaskList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":50}},{"path":"src/test/java/seedu/organizer/testutil/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" * A utility class for Task."},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"public class TaskUtil {"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"     * Returns an add command string for adding the {@code task}."},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static String getAddCommand(Task task) {"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(task);"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     * Returns an add command string for adding the {@code task} using alias."},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public static String getAddCommandAlias(Task task) {"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(task);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    public static String getPersonDetails(Task task) {"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PRIORITY + task.getPriority().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_DEADLINE + task.getDeadline().toString() + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        task.getTags().stream().forEach("},{"lineNumber":41,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static String getSubtaskDetails(Task task) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return PREFIX_NAME + task.getName().fullName;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":30,"-":19}},{"path":"src/test/java/seedu/organizer/testutil/OrganizerBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * {@code Organizer ab \u003d new OrganizerBuilder().withTask(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"public class OrganizerBuilder {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"    private Organizer organizer;"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public OrganizerBuilder() {"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"        organizer \u003d new Organizer();"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    public OrganizerBuilder(Organizer organizer) {"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"        this.organizer \u003d organizer;"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"     * Adds a new {@code Task} to the {@code Organizer} that we are building."},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public OrganizerBuilder withTask(Task task) {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            organizer.addTask(task);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"            throw new IllegalArgumentException(\"task is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code Organizer} that we are building."},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public OrganizerBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"            organizer.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    public Organizer build() {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        return organizer;"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":34,"-":19}},{"path":"src/test/java/seedu/organizer/testutil/TypicalTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_EXAM;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DEADLINE_STUDY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EXAM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_DESCRIPTION_STUDY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_EXAM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_NAME_STUDY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_EXAM;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_PRIORITY_STUDY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"public class TypicalTasks {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_DO \u003d \"Do\"; // A keyword that matches DO"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_REVISION \u003d \"Revision\"; // A keyword that matches REVISION"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_SPRING \u003d \"Spring\"; // A keyword that matches SPRING"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static String currentDate \u003d LocalDate.now().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Task GROCERY \u003d new TaskBuilder().withName(\"Grocery\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withDescription(\"Go to NTUC\").withDeadline(\"2019-03-11\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withDateAdded(currentDate).withPriority(\"0\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Task SPRINGCLEAN \u003d new TaskBuilder().withName(\"Spring cleaning\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withDescription(\"Clean the entire house except the study room\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-09-08\").withDateAdded(currentDate).withPriority(\"1\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withStatus(true).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Task PREPAREBREAKFAST \u003d new TaskBuilder().withName(\"Prepare breakfast\").withPriority(\"2\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-11-12\").withDateAdded(currentDate)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withDescription(\"French Toast with coffee\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Task HOMEWORK \u003d new TaskBuilder().withName(\"Do homework\").withPriority(\"3\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-03-21\").withDateAdded(currentDate)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withDescription(\"CS2103T, CS2101 and MA1101R\").withStatus(true).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Task PROJECT \u003d new TaskBuilder().withName(\"Do project\").withPriority(\"4\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-09-14\").withDateAdded(currentDate)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withDescription(\"Finish writing script for OP1\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Task REVISION \u003d new TaskBuilder().withName(\"Revision\").withPriority(\"5\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-04-05\").withDateAdded(currentDate)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withDescription(\"Revise for CS2106 midterms\").withStatus(true).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Task MOCKEXAM \u003d new TaskBuilder().withName(\"Mock exam\").withPriority(\"6\")"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-05-23\").withDateAdded(currentDate)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withDescription(\"Mock exam for CS1101S - Revise!\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Task MAKEPRESENT \u003d new TaskBuilder().withName(\"Make present\").withPriority(\"7\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-08-06\").withDateAdded(currentDate)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .withDescription(\"Make photo frame for Denise\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Task INTERVIEWPREP \u003d new TaskBuilder().withName(\"Interview prep\").withPriority(\"8\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withDeadline(\"2019-04-05\").withDateAdded(currentDate)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withDescription(\"Prepare technical questions\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final Task EXAM \u003d new TaskBuilder().withName(VALID_NAME_EXAM).withPriority(VALID_PRIORITY_EXAM)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withDeadline(VALID_DEADLINE_EXAM).withDateAdded(currentDate)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withDescription(VALID_DESCRIPTION_EXAM)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final Task STUDY \u003d new TaskBuilder().withName(VALID_NAME_STUDY).withPriority(VALID_PRIORITY_STUDY)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withDeadline(VALID_DEADLINE_STUDY).withDateAdded(currentDate)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            .withDescription(VALID_DESCRIPTION_STUDY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"    private TypicalTasks() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    } // prevents instantiation"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns an {@code Organizer} with all the typical tasks."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Organizer getTypicalOrganizer() {"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        Organizer ab \u003d new Organizer();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                ab.addTask(task);"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"            } catch (DuplicateTaskException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GROCERY, SPRINGCLEAN,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                PREPAREBREAKFAST, HOMEWORK, PROJECT, REVISION, MOCKEXAM));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":93}},{"path":"src/main/java/seedu/organizer/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Organizer level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d { \"blue\", \"brown\", \"gray\", \"green\", \"maroon\", \"orange\","},{"lineNumber":27,"author":{"gitID":"-"},"content":"        \"pink\", \"purple\", \"red\", \"yellow\" };"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final int CELL_HEIGHT \u003d 24;"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public final Task task;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label status;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label priority;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label description;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label deadline;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Label dateadded;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private ListView\u003cLabel\u003e subtasks;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        this.task \u003d task;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        name.setText(task.getName().fullName);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        status.setText(\"[\" + task.getStatus() + \"]\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        priority.setText(\"Priority : \" + task.getPriority().value);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        description.setText(\"Description : \" + task.getDescription().value);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        deadline.setText(\"Deadline : \" + task.getDeadline().toString());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        dateadded.setText(\"Date Added : \" + task.getDateAdded().toString());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        initSubtask(task);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        initTags(task);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"content":"    // @@author guekling-reused"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/798/files with minor modifications"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code task}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void initTags(Task task) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        task.getTags().forEach(tag -\u003e {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Creates the subtask for {@code task}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void initSubtask(Task task) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        task.getSubtasks().forEach(subtask-\u003e {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            Label subtaskLabel \u003d new Label(subtask.toString());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            subtasks.getItems().add(subtaskLabel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        subtasks.setPrefHeight(10 + CELL_HEIGHT * task.getSubtasks().size());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"dominickenn":7,"-":108}},{"path":"src/main/java/seedu/organizer/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    private void loadPersonPage(Task task) {"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        loadPage(SEARCH_PAGE_URL + task.getName().fullName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(TaskPanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        loadPersonPage(event.getNewSelection().task);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":69}},{"path":"src/main/java/seedu/organizer/ui/TaskListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"        setConnections(taskList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    private void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"                taskList, (person) -\u003e new TaskCard(person, taskList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        taskListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        raise(new TaskPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code TaskCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            taskListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(task, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":83}},{"path":"src/test/java/guitests/guihandles/TaskListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.TaskCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTaskCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#taskListView\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Optional\u003cTaskCard\u003e lastRememberedSelectedTaskCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public TaskListPanelHandle(ListView\u003cTaskCard\u003e taskListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(taskListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns a handle to the selected {@code TaskCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public TaskCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e taskList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (taskList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Task list size expected 1.\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return new TaskCardHandle(taskList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"     * Navigates the listview to display and select the task."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"dominickenn"},"content":"    public void navigateToCard(Task task) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        Optional\u003cTaskCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.task.equals(task)).findFirst();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Task does not exist.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"     * Returns the task card handle of a task associated with the {@code index} in the list."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public TaskCardHandle getTaskCardHandle(int index) {"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        return getTaskCardHandle(getRootNode().getItems().get(index).task);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"     * Returns the {@code TaskCardHandle} of the specified {@code task} in the list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"    public TaskCardHandle getTaskCardHandle(Task task) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Optional\u003cTaskCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"                .filter(card -\u003e card.task.equals(task))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .map(card -\u003e new TaskCardHandle(card.getRoot()))"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Task does not exist.\"));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Selects the {@code TaskCard} at {@code index} in the list."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Remembers the selected {@code TaskCard} in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void rememberSelectedTaskCard() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.empty();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedTaskCard()} call."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean isSelectedTaskCardChanged() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedTaskCard.isPresent();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedTaskCard.isPresent()"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":9,"-":126}},{"path":"src/main/java/seedu/organizer/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":93}},{"path":"src/test/java/seedu/organizer/model/task/MultipleFieldsContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class MultipleFieldsContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate firstPredicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate secondPredicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"            secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate firstPredicateCopy \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"            firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":""},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":""},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"        // different task -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":""},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Collections"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"                .singletonList(\"Study\"));"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":""},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"Study\", \"Exam\"));"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":""},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"Exam\", \"Grocery\"));"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Grocery\").build()));"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":""},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"sTuDy\", \"eXAM\"));"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"guekling"},"content":""},{"lineNumber":64,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"guekling"},"content":"    public void test_descriptionContainsKeywords_returnsTrue() {"},{"lineNumber":66,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":67,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":68,"author":{"gitID":"guekling"},"content":"                Collections.singletonList(\"CS2103T\"));"},{"lineNumber":69,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Study for CS2103T Exam\").build()));"},{"lineNumber":70,"author":{"gitID":"guekling"},"content":""},{"lineNumber":71,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":72,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"CS2103\"));"},{"lineNumber":73,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103\").build()));"},{"lineNumber":74,"author":{"gitID":"guekling"},"content":""},{"lineNumber":75,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":76,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2101\", \"ES2660\"));"},{"lineNumber":77,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":78,"author":{"gitID":"guekling"},"content":""},{"lineNumber":79,"author":{"gitID":"guekling"},"content":"        // Mixed-case keywords"},{"lineNumber":80,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"cs2101\", \"eS2660\"));"},{"lineNumber":81,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"CS2101 ES2660\").build()));"},{"lineNumber":82,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"guekling"},"content":""},{"lineNumber":84,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"guekling"},"content":"    public void test_deadlineContainsKeywords_returnsTrue() {"},{"lineNumber":86,"author":{"gitID":"guekling"},"content":"        // One keyword"},{"lineNumber":87,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":88,"author":{"gitID":"guekling"},"content":"            Collections.singletonList(\"2018-03-17\"));"},{"lineNumber":89,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":90,"author":{"gitID":"guekling"},"content":""},{"lineNumber":91,"author":{"gitID":"guekling"},"content":"        // Multiple keywords"},{"lineNumber":92,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":93,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":94,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":95,"author":{"gitID":"guekling"},"content":""},{"lineNumber":96,"author":{"gitID":"guekling"},"content":"        // Only one matching keyword"},{"lineNumber":97,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2018-09-09\", \"2019-01-01\"));"},{"lineNumber":98,"author":{"gitID":"guekling"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":99,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":100,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"guekling"},"content":""},{"lineNumber":102,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"guekling"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":104,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":105,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Collections"},{"lineNumber":106,"author":{"gitID":"guekling"},"content":"                .emptyList());"},{"lineNumber":107,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").build()));"},{"lineNumber":108,"author":{"gitID":"guekling"},"content":""},{"lineNumber":109,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":110,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"Grocery\"));"},{"lineNumber":111,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study Exam\").build()));"},{"lineNumber":112,"author":{"gitID":"guekling"},"content":""},{"lineNumber":113,"author":{"gitID":"guekling"},"content":"        // Keywords match priority, but does not match name, description and deadline"},{"lineNumber":114,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2\"));"},{"lineNumber":115,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":116,"author":{"gitID":"guekling"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":117,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"guekling"},"content":""},{"lineNumber":119,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"guekling"},"content":"    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":121,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":122,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":123,"author":{"gitID":"guekling"},"content":"            Collections.emptyList());"},{"lineNumber":124,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101\").build()));"},{"lineNumber":125,"author":{"gitID":"guekling"},"content":""},{"lineNumber":126,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":127,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"CS2103\"));"},{"lineNumber":128,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDescription(\"CS2101 CS2103T\").build()));"},{"lineNumber":129,"author":{"gitID":"guekling"},"content":""},{"lineNumber":130,"author":{"gitID":"guekling"},"content":"        // Keywords match priority, but does not match name, description and deadline"},{"lineNumber":131,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2\"));"},{"lineNumber":132,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":133,"author":{"gitID":"guekling"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":134,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"guekling"},"content":""},{"lineNumber":136,"author":{"gitID":"guekling"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"guekling"},"content":"    public void test_deadlineDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":138,"author":{"gitID":"guekling"},"content":"        // Zero keywords"},{"lineNumber":139,"author":{"gitID":"guekling"},"content":"        MultipleFieldsContainsKeywordsPredicate predicate \u003d new MultipleFieldsContainsKeywordsPredicate("},{"lineNumber":140,"author":{"gitID":"guekling"},"content":"            Collections.emptyList());"},{"lineNumber":141,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-03-17\").build()));"},{"lineNumber":142,"author":{"gitID":"guekling"},"content":""},{"lineNumber":143,"author":{"gitID":"guekling"},"content":"        // Non-matching keyword"},{"lineNumber":144,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2018-03-17\"));"},{"lineNumber":145,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2018-09-09\").build()));"},{"lineNumber":146,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withDeadline(\"2019-01-01\").build()));"},{"lineNumber":147,"author":{"gitID":"guekling"},"content":""},{"lineNumber":148,"author":{"gitID":"guekling"},"content":"        // Keywords match priority, but does not match name, description and deadline"},{"lineNumber":149,"author":{"gitID":"guekling"},"content":"        predicate \u003d new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(\"2\"));"},{"lineNumber":150,"author":{"gitID":"guekling"},"content":"        assertFalse(predicate.test(new TaskBuilder().withName(\"Study\").withPriority(\"2\")"},{"lineNumber":151,"author":{"gitID":"guekling"},"content":"                .withDeadline(\"2018-11-11\").withDescription(\"Chapter 1\").build()));"},{"lineNumber":152,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"guekling"},"content":""},{"lineNumber":154,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":141,"-":13}},{"path":"src/main/java/seedu/organizer/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    ObservableList\u003cTask\u003e getFilteredPersonList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":26}},{"path":"src/main/java/seedu/organizer/commons/events/model/OrganizerChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"/** Indicates the Organizer in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"public class OrganizerChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"    public final ReadOnlyOrganizer data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public OrganizerChangedEvent(ReadOnlyOrganizer data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return \"number of persons \" + data.getTaskList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":15}},{"path":"src/main/java/seedu/organizer/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRIORITY,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                                            PREFIX_DEADLINE, PREFIX_DESCRIPTION,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                                            PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DEADLINE)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"            //@@author dominickenn"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"            Priority priority;"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)).get();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"                priority \u003d ParserUtil.parsePriority(Priority.LOWEST_PRIORITY_LEVEL);"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"            Deadline deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE)).get();"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"            //@@author guekling"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"            Description description;"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"                description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)).get();"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"                description \u003d ParserUtil.parseDescription(\"\");"},{"lineNumber":61,"author":{"gitID":"guekling"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"guekling"},"content":"            //@@author"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"            Task task \u003d new Task(name, priority, deadline, description, tagList);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"            return new AddCommand(task);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":10,"guekling":8,"-":63}},{"path":"src/main/java/seedu/organizer/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String priority} into a {@code Priority}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code priority} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Priority parsePriority(String priority) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(priority);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedPriority \u003d priority.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Priority.isValidPriority(trimmedPriority)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Priority(trimmedPriority);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e priority} into an {@code Optional\u003cPriority\u003e} if {@code priority} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cPriority\u003e parsePriority(Optional\u003cString\u003e priority) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(priority);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return priority.isPresent() ? Optional.of(parsePriority(priority.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String organizer} into an {@code Description}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static Description parseDescription(String description) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e organizer} into an {@code Optional\u003cDescription\u003e} if"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * {@code organizer} is present."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return description.isPresent() ? Optional.of(parseDescription(description.get())) : Optional.empty();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Parses a {@code String deadline} into an {@code Deadline}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code deadline} is invalid."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static Deadline parseDeadline(String deadline) throws IllegalValueException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireNonNull(deadline);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String trimmedDeadline \u003d deadline.trim();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (!Deadline.isValidDeadline(trimmedDeadline)) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return new Deadline(trimmedDeadline);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e deadline} into an {@code Optional\u003cDeadline\u003e} if {@code deadline} is present."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static Optional\u003cDeadline\u003e parseDeadline(Optional\u003cString\u003e deadline) throws IllegalValueException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        requireNonNull(deadline);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return deadline.isPresent() ? Optional.of(parseDeadline(deadline.get())) : Optional.empty();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":164}},{"path":"src/main/java/seedu/organizer/logic/parser/OrganizerParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.AddSubtaskCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDescriptionCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindNameCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.HistoryCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.SelectCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.ToggleCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.UndoCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"public class OrganizerParser {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case ToggleCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new ToggleCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ToggleCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new ToggleCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case AddSubtaskCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new AddSubtaskCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case AddSubtaskCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new AddSubtaskCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case FindMultipleFieldsCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new FindMultipleFieldsCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case FindMultipleFieldsCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new FindMultipleFieldsCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case FindNameCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new FindNameCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case FindNameCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new FindNameCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case FindDescriptionCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new FindDescriptionCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case FindDescriptionCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new FindDescriptionCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case FindDeadlineCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new FindDeadlineCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case FindDeadlineCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new FindDeadlineCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"dominickenn"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":8,"-":140}},{"path":"src/main/java/seedu/organizer/logic/parser/FindDeadlineCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindDeadlineCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":" * Parses input arguments and creates a new FindDeadlineCommand object"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommandParser implements Parser\u003cFindDeadlineCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"     * Parses the given {@code String} of arguments in the context of the FindDeadlineCommand"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"     * and returns an FindDeadlineCommand object for execution."},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public FindDeadlineCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDeadlineCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        String[] deadlineKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        return new FindDeadlineCommand(new DeadlineContainsKeywordsPredicate(Arrays.asList(deadlineKeywords)));"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":10}},{"path":"src/main/java/seedu/organizer/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the organizer book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":20}},{"path":"src/main/java/seedu/organizer/logic/parser/FindMultipleFieldsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.FindMultipleFieldsCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":" * Parses input arguments and creates a new FindMultipleFieldsCommand object"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommandParser implements Parser\u003cFindMultipleFieldsCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"     * Parses the given {@code String} of arguments in the context of the FindMultipleFieldsCommand"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"     * and returns an FindMultipleFieldsCommand object for execution."},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public FindMultipleFieldsCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMultipleFieldsCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":""},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        return new FindMultipleFieldsCommand(new MultipleFieldsContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":23,"-":10}},{"path":"src/main/java/seedu/organizer/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a task identified using it\u0027s last displayed index from the organizer book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"            + \": Deletes the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    private Task taskToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(taskToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deleteTask(taskToDelete);"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"        taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 Objects.equals(this.taskToDelete, ((DeleteCommand) other).taskToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":10,"-":58}},{"path":"src/main/java/seedu/organizer/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the organizer book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"        model.resetData(new Organizer());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":21}},{"path":"src/main/java/seedu/organizer/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a task to the organizer book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the organizer book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PRIORITY + \"PRIORITY \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_DEADLINE + \"DEADLINE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"CS2103T \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PRIORITY + \"9 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_DEADLINE + \"2018-03-11 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"Refactor AddressBook to PrioriTask \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the organizer book\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    private final Task toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     * Creates an AddCommand to add the specified {@code Task}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    public AddCommand(Task task) {"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(task);"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        toAdd \u003d task;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addTask(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":8,"-":60}},{"path":"src/main/java/seedu/organizer/logic/commands/FindDeadlineCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DeadlineContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":" * Finds and lists all persons in PrioriTask whose deadline contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * Keyword should be in the format of YYYY-MM-DD."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"public class FindDeadlineCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":""},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_WORD \u003d \"findd\";"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_ALIAS \u003d \"fd\";"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose deadline contain any of \""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"            + \"the specified keywords (not case-sensitive) and displays them as a list with index numbers. Keywords \""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"            + \"should be in the format of YYYY-MM-DD. \\n\""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2018-03-17 2018-05-03\";"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    private final DeadlineContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    public FindDeadlineCommand(DeadlineContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":""},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredTaskList().size()));"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":""},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"                || (other instanceof FindDeadlineCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.predicate.equals(((FindDeadlineCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":35,"-":4}},{"path":"src/main/java/seedu/organizer/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    private ReadOnlyOrganizer previousAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"        this.previousAddressBook \u003d new Organizer(model.getOrganizer());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Reverts the Organizer to the state before this command"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * was executed and updates the filtered task list to"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"     * Executes the command and updates the filtered task"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":60}},{"path":"src/main/java/seedu/organizer/logic/commands/util/EditTaskDescriptor.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.CollectionUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":" * Stores the details to edit the task with. Each non-empty field value will replace the"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" * corresponding field value of the task."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class EditTaskDescriptor {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Priority priority;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Deadline deadline;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Description description;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Status status;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private List\u003cSubtask\u003e subtasks;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public EditTaskDescriptor() {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Copy constructor."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public EditTaskDescriptor(EditTaskDescriptor toCopy) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        setName(toCopy.name);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setPriority(toCopy.priority);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setDeadline(toCopy.deadline);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        setDescription(toCopy.description);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        setStatus(toCopy.status);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        setTags(toCopy.tags);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        setSubtasks(toCopy.subtasks);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Returns true if at least one field is edited."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean isAnyFieldEdited() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return CollectionUtil.isAnyNonNull(this.name, this.priority, this.deadline, this.description, this.status,"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                this.tags);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Optional\u003cName\u003e getName() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(name);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setPriority(Priority priority) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Optional\u003cPriority\u003e getPriority() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(priority);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void setDeadline(Deadline deadline) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Optional\u003cDeadline\u003e getDeadline() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(deadline);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setDescription(Description description) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Optional\u003cDescription\u003e getDescription() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(description);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setStatus(Status status) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public Optional\u003cStatus\u003e getStatus() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(status);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets {@code subtasks} to this object\u0027s {@code subtasks}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code subtasks} is used internally."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void setSubtasks(List\u003cSubtask\u003e subtasks) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.subtasks \u003d (subtasks !\u003d null) ? new ArrayList\u003c\u003e(subtasks) : null;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable subtask set, which throws {@code UnsupportedOperationException}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns {@code Optional#empty()} if {@code subtasks} is null."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Optional\u003cList\u003cSubtask\u003e\u003e getSubtasks() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return (subtasks !\u003d null) ? Optional.of(Collections.unmodifiableList(subtasks)) : Optional.empty();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditTaskDescriptor)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return getName().equals(e.getName())"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 getPriority().equals(e.getPriority())"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 getDeadline().equals(e.getDeadline())"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                \u0026\u0026 getDescription().equals(e.getDescription())"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":149}},{"path":"src/main/java/seedu/organizer/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a task identified using it\u0027s last displayed index from the organizer book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"            + \": Selects the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Task: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":50}},{"path":"src/main/java/seedu/organizer/logic/commands/ToggleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Inverse the value of task status"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ToggleCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"toggle\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggle task status\\n\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the organizer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Toogled Task: %1$s\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public final Index index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * @param index                of the task in the filtered task list to edit"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ToggleCommand(Index index) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        editedTask \u003d createEditedTask(taskToEdit);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit} with status inversed"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Name updatedName \u003d taskToEdit.getName();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d taskToEdit.getPriority();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d taskToEdit.getDeadline();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d taskToEdit.getDescription();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e updatedSubtasks \u003d taskToEdit.getSubtasks();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Status updatedStatus \u003d taskToEdit.getStatus().getInverse();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                updatedDescription, updatedStatus, updatedTags, updatedSubtasks);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                || (other instanceof ToggleCommand // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.index.equals(((ToggleCommand) other).index)); // state check"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":91}},{"path":"src/main/java/seedu/organizer/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_PRIORITY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.util.EditTaskDescriptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Edits the details of an existing task in the organizer book."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"            + \"by the index number used in the last task listing. \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_PRIORITY + \"9 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_DEADLINE + \"2018-03-11\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the organizer.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final EditTaskDescriptor editTaskDescriptor;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"     * @param index                of the task in the filtered task list to edit"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param editTaskDescriptor details to edit the task with"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editTaskDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"dominickenn"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * edited with {@code editTaskDescriptor}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Status updatedstatus \u003d editTaskDescriptor.getStatus().orElse(taskToEdit.getStatus());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e updatedSubtaks \u003d editTaskDescriptor.getSubtasks().orElse(taskToEdit.getSubtasks());"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                updatedDescription, updatedstatus, updatedTags, updatedSubtaks);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor)"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 Objects.equals(taskToEdit, e.taskToEdit);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":13,"-":125}},{"path":"src/main/java/seedu/organizer/logic/commands/FindMultipleFieldsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.MultipleFieldsContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":" * Finds and lists all persons in organizer book whose name, descriptions or deadline contains any of the argument"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * keywords."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" * Keyword matching is not case sensitive."},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"public class FindMultipleFieldsCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names, descriptions or \""},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"            + \"deadlines contain any of the specified keywords (not case-sensitive) and displays them as a list with \""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"            + \"index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"            + \"Example: \" + COMMAND_WORD + \" cs2103 2018-03-17 assignment\";"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":""},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    private final MultipleFieldsContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":""},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    public FindMultipleFieldsCommand(MultipleFieldsContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":""},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        model.updateFilteredTaskList(predicate);"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredTaskList().size()));"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"                || (other instanceof FindMultipleFieldsCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.predicate.equals(((FindMultipleFieldsCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":36,"-":4}},{"path":"src/main/java/seedu/organizer/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.OrganizerParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    private final OrganizerParser organizerParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        organizerParser \u003d new OrganizerParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            Command command \u003d organizerParser.parseCommand(commandText);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    public ObservableList\u003cTask\u003e getFilteredPersonList() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":53}},{"path":"src/main/java/seedu/organizer/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"public interface Storage extends OrganizerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    String getOrganizerFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void saveOrganizer(ReadOnlyOrganizer addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void handleOrganizerChangedEvent(OrganizerChangedEvent abce);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":37}},{"path":"src/main/java/seedu/organizer/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":61}},{"path":"src/main/java/seedu/organizer/storage/XmlOrganizerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":" * A class to access Organizer data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"public class XmlOrganizerStorage implements OrganizerStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlOrganizerStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"    public XmlOrganizerStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getOrganizerFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readOrganizer(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readOrganizer()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"            logger.info(\"Organizer file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveOrganizer(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveOrganizer(ReadOnlyOrganizer)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableOrganizer(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":75}},{"path":"src/main/java/seedu/organizer/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":" * Manages storage of Organizer data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    private OrganizerStorage organizerStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public StorageManager(OrganizerStorage organizerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        this.organizerStorage \u003d organizerStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Organizer methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getOrganizerFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return organizerStorage.getOrganizerFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readOrganizer(organizerStorage.getOrganizerFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyOrganizer\u003e readOrganizer(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return organizerStorage.readOrganizer(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer organizer) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveOrganizer(organizer, organizerStorage.getOrganizerFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveOrganizer(ReadOnlyOrganizer organizer, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        organizerStorage.saveOrganizer(organizer, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handleOrganizerChangedEvent(OrganizerChangedEvent event) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            saveOrganizer(event.data);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":5,"-":87}},{"path":"src/main/java/seedu/organizer/storage/OrganizerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":" * Represents a storage for {@link Organizer}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public interface OrganizerStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    String getOrganizerFilePath();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"     * Returns Organizer data as a {@link ReadOnlyOrganizer}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyOrganizer\u003e readOrganizer() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @see #getOrganizerFilePath()"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyOrganizer\u003e readOrganizer(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Saves the given {@link ReadOnlyOrganizer} to the storage."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void saveOrganizer(ReadOnlyOrganizer addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @see #saveOrganizer(ReadOnlyOrganizer)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void saveOrganizer(ReadOnlyOrganizer addressBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":41}},{"path":"src/main/java/seedu/organizer/storage/XmlSerializableOrganizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":" * An Immutable Organizer that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"public class XmlSerializableOrganizer {"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     * Creates an empty XmlSerializableOrganizer."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    public XmlSerializableOrganizer() {"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * Conversion"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    public XmlSerializableOrganizer(ReadOnlyOrganizer src) {"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"        this();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     * Converts this addressbook into the model\u0027s {@code Organizer} object."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"     * {@code XmlAdaptedTask} or {@code XmlAdaptedTag}."},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    public Organizer toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        Organizer organizer \u003d new Organizer();"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"            organizer.addTag(t.toModelType());"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        for (XmlAdaptedTask p : tasks) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            organizer.addTask(p.toModelType());"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        return organizer;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof XmlSerializableOrganizer)) {"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        XmlSerializableOrganizer otherAb \u003d (XmlSerializableOrganizer) other;"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"        return tasks.equals(otherAb.tasks) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":43,"-":30}},{"path":"src/main/java/seedu/organizer/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static void saveDataToFile(File file, XmlSerializableOrganizer addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns organizer book in the file or an empty organizer book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"    public static XmlSerializableOrganizer loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableOrganizer.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":3,"-":36}},{"path":"src/main/java/seedu/organizer/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" * Contains utility methods for populating {@code Organizer} with sample data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static Task[] getSampleTasks() {"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"        return new Task[]{"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Learn PHP\"), new Priority(\"5\"), new Deadline(\"2018-04-30\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                    new Description(\"Find a PHP tutorial and learn from it\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\")),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Learn Java\"), new Priority(\"4\"), new Deadline(\"2018-07-07\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                    new Description(\"Learn OOP\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Interview preparation\"), new Priority(\"3\"), new Deadline(\"2018-04-03\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    new Description(\"Prepare for MOH Interview\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Revision\"), new Priority(\"2\"), new Deadline(\"2018-03-27\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                    new Description(\"Revise Topic 3 for CS2103T\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Study\"), new Priority(\"1\"), new Deadline(\"2018-03-29\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    new Description(\"Study for CS2103T Exam\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            new Task(new Name(\"Exam\"), new Priority(\"0\"), new Deadline(\"2018-05-11\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                        new Description(\"CS2103T Exam\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                        getTagSet(\"friends\"))"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ReadOnlyOrganizer getSampleOrganizer() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"            Organizer sampleAb \u003d new Organizer();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            for (Task sampleTask : getSampleTasks()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                sampleAb.addTask(sampleTask);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate tasks\", e);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Returns a subtask set containing the list of strings given."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static List\u003cSubtask\u003e getSubtaskList(String... strings) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            subtasks.add(new Subtask(new Name(s), new Status(false)));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return subtasks;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":78}},{"path":"src/main/java/seedu/organizer/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.Organizer;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.organizer.model.ReadOnlyOrganizer;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.organizer.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.organizer.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.JsonUserPrefsStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.OrganizerStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.organizer.storage.XmlOrganizerStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.organizer.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Organizer ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        OrganizerStorage organizerStorage \u003d new XmlOrganizerStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"        storage \u003d new StorageManager(organizerStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s organizer book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample organizer book will be used instead if {@code storage}\u0027s organizer book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty organizer book will be used instead if errors occur when reading {@code storage}\u0027s organizer book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyOrganizer\u003e organizerOptional;"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"        ReadOnlyOrganizer initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            organizerOptional \u003d storage.readOrganizer();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!organizerOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Organizer\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d organizerOptional.orElseGet(SampleDataUtil::getSampleOrganizer);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Organizer\");"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"            initialData \u003d new Organizer();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Organizer\");"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"            initialData \u003d new Organizer();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Organizer\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"dominickenn"},"content":"        logger.info(\"Starting Organizer \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":11,"-":201}},{"path":"src/main/java/seedu/organizer/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setOrganizerName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        sb.append(\"\\nOrganizer name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":77}},{"path":"src/main/java/seedu/organizer/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":" * JAXB-friendly version of the Task."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"public class XmlAdaptedTask {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String priority;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String deadline;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String dateadded;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String description;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Boolean status;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedTask() {"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public XmlAdaptedTask(String name, String priority, String deadline, String dateadded,"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                          String description, Boolean status, List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                          List\u003cXmlAdaptedSubtask\u003e subtasks) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.dateadded \u003d dateadded;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (subtasks !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            this.subtasks \u003d new ArrayList\u003c\u003e(subtasks);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        priority \u003d source.getPriority().value;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        deadline \u003d source.getDeadline().toString();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        dateadded \u003d source.getDateAdded().toString();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        description \u003d source.getDescription().value;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        status \u003d source.getStatus().value;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        subtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (Subtask subtask: source.getSubtasks()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            subtasks.add(new XmlAdaptedSubtask(subtask));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final List\u003cSubtask\u003e personSubtasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        for (XmlAdaptedSubtask subtask : subtasks) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            personSubtasks.add(subtask.toModelType());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (this.priority \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                                                Priority.class.getSimpleName()));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (!Priority.isValidPriority(this.priority)) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Priority priority \u003d new Priority(this.priority);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (this.deadline \u003d\u003d null) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                    ()));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!Deadline.isValidDeadline(this.deadline)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Deadline.MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        final Deadline deadline \u003d new Deadline(this.deadline);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (this.dateadded \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DateAdded.class.getSimpleName"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                    ()));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (!DateAdded.isValidDateAdded(this.deadline)) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(DateAdded.MESSAGE_DATEADDED_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        final DateAdded dateadded \u003d new DateAdded(this.dateadded);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            this.status \u003d false;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        final List\u003cSubtask\u003e subtasks \u003d new ArrayList\u003c\u003e(personSubtasks);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return new Task(name, priority, deadline, dateadded, description, status, tags, subtasks);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherTask.name)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(priority, otherTask.priority)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(deadline, otherTask.deadline)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(dateadded, otherTask.dateadded)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(description, otherTask.description)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(status, otherTask.status)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherTask.tagged);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":14,"-":169}},{"path":"src/main/java/seedu/organizer/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.events.model.OrganizerChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the organizer book data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    private final Organizer organizer;"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"     * Initializes a ModelManager with the given organizer and userPrefs."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyOrganizer organizer, UserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(organizer, userPrefs);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with organizer book: \" + organizer + \" and user prefs \" + userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.organizer \u003d new Organizer(organizer);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.organizer.getTaskList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"        this(new Organizer(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"    public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        organizer.resetData(newData);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"    public ReadOnlyOrganizer getOrganizer() {"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"        return organizer;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void indicateOrganizerChanged() {"},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"        raise(new OrganizerChangedEvent(organizer));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public synchronized void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        organizer.removeTask(target);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public synchronized void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        organizer.addTask(task);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void updateTask(Task target, Task editedTask)"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        organizer.updateTask(target, editedTask);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateOrganizerChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        organizer.removeTag(tag);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"     * {@code organizer}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"        return organizer.equals(other.organizer)"},{"lineNumber":122,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":18,"-":107}},{"path":"src/main/java/seedu/organizer/model/task/DescriptionContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" * Tests that a {@code Task}\u0027s {@code Description} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":"public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":""},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    public boolean test(Task task) {"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription().value, keyword));"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":""},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"}"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"//@@author"}],"authorContributionMap":{"guekling":25,"-":7}},{"path":"src/main/java/seedu/organizer/model/task/exceptions/TaskNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":" * Signals that the operation is unable to find the specified task."},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"public class TaskNotFoundException extends Exception {}"}],"authorContributionMap":{"dominickenn":5,"-":1}},{"path":"src/main/java/seedu/organizer/model/task/DeadlineContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" * Tests that a {@code Task}\u0027s {@code Deadline} matches any of the keywords given. Keywords given should in the"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":" * format of YYYY-MM-DD."},{"lineNumber":12,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"public class DeadlineContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    public DeadlineContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    public boolean test(Task task) {"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDeadline().toString(), keyword));"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"                || (other instanceof DeadlineContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.keywords.equals(((DeadlineContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":25,"-":7}},{"path":"src/main/java/seedu/organizer/model/task/exceptions/DuplicateTaskException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":" * Signals that the operation will result in duplicate Task objects."},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":"public class DuplicateTaskException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":"    public DuplicateTaskException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":7,"-":5}},{"path":"src/main/java/seedu/organizer/model/task/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.UniqueSubtaskList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Represents a Task in the organizer book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"public class Task {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Priority priority;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Deadline deadline;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DateAdded dateAdded;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Description description;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Status status;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueSubtaskList subtasks;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Every field must be present and not null except status"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Task(Name name, Priority priority, Deadline deadline, Description description, Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, priority, deadline, description, tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d new DateAdded();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.status \u003d null;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.subtasks \u003d new UniqueSubtaskList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Every field must be present and not null except status"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Task(Name name, Priority priority, Deadline deadline, DateAdded dateAdded,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                Description description, Set\u003cTag\u003e tags) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, priority, deadline, description, tags);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d dateAdded;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.status \u003d null;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.subtasks \u003d new UniqueSubtaskList();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Another constructor with custom status and subtask"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Task(Name name, Priority priority, Deadline deadline, DateAdded dateAdded,"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                Description description, Status status, Set\u003cTag\u003e tags, List\u003cSubtask\u003e subtasks) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, priority, deadline, description, tags);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.priority \u003d priority;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.dateAdded \u003d dateAdded;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.status \u003d status;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.subtasks \u003d new UniqueSubtaskList(subtasks);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public Priority getPriority() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return priority;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Deadline getDeadline() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return deadline;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public DateAdded getDateAdded() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return dateAdded;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Description getDescription() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return description;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public Status getStatus() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (status \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new Status(false);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return status;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public List\u003cSubtask\u003e getSubtasks() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableList(subtasks.toList());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"dominickenn"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"        return otherTask.getName().equals(this.getName())"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherTask.getPriority().equals(this.getPriority())"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherTask.getDeadline().equals(this.getDeadline())"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherTask.getDescription().equals(this.getDescription());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return Objects.hash(name, priority, deadline, description, tags, status);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                .append(\" Priority: \")"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                .append(getPriority())"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                .append(\" Deadline: \")"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .append(getDeadline())"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                .append(\" Status: \")"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                .append(getStatus())"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                .append(\" Description: \")"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                .append(getDescription())"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"     * @return a Task comparator based on priority"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"    public static Comparator\u003cTask\u003e priorityComparator() {"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"        return new Comparator\u003cTask\u003e() {"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"            @Override"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"            public int compare(Task task1, Task task2) {"},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"                return (task2.getPriority().value)"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"                        .compareTo(task1.getPriority().value);"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"            }"},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":"        };"},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":18,"-":156}},{"path":"src/main/java/seedu/organizer/model/task/Description.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":7,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"guekling"},"content":" * Represents a Task\u0027s description in the organizer book."},{"lineNumber":9,"author":{"gitID":"guekling"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"public class Description {"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":""},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"            \"Task descriptions can take any values, and can be blank\";"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":""},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"     * The first character must not be a whitespace, otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \".*\";"},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":""},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"     * Constructs an {@code Description}."},{"lineNumber":25,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"     * @param description A valid organizer."},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"    public Description(String description) {"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"        requireNonNull(description);"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"        this.value \u003d description;"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":""},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"     * Returns true if a given string is a valid task description."},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"        return test.matches(DESCRIPTION_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":""},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":""},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.value.equals(((Description) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":""},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":52,"-":5}},{"path":"src/main/java/seedu/organizer/model/task/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":" * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public boolean test(Task task) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":4,"-":27}},{"path":"src/main/java/seedu/organizer/model/task/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Task\u0027s name in the organizer book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"            \"Task names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the organizer must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid task name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":2,"-":57}},{"path":"src/main/java/seedu/organizer/logic/commands/AddSubtaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.organizer.model.subtask.UniqueSubtaskList.DuplicateSubtaskException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.Subtask;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.subtask.UniqueSubtaskList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.DateAdded;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Deadline;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Description;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Priority;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Status;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Add a subtask into a task"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddSubtaskCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"adds\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"as\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a subttask to a task. \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"Submit report \";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New subtask added: %1$s\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATED \u003d \"Subtask already exist\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final Subtask toAdd;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"    private Task taskToEdit;"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"    private Task editedTask;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddSubtaskCommand(Index index, Subtask toAdd) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.toAdd \u003d toAdd;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            editedTask \u003d createEditedTask(taskToEdit, toAdd);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            model.updateTask(taskToEdit, editedTask);"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException dpe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Task duplication should not happen\");"},{"lineNumber":64,"author":{"gitID":"dominickenn"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (DuplicateSubtaskException dse) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedTask));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit} with status inversed"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private static Task createEditedTask(Task taskToEdit, Subtask toAdd) throws DuplicateSubtaskException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Name updatedName \u003d taskToEdit.getName();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Priority updatedPriority \u003d taskToEdit.getPriority();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Deadline updatedDeadline \u003d taskToEdit.getDeadline();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        DateAdded oldDateAdded \u003d taskToEdit.getDateAdded();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d taskToEdit.getDescription();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        UniqueSubtaskList updatedSubtasks \u003d new UniqueSubtaskList(taskToEdit.getSubtasks());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Status updatedStatus \u003d taskToEdit.getStatus();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        updatedSubtasks.add(toAdd);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return new Task(updatedName, updatedPriority, updatedDeadline, oldDateAdded,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                updatedDescription, updatedStatus, updatedTags, updatedSubtasks.toList());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                || (other instanceof AddSubtaskCommand // instanceof handles nulls"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.index.equals(((AddSubtaskCommand) other).index) // state check"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.toAdd.equals(((AddSubtaskCommand) other).toAdd)); // state check"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":6,"-":106}},{"path":"src/main/java/seedu/organizer/model/Organizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.UniqueTaskList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the organizer-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"public class Organizer implements ReadOnlyOrganizer {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    public Organizer() {"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates an Organizer using the Tasks and Tags in the {@code toBeCopied}"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"    public Organizer(ReadOnlyOrganizer toBeCopied) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"dominickenn"},"content":"     * Resets the existing data of this {@code Organizer} with {@code newData}."},{"lineNumber":66,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"    public void resetData(ReadOnlyOrganizer newData) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        List\u003cTask\u003e syncedTaskList \u003d newData.getTaskList().stream()"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            setTasks(syncedTaskList);"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PrioriTask should not have duplicate tasks\");"},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"    //// task-level operations"},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Adds a task to the organizer book."},{"lineNumber":85,"author":{"gitID":"dominickenn"},"content":"     * Also checks the new task\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":86,"author":{"gitID":"dominickenn"},"content":"     * and updates the Tag objects in the task to point to those in {@link #tags}."},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if an equivalent task already exists."},{"lineNumber":89,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void addTask(Task p) throws DuplicateTaskException {"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":"        Task task \u003d syncWithMasterTagList(p);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":93,"author":{"gitID":"dominickenn"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any task"},{"lineNumber":94,"author":{"gitID":"dominickenn"},"content":"        // in the task list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"        tasks.add(task);"},{"lineNumber":96,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"     * Replaces the given task {@code target} in the list with {@code editedTask}."},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"     * {@code Organizer}\u0027s tag list will be updated with the tags of {@code editedTask}."},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":103,"author":{"gitID":"dominickenn"},"content":"     *                                another existing task in the list."},{"lineNumber":104,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":105,"author":{"gitID":"dominickenn"},"content":"     * @see #syncWithMasterTagList(Task)"},{"lineNumber":106,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void updateTask(Task target, Task editedTask)"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":109,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(editedTask);"},{"lineNumber":110,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":111,"author":{"gitID":"dominickenn"},"content":"        Task syncedEditedTask \u003d syncWithMasterTagList(editedTask);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any task"},{"lineNumber":114,"author":{"gitID":"dominickenn"},"content":"        // in the task list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        tasks.setTask(target, syncedEditedTask);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        removeUnusedTags();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Task} in this {@code Organizer}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void removeUnusedTags() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagsInTasks \u003d tasks.asObservableList().stream()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .map(Task::getTags)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .flatMap(Set::stream)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        tags.setTags(tagsInTasks);"},{"lineNumber":128,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"     * Updates the master tag list to include tags in {@code task} that are not in the list."},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"     * @return a copy of this {@code task} such that every tag in this task points to a Tag object in the master"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"     * list."},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":"    private Task syncWithMasterTagList(Task task) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        final UniqueTagList taskTags \u003d new UniqueTagList(task.getTags());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        tags.mergeFrom(taskTags);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"        // used for checking task tag references"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"        // Rebuild the list of task tags to point to the relevant tags in the master tag list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        taskTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"        return new Task("},{"lineNumber":149,"author":{"gitID":"-"},"content":"                task.getName(), task.getPriority(), task.getDeadline(), task.getDateAdded(),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                task.getDescription(), task.getStatus(), correctTagReferences, task.getSubtasks());"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"     * Removes {@code key} from this {@code Organizer}."},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if the {@code key} is not in this {@code Organizer}."},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public boolean removeTask(Task key) throws TaskNotFoundException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (tasks.remove(key)) {"},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"            return true;"},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from {@code task} in this {@code Organizer}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * @throws TaskNotFoundException if the {@code task} is not in this {@code Organizer}."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void removeTagFromTask(Tag tag, Task task) throws TaskNotFoundException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(task.getTags());"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Task newTask \u003d"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                new Task(task.getName(), task.getPriority(), task.getDeadline(),"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                        task.getDateAdded(), task.getDescription(), newTags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            updateTask(task, newTask);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Modifying a task\u0027s tags only should not result in a duplicate. \""},{"lineNumber":191,"author":{"gitID":"-"},"content":"                    + \"See Task#equals(Object).\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from all tasks in this {@code Organizer}."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            for (Task task : tasks) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                removeTagFromTask(tag, task);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Impossible: original task is obtained from PrioriTask.\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"dominickenn"},"content":"    //// util methods"},{"lineNumber":210,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":211,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":212,"author":{"gitID":"dominickenn"},"content":"    public String toString() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        return tasks.asObservableList().size() + \" tasks, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":214,"author":{"gitID":"dominickenn"},"content":"        // TODO: refine later"},{"lineNumber":215,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":217,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return tasks.asObservableList();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":230,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof Organizer // instanceof handles nulls"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tasks.equals(((Organizer) other).tasks)"},{"lineNumber":232,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((Organizer) other).tags));"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        return Objects.hash(tasks, tags);"},{"lineNumber":239,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":84,"-":156}},{"path":"src/main/java/seedu/organizer/model/task/Deadline.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":9,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"guekling"},"content":" * Represents a Task\u0027s deadline in the organizer book."},{"lineNumber":11,"author":{"gitID":"guekling"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":13,"author":{"gitID":"guekling"},"content":"public class Deadline {"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":""},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    public static final String MESSAGE_DEADLINE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"        \"Task deadlines should be in the format YYYY-MM-DD, and it should not be blank\";"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":""},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    /*"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":"     * The first character must not be a whitespace, otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"guekling"},"content":"     * Format of string is YYYY-MM-DD."},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"    public static final String DEADLINE_VALIDATION_REGEX \u003d \"\\\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\\d|3[01])\";"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":""},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"    public final LocalDate date;"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"     * Constructs an {@code Deadline}."},{"lineNumber":28,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"     * @param deadline A valid deadline."},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"    public Deadline(String deadline) {"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"        requireNonNull(deadline);"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"        checkArgument(isValidDeadline(deadline), MESSAGE_DEADLINE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"        this.date \u003d LocalDate.parse(deadline);"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":""},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"     * Returns true if a given string is a valid task deadline."},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"    public static boolean isValidDeadline(String test) {"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":"        return test.matches(\"\") || test.matches(DEADLINE_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":""},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"        return date.toString();"},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":""},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"                || (other instanceof Deadline // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.date.equals(((Deadline) other).date)); // state check"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":""},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"        return date.hashCode();"},{"lineNumber":59,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":53,"-":7}},{"path":"src/main/java/seedu/organizer/model/ReadOnlyOrganizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Unmodifiable view of an organizer book"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":"public interface ReadOnlyOrganizer {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":23}},{"path":"src/main/java/seedu/organizer/model/task/Priority.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dominickenn"},"content":"//@@author dominickenn"},{"lineNumber":7,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"dominickenn"},"content":" * Represents a Task\u0027s priority level in the organizer."},{"lineNumber":9,"author":{"gitID":"dominickenn"},"content":" * Lowest Settable Priority : 0"},{"lineNumber":10,"author":{"gitID":"dominickenn"},"content":" * Highest Settable Priority : 9"},{"lineNumber":11,"author":{"gitID":"dominickenn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"},{"lineNumber":12,"author":{"gitID":"dominickenn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"dominickenn"},"content":"public class Priority {"},{"lineNumber":14,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":15,"author":{"gitID":"dominickenn"},"content":"    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":"            \"Priority numbers can only be 0 to 9, 0 being the lowest priority, and 9 being the highest priority\";"},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"    public static final String PRIORITY_VALIDATION_REGEX \u003d \"\\\\d{1}\";"},{"lineNumber":18,"author":{"gitID":"dominickenn"},"content":"    public static final String LOWEST_PRIORITY_LEVEL \u003d \"0\";"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    public static final String HIGHEST_SETTABLE_PRIORITY_LEVEL \u003d \"9\";"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"dominickenn"},"content":"     * Constructs a {@code Priority}."},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"     * @param priority A valid priority level."},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    public Priority(String priority) {"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(priority);"},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_PRIORITY_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"        this.value \u003d priority;"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     * Returns true if a given string is a valid task priority number."},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"dominickenn"},"content":"    public static boolean isValidPriority(String test) {"},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"        return test.matches(PRIORITY_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"        return value;"},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof Priority // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"                \u0026\u0026 this.value.equals(((Priority) other).value)); // state check"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":52,"-":5}},{"path":"src/main/java/seedu/organizer/model/task/UniqueTaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.Duration;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":16,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":17,"author":{"gitID":"dominickenn"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":" *"},{"lineNumber":20,"author":{"gitID":"dominickenn"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":" *"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":" * @see Task#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"dominickenn"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":26,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":29,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"dominickenn"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"dominickenn"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"dominickenn"},"content":"     * Adds a task to the list."},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"     * Updates priority level if task is not completed"},{"lineNumber":41,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if the task to add is a duplicate of an existing task in the list."},{"lineNumber":43,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"    public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":45,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitID":"dominickenn"},"content":"        if (contains(toAdd)) {"},{"lineNumber":47,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":48,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"dominickenn"},"content":"        toAdd \u003d updatePriority(toAdd);"},{"lineNumber":50,"author":{"gitID":"dominickenn"},"content":"        internalList.add(toAdd);"},{"lineNumber":51,"author":{"gitID":"dominickenn"},"content":"        sortTasks();"},{"lineNumber":52,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"dominickenn"},"content":"    //@@author"},{"lineNumber":54,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":55,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"dominickenn"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":57,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to another existing task in the list."},{"lineNumber":59,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":60,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setTask(Task target, Task editedTask)"},{"lineNumber":62,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":63,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(editedTask);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":67,"author":{"gitID":"dominickenn"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":68,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":70,"author":{"gitID":"dominickenn"},"content":"        if (!target.equals(editedTask) \u0026\u0026 internalList.contains(editedTask)) {"},{"lineNumber":71,"author":{"gitID":"dominickenn"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":72,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":74,"author":{"gitID":"dominickenn"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        sortTasks();"},{"lineNumber":76,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":78,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"dominickenn"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":80,"author":{"gitID":"dominickenn"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if no such task could be found in the list."},{"lineNumber":82,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"dominickenn"},"content":"    public boolean remove(Task toRemove) throws TaskNotFoundException {"},{"lineNumber":84,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(toRemove);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!taskFoundAndDeleted) {"},{"lineNumber":87,"author":{"gitID":"dominickenn"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":88,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return taskFoundAndDeleted;"},{"lineNumber":90,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":97,"author":{"gitID":"dominickenn"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":98,"author":{"gitID":"dominickenn"},"content":"        final UniqueTaskList replacement \u003d new UniqueTaskList();"},{"lineNumber":99,"author":{"gitID":"dominickenn"},"content":"        for (final Task task : tasks) {"},{"lineNumber":100,"author":{"gitID":"dominickenn"},"content":"            replacement.add(task);"},{"lineNumber":101,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        setTasks(replacement);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"dominickenn"},"content":"    public ObservableList\u003cTask\u003e asObservableList() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"dominickenn"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"dominickenn"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"dominickenn"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"dominickenn"},"content":"    //@@author dominickenn"},{"lineNumber":130,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"dominickenn"},"content":"     * Sorts all tasks in uniqueTaskList according to priority"},{"lineNumber":132,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"dominickenn"},"content":"    private void sortTasks() {"},{"lineNumber":134,"author":{"gitID":"dominickenn"},"content":"        internalList.sort(Task.priorityComparator());"},{"lineNumber":135,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":137,"author":{"gitID":"dominickenn"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"dominickenn"},"content":"     * Updates task with updated priority level with respect to deadline"},{"lineNumber":139,"author":{"gitID":"dominickenn"},"content":"     * Priority level remains the same if task has just been created"},{"lineNumber":140,"author":{"gitID":"dominickenn"},"content":"     * Priority level is at maximum if current date is the deadline"},{"lineNumber":141,"author":{"gitID":"dominickenn"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"dominickenn"},"content":"    public Task updatePriority(Task task) {"},{"lineNumber":143,"author":{"gitID":"dominickenn"},"content":"        Task newTask;"},{"lineNumber":144,"author":{"gitID":"dominickenn"},"content":"        Priority newPriority;"},{"lineNumber":145,"author":{"gitID":"dominickenn"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":146,"author":{"gitID":"dominickenn"},"content":"        LocalDate dateAdded \u003d task.getDateAdded().date;"},{"lineNumber":147,"author":{"gitID":"dominickenn"},"content":"        LocalDate deadline \u003d task.getDeadline().date;"},{"lineNumber":148,"author":{"gitID":"dominickenn"},"content":"        Priority curPriority \u003d task.getPriority();"},{"lineNumber":149,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":150,"author":{"gitID":"dominickenn"},"content":"        int priorityDifferenceFromMax \u003d Integer.parseInt(Priority.HIGHEST_SETTABLE_PRIORITY_LEVEL)"},{"lineNumber":151,"author":{"gitID":"dominickenn"},"content":"                                        - Integer.parseInt(curPriority.value);"},{"lineNumber":152,"author":{"gitID":"dominickenn"},"content":"        long dayDifferenceCurrentToDeadline \u003d Duration.between(currentDate.atStartOfDay(),"},{"lineNumber":153,"author":{"gitID":"dominickenn"},"content":"                                                            deadline.atStartOfDay()).toDays();"},{"lineNumber":154,"author":{"gitID":"dominickenn"},"content":"        long dayDifferenceAddedToDeadline \u003d Duration.between(dateAdded.atStartOfDay(),"},{"lineNumber":155,"author":{"gitID":"dominickenn"},"content":"                                                            deadline.atStartOfDay()).toDays();"},{"lineNumber":156,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":157,"author":{"gitID":"dominickenn"},"content":"        if (dateAdded.isEqual(LocalDate.now())) {"},{"lineNumber":158,"author":{"gitID":"dominickenn"},"content":"            newTask \u003d new Task(task.getName(), task.getPriority(), task.getDeadline(), task.getDateAdded(),"},{"lineNumber":159,"author":{"gitID":"dominickenn"},"content":"                    task.getDescription(), task.getStatus(), task.getTags(), task.getSubtasks());"},{"lineNumber":160,"author":{"gitID":"dominickenn"},"content":"        } else if (currentDate.isBefore(deadline)) {"},{"lineNumber":161,"author":{"gitID":"dominickenn"},"content":"            int priorityToIncrease \u003d (int) (priorityDifferenceFromMax"},{"lineNumber":162,"author":{"gitID":"dominickenn"},"content":"                    * ((double) (dayDifferenceAddedToDeadline - dayDifferenceCurrentToDeadline)"},{"lineNumber":163,"author":{"gitID":"dominickenn"},"content":"                    / (double) dayDifferenceAddedToDeadline));"},{"lineNumber":164,"author":{"gitID":"dominickenn"},"content":"            newPriority \u003d new Priority(String.valueOf(Integer.parseInt(curPriority.value) + priorityToIncrease));"},{"lineNumber":165,"author":{"gitID":"dominickenn"},"content":"            newTask \u003d new Task(task.getName(), newPriority, task.getDeadline(), task.getDateAdded(),"},{"lineNumber":166,"author":{"gitID":"dominickenn"},"content":"                    task.getDescription(), task.getStatus(), task.getTags(), task.getSubtasks());"},{"lineNumber":167,"author":{"gitID":"dominickenn"},"content":"        } else {"},{"lineNumber":168,"author":{"gitID":"dominickenn"},"content":"            newPriority \u003d new Priority(Priority.HIGHEST_SETTABLE_PRIORITY_LEVEL);"},{"lineNumber":169,"author":{"gitID":"dominickenn"},"content":"            newTask \u003d new Task(task.getName(), newPriority, task.getDeadline(), task.getDateAdded(),"},{"lineNumber":170,"author":{"gitID":"dominickenn"},"content":"                    task.getDescription(), task.getStatus(), task.getTags(), task.getSubtasks());"},{"lineNumber":171,"author":{"gitID":"dominickenn"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":173,"author":{"gitID":"dominickenn"},"content":"        requireNonNull(newTask);"},{"lineNumber":174,"author":{"gitID":"dominickenn"},"content":"        return newTask;"},{"lineNumber":175,"author":{"gitID":"dominickenn"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"dominickenn"},"content":"}"}],"authorContributionMap":{"dominickenn":119,"-":57}},{"path":"src/main/java/seedu/organizer/model/task/MultipleFieldsContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"guekling"},"content":"//@@author guekling"},{"lineNumber":11,"author":{"gitID":"guekling"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"guekling"},"content":" * Tests that a {@code Task}\u0027s {@code Name}, {@code Description} and {@code Deadline} matches any of the keywords given."},{"lineNumber":13,"author":{"gitID":"guekling"},"content":" */"},{"lineNumber":14,"author":{"gitID":"guekling"},"content":"public class MultipleFieldsContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":15,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e nameKeywords;"},{"lineNumber":16,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e descriptionKeywords;"},{"lineNumber":17,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e deadlineKeywords;"},{"lineNumber":18,"author":{"gitID":"guekling"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":19,"author":{"gitID":"guekling"},"content":""},{"lineNumber":20,"author":{"gitID":"guekling"},"content":""},{"lineNumber":21,"author":{"gitID":"guekling"},"content":"    public MultipleFieldsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":22,"author":{"gitID":"guekling"},"content":"        this.nameKeywords \u003d keywords;"},{"lineNumber":23,"author":{"gitID":"guekling"},"content":"        this.descriptionKeywords \u003d keywords;"},{"lineNumber":24,"author":{"gitID":"guekling"},"content":"        this.deadlineKeywords \u003d keywords;"},{"lineNumber":25,"author":{"gitID":"guekling"},"content":""},{"lineNumber":26,"author":{"gitID":"guekling"},"content":"        this.keywords \u003d concatKeywords();"},{"lineNumber":27,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"guekling"},"content":""},{"lineNumber":29,"author":{"gitID":"guekling"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"guekling"},"content":"     * Concatenate the list of keywords from {@code Name}, {@code Description} and {@code Deadline}."},{"lineNumber":31,"author":{"gitID":"guekling"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"guekling"},"content":"     * @return A list of concatenated String containing the keywords from {@code Name}, {@code Description} and"},{"lineNumber":33,"author":{"gitID":"guekling"},"content":"     * {@code Deadline}."},{"lineNumber":34,"author":{"gitID":"guekling"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"guekling"},"content":"    private List\u003cString\u003e concatKeywords() {"},{"lineNumber":36,"author":{"gitID":"guekling"},"content":"        Stream\u003cString\u003e nameDescriptionStreams \u003d Stream.concat(nameKeywords.stream(), descriptionKeywords.stream());"},{"lineNumber":37,"author":{"gitID":"guekling"},"content":"        List\u003cString\u003e concatenatedLists \u003d Stream.concat(nameDescriptionStreams, deadlineKeywords.stream()).collect"},{"lineNumber":38,"author":{"gitID":"guekling"},"content":"                (Collectors.toList());"},{"lineNumber":39,"author":{"gitID":"guekling"},"content":"        return concatenatedLists;"},{"lineNumber":40,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"guekling"},"content":""},{"lineNumber":42,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"guekling"},"content":"    public boolean test(Task task) {"},{"lineNumber":44,"author":{"gitID":"guekling"},"content":"        return nameKeywords.stream().anyMatch(nameKeyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName,"},{"lineNumber":45,"author":{"gitID":"guekling"},"content":"                nameKeyword))"},{"lineNumber":46,"author":{"gitID":"guekling"},"content":"                || descriptionKeywords.stream().anyMatch(descriptionKeyword -\u003e StringUtil.containsWordIgnoreCase("},{"lineNumber":47,"author":{"gitID":"guekling"},"content":"                    task.getDescription().value, descriptionKeyword))"},{"lineNumber":48,"author":{"gitID":"guekling"},"content":"                || deadlineKeywords.stream().anyMatch(deadlineKeyword -\u003e StringUtil.containsWordIgnoreCase("},{"lineNumber":49,"author":{"gitID":"guekling"},"content":"                task.getDeadline().toString(), deadlineKeyword));"},{"lineNumber":50,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"guekling"},"content":""},{"lineNumber":52,"author":{"gitID":"guekling"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"guekling"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"guekling"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"guekling"},"content":"                || (other instanceof MultipleFieldsContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"guekling"},"content":"                \u0026\u0026 this.keywords.equals(((MultipleFieldsContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":57,"author":{"gitID":"guekling"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"guekling"},"content":"}"}],"authorContributionMap":{"guekling":49,"-":9}},{"path":"src/main/java/seedu/organizer/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.organizer.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.Task;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.organizer.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":19,"author":{"gitID":"dominickenn"},"content":"    void resetData(ReadOnlyOrganizer newData);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"dominickenn"},"content":"    /** Returns the Organizer */"},{"lineNumber":22,"author":{"gitID":"dominickenn"},"content":"    ReadOnlyOrganizer getOrganizer();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"dominickenn"},"content":"    /** Deletes the given task. */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void deleteTask(Task target) throws TaskNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"dominickenn"},"content":"    /** Adds the given task */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void addTask(Task task) throws DuplicateTaskException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"dominickenn"},"content":"     * Replaces the given task {@code target} with {@code editedTask}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"dominickenn"},"content":"     * @throws DuplicateTaskException if updating the task\u0027s details causes the task to be equivalent to"},{"lineNumber":34,"author":{"gitID":"dominickenn"},"content":"     *      another existing task in the list."},{"lineNumber":35,"author":{"gitID":"dominickenn"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void updateTask(Task target, Task editedTask)"},{"lineNumber":38,"author":{"gitID":"dominickenn"},"content":"            throws DuplicateTaskException, TaskNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"dominickenn"},"content":"    /** Returns an unmodifiable view of the filtered task list */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"dominickenn"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /** Removes the given {@code tag} from all {@code Task}s. */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":12,"-":39}},{"path":"src/main/java/seedu/organizer/model/subtask/UniqueSubtaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.organizer.model.subtask;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.organizer.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"dominickenn"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.exceptions.DuplicateDataException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.organizer.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of subtasks that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Subtask#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniqueSubtaskList implements Iterable\u003cSubtask\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cSubtask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Constructs empty SubtaskList."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public UniqueSubtaskList() {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Creates a UniqueSubtaskList using given subtasks."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public UniqueSubtaskList(List\u003cSubtask\u003e subtasks) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireAllNonNull(subtasks);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        internalList.addAll(subtasks);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns all subtasks in this list as a Set."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public List\u003cSubtask\u003e toList() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(internalList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Replaces the Subtasks in this list with those in the argument Subtask list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setSubtasks(List\u003cSubtask\u003e subtasks) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireAllNonNull(subtasks);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        internalList.setAll(subtasks);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Subtask as the given argument."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean contains(Subtask toCheck) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Adds a Subtask to the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws DuplicateSubtaskException if the Subtask to add is a duplicate of an existing Subtask in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void add(Subtask toAdd) throws DuplicateSubtaskException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new DuplicateSubtaskException();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public Iterator\u003cSubtask\u003e iterator() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public ObservableList\u003cSubtask\u003e asObservableList() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueSubtaskList // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueSubtaskList) other).internalList));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueSubtaskList other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static class DuplicateSubtaskException extends DuplicateDataException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        protected DuplicateSubtaskException() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate subtasks\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dominickenn":1,"-":131}}]
