var resultJson = [{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"\u003d Vetter Appointments"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"https://travis-ci.org/CS2103JAN2018-F09-B4/main[image:https://travis-ci.org/CS2103JAN2018-F09-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"https://ci.appveyor.com/project/jonwjbot/main/branch/master[image:https://ci.appveyor.com/api/projects/status/p65gkm3qtxv3bf3x/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F09-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F09-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"image::docs/images/Ui.png[width\u003d\"800\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"image::images/Ui.png[width\u003d\"800\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"{nbsp} +"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"VetterAppointments is a desktop address book application developed for veterinarians. VetterAppoinments allows you manage your veterinary technicians, clients, pets and appointments in a simple to use and beautifully designed desktop application."},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"The application is designed for veterinarians who prefer to type. The well crafted UI will assist you to quickly view details about an appointment or client."},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"With VetterAppointments, you will be able to focus on what\u0027s important and be assured that your appointments, contacts, details are managed properly."},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"Head on over to the https://github.com/CS2103JAN2018-F09-B4/main/blob/master/docs/UserGuide.adoc#2-quick-start[User Guide] and get started with VetterAppointments."},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":36,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"* AddressBook-Level4 project created by https://github.com/se-edu/[SE-EDU]  initiative"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"jonathanwj":17,"-":25}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d VetterAppointments- User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `F09-B4`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"VetterAppointments is a program for vets who prefer to use a desktop app for managing their Clients, Pets and Appointments. +"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"The app is optimized for Vets who prefer to work with the *Command Line Interface (CLI)* while still having a Graphical User Interface (GUI) that clearly lists out what is important to him or her. +"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"VetterAppointments allows a vet to manage and complete his tasks faster than the traditional GUI app provided he or she is a fast typer. To get started with the app, head down to \u003c\u003cQuick Start\u003e\u003e to get started!"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":".  Download the latest `VetterAppointments.jar` link:{repoURL}/releases[here]."},{"lineNumber":35,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your VetterAppointments."},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"*Understanding the Command Format*"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"An example of a command format: +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"`add r/ROLE n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"* The first word of the command format `add` states the *type* of the command. Other *types* of commands includes but not limited to, `delete`, `list`, `undo`, `redo` and etc."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"* Following the `add` are the parameters or the arguments that the command needs. In this case, the `add` command require these parameters from the user:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*ROLE*:: Role of the person being added into the program. +"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*NAME*:: The name of the person being added into the program. +"},{"lineNumber":57,"author":{"gitID":"-"},"content":"*PHONE*:: The phone number of the person being added. +"},{"lineNumber":58,"author":{"gitID":"-"},"content":"*EMAIL*:: A valid email consisting of existing domain and proper format of the person. +"},{"lineNumber":59,"author":{"gitID":"-"},"content":"*ADDRESS*:: The address of the person being added. +"},{"lineNumber":60,"author":{"gitID":"-"},"content":"*TAGS*:: (OPTIONAL)"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"* Parameters in uppercase states that the argument needs to be supplied by the user. They have a prefix on them like r/, n/, p/, e/, a/ and t/ that needs to be typed by the user. These prefixes tells the program the different parameter types."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* Parameters enclosed by square brackets like [t/TAG] suggests that the argument is *optional*. +"},{"lineNumber":65,"author":{"gitID":"-"},"content":"The user may choose to omit the parameter or add it."},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"* Parameters with ... appended to it, for example [t/TAG]... suggests that the parameter can be added multiple times. +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"If the user chooses to do, he or she *should not* omit the prefix of the argument, for this instance, t/. +"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"* Parameters of the commands can be typed in any order that the user chooses as long as the prefix of the argument is not omitted."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Command format: `help` +"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Upon entering the `help` command, a User Guide manual will pop up displaying the available commands for the user. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":".A User Guide display upon entering `help` command. +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"image::user_guide.PNG[width\u003d\"790\"]"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"Command format: `add r/ROLE n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"The `add` command will insert a new person\u0027s details into the program. The command expects these parameters when adding a new person: +"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":92,"author":{"gitID":"-"},"content":"*ROLE*:: VetterAppointment expects a role to be either a *VetTechnician* or a *Client*. +"},{"lineNumber":93,"author":{"gitID":"-"},"content":"*NAME*:: A name must be provided by the user for the person to be added. +"},{"lineNumber":94,"author":{"gitID":"-"},"content":"*PHONE*:: A phone number consisting of only numbers must be supplied by the user. +"},{"lineNumber":95,"author":{"gitID":"-"},"content":"*EMAIL*:: A valid email address must be provided with a valid domain and format. +"},{"lineNumber":96,"author":{"gitID":"-"},"content":"*ADDRESS*:: An address for the person to be added must be supplied by the user. +"},{"lineNumber":97,"author":{"gitID":"-"},"content":"*TAGS*:: The tags for the person to be added. This field can be omitted and used multiple times and should not contain any spaces. +"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Here are some valid examples on how to use the `add` command:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"* `add r/Client n/Alice Peterson p/91234567 e/alicepeter@email.com a/Blk 123, Bedok Reservoir St24` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"The user omits the tag parameters."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `add r/Client n/Bradly Cooper p/91234567 e/bradlycooper@email.com t/friend t/dog_whisperer a/Blk 123, Bedok Reservoir St24` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"The user adds multiple tags."},{"lineNumber":105,"author":{"gitID":"-"},"content":"* `add r/VetTechnician p/91234567 n/Carley Riady a/Blk 123, Bedok Reservoir St24 t/friend t/part_timer e/carlyriady@email.com` +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"The user chooses to re-order the parameter of the command. +"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d Adding a pet: `addp`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Command format: `addp pn/PET_NAME pa/PET_AGE pg/PET_GENDER t/PET_TAG...` +"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"The `addp` command adds a pet to the program."},{"lineNumber":113,"author":{"gitID":"-"},"content":"The command expects these parameters when adding a pet to a client: +"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":116,"author":{"gitID":"-"},"content":"*PET NAME*:: The name of the pet to be added to a client must be supplied by the user. +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"*PET AGE*:: The age of the pet must be supplied by the user. It must contain only numbers. +"},{"lineNumber":118,"author":{"gitID":"-"},"content":"*PET GENDER*:: The gender of the pet must be supplied by the user. It can only be male or female. +"},{"lineNumber":119,"author":{"gitID":"-"},"content":"*PET TAGS*:: The pet tags should be supplied by the user. Pet tags will represent the species and breed of the pet."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"Here are some valid examples on how to use the `addp` command: +"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"* `addp pn/Garfield pa/10 pg/M t/cat t/tabby` +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"The user chooses to add Garfield of age 10 and is a male. Garfield is a cat and a tabby. +"},{"lineNumber":125,"author":{"gitID":"-"},"content":"* `addp pn/Scooby Doo pa/5 pg/M t/dog t/great_dane` +"},{"lineNumber":126,"author":{"gitID":"-"},"content":"The user chooses to add another pet called Scooby Doo of age 5 and is a male. Scooby Doo is a dog and a great dane."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d Adding a pet to a client: `addpettoclient` `Since v1.2`"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"Command format: `p/PET_INDEX c/CLIENT_INDEX` +"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"The `addpettoclient` command adds a pet to the client."},{"lineNumber":134,"author":{"gitID":"-"},"content":"The command expects these parameters when adding a pet to a client: +"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"*PET INDEX*:: The index of the pet shown on the list +"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"*CLIENT INDEX*:: The index of the client shown on the list +"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"Here are some valid examples on how to use the `addpettoclient` command: +"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"* `addpettoclient p/1 c/2` +"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"The user chooses to add pet of index 1 to client of index 2 +"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"* `addpettoclient p/3 c/5` +"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"The user chooses to add another of index 3 to client of index 5."},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an appointment to a pet: `addapptto` `coming v2.0`"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"Command format: `addapptto n/CLIENT_NAME pn/PET_NAME date/DATE (DD.MM.YYYY) time/TIME (HHMM) vettech/VET_TECHNICIAN_NAME cmt/COMMENTS` +"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"The `addapptto` command adds an appointment to a pet in the program. A pet should have only one appointment linked to it. +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"The command expects these parameters when adding an appointment to a pet: +"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":155,"author":{"gitID":"-"},"content":"*CLIENT NAME*:: The name of the client of the pet name. +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"*PET NAME*:: The name of an existing pet must be supplied by the user. +"},{"lineNumber":157,"author":{"gitID":"-"},"content":"*DATE*:: The date of the appointment must be supplied by the user in this format: DD/MM/YYYY +"},{"lineNumber":158,"author":{"gitID":"-"},"content":"*TIME*:: The time of the appointment must be supplied by the user in this format: HHMM +"},{"lineNumber":159,"author":{"gitID":"-"},"content":"*VET TECHNICIAN NAME*:: The name of the vet technician that is in-charge of the appointment. +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"*COMMENTS*:: Comments must be supplied by the user to describe the kind of appointment. +"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"Here are some valid examples on using the `addapptto` command: +"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"* `addapptto n/Alice Peterson pn/Garfield date/01.02.2018 time/1430 vettech/Bob cmt/Sterilize the cat` +"},{"lineNumber":165,"author":{"gitID":"-"},"content":"The user chooses to add an appointment to Alice Peterson\u0027s pet called Garfield on 01.02.2018 at 1430HRS. Bob is the vet tech in-charge of this appointment, which is to sterilize Garfield."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Listing all clients: `list client`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":"Command format: `list client` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"purplepers0n"},"content":"The `list client` command will display all clients that are stored in the program."},{"lineNumber":172,"author":{"gitID":"purplepers0n"},"content":"It automatically switches to the client view tab so you can view all your clients at a glance."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Listing all pets: `list pet`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"purplepers0n"},"content":"Command format: `list pet` +"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"purplepers0n"},"content":"The `list pet` command will display all pets that are stored in the program."},{"lineNumber":179,"author":{"gitID":"purplepers0n"},"content":"It automatically switches to the pet view tab so you can view all your pets at a glance."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Listing all vet technicians: `list vettech`"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"purplepers0n"},"content":"Command format: `list vettech` +"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"purplepers0n"},"content":"The `list vettech` command will display all vet technicians that are stored in the program."},{"lineNumber":186,"author":{"gitID":"purplepers0n"},"content":"It automatically switches to the vet technician tab so that you can view them at a glance."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Listing all appointments: `list appt` `coming v2.0`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"Command format: `list appt` +"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"purplepers0n"},"content":"The `list appt` command will display all appointments that are pending for the user."},{"lineNumber":193,"author":{"gitID":"purplepers0n"},"content":"The list sorts upcoming appointments by date and then by time."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Listing all information: `listall` `coming v2.0`"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Command format: `listall INDEX` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"purplepers0n"},"content":"The `listall` command will display all pets and appointments that are tagged to a client."},{"lineNumber":200,"author":{"gitID":"-"},"content":"The command expects this parameter when called: +"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":203,"author":{"gitID":"-"},"content":"*INDEX*:: The index of the client that you wish to view the details of. This must be supplied by the user. +"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"Here is an example of using the command `listall`: +"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* `listall 1`  +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"Suppose there is only one client in the program and is stored at index 1. This command will then display all the information regarding the person at index one. +"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting clients in alphabetical order: `sort` `coming v2.0`"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"Command format: `sort` +"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"The `sort` command will sort all existing clients in the program in alphabetical order. By default, the program displays the list clients in chronological order. +"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting clients in chronological order: `sortc` `coming v2.0`"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"Command format: `sortc` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"The `sortc` command will sort all existing clients in the program in most recently added. This is the default ordering that is displayed in the program. +"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Removing a client or vet technician: `delete`"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"Command format: `delete INDEX` +"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"purplepers0n"},"content":"The `delete` command will remove a client from the program if the vet is viewing the client list. Executing this command will remove all the pets associated to the client. +"},{"lineNumber":227,"author":{"gitID":"purplepers0n"},"content":"The `delete` command will remove a vet technician from the program if the vet is viewing the vet technician list. The command expects this parameter when called: +"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":230,"author":{"gitID":"purplepers0n"},"content":"*INDEX*:: The client or vet technician\u0027s index on the list displayed in the program. This must be supplied by the user."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"Here is an example of using the command `delete`: +"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":235,"author":{"gitID":"purplepers0n"},"content":"Suppose the vet is currently viewing the \u0027client\u0027 list and there is only one client in the program called Alice Peterson and she has Garfield and Scooby Doo as her associated pets. This command will remove Alice, Garfield and Scooby Doo from the program."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Removing a pet: `deletep`"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"Command format: `deletep INDEX` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"purplepers0n"},"content":"The `deletep` command will remove a pet from the program. Executing this command will remove the pet from the program. The command expects this parameter when called: +"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":244,"author":{"gitID":"-"},"content":"*INDEX*:: The client\u0027s index in the program. This must be supplied by the user."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Here is an example of using the command `deletep`: +"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"* `deletep 1` +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"Suppose there is only one pet in the program called Garfield, Garfield will be entirely removed from the program."},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Removing a pet from a client: `rmpetfrom` `coming v2.0`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Command format: `rmpetfrom n/CLIENT_NAME pn/PET_NAME` +"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"The `rmpetfrom` command will remove a pet from a client. Once a pet is removed, the appointment (if any) associated to that pet will also be removed. The command expects these parameters when called: +"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"*CLIENT NAME*:: The pet\u0027s client name to be removed. This must be supplied by the user. +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"*PET NAME*:: The pet name of the specified client\u0027s name. This must be supplied by the user. +"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"Here is an example of using the command `rmpetfrom`: +"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"* `rmpetfrom n/Alice Peterson pn/Garfield` +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"When this command is executed, Garfield, which is Alice Peterson\u0027s pet will be removed from the program. The appointment associated to Garfield will also be removed."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Removing an appointment from a pet: `rmapptfrom` `coming v2.0`"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"Command format: `rmapptfrom n/CLIENT_NAME pn/PET_NAME`"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"The `rmapptfrom` command removes an associated appointment from a pet. The command parameters are the same as `rmpetfrom`, see \u003c\u003cRemoving a pet from a client: `rmpetfrom`\u003e\u003e. The command expects these parameters: +"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"*CLIENT NAME*:: The pet\u0027s client name to be removed. This must be supplied by the user. +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"*PET NAME*:: The pet name of the specified client\u0027s name. This must be supplied by the user. +"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Here is an exammple of using the command `rmapptfrom`: +"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"* `rmpetfrom n/Bradly Cooper pn/Scooby Doo` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"When this command is executed, Scooby\u0027s Doo which is Bradly Cooper\u0027s pet\u0027s appointment will be removed."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Editing a client or vet technician\u0027s details : `edit`"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"purplepers0n"},"content":"Command format: `edit INDEX [r/ROLE] [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"purplepers0n"},"content":"The `edit` command amends the details of an existing client or vet technician, depending on which list the vet is currently viewing."},{"lineNumber":287,"author":{"gitID":"purplepers0n"},"content":"The details of the specified person\u0027s index will be replaced with the supplied parameters from the user."},{"lineNumber":288,"author":{"gitID":"purplepers0n"},"content":"The existing details will be overriden. The command expects these parameters: +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":290,"author":{"gitID":"-"},"content":"*INDEX*:: The index of the person that the user wants to edit. It must be supplied by the user."},{"lineNumber":291,"author":{"gitID":"purplepers0n"},"content":"*ROLE*:: The new role of the person that the user wants. It need not be supplied by the user."},{"lineNumber":292,"author":{"gitID":"-"},"content":"*NAME*:: The new name of the person that the user wants. It need not be supplied by the user."},{"lineNumber":293,"author":{"gitID":"-"},"content":"*PHONE*:: The new phone number of the person that the user wants. It need not be supplied by the user."},{"lineNumber":294,"author":{"gitID":"-"},"content":"*EMAIL*:: The new email of the person that the user wants. It need not be supplied by the user."},{"lineNumber":295,"author":{"gitID":"-"},"content":"*ADDRESS*:: The new address of the person that the user wants. It need not be supplied by the user."},{"lineNumber":296,"author":{"gitID":"-"},"content":"*TAGS*:: (OPTIONAL)"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The `edit` command is very similar to the `add` command. Here are some examples on using the command: +"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"purplepers0n"},"content":"* `edit 1 e/newemail@email.com a/Blk 123, Clementi Ave 3 t/friend t/part_timer` +"},{"lineNumber":301,"author":{"gitID":"purplepers0n"},"content":"Here the user chooses to amend person 1 on the currently viewed list and changes the person\u0027s email, address and tags."},{"lineNumber":302,"author":{"gitID":"purplepers0n"},"content":"* `edit 1 n/Mary Tan` +"},{"lineNumber":303,"author":{"gitID":"purplepers0n"},"content":"Here the user chooses to only change the name of the person specified at index 1 on the currently viewed list and omits the remaining parameters."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a pet\u0027s details: `editp` `coming v2.0`"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"Command format: `editp INDEX [pn/PET_NAME] [pa/PET_AGE] [pg/PET_GENDER] [t/PET_TAGS]...`"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"Similar to the `edit` command, the `editp` command amends the details of a specified pet of the specified owner. The command expects these parameters when executing: +"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":312,"author":{"gitID":"-"},"content":"*INDEX*:: The index of the pet that the user wants to amend. This must be supplied by the user."},{"lineNumber":313,"author":{"gitID":"-"},"content":"*PET NAME*:: The new pet name the user wants to change. It need not be supplied by the user."},{"lineNumber":314,"author":{"gitID":"-"},"content":"*PET AGE*:: The new pet age the user wants to change. It need not be supplied by the user."},{"lineNumber":315,"author":{"gitID":"-"},"content":"*PET GENDER*:: The new pet gender the user wants to change. It need not be supplied by the user."},{"lineNumber":316,"author":{"gitID":"-"},"content":"*PET TAGS*:: (OPTIONAL)"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"Here is an example of using the `editp` command: +"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"* `editp 1 pn/Jerry pa/2 pg/M` +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"The user chooses to edit the pet of the first index and changed the existing name, age and gender to Jerry, 2 and male."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a pet\u0027s appointment: `editappt` `coming v2.0`"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"Command format: `editappt n/CLIENT_NAME pn/PET_NAME [date/DATE (DD.MM.YYYY)] [time/TIME (HHMM)] [vettech/VET_TECHNICIAN_NAME] [cmt/COMMENTS]`"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"The `editappt` command edits the appointment date and detail of an existing pet. The command expects these parameters when executing: +"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":330,"author":{"gitID":"-"},"content":"*CLIENT NAME*:: The name of the pet\u0027s owner. This must be supplied by the user."},{"lineNumber":331,"author":{"gitID":"-"},"content":"*PET NAME*:: The name of the pet. This must be supplied by the user."},{"lineNumber":332,"author":{"gitID":"-"},"content":"*DATE*:: The new date of the new appointment in DD.MM.YYYY format. It need not be supplied by the user."},{"lineNumber":333,"author":{"gitID":"-"},"content":"*TIME*:: The time of the new appointment in HHMM format. It need not be supplied by the user."},{"lineNumber":334,"author":{"gitID":"-"},"content":"*VET TECHNICIAN*:: The name of the new vet technician in-charged of the new appointment. It need not be supplied by the user."},{"lineNumber":335,"author":{"gitID":"-"},"content":"*COMMENTS*:: The new comments for the appointment. It need not be supplied by the user."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding clients by name: `find`"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"Command format: `find KEYWORD`"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"The `find` command displays all existing clients containing the keyword. The command expeccts these parameters: +"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":345,"author":{"gitID":"-"},"content":"*KEYWORD*:: The keyword to find the client. It must be supplied by the user."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"Here is an example on how to use the `find` command: +"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"* `find alice` +"},{"lineNumber":350,"author":{"gitID":"-"},"content":"The user used the keyword alice to find all clients containing the word alice in their names."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":353,"author":{"gitID":"-"},"content":"The keyword is case insensitive.This means typing, \"ALICE\", \"alice\" or \u0027AlIcE\" will result in the same output."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding pets by name: `findp` `coming v2.0`"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"Command format: `findp KEYWORD`"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"The `findp` command is similar to the `find` command. See \u003c\u003cFinding clients by name: `find`\u003e\u003e. The `findp` command displays all existing pets containing the keyword. The command expects these parameters:"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"*KEYWORD*:: The keyword to find the pet. It must be supplied by the user."},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"Here is an example on how to use the command: +"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"* `findp Garf`"},{"lineNumber":367,"author":{"gitID":"-"},"content":"The user used the keyword Garf to find all pets containing the word Garf."},{"lineNumber":368,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":369,"author":{"gitID":"-"},"content":"The keyword is case insensitive. This means typing, \"GARF\", \"garf\" or \"GaRf\" will result in the same output."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Selecting a client, pet or vet technician: `select`"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"Command format: `select INDEX` +"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"purplepers0n"},"content":"The `select` command selects the client, pet or vet technician identified by the index number on the currently viewed list. The command expects this parameter: +"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"[horizontal]"},{"lineNumber":379,"author":{"gitID":"purplepers0n"},"content":"*INDEX*:: The index of the client, pet or vet technician that the user wants to select. It must be supplied by the user."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"Here is an example on using the command: +"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"purplepers0n"},"content":"* `select 3` +"},{"lineNumber":384,"author":{"gitID":"purplepers0n"},"content":"The user is currently viewing the client list and wishes to select the 3rd client on the list."},{"lineNumber":385,"author":{"gitID":"purplepers0n"},"content":"The program will scroll to and select the 3rd client on the list."},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Scheduling an appointment : `schedule`"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"Schedules an appointment by specifying the date and time."},{"lineNumber":390,"author":{"gitID":"-"},"content":"Format: schedule da/DATE tm/TIME"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":394,"author":{"gitID":"-"},"content":"The format for date should follow YYYY-MM-DD and for time should follow HH:MM."},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"* `schedule da/2018-10-10 tm/15:00` +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"Schedules an appointment on 10th October 2018 at 15:00."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"Command format: `history` +"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":410,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":414,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"Command format: `undo` +"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":422,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content: +"},{"lineNumber":423,"author":{"gitID":"-"},"content":"`add` `addp` `addapptto` `sort` `sortc` `rmc` `rmpetfrom` `rmapptfrom` `edit` `editp` `editappt` `clear`"},{"lineNumber":424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Format: `redo` +"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":434,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content: +"},{"lineNumber":435,"author":{"gitID":"-"},"content":"`add` `addp` `addapptto` `sort` `sortc` `rmc` `rmpetfrom` `rmapptfrom` `edit` `editp` `editappt` `clear`"},{"lineNumber":436,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"Command format: `clear` +"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":445,"author":{"gitID":"-"},"content":"`clear` command will remove *all* existing clients, pets, appointments and vet technicians stored in the program."},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"Command format: `exit` +"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":454,"author":{"gitID":"-"},"content":"Exiting the program in the middle of a command will save the state. So there\u0027s nothing to worry about."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous VetterAppointments folder."},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"[width\u003d\"100%\"]"},{"lineNumber":467,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":468,"author":{"gitID":"-"},"content":"|*Command* |*Command Format* |*Description*"},{"lineNumber":469,"author":{"gitID":"-"},"content":"|help |`help` |Displays the user guide."},{"lineNumber":470,"author":{"gitID":"-"},"content":"|add |`add r/ROLE n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]…` |Adds a person into the program."},{"lineNumber":471,"author":{"gitID":"-"},"content":"|addp |`addp n/CLIENT_NAME pn/PET_NAME pa/PET_AGE pg/PET_GENDER t/PET_TAG…​` |Adds a pet to a cient."},{"lineNumber":472,"author":{"gitID":"-"},"content":"|addapptto |`addapptto n/CLIENT_NAME pn/PET_NAME date/DATE (DD.MM.YYYY) time/TIME (HHMM) vettech/VET_TECHNICIAN_NAME cmt/COMMENTS` |Adds an appointment to a pet."},{"lineNumber":473,"author":{"gitID":"purplepers0n"},"content":"|list client |`list client` |Lists all clients."},{"lineNumber":474,"author":{"gitID":"purplepers0n"},"content":"|list pet |`list pet` |Lists all pets."},{"lineNumber":475,"author":{"gitID":"purplepers0n"},"content":"|list vettech |`list vettech` |Lists all vet technicians."},{"lineNumber":476,"author":{"gitID":"-"},"content":"|list appt |`list appt` |Lists all appointments."},{"lineNumber":477,"author":{"gitID":"-"},"content":"|listall |`listall INDEX` |Lists all details for a particular client."},{"lineNumber":478,"author":{"gitID":"-"},"content":"|sort |`sort` |Sorts the client list alphabetically."},{"lineNumber":479,"author":{"gitID":"-"},"content":"|sortc |`sortc` |Sorts the client list chronologically."},{"lineNumber":480,"author":{"gitID":"-"},"content":"|rmc |`rmc INDEX` |Remove a client."},{"lineNumber":481,"author":{"gitID":"-"},"content":"|rmpetfrom |`rmpetfrom n/CLIENT_NAME pn/PET_NAME` |Removes a pet from a client."},{"lineNumber":482,"author":{"gitID":"-"},"content":"|rmapptfrom |`rmapptfrom n/CLIENT_NAME pn/PET_NAME` |Removes an appointment from a pet."},{"lineNumber":483,"author":{"gitID":"-"},"content":"|edit |`edit INDEX [n/ROLE] [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` |Edits a person\u0027s details."},{"lineNumber":484,"author":{"gitID":"-"},"content":"|editp |`editp INDEX [pn/PET_NAME] [pa/PET_AGE] [pg/PET_GENDER] [t/PET_TAGS]…​` |Edits a pet\u0027s details."},{"lineNumber":485,"author":{"gitID":"-"},"content":"|editappt |`editappt n/CLIENT_NAME pn/PET_NAME [date/DATE (DD.MM.YYYY)] [time/TIME (HHMM)] [vettech/VET_TECHNICIAN_NAME] [cmt/COMMENTS]` |Edits an appointment\u0027s details."},{"lineNumber":486,"author":{"gitID":"-"},"content":"|find |`find KEYWORD` |Finds a client with keyword."},{"lineNumber":487,"author":{"gitID":"-"},"content":"|findp |`findp KEYWORD` |finds a pet with keyword."},{"lineNumber":488,"author":{"gitID":"-"},"content":"|select |`select INDEX` |Selects an index."},{"lineNumber":489,"author":{"gitID":"-"},"content":"|history |`history` |Lists the history of commands executed."},{"lineNumber":490,"author":{"gitID":"-"},"content":"|undo |`undo` |Undo the previous command executed."},{"lineNumber":491,"author":{"gitID":"-"},"content":"|redo |`redo` |Redo the undo command executed."},{"lineNumber":492,"author":{"gitID":"-"},"content":"|clear |`clear` |Deletes all data of the program."},{"lineNumber":493,"author":{"gitID":"-"},"content":"|exit |`exit` |Exits the program."},{"lineNumber":494,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"}],"authorContributionMap":{"jonathanwj":18,"purplepers0n":42,"-":434}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        assertListMatching(getClientListPanel(), expectedList);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":3,"-":50}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredClientList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":199}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        getClientListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        assertListMatching(getClientListPanel(), getModel().getFilteredClientList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":2,"-":92}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_CLIENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + ROLE_DESC_CLIENT + \"  \""},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"        /* Case: missing role -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"        /* Case: invalid role -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_ROLE_DESC + NAME_DESC_AMY"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(command, PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + INVALID_NAME_DESC"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"                + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":209,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":246,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":248,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":40,"purplepers0n":6,"-":247}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"import guitests.guihandles.ClientListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":50,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":51,"author":{"gitID":"-"},"content":" */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanelHandle getClientListPanel() {"},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"        return mainWindowHandle.getClientListPanel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":146,"author":{"gitID":"purplepers0n"},"content":"        executeCommand(ListCommand.COMMAND_WORD + \" client\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(getModel().getFilteredClientList().size()"},{"lineNumber":156,"author":{"gitID":"purplepers0n"},"content":"                \u003c\u003d getModel().getAddressBook().getPersonList().stream()"},{"lineNumber":157,"author":{"gitID":"purplepers0n"},"content":"                .filter(Person::isClient).collect(Collectors.toList()).size());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":165,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(index.getZeroBased(), getClientListPanel().getSelectedCardIndex());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":187,"author":{"gitID":"purplepers0n"},"content":"        assertListMatching(getClientListPanel(), expectedModel.getFilteredClientList());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":199,"author":{"gitID":"purplepers0n"},"content":"        getClientListPanel().rememberSelectedClientCard();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":209,"author":{"gitID":"purplepers0n"},"content":"        assertFalse(getClientListPanel().isAnyCardSelected());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":219,"author":{"gitID":"purplepers0n"},"content":"        String selectedCardName \u003d getClientListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getClientListPanel().getSelectedCardIndex());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":238,"author":{"gitID":"purplepers0n"},"content":"        assertFalse(getClientListPanel().isSelectedClientCardChanged());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":283,"author":{"gitID":"purplepers0n"},"content":"            assertListMatching(getClientListPanel(), getModel().getFilteredClientList());"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":17,"-":281}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"        Index personCount \u003d Index.fromOneBased(getModel().getFilteredClientList().size());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":56,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":84,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":116,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":"        int preExecutionSelectedCardIndex \u003d getClientListPanel().getSelectedCardIndex();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":2,"-":150}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    private static final Predicate\u003cClient\u003e PREDICATE_MATCHING_NO_CLIENTS \u003d unused -\u003e false;"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"    private static final Predicate\u003cVetTechnician\u003e PREDICATE_MATCHING_NO_TECHNICIANS \u003d unused -\u003e false;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    public static void setFilteredList(Model model,"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"                                       List\u003cClient\u003e toDisplayClient, List\u003cVetTechnician\u003e toDisplayVetTechnician) {"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"        Optional\u003cPredicate\u003cClient\u003e\u003e predicateClient \u003d toDisplayClient.stream()"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"                .map(ModelHelper::getPredicateMatchingClient).reduce(Predicate::or);"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(predicateClient.orElse(PREDICATE_MATCHING_NO_CLIENTS));"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"        if (!toDisplayVetTechnician.isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"            Optional\u003cPredicate\u003cVetTechnician\u003e\u003e predicateTechnician \u003d toDisplayVetTechnician.stream()"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"                    .map(ModelHelper::getPredicateMatchingTechnician).reduce(Predicate::or);"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(predicateTechnician.orElse(PREDICATE_MATCHING_NO_TECHNICIANS));"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, Person... toDisplay) {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        List\u003cPerson\u003e persons \u003d Arrays.asList(toDisplay);"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        List\u003cVetTechnician\u003e technicians \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        for (int i \u003d 0; i \u003c persons.size(); i++) {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"            if (persons.get(i).isClient()) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"                clients.add((Client) persons.get(i));"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"                technicians.add((VetTechnician) persons.get(i));"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        setFilteredList(model, clients, technicians);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"    private static Predicate\u003cClient\u003e getPredicateMatchingClient(Person other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    private static Predicate\u003cVetTechnician\u003e getPredicateMatchingTechnician(Person other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"purplepers0n":30,"-":38}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"            new JumpToListRequestEvent(INDEX_SECOND_PERSON, 0);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":2,"-":57}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"purplepers0n"},"content":"        assertFalse(getClientListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredClientList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":2,"-":193}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).buildWithRoleClient();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"        Person personWithTags \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        Person person \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").buildWithRoleClient();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":68}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import guitests.guihandles.ClientCardHandle;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import guitests.guihandles.ClientListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    public static void assertCardDisplaysClient(Person expectedPerson, ClientCardHandle actualCard) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     * Asserts that the list in {@code clientListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    public static void assertListMatching(ClientListPanelHandle clientListPanelHandle, Person... persons) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            assertCardDisplaysClient(persons[i], clientListPanelHandle.getClientCardHandle(i));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    public static void assertListMatching(ClientListPanelHandle clientListPanelHandle, List\u003cClient\u003e clients) {"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        assertListMatching(clientListPanelHandle, clients.toArray(new Person[0]));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":9,"-":79}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD + \" client\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"        String thirdCommand \u003d \"list client\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":2,"-":155}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"purplepers0n"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredClientList(), model.getFilteredVetTechnicianList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":122}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d VetterAppointments - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B4/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"VetterAppointments is a Java based application that helps manage the appointments of a veterinarian."},{"lineNumber":20,"author":{"gitID":"-"},"content":"This guide will aid an incoming developer to understand the architecture and underlying interface of the application."},{"lineNumber":21,"author":{"gitID":"-"},"content":"This guide will walk through the process of setting up the program and building upon it."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":46,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":47,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":68,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":71,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":86,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":91,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":98,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":106,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":111,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":116,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":138,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":141,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":149,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":162,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":165,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":183,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":184,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":190,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":193,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":194,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":195,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":206,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":215,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":221,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":252,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":253,"author":{"gitID":"-"},"content":"----"},{"lineNumber":254,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"},{"lineNumber":260,"author":{"gitID":"-"},"content":"----"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":263,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":264,"author":{"gitID":"-"},"content":"----"},{"lineNumber":265,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"}"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":"}"},{"lineNumber":280,"author":{"gitID":"-"},"content":"----"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":293,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":302,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":311,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":330,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":331,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":340,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":341,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":351,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":354,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":361,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":362,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":365,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Pet Component Feature"},{"lineNumber":368,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for implementation"},{"lineNumber":370,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"VetterAppointments is designed for vets who manages his team of vet technician, clients and most importantly, the pets."},{"lineNumber":372,"author":{"gitID":"-"},"content":"The Pet component feature stores the necessary Pet details like name, gender, age, tags as well as appointment."},{"lineNumber":373,"author":{"gitID":"-"},"content":"Such details are essential to facilitate other functions such as viewing the client\u0027s appointments and the pet\u0027s appointments at a glance displayed on the GUI."},{"lineNumber":374,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":376,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"*Model component* +"},{"lineNumber":378,"author":{"gitID":"-"},"content":"Currently the `Pet` object is initialized by calling it\u0027s constructor. The constructor"},{"lineNumber":379,"author":{"gitID":"-"},"content":"initializes the four fields of `Pet` to respective arguments supplied by the user. +"},{"lineNumber":380,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"*Constructing a `Pet` object*"},{"lineNumber":382,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":383,"author":{"gitID":"-"},"content":"----"},{"lineNumber":384,"author":{"gitID":"-"},"content":"public Pet(PetName petName, PetAge petAge, PetGender petGender, Set\u003cTag\u003e tags) {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"    requireAllNonNull(petName, petAge, petGender, tags);"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    this.petName \u003d petName;"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    this.petAge \u003d petAge;"},{"lineNumber":388,"author":{"gitID":"-"},"content":"    this.petGender \u003d petGender;"},{"lineNumber":389,"author":{"gitID":"-"},"content":"    this.tags \u003d tags;"},{"lineNumber":390,"author":{"gitID":"-"},"content":"}"},{"lineNumber":391,"author":{"gitID":"-"},"content":"----"},{"lineNumber":392,"author":{"gitID":"-"},"content":"Explanation for arguments: +"},{"lineNumber":393,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"`PetName`: A class that takes in a String supplied by the user with the prefix `pn/`. It stores the details of the pet name"},{"lineNumber":395,"author":{"gitID":"-"},"content":"and creates an object for the `Pet` constructor to consume."},{"lineNumber":396,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":397,"author":{"gitID":"-"},"content":"The `PetName` validates the name of the pet supplied. Only alphanumeric characters are allowed. +"},{"lineNumber":398,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"The constraints for a valid pet name is implemented this way:"},{"lineNumber":400,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":401,"author":{"gitID":"-"},"content":"----"},{"lineNumber":402,"author":{"gitID":"-"},"content":"public static final String PETNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":403,"author":{"gitID":"-"},"content":"----"},{"lineNumber":404,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"`PetAge`: A class that takes in a String supplied by the user with the prefix `pa/`. It then stores the details of the pet age"},{"lineNumber":406,"author":{"gitID":"-"},"content":"and creates an object for the `Pet` constructor to consume."},{"lineNumber":407,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":408,"author":{"gitID":"-"},"content":"The `PetAge` validates the age supplied by the user. Only 1-2 digit numbers are allowed. +"},{"lineNumber":409,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"The constraints for a valid pet age is implemented this way:"},{"lineNumber":411,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":412,"author":{"gitID":"-"},"content":"----"},{"lineNumber":413,"author":{"gitID":"-"},"content":"public static final String PET_VALIDATIONS_REGEX \u003d \"\\\\d{1,2}\";"},{"lineNumber":414,"author":{"gitID":"-"},"content":"----"},{"lineNumber":415,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"`Petgender`: A class that takes in a String supplied by the user with the prefix `pg\\`. It stores the pet gender details"},{"lineNumber":417,"author":{"gitID":"-"},"content":"and creates an object for the `Pet` constructor to consume."},{"lineNumber":418,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":419,"author":{"gitID":"-"},"content":"The `PetGender` validates for supplied gender. Only M or F is allowed, representing Male or Female."},{"lineNumber":420,"author":{"gitID":"-"},"content":"It is case insensitive. +"},{"lineNumber":421,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"The constraints for a valid pet gender is implemented this way:"},{"lineNumber":423,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":424,"author":{"gitID":"-"},"content":"----"},{"lineNumber":425,"author":{"gitID":"-"},"content":"public static final String GENDER_VALIDATION_REGEX \u003d \"[m,f,M,F]\";"},{"lineNumber":426,"author":{"gitID":"-"},"content":"----"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"`Set\u003cTag\u003e`: In addition to the PetName, PetAge and PetGender, a `Set\u003cTag\u003e` is also needed for the construction of a `Pet` object. +"},{"lineNumber":429,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":430,"author":{"gitID":"-"},"content":"The tags for a pet is used to represent the species and breed for that particular pet. +"},{"lineNumber":431,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"All the `Pet` objects that were created in the program will be stored in a class called `UniquePetList`."},{"lineNumber":433,"author":{"gitID":"-"},"content":"The `UniquePetList` class ensures that no duplicates of the same pet are stored inside the program."},{"lineNumber":434,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"The figure below shows a simple overview of the `Pet` class. +"},{"lineNumber":436,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":".Pet class diagram snippet"},{"lineNumber":438,"author":{"gitID":"-"},"content":"image::pet_diagram_snippet.png[width\u003d\"790\"]"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":441,"author":{"gitID":"-"},"content":"The `Pet` object interacts with several commands in the program. +"},{"lineNumber":442,"author":{"gitID":"-"},"content":"1. `addp` +"},{"lineNumber":443,"author":{"gitID":"-"},"content":"2. `deletep` +"},{"lineNumber":444,"author":{"gitID":"-"},"content":"3. `list pet` +"},{"lineNumber":445,"author":{"gitID":"-"},"content":"4. `sortp` `*NOT IMPLEMENTED YET*` +"},{"lineNumber":446,"author":{"gitID":"-"},"content":"5. `addapptto` `*NOT IMPLEMENTED YET*` +"},{"lineNumber":447,"author":{"gitID":"-"},"content":"6. `findp` `*NOT IMPLEMENTED YET*` +"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Storage component"},{"lineNumber":450,"author":{"gitID":"-"},"content":"All pet details will be stored in a seperate XML file."},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d UI component"},{"lineNumber":453,"author":{"gitID":"-"},"content":"All pet information will be displayed in the UI in a `Pet` list. All changes made to the pet will be reflected immediately after interacting with the commands."},{"lineNumber":454,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"// tag::addpettoclient[]"},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add pet to client feature"},{"lineNumber":457,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":458,"author":{"gitID":"-"},"content":"The `AddPetToClientCommand` allows the user to add an existing pet to and existing client. A user can execute the command by providing the index of the pet and the index of the client in the following format `addpettoclient p/PET_INDEX c/CLIENT_INDEX`."},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":".Structure of part of Logic Component"},{"lineNumber":461,"author":{"gitID":"-"},"content":"image::addpettoclient_logic_command_class_diagram.png[width\u003d\"800\"]"},{"lineNumber":462,"author":{"gitID":"-"},"content":"As can be seen from the diagram, the `AddPetToClientCommand` is implemented to extend an `UndoableCommand` which enables the user to undo and redo the `AddPetToClientCommand` that is executed."},{"lineNumber":463,"author":{"gitID":"-"},"content":"The `AddPetToClientCommand` interacts with the `Model` component to add pet to a client."},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":".Structure of part of Model Component"},{"lineNumber":466,"author":{"gitID":"-"},"content":"image::addpettoclientmodelclassdiagram.png[width\u003d\"800\"]"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the add pet to client command works. +"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":".Interactions inside the Logic Component for `addpetto p/1 c/1` Command"},{"lineNumber":471,"author":{"gitID":"-"},"content":"image::addpettoclientSequence.png[width\u003d\"800\"]"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":474,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddPetToClientCommand`"},{"lineNumber":475,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new command that extends `UndoableCommand`"},{"lineNumber":476,"author":{"gitID":"-"},"content":"** Pros: We will be able to utilize undone/redone functionality."},{"lineNumber":477,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand undo/redo implementation."},{"lineNumber":478,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just add a new command that extends `Command`"},{"lineNumber":479,"author":{"gitID":"-"},"content":"** Pros: Does not involve `UndoableCommand`, easier for new developers to understand."},{"lineNumber":480,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the add pet to client command"},{"lineNumber":483,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use an association class `ClientOwnPet` to link `Pet` and `Client`"},{"lineNumber":484,"author":{"gitID":"-"},"content":"** Pros: Low coupling between `Pet` and `Client`."},{"lineNumber":485,"author":{"gitID":"-"},"content":"** Cons: More steps required for other implementations to obtain pet and client relationship."},{"lineNumber":486,"author":{"gitID":"-"},"content":"* **Alternative 2:** Bi-directional association between `Pet` with `Client`"},{"lineNumber":487,"author":{"gitID":"-"},"content":"** Pros: Need not need to maintain a separate association class."},{"lineNumber":488,"author":{"gitID":"-"},"content":"** Cons: High coupling."},{"lineNumber":489,"author":{"gitID":"-"},"content":"// end::addpettoclient[]"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":492,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d List and display clients, pets and vet technicians"},{"lineNumber":499,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"purplepers0n"},"content":"The side bar of the user interface implements a `TabPane` with three tabs,"},{"lineNumber":503,"author":{"gitID":"purplepers0n"},"content":"\u0027Client\u0027, \u0027Pet\u0027 and \u0027Vet Tech\u0027 where clicking on each tab will show the"},{"lineNumber":504,"author":{"gitID":"purplepers0n"},"content":"corresponding list. We will use the pet list to demonstrate the implementation."},{"lineNumber":505,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":506,"author":{"gitID":"purplepers0n"},"content":"The \u0027Pet\u0027 `Tab` consists of a `StackPane` called `petListPanelPlaceholder` in the `MainWindow.fxml` file."},{"lineNumber":507,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":508,"author":{"gitID":"purplepers0n"},"content":"In the `MainWindow.java` file, the `petListPanel`"},{"lineNumber":509,"author":{"gitID":"purplepers0n"},"content":"retrieves the updated list of pets from `logic`, and the `petListPanel` is added to `petListPanelPlaceholder` to be displayed like so:"},{"lineNumber":510,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":511,"author":{"gitID":"purplepers0n"},"content":"[source, java]"},{"lineNumber":512,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":513,"author":{"gitID":"purplepers0n"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":514,"author":{"gitID":"purplepers0n"},"content":"    void fillInnerParts() {"},{"lineNumber":515,"author":{"gitID":"purplepers0n"},"content":"        petListPanel \u003d new PetListPanel(logic.getFilteredPetList());"},{"lineNumber":516,"author":{"gitID":"purplepers0n"},"content":"        petListPanelPlaceholder.getChildren().add(petListPanel.getRoot());"},{"lineNumber":517,"author":{"gitID":"purplepers0n"},"content":"        // ...other placeholders..."},{"lineNumber":518,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":519,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":520,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":521,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":522,"author":{"gitID":"purplepers0n"},"content":"The `PetListPanel` is a `ListView` which contains a list of `PetCard` which is implemented like so:"},{"lineNumber":523,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":524,"author":{"gitID":"purplepers0n"},"content":"[soruce, java]"},{"lineNumber":525,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":526,"author":{"gitID":"purplepers0n"},"content":"public class PetListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":527,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":528,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":529,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cPetCard\u003e petListView;"},{"lineNumber":530,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":531,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cPet\u003e petList) {"},{"lineNumber":532,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cPetCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":533,"author":{"gitID":"purplepers0n"},"content":"                petList, (pet) -\u003e new PetCard(pet, petList.indexOf(pet) + 1));"},{"lineNumber":534,"author":{"gitID":"purplepers0n"},"content":"        petListView.setItems(mappedList);"},{"lineNumber":535,"author":{"gitID":"purplepers0n"},"content":"        petListView.setCellFactory(listView -\u003e new PetListViewCell());"},{"lineNumber":536,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":537,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":538,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":539,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":540,"author":{"gitID":"purplepers0n"},"content":"The `PetCard` contains a single pet and sets the pet\u0027s details and the layout of the display of details."},{"lineNumber":541,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":542,"author":{"gitID":"purplepers0n"},"content":"Figure 11 below is a screenshot of the final displayed pet list, where each pet, for example \u0027Garfield\u0027,"},{"lineNumber":543,"author":{"gitID":"purplepers0n"},"content":"is contained in a `PetCard`, and the cards of all pets are presented in a list form by using `PetListPanel`."},{"lineNumber":544,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":545,"author":{"gitID":"purplepers0n"},"content":".Screenshot of a List of Pets"},{"lineNumber":546,"author":{"gitID":"purplepers0n"},"content":"image::list_pet.png[width\u003d\"350\"]"},{"lineNumber":547,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":548,"author":{"gitID":"purplepers0n"},"content":"Aside from toggling the lists by clicking on the tabs, the `list` command is implemented to take in a parameter"},{"lineNumber":549,"author":{"gitID":"purplepers0n"},"content":"of either \u0027client\u0027, \u0027pet\u0027 or \u0027vettech\u0027 so that the list view updates appropriately when the `list` command is used."},{"lineNumber":550,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":551,"author":{"gitID":"purplepers0n"},"content":"To implement this, depending on the parameter, the `ListCommand` creates and adds `ChangeListTabEvent`"},{"lineNumber":552,"author":{"gitID":"purplepers0n"},"content":"to `EventCenter` like so:"},{"lineNumber":553,"author":{"gitID":"purplepers0n"},"content":"[source, java]"},{"lineNumber":554,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":555,"author":{"gitID":"purplepers0n"},"content":"public class ListCommand extends Command {"},{"lineNumber":556,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":557,"author":{"gitID":"purplepers0n"},"content":"        public CommandResult execute() throws CommandException {"},{"lineNumber":558,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":559,"author":{"gitID":"purplepers0n"},"content":"            switch (targetType) {"},{"lineNumber":560,"author":{"gitID":"purplepers0n"},"content":"            case \"pet\":"},{"lineNumber":561,"author":{"gitID":"purplepers0n"},"content":"                model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":562,"author":{"gitID":"purplepers0n"},"content":"                EventsCenter.getInstance().post(new ChangeListTabEvent(1));"},{"lineNumber":563,"author":{"gitID":"purplepers0n"},"content":"                break;"},{"lineNumber":564,"author":{"gitID":"purplepers0n"},"content":"                // ...other cases..."},{"lineNumber":565,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":566,"author":{"gitID":"purplepers0n"},"content":"            // ...return..."},{"lineNumber":567,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":568,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":569,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":570,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":571,"author":{"gitID":"purplepers0n"},"content":"The `MainWindow` then handles the `ChangeListTabEvent` by changing to the corresponding list on the UI display,"},{"lineNumber":572,"author":{"gitID":"purplepers0n"},"content":"and updates `logic` with the index of the current list so that other commands like `edit` and `delete`"},{"lineNumber":573,"author":{"gitID":"purplepers0n"},"content":"can perform the command on the correct list, like so:"},{"lineNumber":574,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":575,"author":{"gitID":"purplepers0n"},"content":"[source, java]"},{"lineNumber":576,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":577,"author":{"gitID":"purplepers0n"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":578,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":579,"author":{"gitID":"purplepers0n"},"content":"    private void handleChangeListTabEvent(ChangeListTabEvent event) {"},{"lineNumber":580,"author":{"gitID":"purplepers0n"},"content":"        changeTo(event.targetList);"},{"lineNumber":581,"author":{"gitID":"purplepers0n"},"content":"        logic.setCurrentList(event.targetList);"},{"lineNumber":582,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":583,"author":{"gitID":"purplepers0n"},"content":"    private void changeTo(int list) {"},{"lineNumber":584,"author":{"gitID":"purplepers0n"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":585,"author":{"gitID":"purplepers0n"},"content":"            listPanel.getSelectionModel().select(list);"},{"lineNumber":586,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":587,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":588,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":589,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":590,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":591,"author":{"gitID":"purplepers0n"},"content":"With this implementation, whether changing list by mouse-click or by command,"},{"lineNumber":592,"author":{"gitID":"purplepers0n"},"content":"the application always contains the index of the current list being viewed,"},{"lineNumber":593,"author":{"gitID":"purplepers0n"},"content":"so that the correct list will be displayed, and so that all other commands will"},{"lineNumber":594,"author":{"gitID":"purplepers0n"},"content":"be executed on the correct list."},{"lineNumber":595,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":601,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":602,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":607,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":608,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":609,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":622,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":627,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":640,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":641,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":642,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":645,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":648,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":655,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":660,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":667,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":680,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":681,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":682,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":683,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":684,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":685,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":686,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":687,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":688,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":692,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":712,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":719,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":720,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":721,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":726,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":727,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":730,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":740,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":745,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":750,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":753,"author":{"gitID":"-"},"content":"+"},{"lineNumber":754,"author":{"gitID":"-"},"content":"****"},{"lineNumber":755,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":756,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":757,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":758,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":761,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":762,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":763,"author":{"gitID":"-"},"content":"****"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":774,"author":{"gitID":"-"},"content":"+"},{"lineNumber":775,"author":{"gitID":"-"},"content":"****"},{"lineNumber":776,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":777,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":779,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":780,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":781,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":782,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":783,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":784,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":785,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":786,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":787,"author":{"gitID":"-"},"content":"****"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":795,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":798,"author":{"gitID":"-"},"content":"+"},{"lineNumber":799,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":800,"author":{"gitID":"-"},"content":"+"},{"lineNumber":801,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"+"},{"lineNumber":803,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":804,"author":{"gitID":"-"},"content":"+"},{"lineNumber":805,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":806,"author":{"gitID":"-"},"content":"+"},{"lineNumber":807,"author":{"gitID":"-"},"content":"****"},{"lineNumber":808,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":809,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":810,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":811,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":812,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":813,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":814,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":815,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":816,"author":{"gitID":"-"},"content":"****"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":819,"author":{"gitID":"-"},"content":"+"},{"lineNumber":820,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":821,"author":{"gitID":"-"},"content":"+"},{"lineNumber":822,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":823,"author":{"gitID":"-"},"content":"+"},{"lineNumber":824,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":825,"author":{"gitID":"-"},"content":"+"},{"lineNumber":826,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"+"},{"lineNumber":828,"author":{"gitID":"-"},"content":"****"},{"lineNumber":829,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":830,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":831,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":832,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":833,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":834,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":835,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":836,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":837,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":838,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":839,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":840,"author":{"gitID":"-"},"content":"****"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":843,"author":{"gitID":"-"},"content":"+"},{"lineNumber":844,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":845,"author":{"gitID":"-"},"content":"+"},{"lineNumber":846,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":847,"author":{"gitID":"-"},"content":"+"},{"lineNumber":848,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":849,"author":{"gitID":"-"},"content":"+"},{"lineNumber":850,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":851,"author":{"gitID":"-"},"content":"+"},{"lineNumber":852,"author":{"gitID":"-"},"content":"****"},{"lineNumber":853,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":854,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":855,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":856,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":857,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":858,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":859,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":860,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":861,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":862,"author":{"gitID":"-"},"content":"****"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":870,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":873,"author":{"gitID":"-"},"content":"+"},{"lineNumber":874,"author":{"gitID":"-"},"content":"****"},{"lineNumber":875,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":876,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":877,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":878,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":879,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":880,"author":{"gitID":"-"},"content":"****"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":883,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":890,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":891,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":896,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":897,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":898,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":903,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":908,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":913,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":916,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":921,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":922,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":927,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":928,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":929,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":932,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":937,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":944,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":949,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":956,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":961,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":962,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":965,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":976,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":981,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":984,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":995,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"jonathanwj"},"content":"* Occupation as a vet"},{"lineNumber":1015,"author":{"gitID":"jonathanwj"},"content":"* Has a need to manage a significant number of clients, pets and appointments"},{"lineNumber":1016,"author":{"gitID":"jonathanwj"},"content":"* Prefer desktop apps over other types"},{"lineNumber":1017,"author":{"gitID":"jonathanwj"},"content":"* Can type fast"},{"lineNumber":1018,"author":{"gitID":"jonathanwj"},"content":"* Prefers typing over mouse input"},{"lineNumber":1019,"author":{"gitID":"jonathanwj"},"content":"* Is reasonably comfortable using CLI apps"},{"lineNumber":1020,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":1021,"author":{"gitID":"purplepers0n"},"content":"*Value proposition*:"},{"lineNumber":1022,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1023,"author":{"gitID":"purplepers0n"},"content":"Allow vets to easily manage their clients and schedule appointments"},{"lineNumber":1024,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1025,"author":{"gitID":"purplepers0n"},"content":"*Feature Contributions*:"},{"lineNumber":1026,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1027,"author":{"gitID":"purplepers0n"},"content":"*Jonathan Weng*"},{"lineNumber":1028,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1029,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1030,"author":{"gitID":"purplepers0n"},"content":"* *Major Enhancement*: Support auto-complete for all commands"},{"lineNumber":1031,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1032,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1033,"author":{"gitID":"purplepers0n"},"content":"** When the vet presses the \u0027Tab\u0027 button on the keyboard once while in the command box, the application"},{"lineNumber":1034,"author":{"gitID":"purplepers0n"},"content":"will auto-complete the text. Auto-complete support not only works on command words, but also when"},{"lineNumber":1035,"author":{"gitID":"purplepers0n"},"content":"searching for the names of existing clients, pets and vet technicians in the application. This will allow the vet"},{"lineNumber":1036,"author":{"gitID":"purplepers0n"},"content":"to partially type a command and quickly complete it to improve typing efficiency."},{"lineNumber":1037,"author":{"gitID":"purplepers0n"},"content":"** When the vet presses the \u0027Tab\u0027 button on the keyboard twice in quick succession while in the command box,"},{"lineNumber":1038,"author":{"gitID":"purplepers0n"},"content":"the application will list down all possible text to be auto-completed to."},{"lineNumber":1039,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1040,"author":{"gitID":"purplepers0n"},"content":"* *Minor Enhancement*: Support for adding clients and vet technicians to the application"},{"lineNumber":1041,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1042,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1043,"author":{"gitID":"purplepers0n"},"content":"** The `add` command now takes in a ROLE parameter (either \u0027Client\u0027 or \u0027VetTechnician\u0027)"},{"lineNumber":1044,"author":{"gitID":"purplepers0n"},"content":"so that the vet can add the new person to the correct list."},{"lineNumber":1045,"author":{"gitID":"purplepers0n"},"content":"** The `delete` and `edit` command will also allow the vet to remove and edit clients and vet technicians."},{"lineNumber":1046,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1047,"author":{"gitID":"purplepers0n"},"content":"*Md Azhar*"},{"lineNumber":1048,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1049,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1050,"author":{"gitID":"purplepers0n"},"content":"* *Major Enhancement*: Support all pet related commands"},{"lineNumber":1051,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1052,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1053,"author":{"gitID":"purplepers0n"},"content":"** The `addp`, `deletep` and `editp` commands will support the updating of the"},{"lineNumber":1054,"author":{"gitID":"purplepers0n"},"content":"pet list whenever the vet requires to add a pet to the list, delete a pet from the list"},{"lineNumber":1055,"author":{"gitID":"purplepers0n"},"content":"or edit a pet that currently exists in the list."},{"lineNumber":1056,"author":{"gitID":"purplepers0n"},"content":"** The `findp` command will allow the vet to efficiently search for a pet of a specific name"},{"lineNumber":1057,"author":{"gitID":"purplepers0n"},"content":"in the list."},{"lineNumber":1058,"author":{"gitID":"purplepers0n"},"content":"** The `addapptto` command will add an appointment to an existing pet in the application."},{"lineNumber":1059,"author":{"gitID":"purplepers0n"},"content":"This will allow the vet to easily schedule an appointment for the relevant pet."},{"lineNumber":1060,"author":{"gitID":"purplepers0n"},"content":"The vet will also state the date, time, vet technician assigned to the appointment as well"},{"lineNumber":1061,"author":{"gitID":"purplepers0n"},"content":"as any comments he/she wishes to add. `rmapptfrom` will remove the appointment from a pet."},{"lineNumber":1062,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"* *Minor Enhancement*: Implement aliases for command words +"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1066,"author":{"gitID":"purplepers0n"},"content":"** The aliases of command words will allow the vet to reduce the amount of typing"},{"lineNumber":1067,"author":{"gitID":"purplepers0n"},"content":"required for command words, to increase efficiency in using the application."},{"lineNumber":1068,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1069,"author":{"gitID":"purplepers0n"},"content":"*Choo Wen Xin*"},{"lineNumber":1070,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1071,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1072,"author":{"gitID":"purplepers0n"},"content":"* *Major Enhancement*: Support all new list commands and display on UI"},{"lineNumber":1073,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1074,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1075,"author":{"gitID":"purplepers0n"},"content":"** The `list` command now takes in a parameter (either \u0027client\u0027, \u0027pet\u0027 or \u0027vettech\u0027)"},{"lineNumber":1076,"author":{"gitID":"purplepers0n"},"content":"which will toggle the tabs in the sidebar of the application and display the appropriate list"},{"lineNumber":1077,"author":{"gitID":"purplepers0n"},"content":"for easy viewing and keeping track."},{"lineNumber":1078,"author":{"gitID":"purplepers0n"},"content":"** The `list appt` command will display all appointments in the main section of the application"},{"lineNumber":1079,"author":{"gitID":"purplepers0n"},"content":"listed in date order, and in time order within each (date) section. This is for the vet to"},{"lineNumber":1080,"author":{"gitID":"purplepers0n"},"content":"easily keep track of his/her appointments in chronological order."},{"lineNumber":1081,"author":{"gitID":"purplepers0n"},"content":"** The `listall` command will take in a client index parameter and display all the"},{"lineNumber":1082,"author":{"gitID":"purplepers0n"},"content":"pets and appointments the particular client has in the main section of the application. This is to easily see the relevant"},{"lineNumber":1083,"author":{"gitID":"purplepers0n"},"content":"details when dealing with a client."},{"lineNumber":1084,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1085,"author":{"gitID":"purplepers0n"},"content":"* *Minor Enhancement*: Reorganization of UI display"},{"lineNumber":1086,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1087,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1088,"author":{"gitID":"purplepers0n"},"content":"** The display will now have a header bar, displaying the application logo and name,"},{"lineNumber":1089,"author":{"gitID":"purplepers0n"},"content":"and the command and result bar will be moved into the top of the right splitpane instead."},{"lineNumber":1090,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1091,"author":{"gitID":"purplepers0n"},"content":"*Zhong Zheng Xin*"},{"lineNumber":1092,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1093,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1094,"author":{"gitID":"purplepers0n"},"content":"* *Major Enhancement*: Support for all appointment related commands"},{"lineNumber":1095,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1096,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1097,"author":{"gitID":"purplepers0n"},"content":"** The `schedule` command allows the vet to schedule an appointment of a certain date and time."},{"lineNumber":1098,"author":{"gitID":"purplepers0n"},"content":"** The `editappt` command allows the vet to update the details of an appointment,"},{"lineNumber":1099,"author":{"gitID":"purplepers0n"},"content":"such as the assigned vet technician and the data and time. Client and Pet can be"},{"lineNumber":1100,"author":{"gitID":"purplepers0n"},"content":"changed as well if necessary. The affected clients, pets and vet technicians should"},{"lineNumber":1101,"author":{"gitID":"purplepers0n"},"content":"be updated accordingly as well."},{"lineNumber":1102,"author":{"gitID":"purplepers0n"},"content":"** The `deleteappt` command allows the vet to delete an appointment he/she no longer wants."},{"lineNumber":1103,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1104,"author":{"gitID":"purplepers0n"},"content":"* *Minor Enhancement*: Add constraints to Appointment parameters"},{"lineNumber":1105,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1106,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1107,"author":{"gitID":"purplepers0n"},"content":"** The application will prompt the vet if he/she has scheduled an appointment that"},{"lineNumber":1108,"author":{"gitID":"purplepers0n"},"content":"clashes with or is too close to another appointment. Only appointments with reasonable"},{"lineNumber":1109,"author":{"gitID":"purplepers0n"},"content":"date and time can be scheduled to help the vet maintain appropriate appointment schedules."},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1119,"author":{"gitID":"-"},"content":"|`* * *` |new vet |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"|`* * *` |vet |add a client |add client\u0027s detail to the database"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"|`* * *` |vet |delete a client |remove entries that I no longer need"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"|`* * *` |vet |find a client by name |locate details of client without having to go through the entire list"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"|`*` |vet with many clients in the address book |sort clients by name |locate a client easily"},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"|`* * *` |vet |add a vet tech |keep track of the vet techs I work with"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"|`* *` |vet |list all vet techs |view all vet techs\u0027 details at a glance"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"|`* * *` |vet |add a pet to a client |make respective updates to client\u0027s pet database"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"|`* * *` |vet |remove a pet from the client |update the databases"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"|`* * *` |vet |list all pets |view information about the pets at a glance"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"|`* *` |vet |sort pets by species type |locate a pet easily"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"|`*` |vet |specify kind of pet |make more accurate diagnosis and treatment"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"|`* *` |vet |find pet by client name |view all pets owned by a client"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"|`*` |vet |specify the type of appointment |identify the appointment type"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"|`* * *` |vet |add vet techs to an appointment |identify the technician for the appointment"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"|`* * *` |vet |schedule an appointment for a client |add an appointment to my calendar"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"|`* * *` |vet |reschedule an appointment |accommodate to clients schedule"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"|`* * *` |vet |remove an appointment |make way for other appointments"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"|`* * *` |vet |list appointments |see all the appointments that I have"},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"|`*` |vet |schedule follow up appointment |keep track of pet\u0027s health"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"|`* * *` |vet |find appointment by date |locate a specific appointment"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"|`* * *` |vet |find appointments by client\u0027s name |view all of the appointments under particular client"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"|`*` |vet |view appointments on calendar that have specific queries or tags |view specific upcoming appointment"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"purplepers0n"},"content":"(For all use cases below, the *System* is `VetterAppointments` and the *Actor* is the `vet`, unless specified otherwise)"},{"lineNumber":1172,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1173,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1174,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1175,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add Vet Technician"},{"lineNumber":1176,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1177,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1178,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1179,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add Vet Technician"},{"lineNumber":1180,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments adds the Vet Technician to the system"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1187,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1188,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1189,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1190,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1191,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1192,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1193,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1194,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1195,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add client"},{"lineNumber":1196,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1197,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1198,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1199,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add client (owner)"},{"lineNumber":1200,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments adds client to the system"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1207,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1208,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1209,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1210,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1211,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1212,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1213,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1216,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Delete client"},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1219,"author":{"gitID":"-"},"content":""},{"lineNumber":1220,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list clients"},{"lineNumber":1221,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of clients"},{"lineNumber":1222,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to delete a specific client in the list"},{"lineNumber":1223,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments deletes the client"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1230,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1231,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1232,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1233,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1234,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1235,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1236,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1243,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1245,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message."},{"lineNumber":1246,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1247,"author":{"gitID":"purplepers0n"},"content":"Use case resumes at step 2."},{"lineNumber":1248,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1249,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1250,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add pet"},{"lineNumber":1251,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1252,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1253,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1254,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add pet"},{"lineNumber":1255,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments provides a list of clients to add the pet to"},{"lineNumber":1256,"author":{"gitID":"purplepers0n"},"content":"3.  Vet enters the index of the associated client"},{"lineNumber":1257,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments adds a pet associated with a client in the system"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1264,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1265,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1266,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1267,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1268,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1269,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1270,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1273,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1277,"author":{"gitID":"purplepers0n"},"content":"* 3a. The client index is invalid"},{"lineNumber":1278,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1279,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1280,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1285,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Delete pet"},{"lineNumber":1286,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1287,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1288,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1289,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list pets"},{"lineNumber":1290,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of pets"},{"lineNumber":1291,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to delete a specific pet in the list"},{"lineNumber":1292,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments deletes the pet"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1294,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1299,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1300,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1301,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1302,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1303,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1304,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1305,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1308,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1312,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1314,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message."},{"lineNumber":1315,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1316,"author":{"gitID":"purplepers0n"},"content":"Use case resumes at step 2."},{"lineNumber":1317,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1318,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1319,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add appointment"},{"lineNumber":1320,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1321,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1322,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1323,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add an appointment"},{"lineNumber":1324,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments provides a list of pets to add the appointment to"},{"lineNumber":1325,"author":{"gitID":"purplepers0n"},"content":"3.  Vet enters the index of the pet that the appointment is tied to"},{"lineNumber":1326,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments provides a list of Vet Technicians to add the appointment to"},{"lineNumber":1327,"author":{"gitID":"purplepers0n"},"content":"5.  Vet enters the index of the Vet Technician that the appointment is assigned to, or leaves it blank if he/she wants to add it later"},{"lineNumber":1328,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1334,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1335,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1336,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1337,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1338,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1339,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1340,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1341,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1342,"author":{"gitID":"purplepers0n"},"content":"* 1b. The assigned timeslot already has an existing appointment"},{"lineNumber":1343,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1344,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1345,"author":{"gitID":"purplepers0n"},"content":"** 1b1. VetterAppointments asks the Vet if he/she wishes to override the existing appointment"},{"lineNumber":1346,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1347,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1348,"author":{"gitID":"purplepers0n"},"content":"*** 1b1a. Vet types \u0027yes\u0027"},{"lineNumber":1349,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1350,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1351,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1352,"author":{"gitID":"purplepers0n"},"content":"*** 1b1b. Vet types \u0027no\u0027"},{"lineNumber":1353,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1354,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1355,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1357,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1358,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1362,"author":{"gitID":"purplepers0n"},"content":"* 3a. The pet index is invalid"},{"lineNumber":1363,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1364,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1365,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message"},{"lineNumber":1366,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1367,"author":{"gitID":"purplepers0n"},"content":"Use case resumes at step 2."},{"lineNumber":1368,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1369,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1370,"author":{"gitID":"purplepers0n"},"content":"* 4a. The list is empty."},{"lineNumber":1371,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1372,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1373,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1374,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1375,"author":{"gitID":"purplepers0n"},"content":"* 5a. The Vet Technician index is invalid"},{"lineNumber":1376,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1377,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1378,"author":{"gitID":"purplepers0n"},"content":"** 5a1. VetterAppointments shows an error message"},{"lineNumber":1379,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1380,"author":{"gitID":"purplepers0n"},"content":"Use case resumes at step 4."},{"lineNumber":1381,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1382,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1383,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Assign Vet Technician to appointment"},{"lineNumber":1384,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1385,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1386,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1387,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to assign a Vet Technician to a specific appointment"},{"lineNumber":1388,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments provides a list of Vet Technicians to assign the appointment to"},{"lineNumber":1389,"author":{"gitID":"purplepers0n"},"content":"3.  Vet enters the index of the associated Vet Technician"},{"lineNumber":1390,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments assigns the Vet Technician to the appointment"},{"lineNumber":1391,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1392,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1393,"author":{"gitID":"-"},"content":""},{"lineNumber":1394,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1395,"author":{"gitID":"-"},"content":""},{"lineNumber":1396,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1397,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1398,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1399,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1400,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1401,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1402,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1403,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1405,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1406,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1407,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1410,"author":{"gitID":"purplepers0n"},"content":"* 3a. The Vet Technician index is invalid"},{"lineNumber":1411,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1412,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1413,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message"},{"lineNumber":1414,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1415,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1416,"author":{"gitID":"-"},"content":""},{"lineNumber":1417,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1418,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Reschedule appointment"},{"lineNumber":1419,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1420,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1421,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1422,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to reschedule a specific appointment"},{"lineNumber":1423,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments updates the date/time of the appointment"},{"lineNumber":1424,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1425,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1430,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1431,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1432,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1433,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1434,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1435,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1436,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1437,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1438,"author":{"gitID":"purplepers0n"},"content":"* 1b. The newly assigned timeslot already has an existing appointment"},{"lineNumber":1439,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1440,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1441,"author":{"gitID":"purplepers0n"},"content":"** 1b1. VetterAppointments asks the Vet if he/she wishes to override the existing appointment"},{"lineNumber":1442,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1443,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1444,"author":{"gitID":"purplepers0n"},"content":"*** 1b1a. Vet types \u0027yes\u0027"},{"lineNumber":1445,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1446,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1447,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1448,"author":{"gitID":"purplepers0n"},"content":"*** 1b1b. Vet types \u0027no\u0027"},{"lineNumber":1449,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1450,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1451,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1452,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1453,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Delete appointment"},{"lineNumber":1454,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1455,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1456,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1457,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list appointments"},{"lineNumber":1458,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of appointments"},{"lineNumber":1459,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to delete a specific appointment in the list"},{"lineNumber":1460,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments deletes the appointment"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1462,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1467,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1468,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1469,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1470,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1471,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1472,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1473,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1475,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1476,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1480,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1481,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1482,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message."},{"lineNumber":1483,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1484,"author":{"gitID":"purplepers0n"},"content":"Use case resumes at step 2."},{"lineNumber":1485,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1486,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1487,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Find appointment by date"},{"lineNumber":1488,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1489,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1490,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1491,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to find appointments for a specific date"},{"lineNumber":1492,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of appointments on that date"},{"lineNumber":1493,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1494,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1497,"author":{"gitID":"-"},"content":""},{"lineNumber":1498,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1499,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1500,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1501,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1502,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1503,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1504,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1505,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1506,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1507,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Find appointment by client"},{"lineNumber":1508,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1509,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1510,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1511,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list clients"},{"lineNumber":1512,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of clients"},{"lineNumber":1513,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to find appointments for a specific client index"},{"lineNumber":1514,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments shows a list of appointments for that client"},{"lineNumber":1515,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1516,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1517,"author":{"gitID":"-"},"content":""},{"lineNumber":1518,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1519,"author":{"gitID":"-"},"content":""},{"lineNumber":1520,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1521,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1522,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1523,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1524,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1525,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1526,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1527,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1528,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1529,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1530,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1531,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1532,"author":{"gitID":"-"},"content":""},{"lineNumber":1533,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1534,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1535,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1536,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message."},{"lineNumber":1537,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1538,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1539,"author":{"gitID":"-"},"content":""},{"lineNumber":1540,"author":{"gitID":"-"},"content":""},{"lineNumber":1541,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1542,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1543,"author":{"gitID":"-"},"content":""},{"lineNumber":1544,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1545,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1546,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1547,"author":{"gitID":"jonathanwj"},"content":".  System should respond under a second."},{"lineNumber":1548,"author":{"gitID":"jonathanwj"},"content":".  Should be resizable for any screen resolution without any user-application interaction problems."},{"lineNumber":1549,"author":{"gitID":"jonathanwj"},"content":".  Should be able to be used by a novice keyboard user."},{"lineNumber":1550,"author":{"gitID":"jonathanwj"},"content":".  Should be able to be used by a person with hearing loss."},{"lineNumber":1551,"author":{"gitID":"jonathanwj"},"content":".  UI colors should be able to be identifiable by a color blind user."},{"lineNumber":1552,"author":{"gitID":"jonathanwj"},"content":".  Data should be backwards compatible with older application versions."},{"lineNumber":1553,"author":{"gitID":"jonathanwj"},"content":".  Data should be encrypted for security."},{"lineNumber":1554,"author":{"gitID":"jonathanwj"},"content":".  Should be able to be installed and uninstalled automatically with a single user interaction."},{"lineNumber":1555,"author":{"gitID":"jonathanwj"},"content":".  Application should run indefinitely until closed."},{"lineNumber":1556,"author":{"gitID":"jonathanwj"},"content":".  Should have hidden text for certain sensitive data (e.g. NRIC, passwords)."},{"lineNumber":1557,"author":{"gitID":"jonathanwj"},"content":".  Data should be stored online."},{"lineNumber":1558,"author":{"gitID":"jonathanwj"},"content":".  Should recover immediately from a system failure without any data loss or corruption."},{"lineNumber":1559,"author":{"gitID":"jonathanwj"},"content":".  Should be able to detect and handle corruption in software data and stored data."},{"lineNumber":1560,"author":{"gitID":"jonathanwj"},"content":".  Should have a software size of less than 500MB."},{"lineNumber":1561,"author":{"gitID":"-"},"content":""},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1564,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1565,"author":{"gitID":"-"},"content":""},{"lineNumber":1566,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1567,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1568,"author":{"gitID":"-"},"content":""},{"lineNumber":1569,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1570,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1571,"author":{"gitID":"-"},"content":""},{"lineNumber":1572,"author":{"gitID":"-"},"content":"[[Java]] Java::"},{"lineNumber":1573,"author":{"gitID":"-"},"content":"Java is a general purpose, high-level programming language developed by Sun Microsystems"},{"lineNumber":1574,"author":{"gitID":"-"},"content":""},{"lineNumber":1575,"author":{"gitID":"-"},"content":"[[JDK]] JDK::"},{"lineNumber":1576,"author":{"gitID":"-"},"content":"JDK stands for Java Development Kit. A software development environment for writing applets and applications in the Java programming language"},{"lineNumber":1577,"author":{"gitID":"-"},"content":""},{"lineNumber":1578,"author":{"gitID":"-"},"content":"[[IDE]] IDE::"},{"lineNumber":1579,"author":{"gitID":"-"},"content":"Integrated Development Environments that supports all development-related work within the same tool"},{"lineNumber":1580,"author":{"gitID":"-"},"content":""},{"lineNumber":1581,"author":{"gitID":"-"},"content":"[[IntelliJ]] IntelliJ::"},{"lineNumber":1582,"author":{"gitID":"-"},"content":"An IDE developed by JetBrains"},{"lineNumber":1583,"author":{"gitID":"-"},"content":""},{"lineNumber":1584,"author":{"gitID":"-"},"content":"[[OSS]] OSS::"},{"lineNumber":1585,"author":{"gitID":"-"},"content":"Open-source software (OSS) is computer software distributed with its source code available for modification"},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":"[[Repo]] Repo::"},{"lineNumber":1588,"author":{"gitID":"-"},"content":"Short form of repository which is a directory or storage for projects"},{"lineNumber":1589,"author":{"gitID":"-"},"content":""},{"lineNumber":1590,"author":{"gitID":"-"},"content":"[[Fork]] Fork::"},{"lineNumber":1591,"author":{"gitID":"-"},"content":"A fork is a copy of a repository. Changes in a forked repository will not affect the original project"},{"lineNumber":1592,"author":{"gitID":"-"},"content":""},{"lineNumber":1593,"author":{"gitID":"-"},"content":"[[CI]] CI::"},{"lineNumber":1594,"author":{"gitID":"-"},"content":"Continuous Integration (CI) is the practice of merging all developer working copies to a shared mainline"},{"lineNumber":1595,"author":{"gitID":"-"},"content":""},{"lineNumber":1596,"author":{"gitID":"-"},"content":"[[Travis]] Travis::"},{"lineNumber":1597,"author":{"gitID":"-"},"content":"Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"[[AppVeyor]] AppVeyor::"},{"lineNumber":1600,"author":{"gitID":"-"},"content":"AppVeyor is a continuous integration service"},{"lineNumber":1601,"author":{"gitID":"-"},"content":""},{"lineNumber":1602,"author":{"gitID":"-"},"content":"[[JUnit]] JUnit::"},{"lineNumber":1603,"author":{"gitID":"-"},"content":"JUnit is a unit testing framework for the Java programming language"},{"lineNumber":1604,"author":{"gitID":"-"},"content":""},{"lineNumber":1605,"author":{"gitID":"-"},"content":"[[Gradle]] Gradle::"},{"lineNumber":1606,"author":{"gitID":"-"},"content":"Gradle is an advanced general purpose build management system based on Groovy and Kotlin. Gradle supports the automatic download and configuration of dependencies or other libraries"},{"lineNumber":1607,"author":{"gitID":"-"},"content":""},{"lineNumber":1608,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1609,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1610,"author":{"gitID":"-"},"content":""},{"lineNumber":1611,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1612,"author":{"gitID":"-"},"content":""},{"lineNumber":1613,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1614,"author":{"gitID":"-"},"content":""},{"lineNumber":1615,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1616,"author":{"gitID":"-"},"content":""},{"lineNumber":1617,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1618,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1619,"author":{"gitID":"-"},"content":""},{"lineNumber":1620,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1621,"author":{"gitID":"-"},"content":""},{"lineNumber":1622,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1623,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1624,"author":{"gitID":"-"},"content":""},{"lineNumber":1625,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1626,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1627,"author":{"gitID":"-"},"content":""},{"lineNumber":1628,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1629,"author":{"gitID":"-"},"content":""},{"lineNumber":1630,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1631,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1632,"author":{"gitID":"-"},"content":""},{"lineNumber":1633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1634,"author":{"gitID":"-"},"content":""},{"lineNumber":1635,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1636,"author":{"gitID":"-"},"content":""},{"lineNumber":1637,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1638,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1639,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1640,"author":{"gitID":"-"},"content":""},{"lineNumber":1641,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1642,"author":{"gitID":"-"},"content":""},{"lineNumber":1643,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1644,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1645,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1646,"author":{"gitID":"-"},"content":""},{"lineNumber":1647,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1648,"author":{"gitID":"-"},"content":""},{"lineNumber":1649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1650,"author":{"gitID":"-"},"content":""},{"lineNumber":1651,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1654,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1655,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1656,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1657,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1658,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1659,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1660,"author":{"gitID":"-"},"content":""},{"lineNumber":1661,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1662,"author":{"gitID":"-"},"content":""},{"lineNumber":1663,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1664,"author":{"gitID":"-"},"content":""},{"lineNumber":1665,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1666,"author":{"gitID":"-"},"content":""},{"lineNumber":1667,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1668,"author":{"gitID":"-"},"content":""},{"lineNumber":1669,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"jonathanwj":37,"purplepers0n":422,"-":1210}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    private static final String VALID_ROLE \u003d \"CLIENT\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"                null, VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"                VALID_NAME, VALID_ROLE, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"                VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"                builder.withPerson(new PersonBuilder().buildWithRoleClient()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":142}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    private static final String LIST_EXPECTED_MESSAGE_SUCCESS \u003d \"Listed all clients\";"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD + \" client\";"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        assertCommandSuccess(listCommand, LIST_EXPECTED_MESSAGE_SUCCESS, model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        logic.getFilteredClientList().remove(0);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredVetTechnicianList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        logic.getFilteredVetTechnicianList().remove(0);"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":133,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":10,"purplepers0n":5,"-":124}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_CLIENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + ROLE_DESC_CLIENT + \"  \""},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"                + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_HUSBAND).buildWithRoleClient();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().buildWithRoleClient();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredClientList().size());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":112,"author":{"gitID":"purplepers0n"},"content":"        personToEdit \u003d getModel().getFilteredClientList().get(index.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).buildWithRoleClient();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + ROLE_DESC_CLIENT  + NAME_DESC_BOB"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":219,"author":{"gitID":"purplepers0n"},"content":"                    expectedModel.getFilteredClientList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":220,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":222,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":225,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":258,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":260,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":14,"purplepers0n":9,"-":268}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentUtil;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        Person person \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parseCommand_schedule() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ScheduleCommand command \u003d (ScheduleCommand) parser.parseCommand("},{"lineNumber":60,"author":{"gitID":"-"},"content":"                                    AppointmentUtil.getScheduleCommand(appointment));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(new ScheduleCommand(appointment), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":78,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        Person person \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":109,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":140,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" client\") instanceof ListCommand);"},{"lineNumber":141,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(parser.parseCommand(\"list client\") instanceof ListCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" client\") instanceof ListCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"ls client\") instanceof ListCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":153,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":160,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"rd 1\") instanceof RedoCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"ud 3\") instanceof UndoCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"purplepers0n":2,"-":195}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_CLIENT;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_VETTECHNICIAN;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_CLIENT;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_DESC_CLIENT"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        // multiple roles - last role accepted"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_VETTECHNICIAN + ROLE_DESC_CLIENT"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).buildWithRoleClient();"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().buildWithRoleClient();"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"                + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        // missing role prefix"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_ROLE_CLIENT"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_CLIENT"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_CLIENT"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"                        + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_CLIENT"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_CLIENT"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_CLIENT"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"                        + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"        // invalid role"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, INVALID_ROLE_DESC + NAME_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":152,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + INVALID_NAME_DESC"},{"lineNumber":153,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":158,"author":{"gitID":"jonathanwj"},"content":"                + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + INVALID_NAME_DESC"},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"                + INVALID_ADDRESS_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROLE_DESC_CLIENT"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_HUSBAND"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":67,"-":120}},{"path":"src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class ScheduleCommandTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        new ScheduleCommand(null);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_appointmentAcceptedByModel_scheduleSuccessful() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelStubAcceptingAppointmentScheduled modelStub \u003d new ModelStubAcceptingAppointmentScheduled();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getScheduleCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(String.format(ScheduleCommand.MESSAGE_SUCCESS, validAppointment), commandResult.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentScheduled);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_duplicateAppointment_throwsCommandException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAppointmentException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expectMessage(ScheduleCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        getScheduleCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Appointment appointment1 \u003d new AppointmentBuilder().withDate(\"2018-12-12\").build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder().withTime(\"00:00\").build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Appointment appointment3 \u003d new AppointmentBuilder().withDuration(\"30\").build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment1 \u003d new ScheduleCommand(appointment1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment2 \u003d new ScheduleCommand(appointment2);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment3 \u003d new ScheduleCommand(appointment3);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment1.equals(scheduleAppointment1));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment2.equals(scheduleAppointment2));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment3.equals(scheduleAppointment3));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment1Copy \u003d new ScheduleCommand(appointment1);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment1.equals(scheduleAppointment1Copy));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(scheduleAppointment1.equals(2));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(scheduleAppointment1.equals(null));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // different appointment -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertFalse(scheduleAppointment1.equals(scheduleAppointment2));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Generates a new ScheduleCommand with the details of the given appointment."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private ScheduleCommand getScheduleCommandForAppointment(Appointment appointment, Model model) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        ScheduleCommand command \u003d new ScheduleCommand(appointment);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"            return null;"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":183,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClientOwnPet\u003e getClientPetAssociationList() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"        public void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"        public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return model.getFilteredAppointmentList();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public void deletePet(Pet pet) throws PetNotFoundException {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":223,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"purplepers0n"},"content":"        public void setCurrentList(int currentList) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"purplepers0n"},"content":"        public int getCurrentList() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":231,"author":{"gitID":"purplepers0n"},"content":"            return -1;"},{"lineNumber":232,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicateAppointmentException when trying to schedule an appointment."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicateAppointmentException extends ModelStub {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the appointment being scheduled."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingAppointmentScheduled extends ModelStub {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        final ArrayList\u003cAppointment\u003e appointmentScheduled \u003d new ArrayList\u003c\u003e();"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            requireNonNull(appointment);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            appointmentScheduled.add(appointment);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":22,"purplepers0n":9,"-":237}},{"path":"src/test/java/seedu/address/logic/parser/AddPetToClientCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddPetToClientCommand;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetToClientCommand.MESSAGE_USAGE);"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"    private AddPetToClientCommandParser parser \u003d new AddPetToClientCommandParser();"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"        //no index specified"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"        //only one index specified"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" c/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        // no field specified"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" 1 2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        // negative index"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/-1 c/-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/-1 c/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1 c/-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        // zero index"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/0 c/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1 c/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/0 c/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        // invalid arguments being parsed"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1 wefsef c/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        Index petIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        Index clientIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        String userInput \u003d \" p/\" + petIndex.getOneBased() + \" c/\" + clientIndex.getOneBased();"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand expectedCommand \u003d new AddPetToClientCommand(petIndex, clientIndex);"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        Index petIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        Index clientIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        String userInput \u003d \" p/\" + petIndex.getZeroBased() + \" c/\" + clientIndex.getZeroBased()"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"                + \" c/\" + clientIndex.getOneBased() + \" p/\" + petIndex.getOneBased();"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand expectedCommand \u003d new AddPetToClientCommand(petIndex, clientIndex);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":52,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"    private static final String LIST_EXPECTED_MESSAGE_SUCCESS \u003d \"Listed all clients\";"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        listCommand \u003d new ListCommand(\"client\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        assertCommandSuccess(listCommand, model, LIST_EXPECTED_MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        //showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        assertCommandSuccess(listCommand, model, LIST_EXPECTED_MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":8,"-":39}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_CLIENT;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_TECHNICIAN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        Person editedPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        Person lastPerson \u003d model.getFilteredClientList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_HUSBAND).buildWithRoleClient();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"        Person clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"        Person editedClient \u003d new PersonBuilder(clientInFilteredList).withName(VALID_NAME_BOB).buildWithRoleClient();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"purplepers0n"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updatePerson(model.getFilteredClientList().get(0), editedClient);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"        // edit client to vet technician"},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"        clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"purplepers0n"},"content":"        Person editedPerson \u003d new PersonBuilder(clientInFilteredList)"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"                .withName(VALID_NAME_BOB).buildWithRoleVetTechnician();"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"        editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withRole(VALID_ROLE_TECHNICIAN).build());"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"        expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updatePerson(model.getFilteredClientList().get(0), editedPerson);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"        // edit vet technician to client"},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":"        model.setCurrentList(2);"},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":"        Person technicianInFilteredList \u003d model.getFilteredVetTechnicianList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":124,"author":{"gitID":"purplepers0n"},"content":"        editedPerson \u003d new PersonBuilder(technicianInFilteredList)"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"                .withName(VALID_NAME_BOB).buildWithRoleClient();"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":"        editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withRole(VALID_ROLE_CLIENT).build());"},{"lineNumber":128,"author":{"gitID":"purplepers0n"},"content":"        editCommand.setCurrentList();"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"        expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":133,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updatePerson(model.getFilteredVetTechnicianList().get(0), editedPerson);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"        Person editedPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":237,"author":{"gitID":"jonathanwj"},"content":"        Person editedPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":24,"purplepers0n":14,"-":256}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        Person personToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"purplepers0n"},"content":"        Person personToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":146,"author":{"gitID":"purplepers0n"},"content":"        assertNotEquals(personToDelete, model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(p -\u003efalse);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":194,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(model.getFilteredClientList().isEmpty());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":5,"-":191}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    public void execute_newPersonOrClient_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        Person validPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    public void execute_newVetTechnician_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        Person validVetTechnician \u003d new PersonBuilder().buildWithRoleVetTechnician();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPerson(validVetTechnician);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(prepareCommand(validVetTechnician, model), model,"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validVetTechnician), expectedModel);"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicatePersonOrClient_throwsCommandException() {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(1);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicateVetTechnician_throwsCommandException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":16,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"import java.util.function.Predicate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    public static final String VALID_ROLE_CLIENT \u003d \"CLIENT\";"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public static final String VALID_ROLE_TECHNICIAN \u003d \"TECHNICIAN\";"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_DESC_CLIENT \u003d \" \" + PREFIX_PERSON_ROLE + VALID_ROLE_CLIENT;"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_DESC_VETTECHNICIAN \u003d \" \" + PREFIX_PERSON_ROLE + VALID_ROLE_TECHNICIAN;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_PERSON_ROLE + \"baker\"; // \u0027baker\u0027 not allowed in names"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":110,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":128,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":137,"author":{"gitID":"purplepers0n"},"content":"        Person clientToBeShownAtIndex \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(new Predicate\u003cClient\u003e() {"},{"lineNumber":139,"author":{"gitID":"purplepers0n"},"content":"            @Override"},{"lineNumber":140,"author":{"gitID":"purplepers0n"},"content":"            public boolean test(Client client) {"},{"lineNumber":141,"author":{"gitID":"purplepers0n"},"content":"                return clientToBeShownAtIndex.equals(client);"},{"lineNumber":142,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(1, model.getFilteredClientList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the pet at the given {@code targetIndex} in the"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"jonathanwj"},"content":"    public static void showPetAtIndex(Model model, Index targetIndex) {"},{"lineNumber":153,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPetList().size());"},{"lineNumber":154,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":155,"author":{"gitID":"jonathanwj"},"content":"        Pet petToShow \u003d model.getFilteredPetList().get(targetIndex.getZeroBased());"},{"lineNumber":156,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(pet -\u003e petToShow.equals(pet));"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":158,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(1, model.getFilteredPetList().size());"},{"lineNumber":159,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":161,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the pet at the given {@code targetIndex} in the"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"    public static void showClientAtIndex(Model model, Index targetIndex) {"},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"        Client clientToShow \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"},{"lineNumber":169,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredClientList(pet -\u003e clientToShow.equals(pet));"},{"lineNumber":170,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(1, model.getFilteredClientList().size());"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":31,"purplepers0n":11,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/AddPetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddPetCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor_nullPet_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        new AddPetCommand(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void execute_petAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPetAdded modelStub \u003d new ModelStubAcceptingPetAdded();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Pet validPet \u003d new PetBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddPetCommandForPet(validPet, modelStub).execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddPetCommand.MESSAGE_SUCCESS, validPet), commandResult.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPet), modelStub.petsAdded);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_duplicatePet_throwsCommandException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePetException();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Pet validPet \u003d new PetBuilder().build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddPetCommand.MESSAGE_DUPLICATE_PET);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        getAddPetCommandForPet(validPet, modelStub).execute();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Pet garfield \u003d new PetBuilder().withPetName(\"Garfield\").build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Pet ginger \u003d new PetBuilder().withPetName(\"Ginger\").build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddPetCommand addGarfieldCommand \u003d new AddPetCommand(garfield);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddPetCommand addGinger \u003d new AddPetCommand(ginger);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addGarfieldCommand.equals(addGarfieldCommand));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same values -\u003e return true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddPetCommand addGarfieldCommandCpy \u003d new AddPetCommand(garfield);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(addGarfieldCommand.equals(addGarfieldCommandCpy));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different types -\u003e return false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addGarfieldCommand.equals(1));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(addGarfieldCommand.equals(null));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // different pets -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(addGarfieldCommand.equals(addGinger));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Generates a new AddPetCommand with the details of the given pet"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private AddPetCommand getAddPetCommandForPet(Pet pet, Model model) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        AddPetCommand command \u003d new AddPetCommand(pet);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Default model stub that has all the methods failing"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":153,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":"            return null;"},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":169,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":174,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClientOwnPet\u003e getClientPetAssociationList() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"        public void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"        public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void deletePet(Pet pet) throws PetNotFoundException {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":215,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"purplepers0n"},"content":"        public void setCurrentList(int currentList) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"purplepers0n"},"content":"        public int getCurrentList() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":223,"author":{"gitID":"purplepers0n"},"content":"            return -1;"},{"lineNumber":224,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Model stub that always throws DuplicatePetException"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePetException extends ModelStub {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            throw new DuplicatePetException();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the pet being added."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPetAdded extends ModelStub {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPet\u003e petsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            requireNonNull(pet);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            petsAdded.add(pet);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":28,"purplepers0n":12,"-":220}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(expectedList, model.getFilteredClientList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":97}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    public void execute_personOrClientAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        Person validPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    public void execute_vetTechnicianAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        Person validTechnician \u003d new PersonBuilder().buildWithRoleVetTechnician();"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validTechnician, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTechnician), commandResult.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(Arrays.asList(validTechnician), modelStub.personsAdded);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicatePersonOrClient_throwsCommandException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        Person validPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicateVetTechnician_throwsCommandException() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        Person validVetTechnician \u003d new PersonBuilder().buildWithRoleVetTechnician();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        getAddCommandForPerson(validVetTechnician, modelStub).execute();"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").buildWithRoleClient();"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").buildWithRoleClient();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"            return null;"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":197,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClientOwnPet\u003e getClientPetAssociationList() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"        public void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"        public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public void deletePet(Pet pet) throws PetNotFoundException {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":238,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":239,"author":{"gitID":"purplepers0n"},"content":"        public void setCurrentList(int currentList) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":244,"author":{"gitID":"purplepers0n"},"content":"        public int getCurrentList() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":246,"author":{"gitID":"purplepers0n"},"content":"            return -1;"},{"lineNumber":247,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":282,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":283,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) { }"},{"lineNumber":284,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":285,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":286,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) { }"},{"lineNumber":287,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":288,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":289,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) { }"},{"lineNumber":290,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":291,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":292,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) { }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":48,"purplepers0n":21,"-":226}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    private static final String INVALID_ROLE \u003d \"badRole\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_ROLE,"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"                        VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null,"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE,"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"                        INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME,"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME,"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME,"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"    public void toModelType_invalidRole_throwsIllegalValueException() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d PersonRole.MESSAGE_ROLE_CONSTRAINTS;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"    public void toModelType_nullRole_throwsIllegalValueException() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PersonRole.class.getSimpleName());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":25,"-":110}},{"path":"src/test/java/seedu/address/model/UniqueAppointmentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class UniqueAppointmentListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":18}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").buildWithRoleClient()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").buildWithRoleClient()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").buildWithRoleClient()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":7,"-":68}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPet\u003e pets \u003d FXCollections.observableArrayList();"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        private final ObservableList\u003cClientOwnPet\u003e associations \u003d FXCollections.observableArrayList();"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            this.pets.setAll(pets);"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"            this.associations.setAll(associations);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return appointments;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPet\u003e getPetList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return pets;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClientOwnPet\u003e getClientPetAssociations() {"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"            return associations;"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClient\u003e getClientList() {"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"            ObservableList\u003cClient\u003e clientList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":"                if (person.isClient()) {"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"                    return (Client) person;"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"                } else {"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"                    return null;"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"            clientList \u003d FXCollections.unmodifiableObservableList(clientList).filtered(Objects::nonNull);"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"            return clientList;"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cVetTechnician\u003e getVetTechnicianList() {"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"            ObservableList\u003cVetTechnician\u003e technicianList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"                if (!person.isClient()) {"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"                    return (VetTechnician) person;"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"                } else {"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"                    return null;"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"            technicianList \u003d FXCollections.unmodifiableObservableList(technicianList).filtered(Objects::nonNull);"},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"            return technicianList;"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":42,"-":108}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        modelManager.getFilteredClientList().remove(0);"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredVetTechnicianList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        modelManager.getFilteredVetTechnicianList().remove(0);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":10,"-":69}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        descriptor.setRole(person.getRole());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"     * Sets the {@code Role} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    public EditPersonDescriptorBuilder withRole(String role) {"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        descriptor.setRole(new PersonRole(role));"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":10,"-":87}},{"path":"src/test/java/seedu/address/logic/commands/AddPetToClientCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommandIntegrationTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    public void execute_addPetToClient_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(AddPetToClientCommand.MESSAGE_ADD_PET_TO_CLIENT_SUCCESS,"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"                petInFilteredList, clientInFilteredList);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(aptcCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    public void execute_clientAlreadyOwnsPet_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, AddPetToClientCommand.MESSAGE_CLIENT_HAS_PET);"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    public void execute_petAlreadyHasOwner_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_SECOND_PERSON);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, AddPetToClientCommand.MESSAGE_PET_HAS_OWNER);"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"     * Returns an {@code AddPetToClientCommand} with parameters pet {@code index} and client {@code index}"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"    private AddPetToClientCommand prepareCommand(Index petIndex, Index clientIndex) {"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d new AddPetToClientCommand(petIndex, clientIndex);"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        return aptcCommand;"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":51,"-":24}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":" * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").buildWithRoleClient();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":52}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        sb.append(PREFIX_PERSON_ROLE + person.getRole().toString() + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"-":38}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        return Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static Person getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":53}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"            .withTags(\"friends\").buildWithRoleClient();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"            .withTags(\"owesMoney\", \"friends\").buildWithRoleClient();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").buildWithRoleClient();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").buildWithRoleClient();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").buildWithRoleClient();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").buildWithRoleClient();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").buildWithRoleVetTechnician();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").buildWithRoleClient();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").buildWithRoleClient();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"            .buildWithRoleClient();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":13,"-":69}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"    public Person buildWithRoleClient() {"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        return new Client(name, phone, email, address, tags);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    public Person buildWithRoleVetTechnician() {"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        return new VetTechnician(name, phone, email, address, tags);"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":9,"-":92}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"    public static final Index INDEX_FIRST_PET \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"    public static final Index INDEX_SECOND_PET \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":12}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"    //private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"    private final ClientListPanelHandle clientListPanel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"        clientListPanel \u003d new ClientListPanelHandle(getChildNode(ClientListPanelHandle.CLIENT_LIST_VIEW_ID));"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"        //personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanelHandle getClientListPanel() {"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"        return clientListPanel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    /*public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    }*/"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":9,"-":48}},{"path":"src/test/java/guitests/guihandles/ClientCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * Provides a handle to a client card in the client list panel."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class ClientCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":4,"-":67}},{"path":"src/test/java/seedu/address/logic/commands/AddPetToClientCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPetAtIndex;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PET;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":" * and unit tests for AddPetToClientCommand."},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    public void execute_petFilteredList_success() throws Exception {"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, INDEX_FIRST_PET);"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(AddPetToClientCommand.MESSAGE_ADD_PET_TO_CLIENT_SUCCESS,"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"                petInFilteredList, clientInFilteredList);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(model.getFilteredPetList().get(0), model.getFilteredClientList().get(0));"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(aptcCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexPet \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexClient \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(outOfBoundIndexClient, outOfBoundIndexPet);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexPet \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexClient \u003d INDEX_SECOND_PERSON;"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexPet.getZeroBased() \u003c model.getAddressBook().getPetList().size());"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexClient.getZeroBased() \u003c model.getAddressBook().getClientList().size());"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(outOfBoundIndexPet, outOfBoundIndexClient);"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        // add -\u003e pet added to client"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"        undoRedoStack.push(aptcCommand);"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered lists to show all"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        // redo -\u003e add pet back to client"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased()),"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"                model.getFilteredClientList().get(INDEX_FIRST_PET.getZeroBased()));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexPet \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexClient \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(outOfBoundIndexPet, outOfBoundIndexClient);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"     * 1. Adss a {@code Pet} To a {@code Client} from filtered lists."},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"     * 2. Undo the command."},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"     * 3. The unfiltered lists should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"     * 4. Redo the command. This ensures {@code RedoCommand} adds the pet to client object regardless of indexing."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, INDEX_SECOND_PET);"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"        Pet petToAdd \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        Client clientToAddPetTo \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"        // add -\u003e add first client in filtered client list and the first pet in filtered pet list"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":"        undoRedoStack.push(aptcCommand);"},{"lineNumber":151,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":152,"author":{"gitID":"jonathanwj"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all clients and pets"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"jonathanwj"},"content":"        assertNotEquals(model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased()), petToAdd);"},{"lineNumber":156,"author":{"gitID":"jonathanwj"},"content":"        assertNotEquals(model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased()), clientToAddPetTo);"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":158,"author":{"gitID":"jonathanwj"},"content":"        // redo -\u003e add the same pet to client in unfiltered lists"},{"lineNumber":159,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(petToAdd, clientToAddPetTo);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"        final AddPetToClientCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"        // same values -\u003e returns true"},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(standardCommand.equals(new AddPetToClientCommand(INDEX_SECOND_PET, INDEX_SECOND_PERSON)));"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"     * Returns an {@code AddPetToClientCommand} with parameters pet {@code index} and client {@code index}"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"    private AddPetToClientCommand prepareCommand(Index petIndex, Index clientIndex) {"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d new AddPetToClientCommand(petIndex, clientIndex);"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"        return aptcCommand;"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":99,"-":98}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.ClientPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.VetTechnicianPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"    private void handleClientPanelSelectionChangedEvent(ClientPanelSelectionChangedEvent event) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        loadPersonPage(event.getNewSelection().client);"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"    private void handleVetTechnicianPanelSelectionChangedEvent(VetTechnicianPanelSelectionChangedEvent event) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"        loadPersonPage(event.getNewSelection().vetTechnician);"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":12,"-":74}},{"path":"src/test/java/seedu/address/testutil/TypicalAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"public class TypicalAddressBook {"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"    private TypicalAddressBook() {} // prevents instantiation"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        for (Pet pet : getTypicalPets()) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                ab.addPet(pet);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            } catch (DuplicatePetException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(TypicalPersons.getTypicalPersons());"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    public static List\u003cPet\u003e getTypicalPets() {"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(TypicalPets.getTypicalPets());"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":12,"-":37}},{"path":"src/test/java/guitests/guihandles/ClientListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.ui.ClientCard;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * Provides a handle for {@code ClientListPanel} containing the list of {@code ClientCard}."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class ClientListPanelHandle extends NodeHandle\u003cListView\u003cClientCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    public static final String CLIENT_LIST_VIEW_ID \u003d \"#clientListView\";"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private Optional\u003cClientCard\u003e lastRememberedSelectedClientCard;"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanelHandle(ListView\u003cClientCard\u003e clientListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"        super(clientListPanelNode);"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"     * Returns a handle to the selected {@code ClientCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e clientList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"        if (clientList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"            throw new AssertionError(\"Client list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"        return new ClientCardHandle(clientList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     * Navigates the listview to display and select the client."},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    public void navigateToCard(Client client) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"        Optional\u003cClientCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.client.equals(client)).findFirst();"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"            throw new IllegalArgumentException(\"Client does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"     * Returns the client card handle of a client associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle getClientCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"        return getClientCardHandle(getRootNode().getItems().get(index).client);"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"     * Returns the {@code ClientCardHandle} of the specified {@code client} in the list."},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle getClientCardHandle(Client client) {"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"        Optional\u003cClientCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"                .filter(card -\u003e card.client.equals(client))"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"                .map(card -\u003e new ClientCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Client does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"     * Selects the {@code ClientCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"purplepers0n"},"content":"     * Remembers the selected {@code ClientCard} in the list."},{"lineNumber":102,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"    public void rememberSelectedClientCard() {"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":106,"author":{"gitID":"purplepers0n"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":"            lastRememberedSelectedClientCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"purplepers0n"},"content":"            lastRememberedSelectedClientCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":113,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"purplepers0n"},"content":"     * Returns true if the selected {@code ClientCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"purplepers0n"},"content":"     * {@code rememberSelectedClientCard()} call."},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":"    public boolean isSelectedClientCardChanged() {"},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":120,"author":{"gitID":"purplepers0n"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"purplepers0n"},"content":"            return lastRememberedSelectedClientCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":"            return !lastRememberedSelectedClientCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"purplepers0n"},"content":"                    || !lastRememberedSelectedClientCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":77,"-":57}},{"path":"src/main/java/seedu/address/ui/PetListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.PetPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of pets."},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"public class PetListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"PetListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PetListPanel.class);"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cPetCard\u003e petListView;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    public PetListPanel(ObservableList\u003cPet\u003e petList) {"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        setConnections(petList);"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cPet\u003e petList) {"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cPetCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"                petList, (pet) -\u003e new PetCard(pet, petList.indexOf(pet) + 1));"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        petListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        petListView.setCellFactory(listView -\u003e new PetListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        petListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"                        logger.fine(\"Selection in pet list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"                        raise(new PetPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"     * Scrolls to the {@code PetCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"            petListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"            petListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        if (event.targetList \u003d\u003d 1) {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PetCard}."},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"    class PetListViewCell extends ListCell\u003cPetCard\u003e {"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(PetCard pet, boolean empty) {"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(pet, empty);"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"            if (empty || pet \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(pet.getRoot());"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":59,"-":31}},{"path":"src/main/java/seedu/address/ui/VetTechnicianCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of a {@code VetTechnician}."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class VetTechnicianCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"VetTechnicianListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    public final VetTechnician vetTechnician;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianCard(VetTechnician vetTechnician, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        this.vetTechnician \u003d vetTechnician;"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        name.setText(vetTechnician.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        phone.setText(vetTechnician.getPhone().value);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        address.setText(vetTechnician.getAddress().value);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        email.setText(vetTechnician.getEmail().value);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        initTags(vetTechnician);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code client}."},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(VetTechnician vetTechnician) {"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        vetTechnician.getTags().forEach(tag -\u003e {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof VetTechnicianCard)) {"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        VetTechnicianCard card \u003d (VetTechnicianCard) other;"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 vetTechnician.equals(card.vetTechnician);"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"purplepers0n":46,"-":44}},{"path":"src/main/java/seedu/address/ui/VetTechnicianListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.VetTechnicianPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of vetTechnicians."},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"public class VetTechnicianListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"VetTechnicianListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(VetTechnicianListPanel.class);"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cVetTechnicianCard\u003e vetTechnicianListView;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianListPanel(ObservableList\u003cVetTechnician\u003e vetTechnicianList) {"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        setConnections(vetTechnicianList);"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cVetTechnician\u003e vetTechnicianList) {"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cVetTechnicianCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"                vetTechnicianList, (vetTechnician) -\u003e"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"                        new VetTechnicianCard(vetTechnician, vetTechnicianList.indexOf(vetTechnician) + 1));"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListView.setCellFactory(listView -\u003e new VetTechnicianListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"                        logger.fine(\"Selection in vetTechnician list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                        raise(new VetTechnicianPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"     * Scrolls to the {@code VetTechnicianCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"            vetTechnicianListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"            vetTechnicianListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        if (event.targetList \u003d\u003d 2) {"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            scrollTo(event.targetIndex);"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code VetTechnicianCard}."},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"    class VetTechnicianListViewCell extends ListCell\u003cVetTechnicianCard\u003e {"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(VetTechnicianCard vetTechnician, boolean empty) {"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(vetTechnician, empty);"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"            if (empty || vetTechnician \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(vetTechnician.getRoot());"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"purplepers0n":58,"-":32}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import javafx.beans.value.ChangeListener;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import javafx.beans.value.ObservableValue;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.ChangeListTabEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    private ClientListPanel clientListPanel;"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    private PetListPanel petListPanel;"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    private VetTechnicianListPanel vetTechnicianListPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"    private StackPane clientListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    private StackPane petListPanelPlaceholder;"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    private StackPane vetTechnicianListPanelPlaceholder;"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"    private TabPane listPanel;"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"        updateCurrentList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":105,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":115,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":121,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"purplepers0n"},"content":"        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"},{"lineNumber":142,"author":{"gitID":"purplepers0n"},"content":"        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"purplepers0n"},"content":"        petListPanel \u003d new PetListPanel(logic.getFilteredPetList());"},{"lineNumber":145,"author":{"gitID":"purplepers0n"},"content":"        petListPanelPlaceholder.getChildren().add(petListPanel.getRoot());"},{"lineNumber":146,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":147,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListPanel \u003d new VetTechnicianListPanel(logic.getFilteredVetTechnicianList());"},{"lineNumber":148,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListPanelPlaceholder.getChildren().add(vetTechnicianListPanel.getRoot());"},{"lineNumber":149,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanel getClientListPanel() {"},{"lineNumber":210,"author":{"gitID":"purplepers0n"},"content":"        return this.clientListPanel;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"purplepers0n"},"content":"    public PetListPanel getPetListPanel() {"},{"lineNumber":214,"author":{"gitID":"purplepers0n"},"content":"        return this.petListPanel;"},{"lineNumber":215,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":217,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianListPanel getVetTechnicianListPanel() {"},{"lineNumber":218,"author":{"gitID":"purplepers0n"},"content":"        return this.vetTechnicianListPanel;"},{"lineNumber":219,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":221,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":222,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"purplepers0n"},"content":"     * Changes to the {@code Tab} of the specific {@code list} requested and selects it."},{"lineNumber":224,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"purplepers0n"},"content":"    private void changeTo(int list) {"},{"lineNumber":226,"author":{"gitID":"purplepers0n"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":227,"author":{"gitID":"purplepers0n"},"content":"            listPanel.getSelectionModel().select(list);"},{"lineNumber":228,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":229,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":231,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":232,"author":{"gitID":"purplepers0n"},"content":"    private void handleChangeListTabEvent(ChangeListTabEvent event) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":234,"author":{"gitID":"purplepers0n"},"content":"        changeTo(event.targetList);"},{"lineNumber":235,"author":{"gitID":"purplepers0n"},"content":"        logic.setCurrentList(event.targetList);"},{"lineNumber":236,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":238,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"purplepers0n"},"content":"     * Updates the current index being viewed if tab is changed by mouseclick event"},{"lineNumber":240,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"purplepers0n"},"content":"    private void updateCurrentList() {"},{"lineNumber":242,"author":{"gitID":"purplepers0n"},"content":"        listPanel.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener\u003cNumber\u003e() {"},{"lineNumber":243,"author":{"gitID":"purplepers0n"},"content":"            @Override"},{"lineNumber":244,"author":{"gitID":"purplepers0n"},"content":"            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"},{"lineNumber":245,"author":{"gitID":"purplepers0n"},"content":"                logic.setCurrentList(newValue.intValue());"},{"lineNumber":246,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":247,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":248,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":67,"-":192}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        initTags(person);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Person person) {"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":22,"-":69}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_PETS_LISTED_OVERVIEW \u003d \"%1$d pets listed!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":13}},{"path":"src/main/java/seedu/address/ui/PetCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of a {@code Pet}."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class PetCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"PetListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    public final Pet pet;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"    private Label gender;"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    private Label age;"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    private Label client;"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    //species and breed included in tags"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"    public PetCard(Pet pet, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        this.pet \u003d pet;"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        name.setText(pet.getPetName().fullPetName);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        gender.setText(\"Gender: \" + pet.getPetGender().fullGender);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        age.setText(pet.getPetAge().value + \" years old\");"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        client.setText(\"Owner: \");"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        initTags(pet);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code pet}."},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Pet pet) {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        pet.getTags().forEach(tag -\u003e {"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof PetCard)) {"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        PetCard card \u003d (PetCard) other;"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 pet.equals(card.pet);"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":58,"-":34}},{"path":"src/main/java/seedu/address/ui/ClientCard.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of a {@code Client}."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class ClientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ClientListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    public final Client client;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    public ClientCard(Client client, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        this.client \u003d client;"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        name.setText(client.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        phone.setText(client.getPhone().value);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        address.setText(client.getAddress().value);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        email.setText(client.getEmail().value);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        initTags(client);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code client}."},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Client client) {"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        client.getTags().forEach(tag -\u003e {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof ClientCard)) {"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        ClientCard card \u003d (ClientCard) other;"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 client.equals(card.client);"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":51,"-":40}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    public final int targetList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    public JumpToListRequestEvent(Index targetIndex, int targetList) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"        this.targetList \u003d targetList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":3,"-":21}},{"path":"src/main/java/seedu/address/commons/events/ui/PetPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.ui.PetCard;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" * Represents a selection change in the Pet List Panel"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"public class PetPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    private final PetCard newSelection;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    public PetPanelSelectionChangedEvent(PetCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    public PetCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":15,"-":11}},{"path":"src/main/java/seedu/address/ui/ClientListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.ClientPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of clients."},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"public class ClientListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ClientListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cClientCard\u003e clientListView;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        setConnections(clientList);"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cClient\u003e clientList) {"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cClientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"                clientList, (client) -\u003e new ClientCard(client, clientList.indexOf(client) + 1));"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        clientListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        clientListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"                        logger.fine(\"Selection in client list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"                        raise(new ClientPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"     * Scrolls to the {@code ClientCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"            clientListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"            clientListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        if (event.targetList \u003d\u003d 0) {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ClientCard}."},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"    class ClientListViewCell extends ListCell\u003cClientCard\u003e {"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(ClientCard client, boolean empty) {"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(client, empty);"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"            if (empty || client \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(client.getRoot());"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":59,"-":31}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeListTabEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":" * Indicates a request to change the tab to show other list"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"public class ChangeListTabEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"    public final int targetList;"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    public ChangeListTabEvent(int targetList) {"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"        this.targetList \u003d targetList;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":9,"-":12}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    /** Returns an unmodifiable view of the filtered list of clients */"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    /** Returns an unmodifiable view of the filtered list of vet technician */"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList();"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    /** Returns an unmodifiable view of the filtered list of pets */"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cPet\u003e getFilteredPetList();"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"     * Sets the index of the current list that is viewed"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    void setCurrentList(int currList);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"    /** Get the index of the current list that is viewed */"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"    int getCurrentList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":8,"purplepers0n":12,"-":31}},{"path":"src/main/java/seedu/address/commons/events/ui/VetTechnicianPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.ui.VetTechnicianCard;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" * Represents a selection change in the VetTechnician List Panel"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"public class VetTechnicianPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    private final VetTechnicianCard newSelection;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianPanelSelectionChangedEvent(VetTechnicianCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":15,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ROLE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON_ROLE, PREFIX_NAME,"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"                PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"            PersonRole role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_PERSON_ROLE).get());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"            Person person;"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"            if (role.equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"                person \u003d new Client(name, phone, email, address, tagList);"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"                person \u003d new VetTechnician(name, phone, email, address, tagList);"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":15,"-":62}},{"path":"src/main/java/seedu/address/commons/events/ui/ClientPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.ui.ClientCard;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" * Represents a selection change in the Client List Panel"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"public class ClientPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    private final ClientCard newSelection;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    public ClientPanelSelectionChangedEvent(ClientCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    public ClientCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":15,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPetCommand;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddPetToClientCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePetCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIS:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case ScheduleCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new ScheduleCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case AddPetCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new AddPetCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case DeletePetCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case DeletePetCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new DeletePetCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"        case AddPetToClientCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"            return new AddPetToClientCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"purplepers0n":1,"-":111}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"    public static final Prefix PREFIX_PERSON_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"da/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"tm/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"du/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PET_NAME \u003d new Prefix(\"pn/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PET_AGE \u003d new Prefix(\"pa/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PET_GENDER \u003d new Prefix(\"pg/\");"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    public static final Prefix PREFIX_PET_INDEX \u003d new Prefix(\"p/\");"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    public static final Prefix PREFIX_CLIENT_INDEX \u003d new Prefix(\"c/\");"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Duration;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_INVALID_TYPE \u003d \"Type is not \u0027client\u0027, \u0027pet\u0027 or \u0027vettech.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"     * Parses a {@code String role} into an {@code PersonRole} enum type."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":181,"author":{"gitID":"jonathanwj"},"content":"     * @throws IllegalValueException if the given {@code role} is invalid."},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"    public static PersonRole parseRole(String role) throws IllegalValueException {"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"        if (!PersonRole.isValidPersonRole(trimmedRole)) {"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"            throw new IllegalValueException(PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"        return new PersonRole(trimmedRole);"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"     * Parses a {@code Optional\u003cString\u003e role} into an {@code Optional\u003cPersonRole\u003e} if {@code role} is present."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"    public static Optional\u003cPersonRole\u003e parseRole(Optional\u003cString\u003e role) throws IllegalValueException {"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"        return role.isPresent()"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"               ? Optional.of(parseRole(role.get()))"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"               : Optional.empty();"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        requireNonNull(date);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        return new Date(trimmedDate);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        requireNonNull(date);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Parses a {@code String time} into a {@code Time}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code time} is invalid."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public static Time parseTime(String time) throws IllegalValueException {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        requireNonNull(time);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        if (!Time.isValidTime(trimmedTime)) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        return new Time(trimmedTime);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into an {@code Optional\u003cTime\u003e} if {@code time} is present."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public static Optional\u003cTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        requireNonNull(time);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Parses a {@code String duration} into a {@code Duration}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code duration} is invalid."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public static Duration parseDuration(String duration) throws IllegalValueException {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        requireNonNull(duration);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        String trimmedDuration \u003d duration.trim();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (!Duration.isValidDuration(trimmedDuration)) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return new Duration(trimmedDuration);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e duration} into an {@code Optional\u003cDuration\u003e} if {@code duration} is present."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public static Optional\u003cDuration\u003e parseDuration(Optional\u003cString\u003e duration) throws IllegalValueException {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        requireNonNull(duration);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        return duration.isPresent() ? Optional.of(parseDuration(duration.get())) : Optional.empty();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Parses a {@code String petName} into {@code PetName}."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code petName} is invalid."},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public static PetName parsePetName(String petName) throws IllegalValueException {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        requireNonNull(petName);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        String trimmedPetName \u003d petName.trim();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        if (!PetName.isValidPetName(trimmedPetName)) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PetName.MESSAGE_PETNAME_CONSTRAINTS);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        return new PetName(trimmedPetName);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cPetName\u003e}"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    public static Optional\u003cPetName\u003e parsePetName(Optional\u003cString\u003e petName) throws IllegalValueException {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        requireNonNull(petName);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        return petName.isPresent() ? Optional.of(parsePetName(petName.get())) : Optional.empty();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Parses {@code String petAge} into {@code PetAge}."},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    public static PetAge parsePetAge(String petAge) throws IllegalValueException {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        requireNonNull(petAge);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        String trimmedPetAge \u003d petAge.trim();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        if (!PetAge.isValidPetAge(trimmedPetAge)) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PetAge.MESSAGE_PETAGE_CONSTRAINTS);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        return new PetAge(trimmedPetAge);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e petAge} into an {@code Optional\u003cPetAge\u003e}"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    public static Optional\u003cPetAge\u003e parsePetAge(Optional\u003cString\u003e petAge) throws IllegalValueException {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        requireNonNull(petAge);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        return petAge.isPresent() ? Optional.of(parsePetAge(petAge.get())) : Optional.empty();"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * Parses {@code String petGender} into {@code PetGender}."},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":322,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    public static PetGender parsePetGender(String petGender) throws IllegalValueException {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        requireNonNull(petGender);"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        String trimmedPetGender \u003d petGender.trim();"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        if (!PetGender.isValidGender(trimmedPetGender)) {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PetGender.MESSAGE_PETGENDER_CONSTRAINTS);"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        return new PetGender(trimmedPetGender);"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e petGender} into {@code PetGender}."},{"lineNumber":334,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    public static Optional\u003cPetGender\u003e parsePetGender(Optional\u003cString\u003e petGender) throws IllegalValueException {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        requireNonNull(petGender);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        return petGender.isPresent() ? Optional.of(parsePetGender(petGender.get())) : Optional.empty();"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":340,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"purplepers0n"},"content":"     * Parses {@code valueType} into a {@code String} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":342,"author":{"gitID":"purplepers0n"},"content":"     * trimmed."},{"lineNumber":343,"author":{"gitID":"purplepers0n"},"content":"     * @throws IllegalValueException if the specified type is invalid (not \u0027client\u0027, \u0027pet\u0027 or \u0027vettech\u0027)."},{"lineNumber":344,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":345,"author":{"gitID":"purplepers0n"},"content":"    public static String parseType(String valueType) throws IllegalValueException {"},{"lineNumber":346,"author":{"gitID":"purplepers0n"},"content":"        String trimmedValue \u003d valueType.trim();"},{"lineNumber":347,"author":{"gitID":"purplepers0n"},"content":"        if (!trimmedValue.matches(\"pet\") \u0026\u0026 !trimmedValue.matches(\"client\") \u0026\u0026 !trimmedValue.matches(\"vettech\")) {"},{"lineNumber":348,"author":{"gitID":"purplepers0n"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TYPE);"},{"lineNumber":349,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"purplepers0n"},"content":"        return trimmedValue;"},{"lineNumber":351,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":27,"purplepers0n":14,"-":311}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ROLE, PREFIX_NAME,"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"            ParserUtil.parseRole(argMultimap.getValue(PREFIX_PERSON_ROLE)).ifPresent(editPersonDescriptor::setRole);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":" * Parses input arguments and creates a new ListCommand object"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"     * and returns a ListCommand object for execution."},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"            String type \u003d ParserUtil.parseType(args);"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"            return new ListCommand(type);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":16,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"del\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        List\u003c? extends Person\u003e lastShownList;"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredVetTechnicianList();"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(\"Not currently on a list that \u0027delete\u0027 command can change\");"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":16,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.ChangeListTabEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ls\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"            + \": Lists the specified type\\n\""},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"            + \"Parameters: TYPE (must be either client, pet or vettech)\\n\""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"            + \"Example: \" + COMMAND_WORD + \" pet\";"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$s\" + \"s\";"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    private final String targetType;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    public ListCommand(String targetType) {"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"        this.targetType \u003d targetType;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        switch (targetType) {"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"        case \"client\":"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"            EventsCenter.getInstance().post(new ChangeListTabEvent(0));"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"            break;"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"        case \"pet\":"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"            EventsCenter.getInstance().post(new ChangeListTabEvent(1));"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"            break;"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        case \"vettech\":"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"            EventsCenter.getInstance().post(new ChangeListTabEvent(2));"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            break;"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        default:"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetType));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":42,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/AddPetToClientCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddPetToClientCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":" * Parses input arguments and creates a new AddPetToClientCommand object"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommandParser implements Parser\u003cAddPetToClientCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPetToClientCommand"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"     * and returns an AddPetToClientCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    public AddPetToClientCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PET_INDEX, PREFIX_CLIENT_INDEX);"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        Index indexPet;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        Index indexClient;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PET_INDEX, PREFIX_CLIENT_INDEX)) {"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"                    AddPetToClientCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"            indexPet \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PET_INDEX).get());"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"            indexClient \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX).get());"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"                    AddPetToClientCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        return new AddPetToClientCommand(indexPet, indexClient);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":34,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of pets."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    public static String getMessageForPetListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"        return String.format(Messages.MESSAGE_PETS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":6,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PERSON_ROLE + \"ROLE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PERSON_ROLE + \"client \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"purplepers0n":4,"-":69}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":6,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIS \u003d \"sel\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_SELECT_PET_SUCCESS \u003d \"Selected Pet: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        List\u003c?\u003e lastShownList;"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 1) {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredPetList();"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredVetTechnicianList();"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(\"Not currently on a list that \u0027select\u0027 command can work\");"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex, currList));"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 1) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"            return new CommandResult(String.format(MESSAGE_SELECT_PET_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":22,"-":49}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredClientList(new Predicate\u003cClient\u003e() {"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"                @Override"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"                public boolean test(Client client) {"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"                    return predicate.getKeywords().stream().anyMatch(keyword -\u003e"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"                            StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"            });"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredClientList().size()));"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 1) {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredPetList(new Predicate\u003cPet\u003e() {"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                @Override"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                public boolean test(Pet pet) {"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"                    return predicate.getKeywords().stream().anyMatch(keyword -\u003e"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"                            StringUtil.containsWordIgnoreCase(pet.getPetName().fullPetName, keyword));"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"            });"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"            return new CommandResult(getMessageForPetListShownSummary(model.getFilteredPetList().size()));"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(new Predicate\u003cVetTechnician\u003e() {"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"                @Override"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"                public boolean test(VetTechnician vetTechnician) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"                    return predicate.getKeywords().stream().anyMatch(keyword -\u003e"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"                            StringUtil.containsWordIgnoreCase(vetTechnician.getName().fullName, keyword));"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"            });"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"            return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredVetTechnicianList().size()));"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(0));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":40,"-":37}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        return model.getFilteredClientList();"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        return model.getFilteredVetTechnicianList();"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"        return model.getFilteredPetList();"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList(int currList) {"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d currList;"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"        model.setCurrentList(currList);"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"    public int getCurrentList() {"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"        return this.currList;"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":12,"purplepers0n":18,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"            + \"[\" + PREFIX_PERSON_ROLE + \"ROLE] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @param index                of the person in the filtered person list to edit"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":97,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"        List\u003c? extends Person\u003e lastShownList;"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":105,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":106,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":109,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredVetTechnicianList();"},{"lineNumber":111,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":112,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(\"Not currently on a list that \u0027edit\u0027 command can change\");"},{"lineNumber":113,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"        PersonRole updatedRole \u003d editPersonDescriptor.getRole().orElse(personToEdit.getRole());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"        if (updatedRole.equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"            return new Client(updatedName, updatedPhone, updatedEmail,"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"                    updatedAddress, updatedTags);"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"            return new VetTechnician(updatedName, updatedPhone, updatedEmail,"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"                    updatedAddress, updatedTags);"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":"        private PersonRole role;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"purplepers0n"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":179,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":183,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":184,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"            setRole(toCopy.role);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":196,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"            return CollectionUtil.isAnyNonNull(this.role, this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"        public void setRole(PersonRole role) {"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d role;"},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":"        public Optional\u003cPersonRole\u003e getRole() {"},{"lineNumber":206,"author":{"gitID":"jonathanwj"},"content":"            return Optional.ofNullable(role);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":244,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":251,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":252,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":253,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":277,"author":{"gitID":"jonathanwj"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":25,"purplepers0n":25,"-":232}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_CLIENT \u003d \"CLIENT\";"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_TECHNICIAN \u003d \"TECHNICIAN\";"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    private String role;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    public XmlAdaptedPerson(String name, String role, String phone,"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"                            String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        this.role \u003d role;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        if (source.getRole().equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"            role \u003d ROLE_CLIENT;"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"            role \u003d ROLE_TECHNICIAN;"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        Person convertedPerson;"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":"        if (this.role \u003d\u003d null) {"},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"                    PersonRole.class.getSimpleName()));"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"        if (!PersonRole.isValidPersonRole(this.role)) {"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"            throw new IllegalValueException(PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"        final PersonRole role \u003d new PersonRole(this.role);"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"        if (role.equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"            convertedPerson \u003d new Client(name, phone, email, address, tags);"},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"            convertedPerson \u003d new VetTechnician(name, phone, email, address, tags);"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"        return convertedPerson;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":34,"-":135}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPet\u003e pets;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        pets \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        pets.addAll(src.getPetList().stream().map(XmlAdaptedPet::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        appointments.addAll(src.getAppointmentList().stream().map(XmlAdaptedAppointment::new).collect("},{"lineNumber":50,"author":{"gitID":"-"},"content":"                Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPet pet : pets) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            addressBook.addPet(pet.toModelType());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        for (XmlAdaptedAppointment appointment : appointments) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            addressBook.scheduleAppointment(appointment.toModelType());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                \u0026\u0026 pets.equals(otherAb.pets)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":91}},{"path":"src/main/java/seedu/address/model/vettechnician/exceptions/DuplicateVetTechnicianException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":" * Signals that the operation will result in duplicate VetTechnician objects"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"public class DuplicateVetTechnicianException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"    public DuplicateVetTechnicianException() {"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"        super(\"Operation would result in duplicate vet technicians\");"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":11,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/AddPetToClientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    public static final String COMMAND_WORD \u003d \"addpettoclient\";"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a owner to a pet \""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"            + \"by the index number used in the last client and pet listing.\\n\""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"            + \"Parameters: \""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PET_INDEX + \"PET_INDEX \""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_CLIENT_INDEX + \"CLIENT_INDEX\\n\""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PET_INDEX + \"1 \" + PREFIX_CLIENT_INDEX + \"2\";"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_ADD_PET_TO_CLIENT_SUCCESS \u003d \"Added Pet To client:\\n%1$s\\n\u003e\u003e %2$s\";"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_CLIENT_HAS_PET \u003d \"Client already has pet\";"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_PET_HAS_OWNER \u003d \"Pet already has an owner\";"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    private final Index petIndex;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    private final Index clientIndex;"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cPet\u003e pet;"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cClient\u003e client;"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"     * @param petIndex of the pet in the filtered pet list to add"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"     * @param clientIndex of the person in the filtered client list to add pet to"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    public AddPetToClientCommand(Index petIndex, Index clientIndex) {"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(petIndex);"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(clientIndex);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        this.petIndex \u003d petIndex;"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        this.clientIndex \u003d clientIndex;"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        pet \u003d Optional.empty();"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        client \u003d Optional.empty();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(pet.get());"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(client.get());"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"            model.addPetToClient(pet.get(), client.get());"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        } catch (ClientAlreadyOwnsPetException e) {"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_CLIENT_HAS_PET);"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        } catch (PetAlreadyHasOwnerException e) {"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_PET_HAS_OWNER);"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_PET_TO_CLIENT_SUCCESS, pet.get(), client.get()));"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        List\u003cPet\u003e lastShownListPet \u003d model.getFilteredPetList();"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        List\u003cClient\u003e lastShownListClient \u003d model.getFilteredClientList();"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        if (petIndex.getZeroBased() \u003e\u003d lastShownListPet.size()"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"                || clientIndex.getZeroBased() \u003e\u003d lastShownListClient.size()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        pet \u003d Optional.of(lastShownListPet.get(petIndex.getZeroBased()));"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        client \u003d Optional.of(lastShownListClient.get(clientIndex.getZeroBased()));"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof AddPetToClientCommand)) {"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        // state check"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand e \u003d (AddPetToClientCommand) other;"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        return petIndex.equals(e.petIndex)"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 clientIndex.equals(e.clientIndex)"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 pet.equals(e.pet)"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 client.equals(e.client);"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":78,"purplepers0n":2,"-":30}},{"path":"src/main/java/seedu/address/model/vettechnician/exceptions/VetTechnicianNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals the operation is unable to find the specified pet."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class VetTechnicianNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":4}},{"path":"src/main/java/seedu/address/model/vettechnician/VetTechnician.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":" * Represents a Vet Technician in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"public class VetTechnician extends Person {"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"     * Every field must be present and not null."},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    public VetTechnician(Name name, Phone phone, Email email,"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"                         Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"        super(name, phone, email, address, PersonRole.TECHNICIAN_ROLE, tags);"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof VetTechnician)) {"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        VetTechnician otherTechnician \u003d (VetTechnician) other;"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        return otherTechnician.getName().equals(this.getName())"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherTechnician.getPhone().equals(this.getPhone())"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherTechnician.getEmail().equals(this.getEmail())"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherTechnician.getAddress().equals(this.getAddress())"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherTechnician.getRole().equals(this.getRole());"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":33,"-":16}},{"path":"src/main/java/seedu/address/model/appointment/Duration.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents an Appointment\u0027s duration in the application."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDuration(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Duration {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DURATION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Appointment duration should be all integers in format DD or DDD (in minute), \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"                    + \"ranging from 15-120 minutes and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"     * The first character of the date must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DURATION_VALIDATION_REGEX \u003d \"(1[5-9]|[2-9][0-9]|1[01][0-9]|120)\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public final String duration;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a {@code Duration}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param duration A valid duration."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Duration(String duration) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(duration);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(isValidDuration(duration), MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.duration \u003d duration;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns the integer value of duration"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public int getDurationValue() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return Integer.parseInt(this.duration);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid duration."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static boolean isValidDuration(String test) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return test.matches(DURATION_VALIDATION_REGEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return duration;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                || (other instanceof Duration // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.duration.equals(((Duration) other).duration)); // state check"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return duration.hashCode();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":6,"-":59}},{"path":"src/main/java/seedu/address/model/appointment/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" * Represents an Appointment\u0027s time in the application."},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"public class Time {"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Appointment time should be all integers in format HH:MM, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"     * The first character of the time must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3]):([0-5][0-9])\";"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int HOUR_START_INDEX \u003d 0;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final int HOUR_END_INDEX \u003d 2;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final int MINUTE_START_INDEX \u003d 3;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    public final String time;"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"     * Constructs a {@code Time}."},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"     * @param time A valid time."},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    public Time(String time) {"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"        requireNonNull(time);"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        this.time \u003d time;"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *  Returns the integer value of the Minute in time"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int getMinute() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String minute \u003d this.toString().substring(MINUTE_START_INDEX);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Integer.parseInt(minute);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *  Returns the integer value of Hour in time"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int getHour() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String hour \u003d this.toString().substring(HOUR_START_INDEX, HOUR_END_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Integer.parseInt(hour);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        return time;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"                || (other instanceof Time // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 this.time.equals(((Time) other).time)); // state check"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"        return time.hashCode();"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":45,"-":38}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" * Represents an Appointment in the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"public class Appointment {"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"    private final Date date;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    private final Time time;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Duration duration;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public Appointment(Date date, Time time, Duration duration) {"},{"lineNumber":22,"author":{"gitID":"Godxin"},"content":"        requireAllNonNull(date, time);"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"        this.time \u003d time;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.duration \u003d duration;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    public Date getDate() {"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"        return date;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    public Time getTime() {"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"        return time;"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Duration getDuration() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return duration;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        return otherAppointment.getDate().equals(this.getDate())"},{"lineNumber":53,"author":{"gitID":"Godxin"},"content":"                \u0026\u0026 otherAppointment.getTime().equals(this.getTime());"},{"lineNumber":54,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(date, time, duration);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        builder.append(\" Date: \")"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .append(getDate())"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"                .append(\" Time: \")"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .append(getTime())"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .append(\" Duration: \")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .append(getDuration());"},{"lineNumber":74,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":75,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"        return builder.toString();"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"purplepers0n":36,"-":36,"Godxin":5}},{"path":"src/main/java/seedu/address/model/association/exceptions/ClientAlreadyOwnsPetException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals that the client already owns a pet"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientAlreadyOwnsPetException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":7}},{"path":"src/main/java/seedu/address/model/association/exceptions/PetAlreadyHasOwnerException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals that the pet already has an owner."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class PetAlreadyHasOwnerException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":7}},{"path":"src/main/java/seedu/address/model/appointment/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" * Represents an Appointment\u0027s date in the application."},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"public class Date {"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Appointment date should be all integers in format YYYY-MM-DD, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"     * The first character of the date must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            \"([2-9][0-9][1-9][89])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])\";"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"    public final String date;"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"     * Constructs a {@code Date}."},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"     * @param date A valid date."},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    public Date(String date) {"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"        requireNonNull(date);"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        this.date \u003d date;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        return date;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                || (other instanceof Date // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 this.date.equals(((Date) other).date)); // state check"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"        return date.hashCode();"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":45,"-":13}},{"path":"src/main/java/seedu/address/model/association/exceptions/ClientPetAssociationNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals that the operation is unable to find the specified client per association."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientPetAssociationNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":7}},{"path":"src/main/java/seedu/address/model/association/ClientOwnPet.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":" * Represents a pet to client association"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"public class ClientOwnPet {"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"    private final Client client;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"    private final Pet pet;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"    public ClientOwnPet(Client client, Pet pet) {"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"        this.client \u003d client;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"        this.pet \u003d pet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof ClientOwnPet)) {"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        ClientOwnPet otherClientOwnPet \u003d (ClientOwnPet) other;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"        return otherClientOwnPet.getClient().equals(this.getClient())"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherClientOwnPet.getPet().equals(this.getPet());"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    public Client getClient() {"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        return client;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public Pet getPet() {"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        return pet;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":32,"-":8}},{"path":"src/main/java/seedu/address/model/vettechnician/UniqueVetTechnicianList.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.DuplicateVetTechnicianException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.VetTechnicianNotFoundException;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":" * A list of vetTechnicians that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":" *"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":" *"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":" * @see VetTechnician#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"public class UniqueVetTechnicianList implements Iterable\u003cVetTechnician\u003e {"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private final ObservableList\u003cVetTechnician\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if the list contains an equivalent vetTechnician as the given argument."},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public boolean contains(VetTechnician toCheck) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"     * Adds a vetTechnician to the list."},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateVetTechnicianException if the vetTechnician"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"     * to add is a duplicate of an existing vetTechnician in the list."},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    public void add(VetTechnician toAdd) throws DuplicateVetTechnicianException {"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateVetTechnicianException();"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"     * Replaces the vetTechnician {@code target} in the list with {@code editedvetTechnician}."},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateVetTechnicianException if the replacement"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     * is equivalent to another existing vetTechnician in the list."},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"     * @throws VetTechnicianNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnician(VetTechnician target, VetTechnician editedVetTechnician)"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateVetTechnicianException, VetTechnicianNotFoundException {"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(editedVetTechnician);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"            throw new VetTechnicianNotFoundException();"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        if (!target.equals(editedVetTechnician) \u0026\u0026 internalList.contains(editedVetTechnician)) {"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateVetTechnicianException();"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        internalList.set(index, editedVetTechnician);"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"     * Removes the equivalent vetTechnician from the list."},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"     * @throws VetTechnicianNotFoundException if no such vetTechnician could be found in the list."},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"    public boolean remove(VetTechnician toRemove) throws VetTechnicianNotFoundException {"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        final boolean vetTechnicianFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        if (!vetTechnicianFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"            throw new VetTechnicianNotFoundException();"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        return vetTechnicianFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnicians(UniqueVetTechnicianList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnicians(List\u003cVetTechnician\u003e vetTechnicians) throws DuplicateVetTechnicianException {"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(vetTechnicians);"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        final UniqueVetTechnicianList replacement \u003d new UniqueVetTechnicianList();"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        for (final VetTechnician vetTechnician : vetTechnicians) {"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"            replacement.add(vetTechnician);"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        setVetTechnicians(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"    public Iterator\u003cVetTechnician\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"                || (other instanceof UniqueVetTechnicianList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueVetTechnicianList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":77,"-":44}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"                getTagSet(\"family\")),"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    public static Pet[] getSamplePets() {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        return new Pet[] {"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Tweety\"), new PetAge(\"2\"), new PetGender(\"M\"), getTagSet(\"Bird\")),"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Sylvester\"), new PetAge(\"1\"), new PetGender(\"M\"), getTagSet(\"Cat\")),"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        };"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"            for (Pet samplePet : getSamplePets()) {"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"                sampleAb.addPet(samplePet);"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        } catch (DuplicatePetException e) {"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate pets\", e);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":30,"-":55}},{"path":"src/main/java/seedu/address/model/person/PersonRole.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":" * Represents a Person\u0027s role in the address book."},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPersonRole(Role)}"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"public class PersonRole {"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"    public static final String CLIENT_STRING \u003d \"client\";"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"    public static final String TECHNICIAN_STRING \u003d \"technician\";"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"     * Person roles that can be used."},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"    private enum Role {"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"        CLIENT,"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"        TECHNICIAN"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    public static final PersonRole TECHNICIAN_ROLE \u003d new PersonRole(Role.TECHNICIAN);"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    public static final PersonRole CLIENT_ROLE \u003d new PersonRole(Role.CLIENT);"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"            \"Person role can take only \u0027client\u0027 and \u0027technician\u0027 values, and it should not be blank\";"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    private final Role role;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"     * Constructs a PersonRole"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"     * @param role a valid role"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public PersonRole(Role role) {"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        checkArgument(isValidPersonRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        if (role.equals(Role.CLIENT)) {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.CLIENT;"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.TECHNICIAN;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"     * Constructs a PersonRole"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     * @param role a valid string representation of {@code PersonRole}"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    public PersonRole(String role) {"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        checkArgument(isValidPersonRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        if (role.equalsIgnoreCase(\"client\")) {"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.CLIENT;"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.TECHNICIAN;"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if a given Role is a valid person role."},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"    public static boolean isValidPersonRole(Role test) {"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        if (test \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        return (test.equals(Role.CLIENT)"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"                || test.equals(Role.TECHNICIAN));"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if a given String represents a valid person role."},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"    public static boolean isValidPersonRole(String test) {"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        if (test \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        return (test.equalsIgnoreCase(CLIENT_STRING)"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"                || test.equalsIgnoreCase(TECHNICIAN_STRING));"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"     * Returns the string representation of PersonRole."},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"    public String toString() {"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        if (role.equals(Role.CLIENT)) {"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"            return CLIENT_STRING;"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"            return TECHNICIAN_STRING;"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"                || (other instanceof PersonRole // instanceof handles nulls"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 this.role.equals(((PersonRole) other).role)); // state check"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":101,"-":3}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"public abstract class Person {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    private final PersonRole role;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    private UniqueAppointmentList appointments;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    public Person(Name name, Phone phone, Email email, Address address, PersonRole role, Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(name, phone, email, address, role, tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        this.role \u003d role;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    public PersonRole getRole() {"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        return role;"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"     * @return appointments as a {@code UniqueAppointmentList}"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"    public UniqueAppointmentList getAppointments() {"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        return appointments;"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"     * Adds new appointment to person"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"     * @param toAdd new appointment"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateAppointmentException"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    public void addAppointment(Appointment toAdd)"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateAppointmentException {"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        appointments.add(toAdd);"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"     * Removes old appointment from person"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"     * @param toRemove old appointment"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"     * @throws AppointmentNotFoundException"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"    public void removeApppoinment(Appointment toRemove)"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"            throws AppointmentNotFoundException {"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"        appointments.remove(toRemove);"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherPerson.getRole().equals(this.getRole());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"                .append(\" Role: \")"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"                .append(getRole())"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"     *  Returns true if person is a client"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"    public boolean isClient() {"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        return role.equals(PersonRole.CLIENT_ROLE);"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":55,"-":96}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate appointments."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the pets list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    ObservableList\u003cPet\u003e getPetList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the client pet association list."},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClientOwnPet\u003e getClientPetAssociations();"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the client list."},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClient\u003e getClientList();"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the vet technician list."},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cVetTechnician\u003e getVetTechnicianList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":19,"-":36}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    public List\u003cString\u003e getKeywords() {"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        return keywords;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":3,"-":31}},{"path":"src/main/java/seedu/address/model/pet/UniquePetList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A list of pets that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"-"},"content":" *"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * @see Pet#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class UniquePetList implements Iterable\u003cPet\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPet\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent pet as the given argument."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public boolean contains(Pet toCheck) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Adds a pet to the list."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws DuplicatePetException if the pet to add is a duplicate of an existing pet in the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void add(Pet toAdd) throws DuplicatePetException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new DuplicatePetException();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Replaces the pet {@code target} in the list with {@code editedpet}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws DuplicatePetException if the replacement is equivalent to another existing pet in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws PetNotFoundException if {@code target} could not be found in the list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"    public void setPet(Pet target, Pet editedPet)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throws DuplicatePetException, PetNotFoundException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(editedPet);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new PetNotFoundException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPet) \u0026\u0026 internalList.contains(editedPet)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new DuplicatePetException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPet);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Removes the equivalent pet from the list."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws PetNotFoundException if no such pet could be found in the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean remove(Pet toRemove) throws PetNotFoundException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        final boolean petFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!petFoundAndDeleted) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new PetNotFoundException();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return petFoundAndDeleted;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void setPets(UniquePetList replacement) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void setPets(List\u003cPet\u003e pets) throws DuplicatePetException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireAllNonNull(pets);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        final UniquePetList replacement \u003d new UniquePetList();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        for (final Pet pet : pets) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            replacement.add(pet);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setPets(replacement);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPet\u003e asObservableList() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public Iterator\u003cPet\u003e iterator() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePetList // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePetList) other).internalList));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":117}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.UniquePetList;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final UniquePetList pets;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    private final ObservableList\u003cClientOwnPet\u003e clientPetAssociations;"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        pets \u003d new UniquePetList();"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        clientPetAssociations \u003d FXCollections.observableArrayList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.appointments.setAppointments(appointments);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void setPets(List\u003cPet\u003e pets) throws DuplicatePetException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.pets.setPets(pets);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"    public void setClientPetAssociations(List\u003cClientOwnPet\u003e associations) {"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        this.clientPetAssociations.setAll(associations);"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        List\u003cAppointment\u003e syncedAppointmentList \u003d newData.getAppointmentList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            setAppointments(syncedAppointmentList);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Program should not have duplicate appointments\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        List\u003cPet\u003e syncedPetList \u003d newData.getPetList().stream()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterPetTagList)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            setPets(syncedPetList);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (DuplicatePetException e) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Program should not have duplicate pets\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"        setClientPetAssociations(newData.getClientPetAssociations());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicatePersonException if updating the client\u0027s details causes the client to be equivalent to"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":"     *      another existing client in the list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any client"},{"lineNumber":169,"author":{"gitID":"jonathanwj"},"content":"        // in the client list."},{"lineNumber":170,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"        Person syncedPerson;"},{"lineNumber":180,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"        if (person.getRole().equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"            syncedPerson \u003d new Client(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"                    person.getAddress(), correctTagReferences);"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":"            syncedPerson \u003d new VetTechnician(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"                    person.getAddress(), correctTagReferences);"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"        return syncedPerson;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    //// appointment-level operations"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Schedule an appointment to the address book."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @throws DuplicateAppointmentException if an equivalent person already exists."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void scheduleAppointment(Appointment a) throws DuplicateAppointmentException {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        appointments.add(a);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    //// pet-level operations"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Adds a pet to the program."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Also checks the new pet\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the pet to point to those in {@link #tags}."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @throws DuplicatePetException if an equivalent pet already exists."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void addPet(Pet p) throws DuplicatePetException {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Pet pet \u003d syncWithMasterPetTagList(p);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        pets.add(pet);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":248,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * @throws PetNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public boolean removePet(Pet key) throws PetNotFoundException {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        if (pets.remove(key)) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            throw new PetNotFoundException();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    private Pet syncWithMasterPetTagList(Pet pet) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Pet syncedPet;"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        final UniqueTagList petTags \u003d new UniqueTagList(pet.getTags());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        tags.mergeFrom(petTags);"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":276,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        petTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"        syncedPet \u003d new Pet(pet.getPetName(), pet.getPetAge(), pet.getPetGender(), correctTagReferences);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        return syncedPet;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":283,"author":{"gitID":"jonathanwj"},"content":"    //// Association methods"},{"lineNumber":284,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":285,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"jonathanwj"},"content":"     * Associates pet to client"},{"lineNumber":287,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":288,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientAlreadyOwnsPetException"},{"lineNumber":289,"author":{"gitID":"jonathanwj"},"content":"     * @throws PetAlreadyHasOwnerException"},{"lineNumber":290,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"jonathanwj"},"content":"    public void addPetToClient(Pet pet, Client client)"},{"lineNumber":292,"author":{"gitID":"jonathanwj"},"content":"            throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException {"},{"lineNumber":293,"author":{"gitID":"jonathanwj"},"content":"        ClientOwnPet toAdd \u003d new ClientOwnPet(client, pet);"},{"lineNumber":294,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":295,"author":{"gitID":"jonathanwj"},"content":"        if (!clientPetAssociations.contains(toAdd)) {"},{"lineNumber":296,"author":{"gitID":"jonathanwj"},"content":"            if (hasOwner(pet)) {"},{"lineNumber":297,"author":{"gitID":"jonathanwj"},"content":"                throw new PetAlreadyHasOwnerException();"},{"lineNumber":298,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":299,"author":{"gitID":"jonathanwj"},"content":"            clientPetAssociations.add(toAdd);"},{"lineNumber":300,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":301,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientAlreadyOwnsPetException();"},{"lineNumber":302,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":304,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":306,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if specified pet has an owner"},{"lineNumber":308,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":309,"author":{"gitID":"jonathanwj"},"content":"    private boolean hasOwner(Pet pet) {"},{"lineNumber":310,"author":{"gitID":"jonathanwj"},"content":"        for (ClientOwnPet a : clientPetAssociations) {"},{"lineNumber":311,"author":{"gitID":"jonathanwj"},"content":"            if (a.getPet().equals(pet)) {"},{"lineNumber":312,"author":{"gitID":"jonathanwj"},"content":"                return true;"},{"lineNumber":313,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":314,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"jonathanwj"},"content":"        return false;"},{"lineNumber":316,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":318,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":319,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":320,"author":{"gitID":"jonathanwj"},"content":"     * Removes association from pet and client"},{"lineNumber":321,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":322,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientPetAssociationNotFoundException"},{"lineNumber":323,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":324,"author":{"gitID":"jonathanwj"},"content":"    public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":325,"author":{"gitID":"jonathanwj"},"content":"        ClientOwnPet toRemove \u003d new ClientOwnPet(client, pet);"},{"lineNumber":326,"author":{"gitID":"jonathanwj"},"content":"        if (clientPetAssociations.contains(toRemove)) {"},{"lineNumber":327,"author":{"gitID":"jonathanwj"},"content":"            clientPetAssociations.remove(toRemove);"},{"lineNumber":328,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":329,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientPetAssociationNotFoundException();"},{"lineNumber":330,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":331,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":333,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":348,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        return appointments.asObservableList();"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPet\u003e getPetList() {"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        return pets.asObservableList();"},{"lineNumber":360,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":363,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClientOwnPet\u003e getClientPetAssociations() {"},{"lineNumber":364,"author":{"gitID":"jonathanwj"},"content":"        return clientPetAssociations;"},{"lineNumber":365,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":369,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":370,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":371,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":372,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":373,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.appointments.equals(((AddressBook) other).appointments)"},{"lineNumber":374,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.pets.equals(((AddressBook) other).pets);"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":378,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e getClientList() {"},{"lineNumber":379,"author":{"gitID":"jonathanwj"},"content":"        ObservableList\u003cClient\u003e clientList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":380,"author":{"gitID":"jonathanwj"},"content":"            if (person.isClient()) {"},{"lineNumber":381,"author":{"gitID":"jonathanwj"},"content":"                return (Client) person;"},{"lineNumber":382,"author":{"gitID":"jonathanwj"},"content":"            } else {"},{"lineNumber":383,"author":{"gitID":"jonathanwj"},"content":"                return null;"},{"lineNumber":384,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":385,"author":{"gitID":"jonathanwj"},"content":"        });"},{"lineNumber":386,"author":{"gitID":"jonathanwj"},"content":"        clientList \u003d FXCollections.unmodifiableObservableList(clientList).filtered(Objects::nonNull);"},{"lineNumber":387,"author":{"gitID":"jonathanwj"},"content":"        return clientList;"},{"lineNumber":388,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":390,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":391,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e getVetTechnicianList() {"},{"lineNumber":392,"author":{"gitID":"jonathanwj"},"content":"        ObservableList\u003cVetTechnician\u003e technicianList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":393,"author":{"gitID":"jonathanwj"},"content":"            if (!person.isClient()) {"},{"lineNumber":394,"author":{"gitID":"jonathanwj"},"content":"                return (VetTechnician) person;"},{"lineNumber":395,"author":{"gitID":"jonathanwj"},"content":"            } else {"},{"lineNumber":396,"author":{"gitID":"jonathanwj"},"content":"                return null;"},{"lineNumber":397,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":398,"author":{"gitID":"jonathanwj"},"content":"        });"},{"lineNumber":399,"author":{"gitID":"jonathanwj"},"content":"        technicianList \u003d FXCollections.unmodifiableObservableList(technicianList).filtered(Objects::nonNull);"},{"lineNumber":400,"author":{"gitID":"jonathanwj"},"content":"        return technicianList;"},{"lineNumber":401,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":402,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":405,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags, appointments, pets);"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":408,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":124,"-":284}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    private final FilteredList\u003cClient\u003e filteredClients;"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    private final FilteredList\u003cVetTechnician\u003e filteredVetTechnicians;"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    private final FilteredList\u003cPet\u003e filteredPet;"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    private final ObservableList\u003cClientOwnPet\u003e clientPetAssocation;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointment;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        filteredVetTechnicians \u003d new FilteredList\u003c\u003e(this.addressBook.getVetTechnicianList());"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        filteredPet \u003d new FilteredList\u003c\u003e((this.addressBook.getPetList()));"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        clientPetAssocation \u003d getClientPetAssociationList();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        filteredAppointment \u003d new FilteredList\u003c\u003e((this.addressBook.getAppointmentList()));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"    //Person"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public synchronized void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        addressBook.scheduleAppointment(appointment);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"    // Pet"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public synchronized void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        addressBook.addPet(pet);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public synchronized void deletePet(Pet target) throws PetNotFoundException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        addressBook.removePet(target);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"    // Association"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":"    public void addPetToClient(Pet pet, Client client)"},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"            throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException {"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(pet, client);"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"        addressBook.addPetToClient(pet, client);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"    public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(pet, client);"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"        addressBook.removePetFromClient(pet, client);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the list of {@code Pet} backed by the internal list of"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":"        return FXCollections.unmodifiableObservableList(filteredPet);"},{"lineNumber":168,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"    //Client"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(filteredClients);"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"        filteredClients.setPredicate(predicate);"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"    //Vet Technician"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the list of {@code VetTechnician} backed by the internal list of"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(filteredVetTechnicians);"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":"    public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":207,"author":{"gitID":"jonathanwj"},"content":"        filteredVetTechnicians.setPredicate(predicate);"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":210,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"purplepers0n"},"content":"    public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":213,"author":{"gitID":"purplepers0n"},"content":"        filteredPet.setPredicate(predicate);"},{"lineNumber":214,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":216,"author":{"gitID":"jonathanwj"},"content":"    //Association"},{"lineNumber":217,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":218,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the list of {@code ClientOwnPet} backed by the internal list of"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClientOwnPet\u003e getClientPetAssociationList() {"},{"lineNumber":224,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(addressBook.getClientPetAssociations());"},{"lineNumber":225,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    // Appointment"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointment);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":253,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":254,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 filteredClients.equals(other.filteredClients)"},{"lineNumber":255,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 filteredVetTechnicians.equals(other.filteredVetTechnicians)"},{"lineNumber":256,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 clientPetAssocation.equals(other.clientPetAssocation);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":259,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":260,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList(int currList) {"},{"lineNumber":261,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d currList;"},{"lineNumber":262,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":264,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":265,"author":{"gitID":"purplepers0n"},"content":"    public int getCurrentList() {"},{"lineNumber":266,"author":{"gitID":"purplepers0n"},"content":"        return this.currList;"},{"lineNumber":267,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":71,"purplepers0n":24,"-":173}},{"path":"src/main/java/seedu/address/model/pet/Pet.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Pet in the applications."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Pet {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final PetName petName;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final PetAge petAge;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final PetGender petGender;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Every field must be present and not null"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    public Pet(PetName petName, PetAge petAge, PetGender petGender, Set\u003cTag\u003e tags) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireAllNonNull(petName, petAge, petGender, tags);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.petName \u003d petName;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.petAge \u003d petAge;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.petGender \u003d petGender;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //protect internal tags from changes in the arg lis"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public PetName getPetName() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return petName;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public PetAge getPetAge() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return petAge;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PetGender getPetGender() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return petGender;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!(other instanceof Pet)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Pet otherPet \u003d (Pet) other;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return otherPet.getPetName().equals(this.getPetName())"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPet.getPetAge().equals(this.getPetAge())"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherPet.getPetGender().equals(this.getPetGender());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        return Objects.hash(petName, petAge, petGender);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        builder.append(\" Pet Name: \")"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .append(getPetName())"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .append(\" Pet Age: \")"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .append(getPetAge())"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .append(\" Gender: \")"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .append(getPetGender())"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .append(\" Pet Owner: \")"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .append(\" Species/Breed \");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":7,"-":90}},{"path":"src/main/java/seedu/address/model/client/UniqueClientList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":" * A list of clients that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":" *"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":" * @see Client#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"public class UniqueClientList implements Iterable\u003cClient\u003e {"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if the list contains an equivalent client as the given argument."},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public boolean contains(Client toCheck) {"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"     * Adds a client to the list."},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateClientException if the client to add is a duplicate of an existing client in the list."},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    public void add(Client toAdd) throws DuplicateClientException {"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toAdd);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        if (contains(toAdd)) {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateClientException();"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        internalList.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"     * Replaces the client {@code target} in the list with {@code editedClient}."},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateClientException if the replacement is equivalent to another existing client in the list."},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    public void setClient(Client target, Client editedClient)"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateClientException, ClientNotFoundException {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(editedClient);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientNotFoundException();"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        if (!target.equals(editedClient) \u0026\u0026 internalList.contains(editedClient)) {"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateClientException();"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        internalList.set(index, editedClient);"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"     * Removes the equivalent client from the list."},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientNotFoundException if no such client could be found in the list."},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    public boolean remove(Client toRemove) throws ClientNotFoundException {"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        final boolean clientFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        if (!clientFoundAndDeleted) {"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientNotFoundException();"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        return clientFoundAndDeleted;"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"    public void setClients(UniqueClientList replacement) {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    public void setClients(List\u003cClient\u003e clients) throws DuplicateClientException {"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(clients);"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        final UniqueClientList replacement \u003d new UniqueClientList();"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        for (final Client client : clients) {"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"            replacement.add(client);"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        setClients(replacement);"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e asObservableList() {"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"    public Iterator\u003cClient\u003e iterator() {"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        return internalList.iterator();"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"                || (other instanceof UniqueClientList // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueClientList) other).internalList));"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"    public int hashCode() {"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"        return internalList.hashCode();"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":108,"-":11}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    Predicate\u003cPet\u003e PREDICATE_SHOW_ALL_PETS \u003d unused -\u003e true;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    Predicate\u003cVetTechnician\u003e PREDICATE_SHOW_ALL_TECHNICIAN \u003d unused -\u003e true;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENT \u003d unused -\u003e true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    Predicate\u003cPet\u003e PREDICATE_SHOW_ALL_PET \u003d unused -\u003e true;"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     * Clears existing backing model and replaces with the provided new data."},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"     * Returns the AddressBook"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"     * Deletes the given person."},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"     * Adds the given person"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered person list"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered client list"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"     * Updates the filter of the filtered client list to filter by the given {@code predicate}."},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered vetTechnician list"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList();"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"     * Updates the filter of the filtered vet technician list to filter by the given {@code predicate}."},{"lineNumber":101,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"    void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate);"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":106,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":"     * Schedule the given appointment according to date and time"},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException;"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the filtered appointment list"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     **/"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":"     * Adds the given pet"},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    void addPet(Pet pet) throws DuplicatePetException;"},{"lineNumber":120,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":121,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":"     * Removes the given pet"},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    void deletePet(Pet pet) throws PetNotFoundException;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered pet list"},{"lineNumber":128,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cPet\u003e getFilteredPetList();"},{"lineNumber":130,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":131,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"purplepers0n"},"content":"     * Updates the filter of the filtered pet list to filter by the given {@code predicate}."},{"lineNumber":133,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"purplepers0n"},"content":"    void updateFilteredPetList(Predicate\u003cPet\u003e predicate);"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"    /** Returns an unmodifiable view of the filtered client pet association list */"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClientOwnPet\u003e getClientPetAssociationList();"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"     * Associates pet to client"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"    void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException;"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"     * Removes association from pet and client"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"    void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException;"},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":151,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"purplepers0n"},"content":"     * Sets the index of the current list that is viewed"},{"lineNumber":153,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"purplepers0n"},"content":"    void setCurrentList(int currList);"},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":156,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"purplepers0n"},"content":"     * Get the index of the current list that is viewed"},{"lineNumber":158,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"purplepers0n"},"content":"    int getCurrentList();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":36,"purplepers0n":60,"-":64}},{"path":"src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals the operation is unable to find the specified client."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":2}},{"path":"src/main/java/seedu/address/model/client/Client.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.UniquePetList;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class Client extends Person {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private UniquePetList pets;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"        super(name, phone, email, address, PersonRole.CLIENT_ROLE, tags);"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        pets \u003d new UniquePetList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"     * @return pets as a {@code UniquePetList}"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    public UniquePetList getPets() {"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"        return pets;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"     * Adds new pet to client"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"     * @param toAdd new pet"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicatePetException"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    public void addPet(Pet toAdd) throws DuplicatePetException {"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        pets.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"     * Remove old pet from client"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"     * @param toRemove old pet"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     * @throws PetNotFoundException"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"    public void removePet(Pet toRemove) throws PetNotFoundException {"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        pets.remove(toRemove);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!(other instanceof Client)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Client otherClient \u003d (Client) other;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return otherClient.getName().equals(this.getName())"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherClient.getPhone().equals(this.getPhone())"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherClient.getEmail().equals(this.getEmail())"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherClient.getAddress().equals(this.getAddress())"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherClient.getRole().equals(this.getRole());"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":36,"-":39}},{"path":"src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Client objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DuplicateClientException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public DuplicateClientException() {"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"        super(\"Operation would result in duplicate clients\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":11}}]
